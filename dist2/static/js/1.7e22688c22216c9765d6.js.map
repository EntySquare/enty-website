{"version":3,"sources":["webpack:///./node_modules/three55/three.js","webpack:///./src/assets/js/wave.js","webpack:///./node_modules/three/build/three.module.js","webpack:///./src/assets/js/net_wave.js","webpack:///src/components/arCoin.vue","webpack:///./src/components/arCoin.vue?c217","webpack:///./src/components/arCoin.vue"],"names":["namespace","area","snip","playing","library","that","parseRecurseHierarchy","initData","window","self","THREE","REVISION","console","info","log","debug","warn","error","Int32Array","Array","Float32Array","String","prototype","startsWith","str","this","slice","length","endsWith","t","index","lastIndexOf","trim","replace","lastTime","vendors","x","requestAnimationFrame","cancelAnimationFrame","undefined","callback","element","currTime","Date","now","timeToCall","Math","max","id","setTimeout","clearTimeout","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","NoShading","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","MultiplyOperation","MixOperation","AddOperation","UVMapping","CubeReflectionMapping","CubeRefractionMapping","SphericalReflectionMapping","SphericalRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","Color","value","set","constructor","r","g","b","setHex","setStyle","hex","floor","setRGB","setHSV","h","s","v","i","f","p","q","style","test","color","exec","min","parseInt","ColorKeywords","copy","copyGammaToLinear","copyLinearToGamma","sqrt","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","toString","getStyle","getHSV","hsv","hue","saturation","delta","add","addColors","color1","color2","addScalar","multiply","multiplyScalar","lerp","alpha","clone","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Quaternion","y","z","w","setFromEuler","order","c1","cos","c2","c3","s1","sin","s2","s3","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","m","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","inverse","conjugate","normalize","lengthSq","l","multiplyQuaternions","a","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","multiplyVector3","vector","applyQuaternion","slerp","qb","cosHalfTheta","halfTheta","acos","sinHalfTheta","abs","ratioA","ratioB","equals","qa","qm","Vector2","setX","setY","setComponent","Error","getComponent","addVectors","sub","subVectors","divideScalar","clamp","negate","dot","distanceTo","distanceToSquared","dx","dy","setLength","oldLength","Vector3","setZ","multiplyVectors","applyMatrix3","e","applyMatrix4","applyProjection","d","qx","qy","qz","qw","ix","iy","iz","iw","applyEuler","eulerOrder","quaternion","__q1","applyAxisAngle","divide","lengthManhattan","cross","crossVectors","angleTo","dz","getPositionFromMatrix","setEulerFromRotationMatrix","asin","atan2","setEulerFromQuaternion","sqx","sqy","sqz","sqw","getScaleFromMatrix","sx","sy","sz","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","PI","xx","yy","zz","xy","xz","yz","Box2","Infinity","setFromPoints","points","point","il","makeEmpty","setFromCenterAndSize","center","size","halfSize","__v1","box","empty","optionalTarget","expandByPoint","expandByVector","expandByScalar","scalar","containsPoint","containsBox","getParameter","isIntersectionBox","clampPoint","distanceToPoint","intersect","union","translate","offset","Box3","getBoundingSphere","result","Sphere","radius","__v0","transform","matrix","newPoints","__v2","__v3","__v4","__v5","__v6","__v7","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","multiplyVector3Array","tmp","determinant","c","getInverse","throwOnInvertible","det","msg","transpose","transposeIntoArray","Matrix4","n14","n24","n34","n41","n42","n43","n44","setRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","setRotationFromQuaternion","x2","y2","z2","wx","wy","wz","lookAt","eye","target","up","n","multiplyMatrices","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","multiplyVector4","rotateAxis","vx","vy","vz","crossVector","flattenToArray","flat","flattenToArrayOffset","getPosition","setPosition","getColumnX","getColumnY","getColumnZ","compose","translation","rotation","scale","mRotation","__m1","mScale","__m2","makeScale","decompose","extractPosition","extractRotation","scaleX","scaleY","scaleZ","rotateX","m42","m43","rotateY","m41","rotateZ","rotateByAxis","oneMinusCosine","xs","ys","zs","r11","r21","r31","r12","r22","r32","r13","r23","r33","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","theta","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeFrustum","left","right","bottom","top","near","far","makePerspective","fov","aspect","ymax","degToRad","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","isIntersectionSphere","sphere","isIntersectionPlane","plane","normal","distanceToPlane","denominator","constant","intersectPlane","matrix4","setFromCenterAndPoints","maxRadiusSq","radiusSq","intersectsSphere","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p0","p1","p2","p3","p4","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","object","matrixWorld","negRadius","geometry","boundingSphere","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","isIntersectionLine","startPoint","endPoint","startSign","endSign","intersectLine","coplanarPoint","optionalNormalMatrix","newNormal","newCoplanarPoint","__vZero","clampBottom","mapLinear","a1","a2","b1","b2","random16","random","randInt","low","high","randFloat","randFloatSpread","range","sign","degrees","__d2r","radToDeg","radians","__r2d","Spline","intPoint","weight","w2","w3","pa","pb","pc","pd","v3","interpolate","t2","t3","v0","v1","initFromArray","getPoint","k","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","position","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","j","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","push","ceil","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","setFromPointsAndIndices","i0","i1","i2","triangle","midpoint","Vertex","UV","Clock","autoStart","startTime","oldTime","elapsedTime","running","start","stop","getElapsedTime","getDelta","diff","newTime","EventDispatcher","listeners","addEventListener","type","listener","indexOf","removeEventListener","splice","dispatchEvent","event","listenerArray","call","Raycaster","localRay","facePlane","intersectPoint","inverseMatrix","descSort","distance","intersectObject","raycaster","intersects","Particle","face","Mesh","vertices","isFaceMaterial","material","MeshFaceMaterial","objectMaterials","materials","side","precision","matrixRotationWorld","fl","faces","materialIndex","planeDistance","planeSign","Face3","Face4","faceIndex","intersectDescendants","descendants","getDescendants","recursive","sort","intersectObjects","objects","Object3D","Object3DIdCount","name","properties","parent","children","defaultEulerOrder","renderDepth","rotationAutoUpdate","matrixAutoUpdate","matrixWorldNeedsUpdate","useQuaternion","visible","castShadow","receiveShadow","frustumCulled","_vector","applyMatrix","mat","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","scene","Scene","__addObject","__removeObject","traverse","getChildByName","child","array","apply","updateMatrix","updateMatrixWorld","force","Projector","_object","_objectCount","_vertex","_vertexCount","_face","_face3Count","_face4Count","_line","_lineCount","_particle","_particleCount","_modelMatrix","_objectPool","_objectPoolLength","_vertexPool","_vertexPoolLength","_face3Pool","_face3PoolLength","_face4Pool","_face4PoolLength","_linePool","_linePoolLength","_particlePool","_particlePoolLength","_renderData","sprites","lights","_vector3","_vector4","_clipBox","_boundingBox","_points3","_points4","_viewMatrix","_viewProjectionMatrix","_modelViewProjectionMatrix","_normalMatrix","_normalViewMatrix","_centroid","_frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","camera","matrixWorldInverse","projectionMatrix","unprojectVector","projectionMatrixInverse","pickingRay","end","getNextObjectInPool","RenderableObject","getNextVertexInPool","vertex","RenderableVertex","getNextFace3InPool","RenderableFace3","getNextFace4InPool","RenderableFace4","getNextLineInPool","line","RenderableLine","getNextParticleInPool","particle","RenderableParticle","painterSort","clipLine","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","projectScene","sortObjects","sortElements","o","ol","vl","nl","cl","ul","faceVertexNormals","faceVertexUvs","uvs","v2","v4","root","projectObject","Light","Line","Sprite","projectGraph","positionWorld","positionScreen","normalModel","normalModelView","centroidModel","centroid","vertexNormals","vertexNormalsModel","vertexNormalsModelView","vertexNormalsLength","step","LinePieces","vertexColors","vertexTangents","Geometry","GeometryIdCount","colors","normals","faceUvs","morphTargets","morphColors","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","hasTangents","dynamic","verticesNeedUpdate","elementsNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","tangentsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","buffersNeedUpdate","normalMatrix","jl","computeCentroids","computeFaceNormals","vA","vB","vC","cb","ab","computeVertexNormals","areaWeighted","__tmpVertices","vD","db","dc","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","computeTangents","vertexIndex","uv","uvA","uvB","uvC","x1","y1","z1","t1","tan1","tan2","sdir","tdir","tmp2","handleTriangle","context","ua","ub","uc","computeLineDistances","computeBoundingBox","computeBoundingSphere","mergeVertices","key","indices","verticesMap","unique","changes","pow","round","join","faceIndicesToRemove","dupIndex","newFace","uvCopy","dispose","BufferGeometry","attributes","offsets","positionArray","normalArray","normalizeNormals","positions","bb","nVertexElements","itemSize","numItems","pA","pB","pC","count","nVertices","nTangentElements","xA","yA","zA","xB","yB","zB","xC","yC","zC","uA","uB","uC","tangents","iA","iB","iC","n2","handleVertex","Camera","Object","create","OrthographicCamera","updateProjectionMatrix","PerspectiveCamera","setLens","focalLength","frameHeight","atan","setViewOffset","fullWidth","fullHeight","width","height","AmbientLight","AreaLight","intensity","constantAttenuation","linearAttenuation","quadraticAttenuation","DirectionalLight","onlyShadow","shadowCameraNear","shadowCameraFar","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowBias","shadowDarkness","shadowMapWidth","shadowMapHeight","shadowCascade","shadowCascadeOffset","shadowCascadeCount","shadowCascadeBias","shadowCascadeWidth","shadowCascadeHeight","shadowCascadeNearZ","shadowCascadeFarZ","shadowCascadeArray","shadowMap","shadowMapSize","shadowCamera","shadowMatrix","HemisphereLight","skyColorHex","groundColorHex","groundColor","PointLight","SpotLight","exponent","shadowCameraFov","Loader","showStatus","statusDomElement","addStatusElement","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","document","createElement","fontSize","textAlign","background","padding","zIndex","innerHTML","updateProgress","progress","message","loaded","toFixed","extractUrlBase","url","parts","split","pop","initMaterials","texturePath","createMaterial","needsTangents","ShaderMaterial","_this","is_pow2","LN2","nearest_pow2","create_texture","where","sourceFile","repeat","wrap","anisotropy","isCompressed","toLowerCase","fullPath","texture","ImageUtils","loadCompressedTexture","Texture","wrapS","wrapT","wrapMap","mirror","image","Image","onload","getContext","drawImage","needsUpdate","src","load_image","rgb2hex","rgb","mtype","mpars","opacity","map","lightMap","normalMap","bumpMap","wireframe","shading","blending","transparent","depthTest","depthWrite","flipSided","doubleSided","colorDiffuse","DbgColor","colorSpecular","specular","colorAmbient","ambient","transparency","specularCoef","shininess","mapDiffuse","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapLight","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapBump","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormal","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecular","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapBumpScale","bumpScale","shader","ShaderLib","uniforms","UniformsUtils","mapNormalFactor","specularMap","parameters","fragmentShader","vertexShader","fog","DbgName","ImageLoader","load","scope","content","JSONLoader","withCredentials","loadAjaxJSON","callbackProgress","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","responseText","json","JSON","parse","createModel","LOADING","getResponseHeader","HEADERS_RECEIVED","open","send","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","uvLayer","nUvLayers","parseModel","bones","animation","parseSkin","dstVertices","srcVertices","dstColors","srcColors","parseMorphing","LoadingMonitor","onLoad","loader","SceneLoader","callbackSync","geometryHandlerMap","hierarchyHandlerMap","addGeometryHandler","callbackFinished","typeID","loaderClass","addHierarchyHandler","light","counter_models","counter_textures","total_models","total_textures","urlBase","target_array","data","geometries","face_materials","textures","cameras","fogs","empties","groups","get_url","source_url","url_type","handle_objects","handle_children","dst","pos","rot","scl","quat","objID","objJSON","loading","reservedTypes","skin","morph","mirroredLoop","duration","loaderParameters","parType","options","urlBaseType","create_callback_hierachy","SkinnedMesh","MorphAnimMesh","time","targetName","groupID","handle_hierarchy","node","obj","create_callback_geometry","geo","handle_mesh","async_callback_gate","dae","create_callback_embed","totalModels","totalTextures","loadedModels","loadedTextures","ta","targetInverse","finalize","fogID","fogJSON","geoID","geoJSON","textureID","textureJSON","matID","matJSON","parID","generateTextureCallback","callbackTexture","Fog","FogExp2","density","CubeGeometry","depth","widthSegments","heightSegments","depthSegments","PlaneGeometry","SphereGeometry","CylinderGeometry","topRad","botRad","radSegs","heightSegs","TorusGeometry","tube","segmentsR","segmentsT","IcosahedronGeometry","subdivisions","modelJson","embeds","metadata","mapping","url_array","loadCompressedTextureCube","loadTextureCube","fullUrl","textureCallback","loadTexture","minFilter","magFilter","diffuse","normalScale","envMap","reflectivity","displacementMap","displacementBias","displacementScale","materialArray","label","defaults","currentCamera","TextureLoader","Material","MaterialIdCount","blendSrc","blendDst","blendEquation","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","alphaTest","overdraw","setValues","values","newValue","currentValue","LineBasicMaterial","linewidth","linecap","linejoin","LineDashedMaterial","dashSize","gapSize","MeshBasicMaterial","combine","refractionRatio","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","MeshLambertMaterial","emissive","wrapAround","wrapRGB","MeshPhongMaterial","metal","perPixel","MeshDepthMaterial","MeshNormalMaterial","ParticleBasicMaterial","sizeAttenuation","ParticleCanvasMaterial","program","defines","SpriteMaterial","useScreenCoordinates","scaleByViewport","alignment","SpriteAlignment","uvOffset","uvScale","topLeft","topCenter","topRight","centerLeft","centerRight","bottomLeft","bottomCenter","bottomRight","format","TextureIdCount","mipmaps","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","onUpdate","CompressedTexture","DataTexture","ParticleSystem","sortParticles","LineStrip","updateMorphTargets","morphTargetBase","morphTargetForcedOrder","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","Bone","belongsToSkin","skinMatrix","update","parentSkinMatrix","forceUpdate","useVertexTexture","bone","gbone","identityMatrix","boneMatrices","rotq","addBone","nBones","boneTextureWidth","boneTextureHeight","boneTexture","pose","boneInverses","bl","offsetMatrix","sw","lastKeyframe","currentKeyframe","directionBackwards","setFrameRange","startKeyframe","endKeyframe","setDirectionForward","setDirectionBackward","parseAnimations","animations","firstAnimation","pattern","match","setAnimationLabel","playAnimation","fps","updateAnimation","frameTime","keyframe","mix","Ribbon","LOD","LODs","addLevel","object3D","visibleAtDistance","rotation3d","overrideMaterial","__objects","__lights","__objectsAdded","__objectsRemoved","ai","CanvasRenderer","_elements","_lights","_canvasWidth","_canvasHeight","_canvasWidthHalf","_canvasHeightHalf","_v1","_v2","_v3","_v4","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","_v4x","_v4y","_v5x","_v5y","_v6x","_v6y","_near","_far","_image","_uvs","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","_pixelMap","_pixelMapContext","_pixelMapImage","_pixelMapData","_gradientMap","_gradientMapContext","_projector","_canvas","canvas","_context","_clearColor","_clearOpacity","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextStrokeStyle","_contextFillStyle","_contextLineWidth","_contextLineCap","_contextLineJoin","_v5","_v6","_color","_color1","_color2","_color3","_color4","_diffuseColor","_emissiveColor","_lightColor","_patterns","_imagedatas","_clearBox","_elemBox","_enableLighting","_ambientLight","_directionalLights","_pointLights","_gradientMapQuality","setOpacity","globalAlpha","setBlending","globalCompositeOperation","setLineWidth","lineWidth","setLineCap","lineCap","setLineJoin","lineJoin","setStrokeStyle","strokeStyle","setFillStyle","fillStyle","fillRect","getImageData","domElement","devicePixelRatio","autoClear","render","supportsVertexTextures","setFaceCulling","setSize","setClearColor","setClearColorHex","getMaxAnisotropy","clear","setTransform","clearRect","ll","lightColor","calculateLights","el","renderParticle","renderLine","expand","renderFace3","renderFace4","calculateLight","lightPosition","amount","bitmap","bitmapWidth","bitmapHeight","save","rotate","restore","beginPath","moveTo","lineTo","stroke","uv1","uv2","uv3","drawTriangle","getGradientTexture","clipImage","strokePath","fillPath","patternPath","smoothstep","v5","v6","drawQuad","x0","y0","closePath","x3","y3","fill","u0","u1","u2","repeatX","repeatY","createPattern","idet","offsetX","offsetY","clip","color3","color4","putImageData","ShaderChunk","fog_pars_fragment","fog_fragment","envmap_pars_fragment","envmap_fragment","envmap_pars_vertex","worldpos_vertex","envmap_vertex","map_particle_pars_fragment","map_particle_fragment","map_pars_vertex","map_pars_fragment","map_vertex","map_fragment","lightmap_pars_fragment","lightmap_pars_vertex","lightmap_fragment","lightmap_vertex","bumpmap_pars_fragment","normalmap_pars_fragment","specularmap_pars_fragment","specularmap_fragment","lights_lambert_pars_vertex","lights_lambert_vertex","lights_phong_pars_vertex","lights_phong_vertex","lights_phong_pars_fragment","lights_phong_fragment","color_pars_fragment","color_fragment","color_pars_vertex","color_vertex","skinning_pars_vertex","skinbase_vertex","skinning_vertex","morphtarget_pars_vertex","morphtarget_vertex","default_vertex","morphnormal_vertex","skinnormal_vertex","defaultnormal_vertex","shadowmap_pars_fragment","shadowmap_fragment","shadowmap_pars_vertex","shadowmap_vertex","alphatest_fragment","linear_to_gamma_fragment","merge","merged","uniforms_src","parameter_src","uniforms_dst","UniformsLib","common","offsetRepeat","flipEnvMap","useRefract","bump","normalmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLightDirection","directionalLightColor","hemisphereLightDirection","hemisphereLightSkyColor","hemisphereLightGroundColor","pointLightColor","pointLightPosition","pointLightDistance","spotLightColor","spotLightPosition","spotLightDirection","spotLightDistance","spotLightAngleCos","spotLightExponent","psColor","shadowmap","basic","lambert","phong","particle_basic","dashed","totalSize","mNear","mFar","enableAO","enableDiffuse","enableSpecular","enableReflection","enableDisplacement","tDisplacement","tDiffuse","tCube","tNormal","tSpecular","tAO","uNormalScale","uDisplacementBias","uDisplacementScale","uDiffuseColor","uSpecularColor","uAmbientColor","uShininess","uOpacity","uRefractionRatio","uReflectivity","uOffset","uRepeat","cube","tFlip","depthRGBA","WebGLRenderer","_precision","_alpha","_premultipliedAlpha","premultipliedAlpha","_antialias","antialias","_stencil","stencil","_preserveDrawingBuffer","preserveDrawingBuffer","clearColor","_clearAlpha","clearAlpha","autoClearColor","autoClearDepth","autoClearStencil","autoUpdateObjects","autoUpdateScene","gammaInput","gammaOutput","physicallyBasedShading","shadowMapEnabled","shadowMapAutoUpdate","shadowMapType","shadowMapCullFace","shadowMapDebug","shadowMapCascade","maxMorphTargets","maxMorphNormals","autoScaleCubemaps","renderPluginsPre","renderPluginsPost","memory","programs","calls","_gl","_glExtensionTextureFloat","_glExtensionStandardDerivatives","_glExtensionTextureFilterAnisotropic","_glExtensionCompressedTextureS3TC","_programs","_programs_counter","_currentProgram","_currentFramebuffer","_currentMaterialId","_currentGeometryGroupHash","_currentCamera","_geometryGroupCounter","_usedTextureUnits","_oldDoubleSided","_oldFlipSided","_oldBlending","_oldBlendEquation","_oldBlendSrc","_oldBlendDst","_oldDepthTest","_oldDepthWrite","_oldPolygonOffset","_oldPolygonOffsetFactor","_oldPolygonOffsetUnits","_oldLineWidth","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_currentWidth","_currentHeight","_enabledAttributes","_projScreenMatrix","_projScreenMatrixPS","_direction","_lightsNeedUpdate","directional","distances","spot","directions","anglesCos","exponents","hemi","skyColors","groundColors","getExtension","initGL","clearDepth","clearStencil","enable","DEPTH_TEST","depthFunc","LEQUAL","frontFace","CCW","cullFace","BACK","CULL_FACE","BLEND","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","_maxTextures","MAX_TEXTURE_IMAGE_UNITS","_maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","_maxCubemapSize","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","_maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","_supportsVertexTextures","_supportsBoneTextures","_vertexShaderPrecisionHighpFloat","COMPRESSED_TEXTURE_FORMATS","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","_vertexShaderPrecisionMediumpFloat","MEDIUM_FLOAT","_fragmentShaderPrecisionHighpFloat","LOW_FLOAT","FRAGMENT_SHADER","_fragmentShaderPrecisionMediumpFloat","highpAvailable","HIGH_INT","MEDIUM_INT","LOW_INT","mediumpAvailable","createMeshBuffers","geometryGroup","__webglVertexBuffer","createBuffer","__webglNormalBuffer","__webglTangentBuffer","__webglColorBuffer","__webglUVBuffer","__webglUV2Buffer","__webglSkinIndicesBuffer","__webglSkinWeightsBuffer","__webglFaceBuffer","__webglLineBuffer","numMorphTargets","__webglMorphTargetsBuffers","numMorphNormals","__webglMorphNormalsBuffers","supportsFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","getPrecision","setViewport","viewport","setScissor","scissor","enableScissorTest","SCISSOR_TEST","disable","getClearColor","getClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","renderTarget","setRenderTarget","addPostPlugin","plugin","init","addPrePlugin","updateShadowMap","shadowMapPlugin","onGeometryDispose","deallocateGeometry","onTextureDispose","deallocateTexture","onRenderTargetDispose","deallocateRenderTarget","onMaterialDispose","deallocateMaterial","__webglInit","deleteBuffer","__webglLineDistanceBuffer","geometryGroups","deleteCustomAttributesBuffers","__webglTextureCube","deleteTexture","__webglTexture","WebGLRenderTargetCube","deleteFramebuffer","__webglFramebuffer","deleteRenderbuffer","__webglRenderbuffer","programInfo","deleteProgram","usedTimes","newPrograms","__webglCustomAttributesList","buffer","initCustomAttributes","nvertices","attribute","__webglInitialized","createUniqueBuffers","belongsToAttribute","initMeshBuffers","faces3","faces4","ntris","nlines","getBufferMaterial","uvType","bufferGuessUVType","normalType","bufferGuessNormalType","vertexColorType","bufferGuessVertexColorType","__vertexArray","__normalArray","__tangentArray","__colorArray","__uvArray","__uv2Array","__skinIndexArray","__skinWeightArray","__faceArray","Uint16Array","__lineArray","__morphTargetsArrays","__morphNormalsArrays","__webglFaceCount","__webglLineCount","originalAttribute","property","__original","__inittedArrays","materialNeedsSmoothNormals","initDirectBuffers","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","bindBuffer","bufferData","STATIC_DRAW","setMeshBuffers","hint","faceColor","t4","n1","n3","n4","c4","sw1","sw2","sw3","sw4","si1","si2","si3","si4","vn","uvi","uv2i","vk","vkl","vka","nka","chf","customAttribute","needsSmoothNormals","offset_uv","offset_uv2","offset_face","offset_normal","offset_tangent","offset_line","offset_color","offset_skin","offset_morphTarget","offset_custom","vertexArray","uvArray","uv2Array","tangentArray","colorArray","skinIndexArray","skinWeightArray","morphTargetsArrays","morphNormalsArrays","customAttributes","faceArray","lineArray","dirtyVertices","dirtyElements","dirtyUvs","dirtyNormals","dirtyTangents","dirtyColors","dirtyMorphTargets","morphTargetsNeedUpdate","chunk_faces3","chunk_faces4","obj_faces","obj_uvs","obj_uvs2","obj_skinIndices","obj_skinWeights","boundTo","pp","setDirectBuffers","tangent","enableAttribute","enableVertexAttribArray","disableAttributes","disableVertexAttribArray","painterSortStable","numericalSort","renderPlugins","plugins","renderObjects","renderList","reverse","materialType","useBlending","webglObject","setDepthTest","setDepthWrite","setPolygonOffset","setMaterialFaces","renderBufferDirect","renderBuffer","renderObjectsImmediate","renderImmediateObject","unrollImmediateBufferMaterial","globject","opaque","unrollBufferMaterial","meshMaterial","addObject","_modelViewMatrix","groupHash","hash_map","usesFaceMaterial","hash","counter","geometryGroupsList","sortFacesByMaterial","createRibbonBuffers","__webglVertexCount","initRibbonBuffers","createLineBuffers","__lineDistanceArray","initLineBuffers","createParticleBuffers","__sortArray","__webglParticleCount","initParticleBuffers","__webglActive","addBuffer","__webglObjects","ImmediateRenderObject","immediateRenderCallback","objlist","addBufferImmediate","__webglObjectsImmediate","__webglSprites","LensFlare","__webglFlares","updateObject","customAttributesDirty","DYNAMIC_DRAW","areCustomAttributesDirty","clearCustomAttributes","ca","cal","setRibbonBuffers","dl","lineDistanceArray","dirtyLineDistances","setLineBuffers","sortArray","setParticleBuffers","removeObject","removeInstances","removeInstancesDirect","setProgram","initMaterial","__webglMorphTargetInfluences","refreshMaterial","p_uniforms","m_uniforms","useProgram","uniformMatrix4fv","textureUnit","getTextureUnit","uniform1i","setTexture","boneGlobalMatrices","refreshUniformsFog","skyColor","intensitySq","zlights","dirColors","dirPositions","pointColors","pointPositions","pointDistances","spotColors","spotPositions","spotDistances","spotDirections","spotAnglesCos","spotExponents","hemiSkyColors","hemiGroundColors","hemiPositions","dirLength","pointLength","spotLength","hemiLength","dirCount","pointCount","spotCount","hemiCount","dirOffset","pointOffset","spotOffset","hemiOffset","setColorGamma","setColorLinear","setupLights","refreshUniformsLights","uvScaleMap","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","refreshUniformsParticle","refreshUniformsPhong","refreshUniformsLambert","_shadowPass","refreshUniformsShadow","uniform","location","uniform1f","uniform2f","uniform3f","uniform4f","uniform1iv","uniform3iv","uniform1fv","uniform3fv","_array","uniform2fv","uniform4fv","setCubeTexture","setCubeTextureDynamic","loadUniformsGeneric","uniformsList","cameraPosition","viewMatrix","modelViewMatrix","uniformMatrix3fv","loadUniformsMatrices","modelMatrix","setupMatrices","polygonoffset","factor","units","POLYGON_OFFSET_FILL","getShader","string","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","isPowerOfTwo","setTextureParameters","textureType","isImagePowerOfTwo","texParameteri","TEXTURE_WRAP_S","paramThreeToGL","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","filterFallback","__oldAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","clampToMaxSize","maxSize","maxDimension","newWidth","newHeight","slot","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_CUBE_MAP","pixelStorei","UNPACK_FLIP_Y_WEBGL","cubeImage","glFormat","glType","mipmap","compressedTexImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","texImage2D","generateMipmap","setupFrameBuffer","framebuffer","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","setupRenderBuffer","renderbuffer","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","NEAREST","LINEAR","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","renderBufferImmediate","hasPositions","hasNormals","hasUvs","__webglUvBuffer","hasColors","vertexAttribPointer","nx","ny","nz","nax","nbx","nay","nby","naz","nbz","drawArrays","TRIANGLES","updateBuffers","wireframeBit","geometryHash","startIndex","positionSize","normalSize","uvSize","colorSize","tangentSize","drawElements","POINTS","LINE_STRIP","primitives","geometryGroupHash","influences","numSupportedMorphTargets","influence","activeInfluenceIndices","numSupportedMorphNormals","influenceIndex","setupMorphTargets","skinIndex","skinWeight","lineDistance","LINES","TRIANGLE_STRIP","forceClear","initWebGLObjects","TEXTURE_2D","updateRenderTargetMipmap","maxLightCount","maxBones","maxShadows","shaderID","shaders","setMaterialShaders","dirLights","pointLights","spotLights","hemiLights","allocateLights","allocateShadows","nVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","nVertexMatrices","allocateBones","useFog","fogExp","maxDirLights","maxPointLights","maxSpotLights","maxHemiLights","pl","code","shadowMapTypeDefine","customDefines","chunk","generateDefines","createProgram","identifiers","prefix_vertex","glFragmentShader","glVertexShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","VALIDATE_STATUS","getError","deleteShader","getUniformLocation","cacheUniformLocations","getAttribLocation","cacheAttributeLocations","buildProgram","base","frontFaceDirection","CW","FRONT","FRONT_AND_BACK","depthMask","blendEquationSeparate","blendFuncSeparate","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","isCube","isTargetPowerOfTwo","createFramebuffer","createRenderbuffer","shareDepthFrom","activeCubeFace","ShadowMapPlugin","SpritePlugin","LensFlarePlugin","WebGLRenderTarget","ColorUtils","adjustHSV","__hsv","GeometryUtils","geometry1","object2","vertexOffset","geometry2","vertices1","vertices2","faces1","faces2","uvs1","uvs2","vertexCopy","faceCopy","faceVertexColors","removeMaterials","materialIndexArray","materialIndexMap","newFaces","randomPointInTriangle","vectorA","vectorB","vectorC","randomPointInFace","useCachedAreas","area1","area2","_area1","_area2","triangleArea","randomPointsInGeometry","totalArea","cumulativeAreas","_area","binarySearchIndices","binarySearch","mid","stats","tmp1","normalizeUVs","uvSet","triangulateQuads","triA","triB","uvD","uvsTriA","uvsTriB","faceUv","setMaterialIndex","startFace","endFace","onError","request","response","dds","parseDDS","onerror","responseType","images","loadCount","generateCubeFaceCallback","rq","img","isCubemap","mipmapCount","loadMipmaps","fourCCToInt32","charCodeAt","blockBytes","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","header","fourCC","fromCharCode","dataOffset","dataLength","Uint8Array","getNormalMap","subtract","imageData","createImageData","output","ly","uy","lx","ux","num_points","idx","generateDataTexture","SceneUtils","createMultiMaterialObject","group","detach","attach","FontUtils","divisions","getFace","loadFace","family","familyName","cssFontWeight","cssFontStyle","drawText","text","resolution","chars","fontPaths","path","Path","ret","extractGlyphPoints","paths","outline","cpx","cpy","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","pts","glyph","glyphs","_cachedOutline","quadraticCurveTo","Shape","Utils","bezierCurveTo","b3","ha","generateShapes","curveSegments","font","shapes","toShapes","contour","verts","ax","ay","bx","by","cx","cy","px","py","aX","aY","bX","bY","cX","cY","Triangulate","vertIndices","nv","_typeface_js","Curve","getPointAt","getUtoTmapping","getPoints","getSpacedPoints","lengths","getLengths","cacheArcLengths","current","cache","last","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","LineCurve","QuadraticBezierCurve","tangentQuadraticBezier","CubicBezierCurve","tangentCubicBezier","SplineCurve","EllipseCurve","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","deltaAngle","ArcCurve","aRadius","tangentSpline","getPointFunc","LineCurve3","QuadraticBezierCurve3","tz","CubicBezierCurve3","SplineCurve3","pt0","pt2","pt3","ClosedSplineCurve3","CurvePath","curves","bends","autoClose","curve","checkConnection","curveLengths","getCurveLengths","lens","cacheLengths","sums","maxX","maxY","maxZ","minX","minY","minZ","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","createPointsGeometry","createGeometry","createSpacedPointsGeometry","addWrapPath","bendpath","getTransformedPoints","segments","oldPts","getWrapPoints","getTransformedSpacedPoints","oldX","oldY","xNorm","bounds","pathPt","getNormalVector","Gyroscope","translationWorld","rotationWorld","scaleWorld","translationObject","rotationObject","scaleObject","actions","fromPoints","PathActions","MOVE_TO","LINE_TO","QUADRATIC_CURVE_TO","BEZIER_CURVE_TO","CSPLINE_THRU","ARC","ELLIPSE","vectors","vlen","args","arguments","action","lastargs","aCPx","aCPy","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","arc","absarc","absellipse","ellipse","lastPoint","closedPath","useSpacedPoints","item","spts","concat","spline","tdivisions","subPaths","lastPath","tmpPath","tmpShape","holesFirst","isClockWise","holes","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","getSpacedPointsHoles","extractAllPoints","shape","extractPoints","extractAllSpacedPoints","removeHoles","prevShapeVert","prevHoleVert","holeIndex","shapeIndex","h2","hole","shortest","pts1","pts2","tmpShape1","tmpShape2","tmpHole1","tmpHole2","allpoints","dist","areaapts","areaa","areabpts","areab","oldShapeIndex","oldHoleIndex","areaa2","trianglea","triangleb","isolatedPts","triangulateShape","shapeWithoutHoles","triangles","allPointsMap","b2p0","b2p1","b2p2","b3p0","b3p1","b3p2","b3p3","AnimationHandler","deltaTimeMS","addToUpdate","removeFromUpdate","get","hierarchy","initialized","keys","usedMorphTargets","morphTargetName","morphTargetsInfluences","lengthInFrames","JIT","CATMULLROM","CATMULLROM_FORWARD","Animation","interpolationType","currentTime","timeScale","isPlaying","isPaused","loop","play","startTimeMS","hl","animationCache","prevKey","nextKey","originalMatrix","getNextKeyWith","pause","prevXYZ","nextXYZ","unloopedCurrentTime","currentPoint","forwardPoint","types","getPrevKeyWith","interpolateCatmullRom","KeyFrameAnimation","JITCompile","sids","sid","next","startTimeMs","endTime","original","frame","looped","JIThierarchy","lastIndex","prev","hasTarget","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","updateCubeMap","renderer","CombinedCamera","orthoNear","orthoFar","cameraO","cameraP","zoom","toPerspective","inPerspectiveMode","inOrthographicMode","toOrthographic","hyperfocus","halfHeight","halfWidth","setFov","setZoom","toFrontView","toBackView","toLeftView","toRightView","toTopView","toBottomView","AsteriskGeometry","innerRadius","outerRadius","sd2","ed2","rays","CircleGeometry","thetaStart","thetaLength","centerUV","width_half","height_half","depth_half","buildPlane","udir","vdir","gridX","gridY","gridX1","gridY1","segment_width","segment_height","radiusTop","radiusBottom","radiusSegments","openEnded","heightHalf","segmentsX","segmentsY","verticesRow","uvsRow","na","nb","tanTheta","uv4","shapebb","addShapeList","addShape","extrudePts","splineTube","binormal","position2","ahole","bevelThickness","bevelSize","bevelSegments","bevelEnabled","steps","extrudePath","extrudeByPath","extrudeMaterial","uvgen","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","shapesOffset","shapePoints","scalePt2","pt","vec","bs","vert","flen","getBevelVec","pt_i","pt_j","pt_k","v_dot_w_hat","q_sub_p_dot_w_hat","v_hat","w_hat","anglea","angleb","anglec","getBevelVec1","getBevelVec2","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","sidewalls","layeroffset","slen1","slen2","f4","f3","isBottom","generateBottomUV","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","layer","buildLidFaces","buildSideFaces","extrudedShape","extrudeOptions","indexA","indexB","indexC","indexD","az","bz","cz","LatheGeometry","phiStart","phiLength","inversePointLength","inverseSegments","phi","np","gridZ","gridZ1","TextGeometry","textShapes","radialSegments","tubularSegments","TorusKnotGeometry","heightScale","grid","tang","bitan","getPos","ip","jp","uva","uvb","uvc","uvd","in_q","in_p","cu","su","quOverP","cs","closed","numpoints","pos2","ArrowHelper","smallest","epsilon","MAX_VALUE","initialNormal3","PolyhedronGeometry","detail","prepare","midpoints","make","azimuth","inclination","azi","correctUV","OctahedronGeometry","TetrahedronGeometry","ParametricGeometry","func","slices","stacks","useTris","sliceCount","ConvexGeometry","addPoint","vertexId","mag","randomOffset","ea","eb","edge","boundary","va","vb","vc","vertexUv","newId","AxisHelper","dir","lineGeometry","coneGeometry","cone","setDirection","setColor","CameraHelper","pointMap","addLine","setPoint","__v","__projector","__c","DirectionalLightHelper","sphereSize","hexColor","bulbGeometry","raysGeometry","bulbMaterial","raysMaterial","lightSphere","lightRays","isGizmo","gizmoSubject","gizmoRoot","targetSphere","targetGeo","targetMaterial","lineMaterial","targetLine","HemisphereLightHelper","arrowLength","domeSize","hexColorGround","bulbGroundGeometry","bulbSkyMaterial","bulbGroundMaterial","lightArrow","lightArrowGround","joint","PointLightHelper","distanceGeometry","distanceMaterial","lightDistance","SpotLightHelper","coneMatrix","coneMaterial","lightCone","coneLength","coneWidth","gyroscope","renderCallback","lensFlares","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","MorphBlendMesh","animationsMap","animationsList","numFrames","endFrame","createAnimation","setAnimationWeight","startFrame","lastFrame","currentFrame","active","autoCreateAnimations","frameRanges","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","stopAnimation","_renderer","_lensFlare","prefix","vertexBuffer","elementBuffer","tempTexture","occlusionTexture","hasVertexTexture","ShaderFlares","renderType","occlusionMap","screenPosition","viewportWidth","viewportHeight","flares","nFlares","sprite","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","TEXTURE1","copyTexImage2D","_depthMaterial","_depthMaterialMorph","_depthMaterialSkin","_depthMaterialMorphSkin","_min","_max","createVirtualLight","cascade","virtualLight","isVirtual","pointsWorld","pointsFrustum","nearZ","farZ","updateVirtualLight","updateShadowCamera","getObjectMaterial","depthShader","depthUniforms","originalCamera","gyro","shadowFilter","pars","cameraHelper","objectMaterial","useMorphing","useSkinning","customDepthMaterial","_sprite","ShaderSprite","fogType","nSprites","oldFogType","sceneFogType","DepthPassPlugin","enabled","lensFlareVertexTexture","lensFlare","module","exports","SEPARATION","AMOUNTX","AMOUNTY","particles","mouseX","mouseY","wave","initWave","innerWidth","innerHeight","PI2","getElementById","appendChild","animate","onWindowResize","VSMShadowMap","MinEquation","MaxEquation","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","HalfFloatType","UnsignedInt248Type","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBAIntegerFormat","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","NormalAnimationBlendMode","AdditiveAnimationBlendMode","LinearEncoding","sRGBEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","SRGBColorSpace","LinearSRGBColorSpace","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","GLSL3","_SRGBAFormat","[object Object]","_listeners","_lut","DEG2RAD","RAD2DEG","generateUUID","d0","d1","d2","d3","euclideanModulo","floorPowerOfTwo","minVal","maxVal","getX","getY","Symbol","iterator","isVector2","xAxis","yAxis","zAxis","setFromMatrix3Column","t11","t12","t13","detInv","setFromMatrix4","invert","fromArray","arrayNeedsUint32","isMatrix3","Int8Array","Uint8ClampedArray","Int16Array","Uint32Array","Float64Array","createElementNS","SRGBToLinear","LinearToSRGB","FN","ColorManagement","legacyMode","workingColorSpace","colorSpace","convert","sourceColorSpace","targetColorSpace","fn","fromWorkingColorSpace","toWorkingColorSpace","_colorKeywords","rebeccapurple","_rgb","_hslA","_hslB","hue2rgb","toComponents","source","isColor","handleAlpha","parseFloat","components","setHSL","charAt","setColorName","copySRGBToLinear","copyLinearToSRGB","lightness","getHSL","getZ","normalized","NAMES","HTMLCanvasElement","ImageData","toDataURL","HTMLImageElement","ImageBitmap","Source","uuid","version","meta","isRootObject","isArray","isDataTexture","serializeImage","getDataURL","isSource","textureId","DEFAULT_IMAGE","DEFAULT_MAPPING","encoding","super","defineProperty","internalFormat","userData","isRenderTargetTexture","needsPMREMUpdate","setUvTransform","stringify","generator","toJSON","isTexture","getW","isVector4","scissorTest","depthTexture","samples","assign","isWebGLRenderTarget","DataArrayTexture","wrapR","isDataArrayTexture","isWebGLArrayRenderTarget","Data3DTexture","isData3DTexture","isWebGL3DRenderTarget","isWebGLMultipleRenderTargets","_x","_y","_z","_w","slerpQuaternions","dstOffset","src0","srcOffset0","src1","srcOffset1","z0","w0","w1","sqrSin","EPSILON","len","tDir","_onChangeCallback","euler","isEuler","_order","vFrom","vTo","sqrSinHalfTheta","sqrt1u1","sqrtu1","u3","isQuaternion","_quaternion$4","planeNormal","_vector$c","projectOnVector","setFromSphericalCoords","sinPhiRadius","setFromCylindricalCoords","setFromMatrixColumn","isVector3","_vector$b","precise","expandByObject","isEmpty","updateWorldMatrix","fromBufferAttribute","_box$3","getCenter","_center","_extents","_v0$2","_v1$7","_v2$3","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","getSize","_points","isBox3","_testAxis","extents","_box$2","_v1$6","_toFarthestPoint","_toPoint","optionalCenter","missingRadiusHalf","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","distanceSqToPoint","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","s0","sqrDist","extDet","invDet","tca","radius2","thc","t0","distToPoint","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectBox","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","transformDirection","_v1$5","_zero","_one","t14","yx","zx","zy","_m1$2","invSX","invSY","invSZ","isMatrix4","_matrix$1","_quaternion$3","Euler","DefaultOrder","makeRotationFromQuaternion","newOrder","setFromQuaternion","RotationOrders","Layers","mask","channel","layers","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","DefaultUp","_onChange","defineProperties","configurable","enumerable","DefaultMatrixAutoUpdate","renderOrder","premultiply","rotateOnAxis","translateOnAxis","setFromMatrixPosition","isCamera","isLight","isObject3D","getObjectByProperty","traverseVisible","traverseAncestors","updateParents","updateChildren","skeletons","nodes","serialize","toArray","isInstancedMesh","instanceMatrix","instanceColor","isScene","environment","isMesh","isLine","isPoints","isSkinnedMesh","bindMode","bindMatrix","skeleton","uuids","extractFromCache","_v0$1","_v1$3","_v2$2","_v3$1","_vab","_vac","_vbc","_vap","_vbp","_vcp","targetLengthSq","getBarycoord","addScaledVector","getNormal","getUV","isFrontFacing","intersectsTriangle","d4","d5","d6","materialId","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","dithering","alphaToCoverage","toneMapped","_alphaTest","onBeforeCompile","flatShading","roughness","metalness","sheen","sheenColor","sheenRoughness","emissiveIntensity","specularIntensity","specularColor","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","alphaMap","lightMapIntensity","aoMap","aoMapIntensity","normalMapType","roughnessMap","metalnessMap","emissiveMap","specularIntensityMap","specularColorMap","envMapIntensity","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","srcPlanes","dstPlanes","isMaterial","fromType","isMeshBasicMaterial","_vector$9","_vector2$1","BufferAttribute","TypeError","usage","updateRange","index1","index2","setXY","setXYZ","applyNormalMatrix","onUploadCallback","isBufferAttribute","Uint16BufferAttribute","Uint32BufferAttribute","isFloat16BufferAttribute","Float32BufferAttribute","_id$1","_m1","_obj","_offset","_box$1","_boxMorphTargets","_vector$8","morphAttributes","morphTargetsRelative","drawRange","getNormalMatrix","setAttribute","morphAttributesPosition","isGLBufferAttribute","setFromBufferAttribute","morphAttribute","isNaN","hasAttribute","getAttribute","isFinite","positionAttribute","normalAttribute","nA","nB","nC","isBufferGeometry","attributeArray1","attribute2","attributeArray2","attributeOffset","convertBufferAttribute","array2","isInterleavedBufferAttribute","stride","newAttribute","morphArray","addGroup","hasMorphAttributes","attributeArray","setIndex","_inverseMatrix$2","_ray$2","_sphere$3","_vA$1","_vB$1","_vC$1","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA$1","_uvB$1","_uvC$1","_intersectionPoint","_intersectionPointWorld","intersectsBox","intersection","morphPosition","groupMaterial","checkBufferGeometryIntersection","isGeometry","morphInfluences","boneTransform","intersectTriangle","checkIntersection","BoxGeometry","numberOfVertices","groupStart","segmentWidth","segmentHeight","widthHalf","depthHalf","vertexCounter","groupCount","cloneUniforms","mergeUniforms","default_fragment","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","isShaderMaterial","focus","view","filmGauge","filmOffset","vExtentSlope","getFilmHeight","skew","getFilmWidth","isPerspectiveCamera","isWebGLCubeRenderTarget","currentRenderTarget","getRenderTarget","currentOutputEncoding","outputEncoding","currentToneMapping","toneMapping","currentXrEnabled","xr","CubeTexture","isCubeTexture","WebGLCubeRenderTarget","tEquirect","mesh","currentMinFilter","_vector1","_vector2","intersectsPlane","referencePoint","isPlane","_sphere$2","_vector$7","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","gl","capabilities","isWebGL2","buffers","WeakMap","delete","bufferType","cached","bytesPerElement","elementSize","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","alphamap_fragment","alphamap_pars_fragment","alphatest_pars_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","cube_uv_reflection_fragment","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_common_pars_fragment","envmap_physical_pars_fragment","fog_vertex","fog_pars_vertex","gradientmap_pars_fragment","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","metalnessmap_fragment","metalnessmap_pars_fragment","morphcolor_vertex","normal_fragment_begin","normal_fragment_maps","normal_pars_fragment","normal_pars_vertex","normal_vertex","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","output_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmask_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmission_fragment","transmission_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","background_vert","background_frag","cube_vert","cube_frag","depth_vert","depth_frag","distanceRGBA_vert","distanceRGBA_frag","equirect_vert","equirect_frag","linedashed_vert","linedashed_frag","meshbasic_vert","meshbasic_frag","meshlambert_vert","meshlambert_frag","meshmatcap_vert","meshmatcap_frag","meshnormal_vert","meshnormal_frag","meshphong_vert","meshphong_frag","meshphysical_vert","meshphysical_frag","meshtoon_vert","meshtoon_frag","points_vert","points_frag","shadow_vert","shadow_frag","sprite_vert","sprite_frag","uvTransform","uv2Transform","specularmap","envmap","ior","aomap","lightmap","emissivemap","bumpmap","displacementmap","roughnessmap","metalnessmap","gradientmap","lightProbe","directionalLights","directionalLightShadows","shadowNormalBias","shadowRadius","directionalShadowMap","directionalShadowMatrix","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLightShadows","pointShadowMap","pointShadowMatrix","hemisphereLights","rectAreaLights","ltc_1","ltc_2","standard","toon","t2D","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBindingStates","maxVertexAttributes","extension","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","initAttributes","enableAttributeAndDivisor","meshPerAttribute","disableUnusedAttributes","vertexAttribIPointer","reset","resetDefaultState","setup","state","programMap","stateMap","createVertexArray","createVertexArrayOES","getBindingState","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","saveCache","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","locationSize","_maxInstanceCount","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","physical","sheenColorMap","sheenRoughnessMap","transmissionSamplerSize","transmissionSamplerMap","scaleW","scaleH","isOrthographicCamera","LOD_MIN","EXTRA_LOD_SIGMA","MAX_SAMPLES","_flatCamera","_oldTarget","PHI","INV_PHI","_axisDirections","PMREMGenerator","_pingPongRenderTarget","_lodMax","_cubeSize","_lodPlanes","_sizeLods","_sigmas","_blurMaterial","_cubemapMaterial","_equirectMaterial","_compileMaterial","sigma","_setSize","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","equirectangular","_fromTexture","cubemap","_getCubemapMaterial","_getEquirectMaterial","_dispose","cubeSize","log2","outputTarget","_setViewport","_textureToCubeUV","params","_createRenderTarget","sizeLods","lodPlanes","sigmas","lodMax","lod","totalLods","sizeLod","texelSize","cubeFaces","faceIndexSize","coordinates","_createPlanes","weights","poleAxis","CUBEUV_TEXEL_WIDTH","CUBEUV_TEXEL_HEIGHT","CUBEUV_MAX_MIP","latitudinal","dTheta","mipInt","_getCommonVertexShader","_getBlurShader","tmpMesh","compile","cubeCamera","upSign","forwardSign","originalAutoClear","backgroundMaterial","backgroundBox","useSolidColor","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","exp","outputSize","WebGLCubeUVMaps","cubeUVmaps","pmremGenerator","cubemapUV","isEquirectMap","isCubeMap","fromEquirectangular","fromCubemap","has","isCubeTextureComplete","absNumericalSort","denormalize","emptyTexture","emptyArrayTexture","empty3dTexture","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","copyArray","allocTexUnits","allocateTextureUnit","setValueV1f","addr","setValueV2f","setValueV3f","setValueV4f","setValueM2","uniformMatrix2fv","setValueM3","setValueM4","setValueV1i","setValueV2i","uniform2iv","setValueV3i","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV2ui","uniform2uiv","setValueV3ui","uniform3uiv","setValueV4ui","uniform4uiv","setValueT1","unit","setTexture2D","setValueT3D1","setTexture3D","setValueT6","setTextureCube","setValueT2DArray1","setTexture2DArray","setValueV1fArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueV1iArray","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV1uiArray","uniform1uiv","setValueV2uiArray","setValueV3uiArray","setValueV4uiArray","setValueT1Array","setValueT3DArray","setValueT6Array","setValueT2DArrayArray","SingleUniform","activeInfo","setValue","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","pathLength","matchEnd","idIsIndex","subscript","WebGLUniforms","getActiveUniform","WebGLShader","setOptional","upload","seqWithValue","programIdCount","getShaderErrors","errors","errorLine","toUpperCase","lines","lines2","from","to","handleSource","getShaderSource","getTexelEncodingFunction","functionName","getEncodingComponents","filterEmptyLine","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","envMapCubeUVSize","imageHeight","envMapCubeUVHeight","maxMip","texelHeight","texelWidth","generateCubeUVSize","customExtensions","extensionDerivatives","tangentSpaceNormalMap","extensionFragDepth","logarithmicDepthBuffer","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filter","generateExtensions","prefixVertex","prefixFragment","versionString","isRawShaderMaterial","shaderName","instancing","instancingColor","fogExp2","objectSpaceNormalMap","vertexAlphas","vertexUvs","uvsVertexOnly","morphTargetsCount","morphTextureStride","decodeVideoTexture","physicallyCorrectLights","toneMappingName","getToneMappingFunction","depthPacking","fragmentGlsl","bindAttribLocation","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","diagnostics","cachedUniforms","getUniforms","getActiveAttrib","fetchAttributeLocations","destroy","_id","WebGLShaderCache","shaderCache","Map","materialCache","vertexShaderStage","_getShaderStage","fragmentShaderStage","materialShaders","_getShaderCacheForMaterial","shaderStage","Set","stage","WebGLShaderStage","WebGLPrograms","cubemaps","cubeuvmaps","_programLayers","_customShaders","floatVertexTextures","maxVertexUniforms","vertexTextures","shaderIDs","MeshDistanceMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","PointsMaterial","ShadowMaterial","getParameters","shadows","isMeshStandardMaterial","getMaxBones","getMaxPrecision","customVertexShaderID","customFragmentShaderID","getVertexShaderID","getFragmentShaderID","useAlphaTest","useClearcoat","isXRRenderTarget","isVideoTexture","isFogExp2","rectArea","numPlanes","numIntersection","customProgramCacheKey","getProgramCacheKey","morphAttributeCount","getProgramCacheKeyParameters","disableAll","getProgramCacheKeyBooleans","acquireProgram","preexistingProgram","releaseProgram","releaseShaderCache","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","transmissive","getNextRenderItem","renderItem","unshift","finish","customOpaqueSort","customTransparentSort","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","ShadowUniformsCache","directionalLength","rectAreaLength","numDirectionalShadows","numPointShadows","numSpotShadows","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","scaleFactor","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","WebGLRenderState","lightsArray","shadowsArray","setupLightsView","pushLight","pushShadow","shadowLight","isMeshDepthMaterial","isMeshDistanceMaterial","fragment","WebGLShadowMap","_objects","_capabilities","_shadowMapSize","_viewportSize","_viewport","_distanceMaterial","_materialCache","_maxTextureSize","maxTextureSize","0","1","2","shadowMaterialVertical","VSM_SAMPLES","shadow_pass","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","blurSamples","mapPass","getDepthMaterial","customMaterial","customDistanceMaterial","localClippingEnabled","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","kl","depthMaterial","autoUpdate","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setClear","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLTextures","utils","maxTextures","maxCubemapSize","maxSamples","multisampledRTTExt","supportsInvalidateFramebuffer","navigator","userAgent","_videoTextures","_sources","useOffscreenCanvas","OffscreenCanvas","err","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","isPowerOfTwo$1","textureNeedsGenerateMipmaps","supportsMips","getInternalFormat","internalFormatName","getMipLevels","isFramebufferTexture","isCompressedTexture","textureProperties","webglTextures","webglTexture","__cacheKey","renderTargetProperties","__webglDepthbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","attachmentProperties","textureUnits","updateVideoTexture","__version","complete","uploadTexture","wrappingToGL","filterToGL","__currentAnisotropy","initTexture","forceUpload","textureCacheKey","getTextureCacheKey","__currentVersion","textureNeedsPowerOfTwo","verifyColorSpace","glInternalFormat","useTexStorage","allocateMemory","levels","isDepthTexture","texStorage2D","texSubImage2D","compressedTexSubImage2D","texStorage3D","texSubImage3D","texImage3D","setupFrameBufferTexture","attachment","__hasExternalTextures","useMultisampledRTT","framebufferTexture2DMultisampleEXT","getRenderTargetSamples","setupRenderBufferStorage","isMultisample","renderbufferStorageMultisampleEXT","renderbufferStorageMultisample","setupDepthRenderbuffer","__autoAllocateDepthBuffer","webglDepthTexture","setupDepthTexture","__useRenderToTexture","sRGBToLinear","resetTextureUnits","mipmapImage","uploadCubeTexture","rebindTextures","colorTexture","setupRenderTarget","isMultipleRenderTargets","unbindTexture","glTextureType","updateMultisampleRenderTarget","invalidationArray","depthStyle","ignoreDepthValues","__ignoreDepthValues","invalidateFramebuffer","blitFramebuffer","ArrayCamera","isArrayCamera","Group","isGroup","_moveEvent","WebXRController","_targetRay","_grip","_hand","joints","inputState","pinching","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","inputSource","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","hand","session","visibilityState","getPose","targetRaySpace","inputjoint","jointPose","getJointPose","jointName","jointRadius","indexTip","thumbTip","distanceToPinch","threshold","handedness","gripSpace","DepthTexture","WebXRManager","framebufferScaleFactor","referenceSpaceType","glBinding","glProjLayer","glBaseLayer","xrFrame","getContextAttributes","initialRenderTarget","newRenderTarget","controllers","inputSourcesMap","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","onSessionEnd","forEach","disconnect","isPresenting","onInputSourcesChange","inputSources","removed","added","cameraAutoUpdate","getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","getBaseLayer","getBinding","getFrame","getSession","setSession","async","xrCompatible","makeXRCompatible","renderState","layerInit","XRWebGLLayer","updateRenderState","baseLayer","framebufferWidth","framebufferHeight","depthFormat","depthType","glDepthFormat","projectionlayerInit","colorFormat","XRWebGLBinding","createProjectionLayer","textureWidth","textureHeight","setFoveation","requestReferenceSpace","cameraLPos","cameraRPos","updateCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","setProjectionFromUnion","getCamera","getFoveation","fixedFoveation","foveation","onAnimationFrameCallback","getViewerPose","views","setRenderTargetFramebuffer","cameraVRNeedsUpdate","glSubImage","getViewSubImage","setRenderTargetTextures","depthStencilTexture","WebGLMaterials","uv2ScaleMap","refreshFogUniforms","isFog","refreshMaterialUniforms","pixelRatio","transmissionRenderTarget","isMeshLambertMaterial","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsStandard","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDistance","isMeshNormalMaterial","isLineBasicMaterial","isLineDashedMaterial","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","display","createCanvasElement","_depth","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","renderListStack","renderStateStack","toneMappingExposure","_isContextLost","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clippingEnabled","_localClippingEnabled","_transmissionRenderTarget","_emptyScene","getTargetPixelRatio","programCache","renderLists","renderStates","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","contextName","onContextLost","onContextRestore","isWebGL1Renderer","shift","rangeMin","rangeMax","initGLContext","maxAnisotropy","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","maxVertexTextures","maxAttributes","maxVaryings","maxFragmentUniforms","floatFragmentTextures","HALF_FLOAT_OES","SRGB_ALPHA_EXT","COMPRESSED_SRGB_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_SRGB8_ETC2","COMPRESSED_RGB8_ETC2","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","COMPRESSED_RGBA_ASTC_4x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR","COMPRESSED_RGBA_ASTC_5x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR","COMPRESSED_RGBA_ASTC_5x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR","COMPRESSED_RGBA_ASTC_6x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","COMPRESSED_RGBA_ASTC_6x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR","COMPRESSED_RGBA_ASTC_8x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR","COMPRESSED_RGBA_ASTC_8x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","COMPRESSED_RGBA_ASTC_8x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR","COMPRESSED_RGBA_ASTC_10x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR","COMPRESSED_RGBA_ASTC_10x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR","COMPRESSED_RGBA_ASTC_10x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","COMPRESSED_RGBA_ASTC_10x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR","COMPRESSED_RGBA_ASTC_12x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","COMPRESSED_RGBA_ASTC_12x12_KHR","COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT","COMPRESSED_RGBA_BPTC_UNORM_EXT","UNSIGNED_INT_24_8_WEBGL","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","setFunc","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","enabledCapabilities","currentBoundFramebuffers","currentDrawbuffers","defaultDrawbuffers","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","scissorParam","viewportParam","currentScissor","currentViewport","emptyTextures","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","webglSlot","drawBuffersWEBGL","setMaterial","frontFaceCW","webglType","boundTexture","autoReset","mode","instanceCount","mapTextureMapping","fromEquirectangularTexture","wireframeAttributes","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","getWireframeAttribute","currentAttribute","updateMap","onInstancedMeshDispose","instancedMesh","buffergeometry","hasEventListener","influencesList","morphTextures","workInfluences","objectInfluences","entry","hasMorphPosition","hasMorphNormals","hasMorphColors","vertexDataCount","vertexDataStride","morphTarget","morphNormal","morphColor","disposeTexture","morphInfluencesSum","morphBaseInfluence","MAX_SAFE_INTEGER","deleteAttribute","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","beginShadows","endShadows","setState","useCache","materialProperties","nGlobal","lGlobal","clippingState","lists","renderCallDepth","list","planeMesh","boxMesh","currentBackground","currentBackgroundVersion","currentTonemapping","setClearAlpha","environmentBlendMode","onBeforeRender","copyPosition","setMode","renderInstances","primcount","methodName","preventDefault","infoAutoReset","shadowMapNeedsUpdate","releaseMaterialProgramReferences","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","updateStyle","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","onXRSessionStart","onXRSessionEnd","needsProgramChange","needsLights","lightsStateVersion","getProgram","refreshProgram","refreshLights","uCamPos","computeBoneTexture","boneTextureSize","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","renderScene","opaqueObjects","transmissiveObjects","transparentObjects","renderTransmissionPass","onAfterRender","programCacheKey","updateCommonMaterialProperties","onBuild","materialNeedsLights","progUniforms","setFromProjectionMatrix","isLOD","intersectsSprite","camera2","defaultFramebuffer","__useDefaultFramebuffer","useDefaultFramebuffer","isRenderTarget3D","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","halfFloatSupportedByExt","readPixels","copyFramebufferToTexture","level","levelScale","copyTexSubImage2D","copyTextureToTexture","srcTexture","dstTexture","copyTextureToTexture3D","sourceBox","glTarget","unpackRowLen","unpackImageHeight","unpackSkipPixels","unpackSkipRows","unpackSkipImages","compressedTexSubImage3D","resetState","__THREE_DEVTOOLS__","CustomEvent","isWebGLRenderer","InterleavedBuffer","arrayBuffers","_uuid","ib","setUsage","isInterleavedBuffer","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","float32Array","setFromMatrixScale","transformVertex","vertexPosition","mvPosition","_basePosition","_skinIndex","_skinWeight","_vector$5","_matrix","bindMatrixInverse","calculateInverses","manhattanLength","setXYZW","boneIndex","isBone","InstancedBufferAttribute","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","raycastTimes","instanceId","getMatrixAt","raycast","_start$1","_end$1","_inverseMatrix$1","_ray$1","_sphere$1","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distanceSqToSegment","_start","_end","LineSegments","LineLoop","_inverseMatrix","_ray","_sphere","_position$2","Points","testPoint","rayPointDistanceSq","distanceToRay","video","requestVideoFrameCallback","updateVideo","HAVE_CURRENT_DATA","isCanvasTexture","arcLengthDivisions","aRotation","twoPi","samePoints","fromJSON","isEllipseCurve","CubicPoly","c0","initCatmullRom","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","isCatmullRomCurve3","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","freeze","__proto__","isLineCurve3","segmentLength","firstPoint","Earcut","triangulate","holeIndices","dim","hasHoles","outerLen","outerNode","linkedList","invSize","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","signedArea","insertNode","removeNode","again","three_module_area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hx","hy","mx","my","tanMin","sectorContainsSector","findHoleBridge","leftmost","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","num","Node","an","bp","ShapeUtils","removeDupEndPts","addContour","verticesArray","placeholder","bevelOffset","computeFrenetFrames","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","addVertex","nextIndex","addUV","vector2","toJSON$1","geometryShapes","a_x","a_y","b_x","b_y","c_x","c_y","a_z","b_z","c_z","d_x","d_y","d_z","indexOffset","shapeVertices","shapeHoles","shapeHole","RawShaderMaterial","STANDARD","PHYSICAL","_sheen","_clearcoat","_transmission","TOON","MATCAP","materialLib","AnimationUtils","arraySlice","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","find","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","endIndex","interpolant","evaluate","resultBuffer","numTimes","valueStart","multiplyQuaternionsFlat","valueEnd","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","settings","DefaultSettings_","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","intervalChanged_","interpolate_","copySampleValue_","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","getSettings_","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","LinearInterpolant","offset1","offset0","weight1","weight0","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","trackType","getInterpolation","factoryMethod","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","timeOffset","nKeys","valid","prevTime","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","slerpFlat","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","jsonTracks","parseKeyframeTrack","clipTracks","morphTargetSequence","noLoop","objectOrClipArray","clipArray","animationToMorphTargets","animationMorphTargets","clips","CreateFromMorphTargetSequence","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","morphTargetNames","animationKey","boneName","validate","optimize","typeName","getTrackTypeForValueTypeName","Cache","files","file","LoadingManager","onProgress","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","removeHandler","getHandler","global","DefaultLoadingManager","manager","resourcePath","requestHeader","Promise","resolve","reject","FileLoader","req","Request","headers","Headers","credentials","mimeType","fetch","then","ReadableStream","body","getReader","callbacks","reader","contentLength","lengthComputable","stream","readData","read","done","close","byteLength","ProgressEvent","enqueue","Response","statusText","arrayBuffer","blob","DOMParser","parseFromString","decoder","TextDecoder","decode","catch","finally","onImageLoad","removeEventListeners","onImageError","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","LightShadow","_frameExtents","_viewportCount","_viewports","viewportIndex","SpotLightShadow","isSpotLightShadow","power","_lightPositionWorld","_lookTarget","PointLightShadow","_cubeDirections","_cubeUps","DirectionalLightShadow","isDirectionalLightShadow","RectAreaLight","SphericalHarmonics3","coeff","shBasis","isSphericalHarmonics3","LightProbe","LoaderUtils","decodeURIComponent","escape","InstancedBufferGeometry","createImageBitmap","fetchOptions","res","colorSpaceConversion","imageBitmap","isImageBitmapLoader","AudioContext","webkitAudioContext","sky","ground","isHemisphereLightProbe","isAmbientLightProbe","performance","Audio","gain","createGain","connect","getInput","autoplay","detune","loopStart","loopEnd","playbackRate","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","audioNode","mediaElement","createMediaElementSource","mediaStream","createMediaStreamSource","audioBuffer","delay","createBufferSource","onended","onEnded","bind","setDetune","setPlaybackRate","getOutput","setTargetAtTime","getFilters","setFilters","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accuIndex","currentWeight","weightAdditive","originalValueOffset","getValue","targetIndex","workOffset","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","PropertyBinding","rootNode","parsedPath","parseTrackName","findNode","nodeName","_getValue_unbound","_setValue_unbound","isAnimationObjectGroup","Composite","matches","results","objectName","objectIndex","propertyIndex","lastDot","substring","getBoneByName","searchNodeSubtree","childNode","subTreeNode","targetObject","resolvedProperty","dest","targetArray","sourceArray","_getValue_unavailable","_setValue_unavailable","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","targetGroup","optionalParsedPath","_targetGroup","_bindings","subscribe_","firstValidIndex","nCachedObjects_","bindings","unbind","_getValue_direct","_getValue_array","_getValue_arrayElement","_getValue_toArray","_setValue_direct","_setValue_direct_setNeedsUpdate","_setValue_direct_setMatrixWorldNeedsUpdate","_setValue_array","_setValue_array_setNeedsUpdate","_setValue_array_setMatrixWorldNeedsUpdate","_setValue_arrayElement","_setValue_arrayElement_setNeedsUpdate","_setValue_arrayElement_setMatrixWorldNeedsUpdate","_setValue_fromArray","_setValue_fromArray_setNeedsUpdate","_setValue_fromArray_setMatrixWorldNeedsUpdate","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","inUse","bindingsPerObject","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","lastObject","indicesByPath","lastBindingsIndex","lastBindings","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","_isActiveAction","_scheduleFading","fadeOutAction","warp","fadeOut","fadeIn","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","fadeInAction","crossFadeFrom","weightInterpolant","_takeBackControlInterpolant","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","_root","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","accumulateAdditive","accumulate","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_initMemoryManager","_accuIndex","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","_bindAction","knownActions","_addInactiveAction","_lendBinding","saveOriginalState","_lendAction","restoreOriginalState","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","controlInterpolants","actionsByClip","actionByRoot","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","optionalRoot","clipObject","findByName","existingAction","newAction","nActions","_update","timeInSeconds","actionsToRemove","_removeInactiveAction","Uniform","_vector$4","isBox2","_startP","_startEnd","_vector$2","_boneMatrix","_matrixWorldInv","_buffer","_baseTable","_shiftTable","_mantissaTable","_exponentTable","_offsetTable","construct","setColors","getBoneList","boneList","isSkeletonHelper","Handlers","toVector3","clampToLine","startEnd2","closestPointToPointParameter","applyToBufferAttribute","applyToVector3Array","intersectsLine","getArea","getMidpoint","prototypenormal","getPlane","fromAttribute","distanceToManhattan","manhattanDistanceTo","getColumnFromMatrix","getObjectByName","getWorldRotation","setDrawMode","drawMode","initBones","setFocalLength","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","clearGroups","computeOffsets","removeAttribute","drawcalls","getArrays","getCurrentRenderTarget","resetGLState","supportsHalfFloatTextures","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","allocTextureUnit","getActiveMipMapLevel","vr","toneMappingWhitePoint","gammaFactor","renderReverseSided","renderSingleSided","setResponseType","setPath","setRequestHeader","setWithCredentials","bufferCopy","decodeAudioData","setBuffer","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getByteFrequencyData","getFrequencyData","getData","setCrossOrigin","urls","revision","__THREE__","winWidth","winHeight","vshader","fshader","circle","clock","resize","net_wave","u_time","scrollTop","documentElement","arCoin","mounted","scroll","onresize","animationBall","components_arCoin","_vm","_h","$createElement","_c","_self","staticStyle","overflow-x","staticClass","background-color","attrs","_v","gutter","align","justify","span","sm","md","lg","xl","white-space","min-width","z-index","margin","float","text-align","max-width","font-weight","font-size","border-radius","border","padding-right","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/1.7e22688c22216c9765d6.js","sourcesContent":["\r\nvar window = window || {};\r\nvar self = self || {};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author Larry Battle / http://bateru.com/news\r\n */\r\n\r\nvar THREE = THREE || { REVISION: '55' };\r\n\r\nself.console = self.console || {\r\n\r\n\tinfo: function () {},\r\n\tlog: function () {},\r\n\tdebug: function () {},\r\n\twarn: function () {},\r\n\terror: function () {}\r\n\r\n};\r\n\r\nself.Int32Array = self.Int32Array || Array;\r\nself.Float32Array = self.Float32Array || Array;\r\n\r\n// Shims for \"startsWith\", \"endsWith\", and \"trim\" for browsers where this is not yet implemented\r\n// not sure we should have this, or at least not have it here\r\n\r\n// http://stackoverflow.com/questions/646628/javascript-startswith\r\n// http://stackoverflow.com/questions/498970/how-do-i-trim-a-string-in-javascript\r\n// http://wiki.ecmascript.org/doku.php?id=harmony%3astring_extras\r\n\r\nString.prototype.startsWith = String.prototype.startsWith || function ( str ) {\r\n\r\n\treturn this.slice( 0, str.length ) === str;\r\n\r\n};\r\n\r\nString.prototype.endsWith = String.prototype.endsWith || function ( str ) {\r\n\r\n\tvar t = String( str );\r\n\tvar index = this.lastIndexOf( t );\r\n\treturn ( -1 < index && index ) === (this.length - t.length);\r\n\r\n};\r\n\r\nString.prototype.trim = String.prototype.trim || function () {\r\n\r\n\treturn this.replace( /^\\s+|\\s+$/g, '' );\r\n\r\n};\r\n\r\n\r\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\r\n\r\n// requestAnimationFrame polyfill by Erik Möller\r\n// fixes from Paul Irish and Tino Zijdel\r\n\r\n( function () {\r\n\r\n\tvar lastTime = 0;\r\n\tvar vendors = [ 'ms', 'moz', 'webkit', 'o' ];\r\n\r\n\tfor ( var x = 0; x < vendors.length && !window.requestAnimationFrame; ++ x ) {\r\n\r\n\t\twindow.requestAnimationFrame = window[ vendors[ x ] + 'RequestAnimationFrame' ];\r\n\t\twindow.cancelAnimationFrame = window[ vendors[ x ] + 'CancelAnimationFrame' ] || window[ vendors[ x ] + 'CancelRequestAnimationFrame' ];\r\n\r\n\t}\r\n\r\n\tif ( window.requestAnimationFrame === undefined ) {\r\n\r\n\t\twindow.requestAnimationFrame = function ( callback, element ) {\r\n\r\n\t\t\tvar currTime = Date.now(), timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );\r\n\t\t\tvar id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\r\n\t\t\tlastTime = currTime + timeToCall;\r\n\t\t\treturn id;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\twindow.cancelAnimationFrame = window.cancelAnimationFrame || function ( id ) { window.clearTimeout( id ) };\r\n\r\n}() );\r\n\r\n// GL STATE CONSTANTS\r\n\r\nTHREE.CullFaceNone = 0;\r\nTHREE.CullFaceBack = 1;\r\nTHREE.CullFaceFront = 2;\r\nTHREE.CullFaceFrontBack = 3;\r\n\r\nTHREE.FrontFaceDirectionCW = 0;\r\nTHREE.FrontFaceDirectionCCW = 1;\r\n\r\n// SHADOWING TYPES\r\n\r\nTHREE.BasicShadowMap = 0;\r\nTHREE.PCFShadowMap = 1;\r\nTHREE.PCFSoftShadowMap = 2;\r\n\r\n// MATERIAL CONSTANTS\r\n\r\n// side\r\n\r\nTHREE.FrontSide = 0;\r\nTHREE.BackSide = 1;\r\nTHREE.DoubleSide = 2;\r\n\r\n// shading\r\n\r\nTHREE.NoShading = 0;\r\nTHREE.FlatShading = 1;\r\nTHREE.SmoothShading = 2;\r\n\r\n// colors\r\n\r\nTHREE.NoColors = 0;\r\nTHREE.FaceColors = 1;\r\nTHREE.VertexColors = 2;\r\n\r\n// blending modes\r\n\r\nTHREE.NoBlending = 0;\r\nTHREE.NormalBlending = 1;\r\nTHREE.AdditiveBlending = 2;\r\nTHREE.SubtractiveBlending = 3;\r\nTHREE.MultiplyBlending = 4;\r\nTHREE.CustomBlending = 5;\r\n\r\n// custom blending equations\r\n// (numbers start from 100 not to clash with other\r\n//  mappings to OpenGL constants defined in Texture.js)\r\n\r\nTHREE.AddEquation = 100;\r\nTHREE.SubtractEquation = 101;\r\nTHREE.ReverseSubtractEquation = 102;\r\n\r\n// custom blending destination factors\r\n\r\nTHREE.ZeroFactor = 200;\r\nTHREE.OneFactor = 201;\r\nTHREE.SrcColorFactor = 202;\r\nTHREE.OneMinusSrcColorFactor = 203;\r\nTHREE.SrcAlphaFactor = 204;\r\nTHREE.OneMinusSrcAlphaFactor = 205;\r\nTHREE.DstAlphaFactor = 206;\r\nTHREE.OneMinusDstAlphaFactor = 207;\r\n\r\n// custom blending source factors\r\n\r\n//THREE.ZeroFactor = 200;\r\n//THREE.OneFactor = 201;\r\n//THREE.SrcAlphaFactor = 204;\r\n//THREE.OneMinusSrcAlphaFactor = 205;\r\n//THREE.DstAlphaFactor = 206;\r\n//THREE.OneMinusDstAlphaFactor = 207;\r\nTHREE.DstColorFactor = 208;\r\nTHREE.OneMinusDstColorFactor = 209;\r\nTHREE.SrcAlphaSaturateFactor = 210;\r\n\r\n\r\n// TEXTURE CONSTANTS\r\n\r\nTHREE.MultiplyOperation = 0;\r\nTHREE.MixOperation = 1;\r\nTHREE.AddOperation = 2;\r\n\r\n// Mapping modes\r\n\r\nTHREE.UVMapping = function () {};\r\n\r\nTHREE.CubeReflectionMapping = function () {};\r\nTHREE.CubeRefractionMapping = function () {};\r\n\r\nTHREE.SphericalReflectionMapping = function () {};\r\nTHREE.SphericalRefractionMapping = function () {};\r\n\r\n// Wrapping modes\r\n\r\nTHREE.RepeatWrapping = 1000;\r\nTHREE.ClampToEdgeWrapping = 1001;\r\nTHREE.MirroredRepeatWrapping = 1002;\r\n\r\n// Filters\r\n\r\nTHREE.NearestFilter = 1003;\r\nTHREE.NearestMipMapNearestFilter = 1004;\r\nTHREE.NearestMipMapLinearFilter = 1005;\r\nTHREE.LinearFilter = 1006;\r\nTHREE.LinearMipMapNearestFilter = 1007;\r\nTHREE.LinearMipMapLinearFilter = 1008;\r\n\r\n// Data types\r\n\r\nTHREE.UnsignedByteType = 1009;\r\nTHREE.ByteType = 1010;\r\nTHREE.ShortType = 1011;\r\nTHREE.UnsignedShortType = 1012;\r\nTHREE.IntType = 1013;\r\nTHREE.UnsignedIntType = 1014;\r\nTHREE.FloatType = 1015;\r\n\r\n// Pixel types\r\n\r\n//THREE.UnsignedByteType = 1009;\r\nTHREE.UnsignedShort4444Type = 1016;\r\nTHREE.UnsignedShort5551Type = 1017;\r\nTHREE.UnsignedShort565Type = 1018;\r\n\r\n// Pixel formats\r\n\r\nTHREE.AlphaFormat = 1019;\r\nTHREE.RGBFormat = 1020;\r\nTHREE.RGBAFormat = 1021;\r\nTHREE.LuminanceFormat = 1022;\r\nTHREE.LuminanceAlphaFormat = 1023;\r\n\r\n// Compressed texture formats\r\n\r\nTHREE.RGB_S3TC_DXT1_Format = 2001;\r\nTHREE.RGBA_S3TC_DXT1_Format = 2002;\r\nTHREE.RGBA_S3TC_DXT3_Format = 2003;\r\nTHREE.RGBA_S3TC_DXT5_Format = 2004;\r\n\r\n/*\r\n// Potential future PVRTC compressed texture formats\r\nTHREE.RGB_PVRTC_4BPPV1_Format = 2100;\r\nTHREE.RGB_PVRTC_2BPPV1_Format = 2101;\r\nTHREE.RGBA_PVRTC_4BPPV1_Format = 2102;\r\nTHREE.RGBA_PVRTC_2BPPV1_Format = 2103;\r\n*/\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Color = function ( value ) {\r\n\r\n\tif ( value !== undefined ) this.set( value );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.Color.prototype = {\r\n\r\n\tconstructor: THREE.Color,\r\n\r\n\tr: 1, g: 1, b: 1,\r\n\r\n\r\n\tset: function ( value ) {\r\n\r\n\t\tswitch ( typeof value ) {\r\n\r\n\t\t\tcase \"number\":\r\n\t\t\t\tthis.setHex( value );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"string\":\r\n\t\t\t\tthis.setStyle( value );\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tsetHex: function ( hex ) {\r\n\r\n\t\thex = Math.floor( hex );\r\n\r\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRGB: function ( r, g, b ) {\r\n\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetHSV: function ( h, s, v ) {\r\n\r\n\t\t// based on MochiKit implementation by Bob Ippolito\r\n\t\t// h,s,v ranges are < 0.0 - 1.0 >\r\n\r\n\t\tvar i, f, p, q, t;\r\n\r\n\t\tif ( v === 0 ) {\r\n\r\n\t\t\tthis.r = this.g = this.b = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ti = Math.floor( h * 6 );\r\n\t\t\tf = ( h * 6 ) - i;\r\n\t\t\tp = v * ( 1 - s );\r\n\t\t\tq = v * ( 1 - ( s * f ) );\r\n\t\t\tt = v * ( 1 - ( s * ( 1 - f ) ) );\r\n\r\n\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\tthis.r = v;\r\n\t\t\t\tthis.g = t;\r\n\t\t\t\tthis.b = p;\r\n\r\n\t\t\t} else if ( i === 1 ) {\r\n\r\n\t\t\t\tthis.r = q;\r\n\t\t\t\tthis.g = v;\r\n\t\t\t\tthis.b = p;\r\n\r\n\t\t\t} else if ( i === 2 ) {\r\n\r\n\t\t\t\tthis.r = p;\r\n\t\t\t\tthis.g = v;\r\n\t\t\t\tthis.b = t;\r\n\r\n\t\t\t} else if ( i === 3 ) {\r\n\r\n\t\t\t\tthis.r = p;\r\n\t\t\t\tthis.g = q;\r\n\t\t\t\tthis.b = v;\r\n\r\n\t\t\t} else if ( i === 4 ) {\r\n\r\n\t\t\t\tthis.r = t;\r\n\t\t\t\tthis.g = p;\r\n\t\t\t\tthis.b = v;\r\n\r\n\t\t\t} else if ( i === 5 ) {\r\n\r\n\t\t\t\tthis.r = v;\r\n\t\t\t\tthis.g = p;\r\n\t\t\t\tthis.b = q;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetStyle: function ( style ) {\r\n\r\n\t\t// rgb(255,0,0)\r\n\r\n\t\tif ( /^rgb\\((\\d+),(\\d+),(\\d+)\\)$/i.test( style ) ) {\r\n\r\n\t\t\tvar color = /^rgb\\((\\d+),(\\d+),(\\d+)\\)$/i.exec( style );\r\n\r\n\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t// rgb(100%,0%,0%)\r\n\r\n\t\tif ( /^rgb\\((\\d+)\\%,(\\d+)\\%,(\\d+)\\%\\)$/i.test( style ) ) {\r\n\r\n\t\t\tvar color = /^rgb\\((\\d+)\\%,(\\d+)\\%,(\\d+)\\%\\)$/i.exec( style );\r\n\r\n\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t// #ff0000\r\n\r\n\t\tif ( /^\\#([0-9a-f]{6})$/i.test( style ) ) {\r\n\r\n\t\t\tvar color = /^\\#([0-9a-f]{6})$/i.exec( style );\r\n\r\n\t\t\tthis.setHex( parseInt( color[ 1 ], 16 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t// #f00\r\n\r\n\t\tif ( /^\\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test( style ) ) {\r\n\r\n\t\t\tvar color = /^\\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec( style );\r\n\r\n\t\t\tthis.setHex( parseInt( color[ 1 ] + color[ 1 ] + color[ 2 ] + color[ 2 ] + color[ 3 ] + color[ 3 ], 16 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t// red\r\n\r\n\t\tif ( /^(\\w+)$/i.test( style ) ) {\r\n\r\n\t\t\tthis.setHex( THREE.ColorKeywords[ style ] );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\r\n\t},\r\n\r\n\tcopy: function ( color ) {\r\n\r\n\t\tthis.r = color.r;\r\n\t\tthis.g = color.g;\r\n\t\tthis.b = color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyGammaToLinear: function ( color ) {\r\n\r\n\t\tthis.r = color.r * color.r;\r\n\t\tthis.g = color.g * color.g;\r\n\t\tthis.b = color.b * color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyLinearToGamma: function ( color ) {\r\n\r\n\t\tthis.r = Math.sqrt( color.r );\r\n\t\tthis.g = Math.sqrt( color.g );\r\n\t\tthis.b = Math.sqrt( color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertGammaToLinear: function () {\r\n\r\n\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\tthis.r = r * r;\r\n\t\tthis.g = g * g;\r\n\t\tthis.b = b * b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertLinearToGamma: function () {\r\n\r\n\t\tthis.r = Math.sqrt( this.r );\r\n\t\tthis.g = Math.sqrt( this.g );\r\n\t\tthis.b = Math.sqrt( this.b );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetHex: function () {\r\n\r\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\r\n\t},\r\n\r\n\tgetHexString: function () {\r\n\r\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\r\n\t},\r\n\r\n\tgetStyle: function () {\r\n\r\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 )  + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\r\n\t},\r\n\r\n\tgetHSV: function ( hsv ) {\r\n\r\n\t\t// based on MochiKit implementation by Bob Ippolito\r\n\t\t// h,s,v ranges are < 0.0 - 1.0 >\r\n\r\n\t\tvar r = this.r;\r\n\t\tvar g = this.g;\r\n\t\tvar b = this.b;\r\n\r\n\t\tvar max = Math.max( Math.max( r, g ), b );\r\n\t\tvar min = Math.min( Math.min( r, g ), b );\r\n\r\n\t\tvar hue;\r\n\t\tvar saturation;\r\n\t\tvar value = max;\r\n\r\n\t\tif ( min === max )\t{\r\n\r\n\t\t\thue = 0;\r\n\t\t\tsaturation = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar delta = ( max - min );\r\n\t\t\tsaturation = delta / max;\r\n\r\n\t\t\tif ( r === max ) {\r\n\r\n\t\t\t\thue = ( g - b ) / delta;\r\n\r\n\t\t\t} else if ( g === max ) {\r\n\r\n\t\t\t\thue = 2 + ( ( b - r ) / delta );\r\n\r\n\t\t\t} else\t{\r\n\r\n\t\t\t\thue = 4 + ( ( r - g ) / delta );\r\n\t\t\t}\r\n\r\n\t\t\thue /= 6;\r\n\r\n\t\t\tif ( hue < 0 ) {\r\n\r\n\t\t\t\thue += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hue > 1 ) {\r\n\r\n\t\t\t\thue -= 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( hsv === undefined ) {\r\n\r\n\t\t\thsv = { h: 0, s: 0, v: 0 };\r\n\r\n\t\t}\r\n\r\n\t\thsv.h = hue;\r\n\t\thsv.s = saturation;\r\n\t\thsv.v = value;\r\n\r\n\t\treturn hsv;\r\n\r\n\t},\r\n\r\n\tadd: function ( color ) {\r\n\r\n\t\tthis.r += color.r;\r\n\t\tthis.g += color.g;\r\n\t\tthis.b += color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddColors: function ( color1, color2 ) {\r\n\r\n\t\tthis.r = color1.r + color2.r;\r\n\t\tthis.g = color1.g + color2.g;\r\n\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.r += s;\r\n\t\tthis.g += s;\r\n\t\tthis.b += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( color ) {\r\n\r\n\t\tthis.r *= color.r;\r\n\t\tthis.g *= color.g;\r\n\t\tthis.b *= color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.r *= s;\r\n\t\tthis.g *= s;\r\n\t\tthis.b *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( color, alpha ) {\r\n\r\n\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Color().setRGB( this.r, this.g, this.b );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ColorKeywords = { \"aliceblue\": 0xF0F8FF, \"antiquewhite\": 0xFAEBD7, \"aqua\": 0x00FFFF, \"aquamarine\": 0x7FFFD4, \"azure\": 0xF0FFFF,\r\n\"beige\": 0xF5F5DC, \"bisque\": 0xFFE4C4, \"black\": 0x000000, \"blanchedalmond\": 0xFFEBCD, \"blue\": 0x0000FF, \"blueviolet\": 0x8A2BE2,\r\n\"brown\": 0xA52A2A, \"burlywood\": 0xDEB887, \"cadetblue\": 0x5F9EA0, \"chartreuse\": 0x7FFF00, \"chocolate\": 0xD2691E, \"coral\": 0xFF7F50,\r\n\"cornflowerblue\": 0x6495ED, \"cornsilk\": 0xFFF8DC, \"crimson\": 0xDC143C, \"cyan\": 0x00FFFF, \"darkblue\": 0x00008B, \"darkcyan\": 0x008B8B,\r\n\"darkgoldenrod\": 0xB8860B, \"darkgray\": 0xA9A9A9, \"darkgreen\": 0x006400, \"darkgrey\": 0xA9A9A9, \"darkkhaki\": 0xBDB76B, \"darkmagenta\": 0x8B008B,\r\n\"darkolivegreen\": 0x556B2F, \"darkorange\": 0xFF8C00, \"darkorchid\": 0x9932CC, \"darkred\": 0x8B0000, \"darksalmon\": 0xE9967A, \"darkseagreen\": 0x8FBC8F,\r\n\"darkslateblue\": 0x483D8B, \"darkslategray\": 0x2F4F4F, \"darkslategrey\": 0x2F4F4F, \"darkturquoise\": 0x00CED1, \"darkviolet\": 0x9400D3,\r\n\"deeppink\": 0xFF1493, \"deepskyblue\": 0x00BFFF, \"dimgray\": 0x696969, \"dimgrey\": 0x696969, \"dodgerblue\": 0x1E90FF, \"firebrick\": 0xB22222,\r\n\"floralwhite\": 0xFFFAF0, \"forestgreen\": 0x228B22, \"fuchsia\": 0xFF00FF, \"gainsboro\": 0xDCDCDC, \"ghostwhite\": 0xF8F8FF, \"gold\": 0xFFD700,\r\n\"goldenrod\": 0xDAA520, \"gray\": 0x808080, \"green\": 0x008000, \"greenyellow\": 0xADFF2F, \"grey\": 0x808080, \"honeydew\": 0xF0FFF0, \"hotpink\": 0xFF69B4,\r\n\"indianred\": 0xCD5C5C, \"indigo\": 0x4B0082, \"ivory\": 0xFFFFF0, \"khaki\": 0xF0E68C, \"lavender\": 0xE6E6FA, \"lavenderblush\": 0xFFF0F5, \"lawngreen\": 0x7CFC00,\r\n\"lemonchiffon\": 0xFFFACD, \"lightblue\": 0xADD8E6, \"lightcoral\": 0xF08080, \"lightcyan\": 0xE0FFFF, \"lightgoldenrodyellow\": 0xFAFAD2, \"lightgray\": 0xD3D3D3,\r\n\"lightgreen\": 0x90EE90, \"lightgrey\": 0xD3D3D3, \"lightpink\": 0xFFB6C1, \"lightsalmon\": 0xFFA07A, \"lightseagreen\": 0x20B2AA, \"lightskyblue\": 0x87CEFA,\r\n\"lightslategray\": 0x778899, \"lightslategrey\": 0x778899, \"lightsteelblue\": 0xB0C4DE, \"lightyellow\": 0xFFFFE0, \"lime\": 0x00FF00, \"limegreen\": 0x32CD32,\r\n\"linen\": 0xFAF0E6, \"magenta\": 0xFF00FF, \"maroon\": 0x800000, \"mediumaquamarine\": 0x66CDAA, \"mediumblue\": 0x0000CD, \"mediumorchid\": 0xBA55D3,\r\n\"mediumpurple\": 0x9370DB, \"mediumseagreen\": 0x3CB371, \"mediumslateblue\": 0x7B68EE, \"mediumspringgreen\": 0x00FA9A, \"mediumturquoise\": 0x48D1CC,\r\n\"mediumvioletred\": 0xC71585, \"midnightblue\": 0x191970, \"mintcream\": 0xF5FFFA, \"mistyrose\": 0xFFE4E1, \"moccasin\": 0xFFE4B5, \"navajowhite\": 0xFFDEAD,\r\n\"navy\": 0x000080, \"oldlace\": 0xFDF5E6, \"olive\": 0x808000, \"olivedrab\": 0x6B8E23, \"orange\": 0xFFA500, \"orangered\": 0xFF4500, \"orchid\": 0xDA70D6,\r\n\"palegoldenrod\": 0xEEE8AA, \"palegreen\": 0x98FB98, \"paleturquoise\": 0xAFEEEE, \"palevioletred\": 0xDB7093, \"papayawhip\": 0xFFEFD5, \"peachpuff\": 0xFFDAB9,\r\n\"peru\": 0xCD853F, \"pink\": 0xFFC0CB, \"plum\": 0xDDA0DD, \"powderblue\": 0xB0E0E6, \"purple\": 0x800080, \"red\": 0xFF0000, \"rosybrown\": 0xBC8F8F,\r\n\"royalblue\": 0x4169E1, \"saddlebrown\": 0x8B4513, \"salmon\": 0xFA8072, \"sandybrown\": 0xF4A460, \"seagreen\": 0x2E8B57, \"seashell\": 0xFFF5EE,\r\n\"sienna\": 0xA0522D, \"silver\": 0xC0C0C0, \"skyblue\": 0x87CEEB, \"slateblue\": 0x6A5ACD, \"slategray\": 0x708090, \"slategrey\": 0x708090, \"snow\": 0xFFFAFA,\r\n\"springgreen\": 0x00FF7F, \"steelblue\": 0x4682B4, \"tan\": 0xD2B48C, \"teal\": 0x008080, \"thistle\": 0xD8BFD8, \"tomato\": 0xFF6347, \"turquoise\": 0x40E0D0,\r\n\"violet\": 0xEE82EE, \"wheat\": 0xF5DEB3, \"white\": 0xFFFFFF, \"whitesmoke\": 0xF5F5F5, \"yellow\": 0xFFFF00, \"yellowgreen\": 0x9ACD32 };\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Quaternion = function( x, y, z, w ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Quaternion.prototype = {\r\n\r\n\tconstructor: THREE.Quaternion,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( q ) {\r\n\r\n\t\tthis.x = q.x;\r\n\t\tthis.y = q.y;\r\n\t\tthis.z = q.z;\r\n\t\tthis.w = q.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromEuler: function ( v, order ) {\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tvar c1 = Math.cos( v.x / 2 );\r\n\t\tvar c2 = Math.cos( v.y / 2 );\r\n\t\tvar c3 = Math.cos( v.z / 2 );\r\n\t\tvar s1 = Math.sin( v.x / 2 );\r\n\t\tvar s2 = Math.sin( v.y / 2 );\r\n\t\tvar s3 = Math.sin( v.z / 2 );\r\n\r\n\t\tif ( order === undefined || order === 'XYZ' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\t\t// axis have to be normalized\r\n\r\n\t\tvar halfAngle = angle / 2,\r\n\t\t\ts = Math.sin( halfAngle );\r\n\r\n\t\tthis.x = axis.x * s;\r\n\t\tthis.y = axis.y * s;\r\n\t\tthis.z = axis.z * s;\r\n\t\tthis.w = Math.cos( halfAngle );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements,\r\n\r\n\t\t\tm11 = te[0], m12 = te[4], m13 = te[8],\r\n\t\t\tm21 = te[1], m22 = te[5], m23 = te[9],\r\n\t\t\tm31 = te[2], m32 = te[6], m33 = te[10],\r\n\r\n\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\ts;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis.w = 0.25 / s;\r\n\t\t\tthis.x = ( m32 - m23 ) * s;\r\n\t\t\tthis.y = ( m13 - m31 ) * s;\r\n\t\t\tthis.z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis.w = (m32 - m23 ) / s;\r\n\t\t\tthis.x = 0.25 * s;\r\n\t\t\tthis.y = (m12 + m21 ) / s;\r\n\t\t\tthis.z = (m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis.w = (m13 - m31 ) / s;\r\n\t\t\tthis.x = (m12 + m21 ) / s;\r\n\t\t\tthis.y = 0.25 * s;\r\n\t\t\tthis.z = (m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis.w = ( m21 - m12 ) / s;\r\n\t\t\tthis.x = ( m13 + m31 ) / s;\r\n\t\t\tthis.y = ( m23 + m32 ) / s;\r\n\t\t\tthis.z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tinverse: function () {\r\n\r\n\t\tthis.conjugate().normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconjugate: function () {\r\n\r\n\t\tthis.x *= -1;\r\n\t\tthis.y *= -1;\r\n\t\tthis.z *= -1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tvar l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\t\t\tthis.w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis.x = this.x * l;\r\n\t\t\tthis.y = this.y * l;\r\n\t\t\tthis.z = this.z * l;\r\n\t\t\tthis.w = this.w * l;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( q, p ) {\r\n\r\n\t\tif ( p !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Quaternion\\'s .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t},\r\n\r\n\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tvar qax = a.x, qay = a.y, qaz = a.z, qaw = a.w;\r\n\t\tvar qbx = b.x, qby = b.y, qbz = b.z, qbw = b.w;\r\n\r\n\t\tthis.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'DEPRECATED: Quaternion\\'s .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\r\n\t\treturn vector.applyQuaternion( this );\r\n\r\n\t},\r\n\r\n\tslerp: function ( qb, t ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tvar cosHalfTheta = w * qb.w + x * qb.x + y * qb.y + z * qb.z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis.w = -qb.w;\r\n\t\t\tthis.x = -qb.x;\r\n\t\t\tthis.y = -qb.y;\r\n\t\t\tthis.z = -qb.z;\r\n\r\n\t\t\tcosHalfTheta = -cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis.w = w;\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar halfTheta = Math.acos( cosHalfTheta );\r\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\r\n\r\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\r\n\r\n\t\t\tthis.w = 0.5 * ( w + this.w );\r\n\t\t\tthis.x = 0.5 * ( x + this.x );\r\n\t\t\tthis.y = 0.5 * ( y + this.y );\r\n\t\t\tthis.z = 0.5 * ( z + this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis.w = ( w * ratioA + this.w * ratioB );\r\n\t\tthis.x = ( x * ratioA + this.x * ratioB );\r\n\t\tthis.y = ( y * ratioA + this.y * ratioB );\r\n\t\tthis.z = ( z * ratioA + this.z * ratioB );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Quaternion( this.x, this.y, this.z, this.w );\r\n\r\n\t}\r\n\r\n}\r\n\r\nTHREE.Quaternion.slerp = function ( qa, qb, qm, t ) {\r\n\r\n\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n}\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author egraether / http://egraether.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.Vector2 = function ( x, y ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\r\n};\r\n\r\nTHREE.Vector2.prototype = {\r\n\r\n\tconstructor: THREE.Vector2,\r\n\r\n\tset: function ( x, y ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector2\\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector2\\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.x *= s;\r\n\t\tthis.y *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( s ) {\r\n\r\n\t\tif ( s !== 0 ) {\r\n\r\n\t\t\tthis.x /= s;\r\n\t\t\tthis.y /= s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.set( 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tif ( this.x > v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y > v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tif ( this.x < v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tif ( this.x < min.x ) {\r\n\r\n\t\t\tthis.x = min.x;\r\n\r\n\t\t} else if ( this.x > max.x ) {\r\n\r\n\t\t\tthis.x = max.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < min.y ) {\r\n\r\n\t\t\tthis.y = min.y;\r\n\r\n\t\t} else if ( this.y > max.y ) {\r\n\r\n\t\t\tthis.y = max.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function() {\r\n\r\n\t\treturn this.multiplyScalar( - 1 );\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\treturn dx * dx + dy * dy;\r\n\r\n\t},\r\n\r\n\tsetLength: function ( l ) {\r\n\r\n\t\tvar oldLength = this.length();\r\n\r\n\t\tif ( oldLength !== 0 && l !== oldLength ) {\r\n\r\n\t\t\tthis.multiplyScalar( l / oldLength );\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Vector2( this.x, this.y );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author *kile / http://kile.stravaganza.org/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector3 = function ( x, y, z ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\r\n};\r\n\r\n\r\nTHREE.Vector3.prototype = {\r\n\r\n\tconstructor: THREE.Vector3,\r\n\r\n\tset: function ( x, y, z ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector3\\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector3\\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector3\\'s .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.x *= s;\r\n\t\tthis.y *= s;\r\n\t\tthis.z *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix3: function ( m ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\r\n\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\r\n\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[0] * x + e[4] * y + e[8]  * z + e[12];\r\n\t\tthis.y = e[1] * x + e[5] * y + e[9]  * z + e[13];\r\n\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyProjection: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 projection matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\t\tvar d = 1 / ( e[3] * x + e[7] * y + e[11] * z + e[15] ); // perspective divide\r\n\r\n\t\tthis.x = ( e[0] * x + e[4] * y + e[8]  * z + e[12] ) * d;\r\n\t\tthis.y = ( e[1] * x + e[5] * y + e[9]  * z + e[13] ) * d;\r\n\t\tthis.z = ( e[2] * x + e[6] * y + e[10] * z + e[14] ) * d;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyQuaternion: function ( q ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\r\n\t\tvar qx = q.x;\r\n\t\tvar qy = q.y;\r\n\t\tvar qz = q.z;\r\n\t\tvar qw = q.w;\r\n\r\n\t\t// calculate quat * vector\r\n\r\n\t\tvar ix =  qw * x + qy * z - qz * y;\r\n\t\tvar iy =  qw * y + qz * x - qx * z;\r\n\t\tvar iz =  qw * z + qx * y - qy * x;\r\n\t\tvar iw = -qx * x - qy * y - qz * z;\r\n\r\n\t\t// calculate result * inverse quat\r\n\r\n\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyEuler: function ( v, eulerOrder ) {\r\n\r\n\t\tvar quaternion = THREE.Vector3.__q1.setFromEuler( v, eulerOrder );\r\n\r\n\t\tthis.applyQuaternion( quaternion );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyAxisAngle: function ( axis, angle ) {\r\n\r\n\t\tvar quaternion = THREE.Vector3.__q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\tthis.applyQuaternion( quaternion );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( s ) {\r\n\r\n\t\tif ( s !== 0 ) {\r\n\r\n\t\t\tthis.x /= s;\r\n\t\t\tthis.y /= s;\r\n\t\t\tthis.z /= s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tif ( this.x > v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y > v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z > v.z ) {\r\n\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tif ( this.x < v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z < v.z ) {\r\n\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tif ( this.x < min.x ) {\r\n\r\n\t\t\tthis.x = min.x;\r\n\r\n\t\t} else if ( this.x > max.x ) {\r\n\r\n\t\t\tthis.x = max.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < min.y ) {\r\n\r\n\t\t\tthis.y = min.y;\r\n\r\n\t\t} else if ( this.y > max.y ) {\r\n\r\n\t\t\tthis.y = max.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z < min.z ) {\r\n\r\n\t\t\tthis.z = min.z;\r\n\r\n\t\t} else if ( this.z > max.z ) {\r\n\r\n\t\t\tthis.z = max.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function() {\r\n\r\n\t\treturn this.multiplyScalar( - 1 );\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( l ) {\r\n\r\n\t\tvar oldLength = this.length();\r\n\r\n\t\tif ( oldLength !== 0 && l !== oldLength  ) {\r\n\r\n\t\t\tthis.multiplyScalar( l / oldLength );\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcross: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector3\\'s .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tthis.x = y * v.z - z * v.y;\r\n\t\tthis.y = z * v.x - x * v.z;\r\n\t\tthis.z = x * v.y - y * v.x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcrossVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.y * b.z - a.z * b.y;\r\n\t\tthis.y = a.z * b.x - a.x * b.z;\r\n\t\tthis.z = a.x * b.y - a.y * b.x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tangleTo: function ( v ) {\r\n\r\n\t\treturn Math.acos( this.dot( v ) / this.length() / v.length() );\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x;\r\n\t\tvar dy = this.y - v.y;\r\n\t\tvar dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t},\r\n\r\n\tgetPositionFromMatrix: function ( m ) {\r\n\r\n\t\tthis.x = m.elements[12];\r\n\t\tthis.y = m.elements[13];\r\n\t\tthis.z = m.elements[14];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetEulerFromRotationMatrix: function ( m, order ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\tfunction clamp( x ) {\r\n\r\n\t\t\treturn Math.min( Math.max( x, -1 ), 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvar te = m.elements;\r\n\t\tvar m11 = te[0], m12 = te[4], m13 = te[8];\r\n\t\tvar m21 = te[1], m22 = te[5], m23 = te[9];\r\n\t\tvar m31 = te[2], m32 = te[6], m33 = te[10];\r\n\r\n\t\tif ( order === undefined || order === 'XYZ' ) {\r\n\r\n\t\t\tthis.y = Math.asin( clamp( m13 ) );\r\n\r\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis.z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis.z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis.x = Math.asin( - clamp( m23 ) );\r\n\r\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.y = Math.atan2( m13, m33 );\r\n\t\t\t\tthis.z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.y = Math.atan2( - m31, m11 );\r\n\t\t\t\tthis.z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis.x = Math.asin( clamp( m32 ) );\r\n\r\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.y = Math.atan2( - m31, m33 );\r\n\t\t\t\tthis.z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.y = 0;\r\n\t\t\t\tthis.z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis.y = Math.asin( - clamp( m31 ) );\r\n\r\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.x = Math.atan2( m32, m33 );\r\n\t\t\t\tthis.z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = 0;\r\n\t\t\t\tthis.z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis.z = Math.asin( clamp( m21 ) );\r\n\r\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.x = Math.atan2( - m23, m22 );\r\n\t\t\t\tthis.y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = 0;\r\n\t\t\t\tthis.y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis.z = Math.asin( - clamp( m12 ) );\r\n\r\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis.y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis.y = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetEulerFromQuaternion: function ( q, order ) {\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\tfunction clamp( x ) {\r\n\r\n\t\t\treturn Math.min( Math.max( x, -1 ), 1 );\r\n\r\n\t\t}\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\r\n\r\n\t\tvar sqx = q.x * q.x;\r\n\t\tvar sqy = q.y * q.y;\r\n\t\tvar sqz = q.z * q.z;\r\n\t\tvar sqw = q.w * q.w;\r\n\r\n\t\tif ( order === undefined || order === 'XYZ' ) {\r\n\r\n\t\t\tthis.x = Math.atan2( 2 * ( q.x * q.w - q.y * q.z ), ( sqw - sqx - sqy + sqz ) );\r\n\t\t\tthis.y = Math.asin(  clamp( 2 * ( q.x * q.z + q.y * q.w ) ) );\r\n\t\t\tthis.z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw + sqx - sqy - sqz ) );\r\n\r\n\t\t} else if ( order ===  'YXZ' ) {\r\n\r\n\t\t\tthis.x = Math.asin(  clamp( 2 * ( q.x * q.w - q.y * q.z ) ) );\r\n\t\t\tthis.y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw - sqx - sqy + sqz ) );\r\n\t\t\tthis.z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw - sqx + sqy - sqz ) );\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis.x = Math.asin(  clamp( 2 * ( q.x * q.w + q.y * q.z ) ) );\r\n\t\t\tthis.y = Math.atan2( 2 * ( q.y * q.w - q.z * q.x ), ( sqw - sqx - sqy + sqz ) );\r\n\t\t\tthis.z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw - sqx + sqy - sqz ) );\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis.x = Math.atan2( 2 * ( q.x * q.w + q.z * q.y ), ( sqw - sqx - sqy + sqz ) );\r\n\t\t\tthis.y = Math.asin(  clamp( 2 * ( q.y * q.w - q.x * q.z ) ) );\r\n\t\t\tthis.z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw + sqx - sqy - sqz ) );\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis.x = Math.atan2( 2 * ( q.x * q.w - q.z * q.y ), ( sqw - sqx + sqy - sqz ) );\r\n\t\t\tthis.y = Math.atan2( 2 * ( q.y * q.w - q.x * q.z ), ( sqw + sqx - sqy - sqz ) );\r\n\t\t\tthis.z = Math.asin(  clamp( 2 * ( q.x * q.y + q.z * q.w ) ) );\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis.x = Math.atan2( 2 * ( q.x * q.w + q.y * q.z ), ( sqw - sqx + sqy - sqz ) );\r\n\t\t\tthis.y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw + sqx - sqy - sqz ) );\r\n\t\t\tthis.z = Math.asin(  clamp( 2 * ( q.z * q.w - q.x * q.y ) ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetScaleFromMatrix: function ( m ) {\r\n\r\n\t\tvar sx = this.set( m.elements[0], m.elements[1], m.elements[2] ).length();\r\n\t\tvar sy = this.set( m.elements[4], m.elements[5], m.elements[6] ).length();\r\n\t\tvar sz = this.set( m.elements[8], m.elements[9], m.elements[10] ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Vector3( this.x, this.y, this.z );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Vector3.__q1 = new THREE.Quaternion();\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector4 = function ( x, y, z, w ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Vector4.prototype = {\r\n\r\n\tconstructor: THREE.Vector4,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetW: function ( w ) {\r\n\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tcase 3: this.w = value; break;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tcase 3: return this.w;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector4\\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\t\tthis.w += v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\t\tthis.w += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\t\tthis.w = a.w + b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector4\\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\t\tthis.w -= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\t\tthis.w = a.w - b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.x *= s;\r\n\t\tthis.y *= s;\r\n\t\tthis.z *= s;\r\n\t\tthis.w *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\t\tvar w = this.w;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\r\n\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\r\n\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\r\n\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( s ) {\r\n\r\n\t\tif ( s !== 0 ) {\r\n\r\n\t\t\tthis.x /= s;\r\n\t\t\tthis.y /= s;\r\n\t\t\tthis.z /= s;\r\n\t\t\tthis.w /= s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\t\t\tthis.w = 1;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tif ( this.x > v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y > v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z > v.z ) {\r\n\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.w > v.w ) {\r\n\r\n\t\t\tthis.w = v.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tif ( this.x < v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z < v.z ) {\r\n\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.w < v.w ) {\r\n\r\n\t\t\tthis.w = v.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tif ( this.x < min.x ) {\r\n\r\n\t\t\tthis.x = min.x;\r\n\r\n\t\t} else if ( this.x > max.x ) {\r\n\r\n\t\t\tthis.x = max.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < min.y ) {\r\n\r\n\t\t\tthis.y = min.y;\r\n\r\n\t\t} else if ( this.y > max.y ) {\r\n\r\n\t\t\tthis.y = max.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z < min.z ) {\r\n\r\n\t\t\tthis.z = min.z;\r\n\r\n\t\t} else if ( this.z > max.z ) {\r\n\r\n\t\t\tthis.z = max.z;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.w < min.w ) {\r\n\r\n\t\t\tthis.w = min.w;\r\n\r\n\t\t} else if ( this.w > max.w ) {\r\n\r\n\t\t\tthis.w = max.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function() {\r\n\r\n\t\treturn this.multiplyScalar( -1 );\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( l ) {\r\n\r\n\t\tvar oldLength = this.length();\r\n\r\n\t\tif ( oldLength !== 0 && l !== oldLength ) {\r\n\r\n\t\t\tthis.multiplyScalar( l / oldLength );\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Vector4( this.x, this.y, this.z, this.w );\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\t this.x = 1;\r\n\t\t\t this.y = 0;\r\n\t\t\t this.z = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t this.x = q.x / s;\r\n\t\t\t this.y = q.y / s;\r\n\t\t\t this.z = q.z / s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\tte = m.elements,\r\n\r\n\t\t\tm11 = te[0], m12 = te[4], m13 = te[8],\r\n\t\t\tm21 = te[1], m22 = te[5], m23 = te[9],\r\n\t\t\tm31 = te[2], m32 = te[6], m33 = te[10];\r\n\r\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon )\r\n\t\t  && ( Math.abs( m13 - m31 ) < epsilon )\r\n\t\t  && ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t// singularity found\r\n\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 )\r\n\t\t\t  && ( Math.abs( m13 + m31 ) < epsilon2 )\r\n\t\t\t  && ( Math.abs( m23 + m32 ) < epsilon2 )\r\n\t\t\t  && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\tangle = Math.PI;\r\n\r\n\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) { // m11 is the largest diagonal term\r\n\r\n\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( yy > zz ) { // m22 is the largest diagonal term\r\n\r\n\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else { // m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t}\r\n\r\n\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )\r\n\t\t\t\t\t\t + ( m13 - m31 ) * ( m13 - m31 )\r\n\t\t\t\t\t\t + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Box2 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( -Infinity, -Infinity );\r\n\r\n};\r\n\r\nTHREE.Box2.prototype = {\r\n\r\n\tconstructor: THREE.Box2,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\tvar point = points[ 0 ];\r\n\r\n\t\t\tthis.min.copy( point );\r\n\t\t\tthis.max.copy( point );\r\n\r\n\t\t\tfor ( var i = 1, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tpoint = points[ i ];\r\n\r\n\t\t\t\tif ( point.x < this.min.x ) {\r\n\r\n\t\t\t\t\tthis.min.x = point.x;\r\n\r\n\t\t\t\t} else if ( point.x > this.max.x ) {\r\n\r\n\t\t\t\t\tthis.max.x = point.x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( point.y < this.min.y ) {\r\n\r\n\t\t\t\t\tthis.min.y = point.y;\r\n\r\n\t\t\t\t} else if ( point.y > this.max.y ) {\r\n\r\n\t\t\t\t\tthis.max.y = point.y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function ( center, size ) {\r\n\r\n\t\tvar halfSize = THREE.Box2.__v1.copy( size ).multiplyScalar( 0.5 );\r\n\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = Infinity;\r\n\t\tthis.max.x = this.max.y = -Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( -scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t     point.y < this.min.y || point.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\treturn new THREE.Vector2(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\tvar clampedPoint = THREE.Box2.__v1.copy( point ).clamp( this.min, this.max );\r\n\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t},\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Box2().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Box2.__v1 = new THREE.Vector2();\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Box3 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( -Infinity, -Infinity, -Infinity );\r\n\r\n};\r\n\r\nTHREE.Box3.prototype = {\r\n\r\n\tconstructor: THREE.Box3,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\tvar point = points[ 0 ];\r\n\r\n\t\t\tthis.min.copy( point );\r\n\t\t\tthis.max.copy( point );\r\n\r\n\t\t\tfor ( var i = 1, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tpoint = points[ i ];\r\n\r\n\t\t\t\tif ( point.x < this.min.x ) {\r\n\r\n\t\t\t\t\tthis.min.x = point.x;\r\n\r\n\t\t\t\t} else if ( point.x > this.max.x ) {\r\n\r\n\t\t\t\t\tthis.max.x = point.x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( point.y < this.min.y ) {\r\n\r\n\t\t\t\t\tthis.min.y = point.y;\r\n\r\n\t\t\t\t} else if ( point.y > this.max.y ) {\r\n\r\n\t\t\t\t\tthis.max.y = point.y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( point.z < this.min.z ) {\r\n\r\n\t\t\t\t\tthis.min.z = point.z;\r\n\r\n\t\t\t\t} else if ( point.z > this.max.z ) {\r\n\r\n\t\t\t\t\tthis.max.z = point.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function ( center, size ) {\r\n\r\n\t\tvar halfSize = THREE.Box3.__v1.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = this.min.z = Infinity;\r\n\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( -scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t     point.y < this.min.y || point.y > this.max.y ||\r\n\t\t     point.z < this.min.z || point.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\r\n\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t     box.max.z < this.min.z || box.min.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn new THREE.Vector3().copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\tvar clampedPoint = THREE.Box3.__v1.copy( point ).clamp( this.min, this.max );\r\n\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t},\r\n\r\n\tgetBoundingSphere: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Sphere();\r\n\r\n\t\tresult.center = this.center();\r\n\t\tresult.radius = this.size( THREE.Box3.__v0 ).length() * 0.5;\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttransform: function ( matrix ) {\r\n\r\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\tvar newPoints = [\r\n\t\t\tTHREE.Box3.__v0.set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ),\r\n\t\t\tTHREE.Box3.__v0.set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ), // 000\r\n\t\t\tTHREE.Box3.__v1.set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ), // 001\r\n\t\t\tTHREE.Box3.__v2.set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ), // 010\r\n\t\t\tTHREE.Box3.__v3.set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ), // 011\r\n\t\t\tTHREE.Box3.__v4.set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ), // 100\r\n\t\t\tTHREE.Box3.__v5.set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ), // 101\r\n\t\t\tTHREE.Box3.__v6.set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ), // 110\r\n\t\t\tTHREE.Box3.__v7.set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix )  // 111\r\n\t\t];\r\n\r\n\t\tthis.makeEmpty();\r\n\t\tthis.setFromPoints( newPoints );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Box3().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Box3.__v0 = new THREE.Vector3();\r\nTHREE.Box3.__v1 = new THREE.Vector3();\r\nTHREE.Box3.__v2 = new THREE.Vector3();\r\nTHREE.Box3.__v3 = new THREE.Vector3();\r\nTHREE.Box3.__v4 = new THREE.Vector3();\r\nTHREE.Box3.__v5 = new THREE.Vector3();\r\nTHREE.Box3.__v6 = new THREE.Vector3();\r\nTHREE.Box3.__v7 = new THREE.Vector3();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Matrix3 = function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\tthis.elements = new Float32Array(9);\r\n\r\n\tthis.set(\r\n\r\n\t\t( n11 !== undefined ) ? n11 : 1, n12 || 0, n13 || 0,\r\n\t\tn21 || 0, ( n22 !== undefined ) ? n22 : 1, n23 || 0,\r\n\t\tn31 || 0, n32 || 0, ( n33 !== undefined ) ? n33 : 1\r\n\r\n\t);\r\n};\r\n\r\nTHREE.Matrix3.prototype = {\r\n\r\n\tconstructor: THREE.Matrix3,\r\n\r\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[0] = n11; te[3] = n12; te[6] = n13;\r\n\t\tte[1] = n21; te[4] = n22; te[7] = n23;\r\n\t\tte[2] = n31; te[5] = n32; te[8] = n33;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[0], me[3], me[6],\r\n\t\t\tme[1], me[4], me[7],\r\n\t\t\tme[2], me[5], me[8]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'DEPRECATED: Matrix3\\'s .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix3( this );\r\n\r\n\t},\r\n\r\n\tmultiplyVector3Array: function ( a ) {\r\n\r\n\t\tvar tmp = THREE.Matrix3.__v1;\r\n\r\n\t\tfor ( var i = 0, il = a.length; i < il; i += 3 ) {\r\n\r\n\t\t\ttmp.x = a[ i ];\r\n\t\t\ttmp.y = a[ i + 1 ];\r\n\t\t\ttmp.z = a[ i + 2 ];\r\n\r\n\t\t\ttmp.applyMatrix3(this);\r\n\r\n\t\t\ta[ i ]     = tmp.x;\r\n\t\t\ta[ i + 1 ] = tmp.y;\r\n\t\t\ta[ i + 2 ] = tmp.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[0] *= s; te[3] *= s; te[6] *= s;\r\n\t\tte[1] *= s; te[4] *= s; te[7] *= s;\r\n\t\tte[2] *= s; te[5] *= s; te[8] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a = te[0], b = te[1], c = te[2],\r\n\t\t\td = te[3], e = te[4], f = te[5],\r\n\t\t\tg = te[6], h = te[7], i = te[8];\r\n\r\n\t\treturn a*e*i - a*f*h - b*d*i + b*f*g + c*d*h - c*e*g;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( matrix, throwOnInvertible ) {\r\n\r\n\t\t// input: THREE.Matrix4\r\n\t\t// ( based on http://code.google.com/p/webgl-mjs/ )\r\n\r\n\t\tvar me = matrix.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] =   me[10] * me[5] - me[6] * me[9];\r\n\t\tte[ 1 ] = - me[10] * me[1] + me[2] * me[9];\r\n\t\tte[ 2 ] =   me[6] * me[1] - me[2] * me[5];\r\n\t\tte[ 3 ] = - me[10] * me[4] + me[6] * me[8];\r\n\t\tte[ 4 ] =   me[10] * me[0] - me[2] * me[8];\r\n\t\tte[ 5 ] = - me[6] * me[0] + me[2] * me[4];\r\n\t\tte[ 6 ] =   me[9] * me[4] - me[5] * me[8];\r\n\t\tte[ 7 ] = - me[9] * me[0] + me[1] * me[8];\r\n\t\tte[ 8 ] =   me[5] * me[0] - me[1] * me[4];\r\n\r\n\t\tvar det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];\r\n\r\n\t\t// no inverse\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"Matrix3.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnInvertible || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg ); \r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.identity();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tthis.multiplyScalar( 1.0 / det );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar tmp, m = this.elements;\r\n\r\n\t\ttmp = m[1]; m[1] = m[3]; m[3] = tmp;\r\n\t\ttmp = m[2]; m[2] = m[6]; m[6] = tmp;\r\n\t\ttmp = m[5]; m[5] = m[7]; m[7] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\r\n\ttransposeIntoArray: function ( r ) {\r\n\r\n\t\tvar m = this.elements;\r\n\r\n\t\tr[ 0 ] = m[ 0 ];\r\n\t\tr[ 1 ] = m[ 3 ];\r\n\t\tr[ 2 ] = m[ 6 ];\r\n\t\tr[ 3 ] = m[ 1 ];\r\n\t\tr[ 4 ] = m[ 4 ];\r\n\t\tr[ 5 ] = m[ 7 ];\r\n\t\tr[ 6 ] = m[ 2 ];\r\n\t\tr[ 7 ] = m[ 5 ];\r\n\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\treturn new THREE.Matrix3(\r\n\r\n\t\t\tte[0], te[3], te[6],\r\n\t\t\tte[1], te[4], te[7],\r\n\t\t\tte[2], te[5], te[8]\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix3.__v1 = new THREE.Vector3();\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author jordi_ros / http://plattsoft.com\r\n * @author D1plo1d / http://github.com/D1plo1d\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author timknip / http://www.floorplanner.com/\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\n\r\nTHREE.Matrix4 = function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\tthis.elements = new Float32Array( 16 );\r\n\r\n\tthis.set(\r\n\r\n\t\t( n11 !== undefined ) ? n11 : 1, n12 || 0, n13 || 0, n14 || 0,\r\n\t\tn21 || 0, ( n22 !== undefined ) ? n22 : 1, n23 || 0, n24 || 0,\r\n\t\tn31 || 0, n32 || 0, ( n33 !== undefined ) ? n33 : 1, n34 || 0,\r\n\t\tn41 || 0, n42 || 0, n43 || 0, ( n44 !== undefined ) ? n44 : 1\r\n\r\n\t);\r\n\r\n};\r\n\r\nTHREE.Matrix4.prototype = {\r\n\r\n\tconstructor: THREE.Matrix4,\r\n\r\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[0] = n11; te[4] = n12; te[8] = n13; te[12] = n14;\r\n\t\tte[1] = n21; te[5] = n22; te[9] = n23; te[13] = n24;\r\n\t\tte[2] = n31; te[6] = n32; te[10] = n33; te[14] = n34;\r\n\t\tte[3] = n41; te[7] = n42; te[11] = n43; te[15] = n44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[0], me[4], me[8], me[12],\r\n\t\t\tme[1], me[5], me[9], me[13],\r\n\t\t\tme[2], me[6], me[10], me[14],\r\n\t\t\tme[3], me[7], me[11], me[15]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRotationFromEuler: function ( v, order ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\tif ( order === undefined || order === 'XYZ' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[0] = c * e;\r\n\t\t\tte[4] = - c * f;\r\n\t\t\tte[8] = d;\r\n\r\n\t\t\tte[1] = af + be * d;\r\n\t\t\tte[5] = ae - bf * d;\r\n\t\t\tte[9] = - b * c;\r\n\r\n\t\t\tte[2] = bf - ae * d;\r\n\t\t\tte[6] = be + af * d;\r\n\t\t\tte[10] = a * c;\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[0] = ce + df * b;\r\n\t\t\tte[4] = de * b - cf;\r\n\t\t\tte[8] = a * d;\r\n\r\n\t\t\tte[1] = a * f;\r\n\t\t\tte[5] = a * e;\r\n\t\t\tte[9] = - b;\r\n\r\n\t\t\tte[2] = cf * b - de;\r\n\t\t\tte[6] = df + ce * b;\r\n\t\t\tte[10] = a * c;\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[0] = ce - df * b;\r\n\t\t\tte[4] = - a * f;\r\n\t\t\tte[8] = de + cf * b;\r\n\r\n\t\t\tte[1] = cf + de * b;\r\n\t\t\tte[5] = a * e;\r\n\t\t\tte[9] = df - ce * b;\r\n\r\n\t\t\tte[2] = - a * d;\r\n\t\t\tte[6] = b;\r\n\t\t\tte[10] = a * c;\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[0] = c * e;\r\n\t\t\tte[4] = be * d - af;\r\n\t\t\tte[8] = ae * d + bf;\r\n\r\n\t\t\tte[1] = c * f;\r\n\t\t\tte[5] = bf * d + ae;\r\n\t\t\tte[9] = af * d - be;\r\n\r\n\t\t\tte[2] = - d;\r\n\t\t\tte[6] = b * c;\r\n\t\t\tte[10] = a * c;\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[0] = c * e;\r\n\t\t\tte[4] = bd - ac * f;\r\n\t\t\tte[8] = bc * f + ad;\r\n\r\n\t\t\tte[1] = f;\r\n\t\t\tte[5] = a * e;\r\n\t\t\tte[9] = - b * e;\r\n\r\n\t\t\tte[2] = - d * e;\r\n\t\t\tte[6] = ad * f + bc;\r\n\t\t\tte[10] = ac - bd * f;\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[0] = c * e;\r\n\t\t\tte[4] = - f;\r\n\t\t\tte[8] = d * e;\r\n\r\n\t\t\tte[1] = ac * f + bd;\r\n\t\t\tte[5] = a * e;\r\n\t\t\tte[9] = ad * f - bc;\r\n\r\n\t\t\tte[2] = bc * f - ad;\r\n\t\t\tte[6] = b * e;\r\n\t\t\tte[10] = bd * f + ac;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\r\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\r\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\tte[0] = 1 - ( yy + zz );\r\n\t\tte[4] = xy - wz;\r\n\t\tte[8] = xz + wy;\r\n\r\n\t\tte[1] = xy + wz;\r\n\t\tte[5] = 1 - ( xx + zz );\r\n\t\tte[9] = yz - wx;\r\n\r\n\t\tte[2] = xz - wy;\r\n\t\tte[6] = yz + wx;\r\n\t\tte[10] = 1 - ( xx + yy );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlookAt: function ( eye, target, up ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = THREE.Matrix4.__v1;\r\n\t\tvar y = THREE.Matrix4.__v2;\r\n\t\tvar z = THREE.Matrix4.__v3;\r\n\r\n\t\tz.subVectors( eye, target ).normalize();\r\n\r\n\t\tif ( z.length() === 0 ) {\r\n\r\n\t\t\tz.z = 1;\r\n\r\n\t\t}\r\n\r\n\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\tif ( x.length() === 0 ) {\r\n\r\n\t\t\tz.x += 0.0001;\r\n\t\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\t}\r\n\r\n\t\ty.crossVectors( z, x );\r\n\r\n\r\n\t\tte[0] = x.x; te[4] = y.x; te[8] = z.x;\r\n\t\tte[1] = x.y; te[5] = y.y; te[9] = z.y;\r\n\t\tte[2] = x.z; te[6] = y.z; te[10] = z.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( m, n ) {\r\n\r\n\t\tif ( n !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Matrix4\\'s .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t},\r\n\r\n\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\tvar ae = a.elements;\r\n\t\tvar be = b.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];\r\n\t\tvar a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];\r\n\t\tvar a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];\r\n\t\tvar a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];\r\n\r\n\t\tvar b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];\r\n\t\tvar b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];\r\n\t\tvar b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];\r\n\t\tvar b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];\r\n\r\n\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyToArray: function ( a, b, r ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tthis.multiplyMatrices( a, b );\r\n\r\n\t\tr[ 0 ] = te[0]; r[ 1 ] = te[1]; r[ 2 ] = te[2]; r[ 3 ] = te[3];\r\n\t\tr[ 4 ] = te[4]; r[ 5 ] = te[5]; r[ 6 ] = te[6]; r[ 7 ] = te[7];\r\n\t\tr[ 8 ]  = te[8]; r[ 9 ]  = te[9]; r[ 10 ] = te[10]; r[ 11 ] = te[11];\r\n\t\tr[ 12 ] = te[12]; r[ 13 ] = te[13]; r[ 14 ] = te[14]; r[ 15 ] = te[15];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[0] *= s; te[4] *= s; te[8] *= s; te[12] *= s;\r\n\t\tte[1] *= s; te[5] *= s; te[9] *= s; te[13] *= s;\r\n\t\tte[2] *= s; te[6] *= s; te[10] *= s; te[14] *= s;\r\n\t\tte[3] *= s; te[7] *= s; te[11] *= s; te[15] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'DEPRECATED: Matrix4\\'s .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\r\n\t\treturn vector.applyProjection( this );\r\n\r\n\t},\r\n\r\n\tmultiplyVector4: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'DEPRECATED: Matrix4\\'s .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix4( this );\r\n\r\n\t},\r\n\r\n\tmultiplyVector3Array: function ( a ) {\r\n\r\n\t\tvar tmp = THREE.Matrix4.__v1;\r\n\r\n\t\tfor ( var i = 0, il = a.length; i < il; i += 3 ) {\r\n\r\n\t\t\ttmp.x = a[ i ];\r\n\t\t\ttmp.y = a[ i + 1 ];\r\n\t\t\ttmp.z = a[ i + 2 ];\r\n\r\n\t\t\ttmp.applyProjection( this );\r\n\r\n\t\t\ta[ i ]     = tmp.x;\r\n\t\t\ta[ i + 1 ] = tmp.y;\r\n\t\t\ta[ i + 2 ] = tmp.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\r\n\t},\r\n\r\n\trotateAxis: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar vx = v.x, vy = v.y, vz = v.z;\r\n\r\n\t\tv.x = vx * te[0] + vy * te[4] + vz * te[8];\r\n\t\tv.y = vx * te[1] + vy * te[5] + vz * te[9];\r\n\t\tv.z = vx * te[2] + vy * te[6] + vz * te[10];\r\n\r\n\t\tv.normalize();\r\n\r\n\t\treturn v;\r\n\r\n\t},\r\n\r\n\tcrossVector: function ( a ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar v = new THREE.Vector4();\r\n\r\n\t\tv.x = te[0] * a.x + te[4] * a.y + te[8] * a.z + te[12] * a.w;\r\n\t\tv.y = te[1] * a.x + te[5] * a.y + te[9] * a.z + te[13] * a.w;\r\n\t\tv.z = te[2] * a.x + te[6] * a.y + te[10] * a.z + te[14] * a.w;\r\n\r\n\t\tv.w = ( a.w ) ? te[3] * a.x + te[7] * a.y + te[11] * a.z + te[15] * a.w : 1;\r\n\r\n\t\treturn v;\r\n\r\n\t},\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];\r\n\t\tvar n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];\r\n\t\tvar n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];\r\n\t\tvar n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];\r\n\r\n\t\t//TODO: make this more efficient\r\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\treturn (\r\n\t\t\tn41 * (\r\n\t\t\t\t+n14 * n23 * n32\r\n\t\t\t\t-n13 * n24 * n32\r\n\t\t\t\t-n14 * n22 * n33\r\n\t\t\t\t+n12 * n24 * n33\r\n\t\t\t\t+n13 * n22 * n34\r\n\t\t\t\t-n12 * n23 * n34\r\n\t\t\t) +\r\n\t\t\tn42 * (\r\n\t\t\t\t+n11 * n23 * n34\r\n\t\t\t\t-n11 * n24 * n33\r\n\t\t\t\t+n14 * n21 * n33\r\n\t\t\t\t-n13 * n21 * n34\r\n\t\t\t\t+n13 * n24 * n31\r\n\t\t\t\t-n14 * n23 * n31\r\n\t\t\t) +\r\n\t\t\tn43 * (\r\n\t\t\t\t+n11 * n24 * n32\r\n\t\t\t\t-n11 * n22 * n34\r\n\t\t\t\t-n14 * n21 * n32\r\n\t\t\t\t+n12 * n21 * n34\r\n\t\t\t\t+n14 * n22 * n31\r\n\t\t\t\t-n12 * n24 * n31\r\n\t\t\t) +\r\n\t\t\tn44 * (\r\n\t\t\t\t-n13 * n22 * n31\r\n\t\t\t\t-n11 * n23 * n32\r\n\t\t\t\t+n11 * n22 * n33\r\n\t\t\t\t+n13 * n21 * n32\r\n\t\t\t\t-n12 * n21 * n33\r\n\t\t\t\t+n12 * n23 * n31\r\n\t\t\t)\r\n\r\n\t\t);\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar tmp;\r\n\r\n\t\ttmp = te[1]; te[1] = te[4]; te[4] = tmp;\r\n\t\ttmp = te[2]; te[2] = te[8]; te[8] = tmp;\r\n\t\ttmp = te[6]; te[6] = te[9]; te[9] = tmp;\r\n\r\n\t\ttmp = te[3]; te[3] = te[12]; te[12] = tmp;\r\n\t\ttmp = te[7]; te[7] = te[13]; te[13] = tmp;\r\n\t\ttmp = te[11]; te[11] = te[14]; te[14] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tflattenToArray: function ( flat ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tflat[ 0 ] = te[0]; flat[ 1 ] = te[1]; flat[ 2 ] = te[2]; flat[ 3 ] = te[3];\r\n\t\tflat[ 4 ] = te[4]; flat[ 5 ] = te[5]; flat[ 6 ] = te[6]; flat[ 7 ] = te[7];\r\n\t\tflat[ 8 ] = te[8]; flat[ 9 ] = te[9]; flat[ 10 ] = te[10]; flat[ 11 ] = te[11];\r\n\t\tflat[ 12 ] = te[12]; flat[ 13 ] = te[13]; flat[ 14 ] = te[14]; flat[ 15 ] = te[15];\r\n\r\n\t\treturn flat;\r\n\r\n\t},\r\n\r\n\tflattenToArrayOffset: function( flat, offset ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tflat[ offset ] = te[0];\r\n\t\tflat[ offset + 1 ] = te[1];\r\n\t\tflat[ offset + 2 ] = te[2];\r\n\t\tflat[ offset + 3 ] = te[3];\r\n\r\n\t\tflat[ offset + 4 ] = te[4];\r\n\t\tflat[ offset + 5 ] = te[5];\r\n\t\tflat[ offset + 6 ] = te[6];\r\n\t\tflat[ offset + 7 ] = te[7];\r\n\r\n\t\tflat[ offset + 8 ]  = te[8];\r\n\t\tflat[ offset + 9 ]  = te[9];\r\n\t\tflat[ offset + 10 ] = te[10];\r\n\t\tflat[ offset + 11 ] = te[11];\r\n\r\n\t\tflat[ offset + 12 ] = te[12];\r\n\t\tflat[ offset + 13 ] = te[13];\r\n\t\tflat[ offset + 14 ] = te[14];\r\n\t\tflat[ offset + 15 ] = te[15];\r\n\r\n\t\treturn flat;\r\n\r\n\t},\r\n\r\n\tgetPosition: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\treturn THREE.Matrix4.__v1.set( te[12], te[13], te[14] );\r\n\r\n\t},\r\n\r\n\tsetPosition: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[12] = v.x;\r\n\t\tte[13] = v.y;\r\n\t\tte[14] = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetColumnX: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\treturn THREE.Matrix4.__v1.set( te[0], te[1], te[2] );\r\n\r\n\t},\r\n\r\n\tgetColumnY: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\treturn THREE.Matrix4.__v1.set( te[4], te[5], te[6] );\r\n\r\n\t},\r\n\r\n\tgetColumnZ: function() {\r\n\r\n\t\tvar te = this.elements;\r\n\t\treturn THREE.Matrix4.__v1.set( te[8], te[9], te[10] );\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( m, throwOnInvertible ) {\r\n\r\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tvar n11 = me[0], n12 = me[4], n13 = me[8], n14 = me[12];\r\n\t\tvar n21 = me[1], n22 = me[5], n23 = me[9], n24 = me[13];\r\n\t\tvar n31 = me[2], n32 = me[6], n33 = me[10], n34 = me[14];\r\n\t\tvar n41 = me[3], n42 = me[7], n43 = me[11], n44 = me[15];\r\n\r\n\t\tte[0] = n23*n34*n42 - n24*n33*n42 + n24*n32*n43 - n22*n34*n43 - n23*n32*n44 + n22*n33*n44;\r\n\t\tte[4] = n14*n33*n42 - n13*n34*n42 - n14*n32*n43 + n12*n34*n43 + n13*n32*n44 - n12*n33*n44;\r\n\t\tte[8] = n13*n24*n42 - n14*n23*n42 + n14*n22*n43 - n12*n24*n43 - n13*n22*n44 + n12*n23*n44;\r\n\t\tte[12] = n14*n23*n32 - n13*n24*n32 - n14*n22*n33 + n12*n24*n33 + n13*n22*n34 - n12*n23*n34;\r\n\t\tte[1] = n24*n33*n41 - n23*n34*n41 - n24*n31*n43 + n21*n34*n43 + n23*n31*n44 - n21*n33*n44;\r\n\t\tte[5] = n13*n34*n41 - n14*n33*n41 + n14*n31*n43 - n11*n34*n43 - n13*n31*n44 + n11*n33*n44;\r\n\t\tte[9] = n14*n23*n41 - n13*n24*n41 - n14*n21*n43 + n11*n24*n43 + n13*n21*n44 - n11*n23*n44;\r\n\t\tte[13] = n13*n24*n31 - n14*n23*n31 + n14*n21*n33 - n11*n24*n33 - n13*n21*n34 + n11*n23*n34;\r\n\t\tte[2] = n22*n34*n41 - n24*n32*n41 + n24*n31*n42 - n21*n34*n42 - n22*n31*n44 + n21*n32*n44;\r\n\t\tte[6] = n14*n32*n41 - n12*n34*n41 - n14*n31*n42 + n11*n34*n42 + n12*n31*n44 - n11*n32*n44;\r\n\t\tte[10] = n12*n24*n41 - n14*n22*n41 + n14*n21*n42 - n11*n24*n42 - n12*n21*n44 + n11*n22*n44;\r\n\t\tte[14] = n14*n22*n31 - n12*n24*n31 - n14*n21*n32 + n11*n24*n32 + n12*n21*n34 - n11*n22*n34;\r\n\t\tte[3] = n23*n32*n41 - n22*n33*n41 - n23*n31*n42 + n21*n33*n42 + n22*n31*n43 - n21*n32*n43;\r\n\t\tte[7] = n12*n33*n41 - n13*n32*n41 + n13*n31*n42 - n11*n33*n42 - n12*n31*n43 + n11*n32*n43;\r\n\t\tte[11] = n13*n22*n41 - n12*n23*n41 - n13*n21*n42 + n11*n23*n42 + n12*n21*n43 - n11*n22*n43;\r\n\t\tte[15] = n12*n23*n31 - n13*n22*n31 + n13*n21*n32 - n11*n23*n32 - n12*n21*n33 + n11*n22*n33;\r\n\r\n\t\tvar det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 4 ] + me[ 2 ] * te[ 8 ] + me[ 3 ] * te[ 12 ];\r\n\r\n\t\tif ( det == 0 ) {\r\n\r\n\t\t\tvar msg = \"Matrix4.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnInvertible || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg ); \r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.identity();\r\n\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tthis.multiplyScalar( 1 / det );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcompose: function ( translation, rotation, scale ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar mRotation = THREE.Matrix4.__m1;\r\n\t\tvar mScale = THREE.Matrix4.__m2;\r\n\r\n\t\tmRotation.identity();\r\n\t\tmRotation.setRotationFromQuaternion( rotation );\r\n\r\n\t\tmScale.makeScale( scale.x, scale.y, scale.z );\r\n\r\n\t\tthis.multiplyMatrices( mRotation, mScale );\r\n\r\n\t\tte[12] = translation.x;\r\n\t\tte[13] = translation.y;\r\n\t\tte[14] = translation.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdecompose: function ( translation, rotation, scale ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\t// grab the axis vectors\r\n\t\tvar x = THREE.Matrix4.__v1;\r\n\t\tvar y = THREE.Matrix4.__v2;\r\n\t\tvar z = THREE.Matrix4.__v3;\r\n\r\n\t\tx.set( te[0], te[1], te[2] );\r\n\t\ty.set( te[4], te[5], te[6] );\r\n\t\tz.set( te[8], te[9], te[10] );\r\n\r\n\t\ttranslation = ( translation instanceof THREE.Vector3 ) ? translation : new THREE.Vector3();\r\n\t\trotation = ( rotation instanceof THREE.Quaternion ) ? rotation : new THREE.Quaternion();\r\n\t\tscale = ( scale instanceof THREE.Vector3 ) ? scale : new THREE.Vector3();\r\n\r\n\t\tscale.x = x.length();\r\n\t\tscale.y = y.length();\r\n\t\tscale.z = z.length();\r\n\r\n\t\ttranslation.x = te[12];\r\n\t\ttranslation.y = te[13];\r\n\t\ttranslation.z = te[14];\r\n\r\n\t\t// scale the rotation part\r\n\r\n\t\tvar matrix = THREE.Matrix4.__m1;\r\n\r\n\t\tmatrix.copy( this );\r\n\r\n\t\tmatrix.elements[0] /= scale.x;\r\n\t\tmatrix.elements[1] /= scale.x;\r\n\t\tmatrix.elements[2] /= scale.x;\r\n\r\n\t\tmatrix.elements[4] /= scale.y;\r\n\t\tmatrix.elements[5] /= scale.y;\r\n\t\tmatrix.elements[6] /= scale.y;\r\n\r\n\t\tmatrix.elements[8] /= scale.z;\r\n\t\tmatrix.elements[9] /= scale.z;\r\n\t\tmatrix.elements[10] /= scale.z;\r\n\r\n\t\trotation.setFromRotationMatrix( matrix );\r\n\r\n\t\treturn [ translation, rotation, scale ];\r\n\r\n\t},\r\n\r\n\textractPosition: function ( m ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tte[12] = me[12];\r\n\t\tte[13] = me[13];\r\n\t\tte[14] = me[14];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractRotation: function ( m ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tvar vector = THREE.Matrix4.__v1;\r\n\r\n\t\tvar scaleX = 1 / vector.set( me[0], me[1], me[2] ).length();\r\n\t\tvar scaleY = 1 / vector.set( me[4], me[5], me[6] ).length();\r\n\t\tvar scaleZ = 1 / vector.set( me[8], me[9], me[10] ).length();\r\n\r\n\t\tte[0] = me[0] * scaleX;\r\n\t\tte[1] = me[1] * scaleX;\r\n\t\tte[2] = me[2] * scaleX;\r\n\r\n\t\tte[4] = me[4] * scaleY;\r\n\t\tte[5] = me[5] * scaleY;\r\n\t\tte[6] = me[6] * scaleY;\r\n\r\n\t\tte[8] = me[8] * scaleZ;\r\n\t\tte[9] = me[9] * scaleZ;\r\n\t\tte[10] = me[10] * scaleZ;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t//\r\n\r\n\ttranslate: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[12] = te[0] * x + te[4] * y + te[8] * z + te[12];\r\n\t\tte[13] = te[1] * x + te[5] * y + te[9] * z + te[13];\r\n\t\tte[14] = te[2] * x + te[6] * y + te[10] * z + te[14];\r\n\t\tte[15] = te[3] * x + te[7] * y + te[11] * z + te[15];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateX: function ( angle ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar m12 = te[4];\r\n\t\tvar m22 = te[5];\r\n\t\tvar m32 = te[6];\r\n\t\tvar m42 = te[7];\r\n\t\tvar m13 = te[8];\r\n\t\tvar m23 = te[9];\r\n\t\tvar m33 = te[10];\r\n\t\tvar m43 = te[11];\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\r\n\t\tte[4] = c * m12 + s * m13;\r\n\t\tte[5] = c * m22 + s * m23;\r\n\t\tte[6] = c * m32 + s * m33;\r\n\t\tte[7] = c * m42 + s * m43;\r\n\r\n\t\tte[8] = c * m13 - s * m12;\r\n\t\tte[9] = c * m23 - s * m22;\r\n\t\tte[10] = c * m33 - s * m32;\r\n\t\tte[11] = c * m43 - s * m42;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateY: function ( angle ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar m11 = te[0];\r\n\t\tvar m21 = te[1];\r\n\t\tvar m31 = te[2];\r\n\t\tvar m41 = te[3];\r\n\t\tvar m13 = te[8];\r\n\t\tvar m23 = te[9];\r\n\t\tvar m33 = te[10];\r\n\t\tvar m43 = te[11];\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\r\n\t\tte[0] = c * m11 - s * m13;\r\n\t\tte[1] = c * m21 - s * m23;\r\n\t\tte[2] = c * m31 - s * m33;\r\n\t\tte[3] = c * m41 - s * m43;\r\n\r\n\t\tte[8] = c * m13 + s * m11;\r\n\t\tte[9] = c * m23 + s * m21;\r\n\t\tte[10] = c * m33 + s * m31;\r\n\t\tte[11] = c * m43 + s * m41;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateZ: function ( angle ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar m11 = te[0];\r\n\t\tvar m21 = te[1];\r\n\t\tvar m31 = te[2];\r\n\t\tvar m41 = te[3];\r\n\t\tvar m12 = te[4];\r\n\t\tvar m22 = te[5];\r\n\t\tvar m32 = te[6];\r\n\t\tvar m42 = te[7];\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\r\n\t\tte[0] = c * m11 + s * m12;\r\n\t\tte[1] = c * m21 + s * m22;\r\n\t\tte[2] = c * m31 + s * m32;\r\n\t\tte[3] = c * m41 + s * m42;\r\n\r\n\t\tte[4] = c * m12 - s * m11;\r\n\t\tte[5] = c * m22 - s * m21;\r\n\t\tte[6] = c * m32 - s * m31;\r\n\t\tte[7] = c * m42 - s * m41;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateByAxis: function ( axis, angle ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\t// optimize by checking axis\r\n\r\n\t\tif ( axis.x === 1 && axis.y === 0 && axis.z === 0 ) {\r\n\r\n\t\t\treturn this.rotateX( angle );\r\n\r\n\t\t} else if ( axis.x === 0 && axis.y === 1 && axis.z === 0 ) {\r\n\r\n\t\t\treturn this.rotateY( angle );\r\n\r\n\t\t} else if ( axis.x === 0 && axis.y === 0 && axis.z === 1 ) {\r\n\r\n\t\t\treturn this.rotateZ( angle );\r\n\r\n\t\t}\r\n\r\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\tvar n = Math.sqrt(x * x + y * y + z * z);\r\n\r\n\t\tx /= n;\r\n\t\ty /= n;\r\n\t\tz /= n;\r\n\r\n\t\tvar xx = x * x, yy = y * y, zz = z * z;\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\t\tvar oneMinusCosine = 1 - c;\r\n\t\tvar xy = x * y * oneMinusCosine;\r\n\t\tvar xz = x * z * oneMinusCosine;\r\n\t\tvar yz = y * z * oneMinusCosine;\r\n\t\tvar xs = x * s;\r\n\t\tvar ys = y * s;\r\n\t\tvar zs = z * s;\r\n\r\n\t\tvar r11 = xx + (1 - xx) * c;\r\n\t\tvar r21 = xy + zs;\r\n\t\tvar r31 = xz - ys;\r\n\t\tvar r12 = xy - zs;\r\n\t\tvar r22 = yy + (1 - yy) * c;\r\n\t\tvar r32 = yz + xs;\r\n\t\tvar r13 = xz + ys;\r\n\t\tvar r23 = yz - xs;\r\n\t\tvar r33 = zz + (1 - zz) * c;\r\n\r\n\t\tvar m11 = te[0], m21 = te[1], m31 = te[2], m41 = te[3];\r\n\t\tvar m12 = te[4], m22 = te[5], m32 = te[6], m42 = te[7];\r\n\t\tvar m13 = te[8], m23 = te[9], m33 = te[10], m43 = te[11];\r\n\t\tvar m14 = te[12], m24 = te[13], m34 = te[14], m44 = te[15];\r\n\r\n\t\tte[0] = r11 * m11 + r21 * m12 + r31 * m13;\r\n\t\tte[1] = r11 * m21 + r21 * m22 + r31 * m23;\r\n\t\tte[2] = r11 * m31 + r21 * m32 + r31 * m33;\r\n\t\tte[3] = r11 * m41 + r21 * m42 + r31 * m43;\r\n\r\n\t\tte[4] = r12 * m11 + r22 * m12 + r32 * m13;\r\n\t\tte[5] = r12 * m21 + r22 * m22 + r32 * m23;\r\n\t\tte[6] = r12 * m31 + r22 * m32 + r32 * m33;\r\n\t\tte[7] = r12 * m41 + r22 * m42 + r32 * m43;\r\n\r\n\t\tte[8] = r13 * m11 + r23 * m12 + r33 * m13;\r\n\t\tte[9] = r13 * m21 + r23 * m22 + r33 * m23;\r\n\t\tte[10] = r13 * m31 + r23 * m32 + r33 * m33;\r\n\t\tte[11] = r13 * m41 + r23 * m42 + r33 * m43;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tscale: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[0] *= x; te[4] *= y; te[8] *= z;\r\n\t\tte[1] *= x; te[5] *= y; te[9] *= z;\r\n\t\tte[2] *= x; te[6] *= y; te[10] *= z;\r\n\t\tte[3] *= x; te[7] *= y; te[11] *= z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\r\n\t\tvar scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\r\n\t\tvar scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\r\n\r\n\t\treturn Math.sqrt( Math.max( scaleXSq, Math.max( scaleYSq, scaleZSq ) ) );\r\n\r\n\t},\r\n\r\n\t//\r\n\r\n\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, x,\r\n\t\t\t0, 1, 0, y,\r\n\t\t\t0, 0, 1, z,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationX: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0,  0, 0,\r\n\t\t\t0, c, -s, 0,\r\n\t\t\t0, s,  c, 0,\r\n\t\t\t0, 0,  0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationY: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t c, 0, s, 0,\r\n\t\t\t 0, 1, 0, 0,\r\n\t\t\t-s, 0, c, 0,\r\n\t\t\t 0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, -s, 0, 0,\r\n\t\t\ts,  c, 0, 0,\r\n\t\t\t0,  0, 1, 0,\r\n\t\t\t0,  0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\t\tvar t = 1 - c;\r\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\t return this;\r\n\r\n\t},\r\n\r\n\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0, 0,\r\n\t\t\t0, y, 0, 0,\r\n\t\t\t0, 0, z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = 2 * near / ( right - left );\r\n\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\tvar a = ( right + left ) / ( right - left );\r\n\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\tte[0] = x;\tte[4] = 0;\tte[8] = a;\tte[12] = 0;\r\n\t\tte[1] = 0;\tte[5] = y;\tte[9] = b;\tte[13] = 0;\r\n\t\tte[2] = 0;\tte[6] = 0;\tte[10] = c;\tte[14] = d;\r\n\t\tte[3] = 0;\tte[7] = 0;\tte[11] = - 1;\tte[15] = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakePerspective: function ( fov, aspect, near, far ) {\r\n\r\n\t\tvar ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );\r\n\t\tvar ymin = - ymax;\r\n\t\tvar xmin = ymin * aspect;\r\n\t\tvar xmax = ymax * aspect;\r\n\r\n\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\r\n\r\n\t},\r\n\r\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar w = right - left;\r\n\t\tvar h = top - bottom;\r\n\t\tvar p = far - near;\r\n\r\n\t\tvar x = ( right + left ) / w;\r\n\t\tvar y = ( top + bottom ) / h;\r\n\t\tvar z = ( far + near ) / p;\r\n\r\n\t\tte[0] = 2 / w;\tte[4] = 0;\tte[8] = 0;\tte[12] = -x;\r\n\t\tte[1] = 0;\tte[5] = 2 / h;\tte[9] = 0;\tte[13] = -y;\r\n\t\tte[2] = 0;\tte[6] = 0;\tte[10] = -2/p;\tte[14] = -z;\r\n\t\tte[3] = 0;\tte[7] = 0;\tte[11] = 0;\tte[15] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\treturn new THREE.Matrix4(\r\n\r\n\t\t\tte[0], te[4], te[8], te[12],\r\n\t\t\tte[1], te[5], te[9], te[13],\r\n\t\t\tte[2], te[6], te[10], te[14],\r\n\t\t\tte[3], te[7], te[11], te[15]\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix4.__v1 = new THREE.Vector3();\r\nTHREE.Matrix4.__v2 = new THREE.Vector3();\r\nTHREE.Matrix4.__v3 = new THREE.Vector3();\r\n\r\nTHREE.Matrix4.__m1 = new THREE.Matrix4();\r\nTHREE.Matrix4.__m2 = new THREE.Matrix4();\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Ray = function ( origin, direction ) {\r\n\r\n\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\r\n\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Ray.prototype = {\r\n\r\n\tconstructor: THREE.Ray,\r\n\r\n\tset: function ( origin, direction ) {\r\n\r\n\t\tthis.origin.copy( origin );\r\n\t\tthis.direction.copy( direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( ray ) {\r\n\r\n\t\tthis.origin.copy( ray.origin );\r\n\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tat: function( t, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\r\n\t},\r\n\r\n\trecast: function ( t ) {\r\n\r\n\t\tthis.origin.copy( this.at( t, THREE.Ray.__v1 ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclosestPointToPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\tresult.subVectors( point, this.origin );\r\n\t\tvar directionDistance = result.dot( this.direction );\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\tvar directionDistance = THREE.Ray.__v1.subVectors( point, this.origin ).dot( this.direction );\r\n\t\tTHREE.Ray.__v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\treturn THREE.Ray.__v1.distanceTo( point );\r\n\r\n\t},\r\n\r\n\tisIntersectionSphere: function( sphere ) {\r\n\r\n\t\treturn ( this.distanceToPoint( sphere.center ) <= sphere.radius );\r\n\r\n\t},\r\n\r\n\tisIntersectionPlane: function ( plane ) {\r\n\r\n\t\t// check if the line and plane are non-perpendicular, if they\r\n\t\t// eventually they will intersect.\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\t\tif ( denominator != 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// line is coplanar, return origin\r\n\t\tif( plane.distanceToPoint( this.origin ) == 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tdistanceToPlane: function ( plane ) {\r\n\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\t\tif ( denominator == 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif( plane.distanceToPoint( this.origin ) == 0 ) {\r\n\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\treturn t;\r\n\r\n\t},\r\n\r\n\tintersectPlane: function ( plane, optionalTarget ) {\r\n\r\n\t\tvar t = this.distanceToPlane( plane );\r\n\r\n\t\tif( t === undefined ) {\r\n\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn this.at( t, optionalTarget );\r\n\r\n\t},\r\n\r\n\ttransform: function ( matrix4 ) {\r\n\r\n\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\r\n\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\tthis.direction.sub( this.origin );\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tequals: function ( ray ) {\r\n\r\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Ray().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Ray.__v1 = new THREE.Vector3();\r\nTHREE.Ray.__v2 = new THREE.Vector3();\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Sphere = function ( center, radius ) {\r\n\r\n\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\r\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\r\n};\r\n\r\nTHREE.Sphere.prototype = {\r\n\r\n\tconstructor: THREE.Sphere,\r\n\r\n\tset: function ( center, radius ) {\r\n\r\n\t\tthis.center.copy( center );\r\n\t\tthis.radius = radius;\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tsetFromCenterAndPoints: function ( center, points ) {\r\n\r\n\t\tvar maxRadiusSq = 0;\r\n\r\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar radiusSq = center.distanceToSquared( points[ i ] );\r\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, radiusSq );\r\n\r\n\t\t}\r\n\r\n\t\tthis.center = center;\r\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( sphere ) {\r\n\r\n\t\tthis.center.copy( sphere.center );\r\n\t\tthis.radius = sphere.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\treturn ( this.radius <= 0 );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar radiusSum = this.radius + sphere.radius;\r\n\r\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\tresult.copy( point );\r\n\r\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\tresult.sub( this.center ).normalize();\r\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\tgetBoundingBox: function ( optionalTarget ) {\r\n\r\n\t\tvar box = optionalTarget || new THREE.Box3();\r\n\r\n\t\tbox.set( this.center, this.center );\r\n\t\tbox.expandByScalar( this.radius );\r\n\r\n\t\treturn box;\r\n\r\n\t},\r\n\r\n\ttransform: function ( matrix ) {\r\n\r\n\t\tthis.center.applyMatrix4( matrix );\r\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.center.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( sphere ) {\r\n\r\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Sphere().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\tthis.planes = [\r\n\r\n\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\r\n\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\r\n\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\r\n\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\r\n\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\r\n\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\r\n\r\n\t];\r\n\r\n};\r\n\r\nTHREE.Frustum.prototype = {\r\n\r\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tplanes[0].copy( p0 );\r\n\t\tplanes[1].copy( p1 );\r\n\t\tplanes[2].copy( p2 );\r\n\t\tplanes[3].copy( p3 );\r\n\t\tplanes[4].copy( p4 );\r\n\t\tplanes[5].copy( p5 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( frustum ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tplanes[i].copy( frustum.planes[i] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrix: function ( m ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar me = m.elements;\r\n\t\tvar me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];\r\n\t\tvar me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];\r\n\t\tvar me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];\r\n\t\tvar me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];\r\n\r\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tintersectsObject: function ( object ) {\r\n\r\n\t\t// this method is expanded inlined for performance reasons.\r\n\t\tvar matrix = object.matrixWorld;\r\n\t\tvar planes = this.planes;\r\n\t\tvar center = matrix.getPosition();\r\n\t\tvar negRadius = - object.geometry.boundingSphere.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\tif( distance < negRadius ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar center = sphere.center;\r\n\t\tvar negRadius = -sphere.radius;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\tif( distance < negRadius ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tif( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Frustum().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Plane = function ( normal, constant ) {\r\n\r\n\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\r\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\r\n};\r\n\r\nTHREE.Plane.prototype = {\r\n\r\n\tconstructor: THREE.Plane,\r\n\r\n\tset: function ( normal, constant ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponents: function ( x, y, z, w ) {\r\n\r\n\t\tthis.normal.set( x, y, z );\r\n\t\tthis.constant = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCoplanarPoints: function ( a, b, c ) {\r\n\r\n\t\tvar normal = THREE.Plane.__v1.subVectors( c, b ).cross( THREE.Plane.__v2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( plane ) {\r\n\r\n\t\tthis.normal.copy( plane.normal );\r\n\t\tthis.constant = plane.constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.constant *= -1;\r\n\t\tthis.normal.negate();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t},\r\n\r\n\tdistanceToSphere: function ( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t},\r\n\r\n\tprojectPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\r\n\r\n\t},\r\n\r\n\torthoPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\r\n\r\n\t},\r\n\r\n\tisIntersectionLine: function ( startPoint, endPoint ) {\r\n\r\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\tvar startSign = this.distanceToPoint( startPoint );\r\n\t\tvar endSign = this.distanceToPoint( endPoint );\r\n\r\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t},\r\n\r\n\tintersectLine: function ( startPoint, endPoint, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tvar direction = THREE.Plane.__v1.subVectors( endPoint, startPoint );\r\n\r\n\t\tvar denominator = this.normal.dot( direction );\r\n\r\n\t\tif ( denominator == 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif( this.distanceToPoint( startPoint ) == 0 ) {\r\n\r\n\t\t\t\treturn result.copy( startPoint );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t\tvar t = - ( startPoint.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\tif( t < 0 || t > 1 ) {\r\n\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t\treturn result.copy( direction ).multiplyScalar( t ).add( startPoint );\r\n\r\n\t},\r\n\r\n\tcoplanarPoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t},\r\n\r\n\ttransform: function ( matrix, optionalNormalMatrix ) {\r\n\r\n\t\t// compute new normal based on theory here:\r\n\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\r\n\t\toptionalNormalMatrix = optionalNormalMatrix || new THREE.Matrix3().getInverse( matrix ).transpose();\r\n\t\tvar newNormal = THREE.Plane.__v1.copy( this.normal ).applyMatrix3( optionalNormalMatrix );\r\n\r\n\t\tvar newCoplanarPoint = this.coplanarPoint( THREE.Plane.__v2 );\r\n\t\tnewCoplanarPoint.applyMatrix4( matrix );\r\n\r\n\t\tthis.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.constant = this.constant - offset.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( plane ) {\r\n\r\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant == this.constant );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Plane().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Plane.__vZero = new THREE.Vector3( 0, 0, 0 );\r\nTHREE.Plane.__v1 = new THREE.Vector3();\r\nTHREE.Plane.__v2 = new THREE.Vector3();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Math = {\r\n\r\n\t// Clamp value to range <a, b>\r\n\r\n\tclamp: function ( x, a, b ) {\r\n\r\n\t\treturn ( x < a ) ? a : ( ( x > b ) ? b : x );\r\n\r\n\t},\r\n\r\n\t// Clamp value to range <a, inf)\r\n\r\n\tclampBottom: function ( x, a ) {\r\n\r\n\t\treturn x < a ? a : x;\r\n\r\n\t},\r\n\r\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t},\r\n\r\n\t// Random float from <0, 1> with 16 bits of randomness\r\n\t// (standard Math.random() creates repetitive patterns when applied over larger space)\r\n\r\n\trandom16: function () {\r\n\r\n\t\treturn ( 65280 * Math.random() + 255 * Math.random() ) / 65535;\r\n\r\n\t},\r\n\r\n\t// Random integer from <low, high> interval\r\n\r\n\trandInt: function ( low, high ) {\r\n\r\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t},\r\n\r\n\t// Random float from <low, high> interval\r\n\r\n\trandFloat: function ( low, high ) {\r\n\r\n\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t},\r\n\r\n\t// Random float from <-range/2, range/2> interval\r\n\r\n\trandFloatSpread: function ( range ) {\r\n\r\n\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t},\r\n\r\n\tsign: function ( x ) {\r\n\r\n\t\treturn ( x < 0 ) ? -1 : ( ( x > 0 ) ? 1 : 0 );\r\n\r\n\t},\r\n\r\n\tdegToRad: function ( degrees ) {\r\n\r\n\t\treturn degrees * THREE.Math.__d2r;\r\n\r\n\t},\r\n\r\n\tradToDeg: function ( radians ) {\r\n\r\n\t\treturn radians * THREE.Math.__r2d;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Math.__d2r =  Math.PI / 180;\r\nTHREE.Math.__r2d =  180 / Math.PI;\r\n/**\r\n * Spline from Tween.js, slightly optimized (and trashed)\r\n * http://sole.github.com/tween.js/examples/05_spline.html\r\n *\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Spline = function ( points ) {\r\n\r\n\tthis.points = points;\r\n\r\n\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\r\n\tpoint, intPoint, weight, w2, w3,\r\n\tpa, pb, pc, pd;\r\n\r\n\tthis.initFromArray = function( a ) {\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0; i < a.length; i++ ) {\r\n\r\n\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getPoint = function ( k ) {\r\n\r\n\t\tpoint = ( this.points.length - 1 ) * k;\r\n\t\tintPoint = Math.floor( point );\r\n\t\tweight = point - intPoint;\r\n\r\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\r\n\t\tc[ 1 ] = intPoint;\r\n\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\r\n\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\r\n\r\n\t\tpa = this.points[ c[ 0 ] ];\r\n\t\tpb = this.points[ c[ 1 ] ];\r\n\t\tpc = this.points[ c[ 2 ] ];\r\n\t\tpd = this.points[ c[ 3 ] ];\r\n\r\n\t\tw2 = weight * weight;\r\n\t\tw3 = weight * w2;\r\n\r\n\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\r\n\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\r\n\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\r\n\r\n\t\treturn v3;\r\n\r\n\t};\r\n\r\n\tthis.getControlPointsArray = function () {\r\n\r\n\t\tvar i, p, l = this.points.length,\r\n\t\t\tcoords = [];\r\n\r\n\t\tfor ( i = 0; i < l; i ++ ) {\r\n\r\n\t\t\tp = this.points[ i ];\r\n\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\r\n\r\n\t\t}\r\n\r\n\t\treturn coords;\r\n\r\n\t};\r\n\r\n\t// approximate length by summing linear segments\r\n\r\n\tthis.getLength = function ( nSubDivisions ) {\r\n\r\n\t\tvar i, index, nSamples, position,\r\n\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\r\n\t\t\toldPosition = new THREE.Vector3(),\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tchunkLengths = [],\r\n\t\t\ttotalLength = 0;\r\n\r\n\t\t// first point has 0 length\r\n\r\n\t\tchunkLengths[ 0 ] = 0;\r\n\r\n\t\tif ( !nSubDivisions ) nSubDivisions = 100;\r\n\r\n\t\tnSamples = this.points.length * nSubDivisions;\r\n\r\n\t\toldPosition.copy( this.points[ 0 ] );\r\n\r\n\t\tfor ( i = 1; i < nSamples; i ++ ) {\r\n\r\n\t\t\tindex = i / nSamples;\r\n\r\n\t\t\tposition = this.getPoint( index );\r\n\t\t\ttmpVec.copy( position );\r\n\r\n\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\r\n\r\n\t\t\toldPosition.copy( position );\r\n\r\n\t\t\tpoint = ( this.points.length - 1 ) * index;\r\n\t\t\tintPoint = Math.floor( point );\r\n\r\n\t\t\tif ( intPoint != oldIntPoint ) {\r\n\r\n\t\t\t\tchunkLengths[ intPoint ] = totalLength;\r\n\t\t\t\toldIntPoint = intPoint;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// last point ends with total length\r\n\r\n\t\tchunkLengths[ chunkLengths.length ] = totalLength;\r\n\r\n\t\treturn { chunks: chunkLengths, total: totalLength };\r\n\r\n\t};\r\n\r\n\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\r\n\r\n\t\tvar i, j,\r\n\t\t\tindex, indexCurrent, indexNext,\r\n\t\t\tlinearDistance, realDistance,\r\n\t\t\tsampling, position,\r\n\t\t\tnewpoints = [],\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tsl = this.getLength();\r\n\r\n\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\r\n\r\n\t\tfor ( i = 1; i < this.points.length; i++ ) {\r\n\r\n\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\r\n\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\r\n\r\n\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\r\n\r\n\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\r\n\r\n\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\r\n\t\t\tindexNext = i / ( this.points.length - 1 );\r\n\r\n\t\t\tfor ( j = 1; j < sampling - 1; j++ ) {\r\n\r\n\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\r\n\r\n\t\t\t\tposition = this.getPoint( index );\r\n\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.points = newpoints;\r\n\r\n\t};\r\n\r\n\t// Catmull-Rom\r\n\r\n\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\r\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\r\n\r\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Triangle = function ( a, b, c ) {\r\n\r\n\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\r\n\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\r\n\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Triangle.normal = function( a, b, c, optionalTarget ) {\r\n\r\n\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\tresult.subVectors( c, b );\r\n\tTHREE.Triangle.__v0.subVectors( a, b );\r\n\tresult.cross( THREE.Triangle.__v0 );\r\n\r\n\tvar resultLengthSq = result.lengthSq();\r\n\tif( resultLengthSq > 0 ) {\r\n\r\n\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\r\n\r\n\t}\r\n\r\n\treturn result.set( 0, 0, 0 );\r\n\r\n};\r\n\r\n// static/instance method to calculate barycoordinates\r\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\nTHREE.Triangle.barycoordFromPoint = function ( point, a, b, c, optionalTarget ) {\r\n\r\n\tTHREE.Triangle.__v0.subVectors( c, a );\r\n\tTHREE.Triangle.__v1.subVectors( b, a );\r\n\tTHREE.Triangle.__v2.subVectors( point, a );\r\n\r\n\tvar dot00 = THREE.Triangle.__v0.dot( THREE.Triangle.__v0 );\r\n\tvar dot01 = THREE.Triangle.__v0.dot( THREE.Triangle.__v1 );\r\n\tvar dot02 = THREE.Triangle.__v0.dot( THREE.Triangle.__v2 );\r\n\tvar dot11 = THREE.Triangle.__v1.dot( THREE.Triangle.__v1 );\r\n\tvar dot12 = THREE.Triangle.__v1.dot( THREE.Triangle.__v2 );\r\n\r\n\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t// colinear or singular triangle\r\n\tif( denom == 0 ) {\r\n\t\t// arbitrary location outside of triangle?\r\n\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\treturn result.set( -2, -1, -1 );\r\n\t}\r\n\r\n\tvar invDenom = 1 / denom;\r\n\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t// barycoordinates must always sum to 1\r\n\treturn result.set( 1 - u - v, v, u );\r\n\r\n};\r\n\r\nTHREE.Triangle.containsPoint = function ( point, a, b, c ) {\r\n\r\n\t// NOTE: need to use __v3 here because __v0, __v1 and __v2 are used in barycoordFromPoint.\r\n\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, THREE.Triangle.__v3 );\r\n\r\n\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\r\n\r\n};\r\n\r\nTHREE.Triangle.prototype = {\r\n\r\n\tconstructor: THREE.Triangle,\r\n\r\n\tset: function ( a, b, c ) {\r\n\r\n\t\tthis.a.copy( a );\r\n\t\tthis.b.copy( b );\r\n\t\tthis.c.copy( c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.copy( points[i0] );\r\n\t\tthis.b.copy( points[i1] );\r\n\t\tthis.c.copy( points[i2] );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( triangle ) {\r\n\r\n\t\tthis.a.copy( triangle.a );\r\n\t\tthis.b.copy( triangle.b );\r\n\t\tthis.c.copy( triangle.c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tarea: function () {\r\n\r\n\t\tTHREE.Triangle.__v0.subVectors( this.c, this.b );\r\n\t\tTHREE.Triangle.__v1.subVectors( this.a, this.b );\r\n\r\n\t\treturn THREE.Triangle.__v0.cross( THREE.Triangle.__v1 ).length() * 0.5;\r\n\r\n\t},\r\n\r\n\tmidpoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t},\r\n\r\n\tnormal: function ( optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tplane: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Plane();\r\n\r\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tequals: function ( triangle ) {\r\n\r\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Triangle().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Triangle.__v0 = new THREE.Vector3();\r\nTHREE.Triangle.__v1 = new THREE.Vector3();\r\nTHREE.Triangle.__v2 = new THREE.Vector3();\r\nTHREE.Triangle.__v3 = new THREE.Vector3();\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Vertex = function ( v ) {\r\n\r\n\tconsole.warn( 'THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.')\r\n\treturn v;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.UV = function ( u, v ) {\r\n\r\n\tconsole.warn( 'THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.')\r\n\treturn new THREE.Vector2( u, v );\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Clock = function ( autoStart ) {\r\n\r\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\r\n\r\n\tthis.startTime = 0;\r\n\tthis.oldTime = 0;\r\n\tthis.elapsedTime = 0;\r\n\r\n\tthis.running = false;\r\n\r\n};\r\n\r\nTHREE.Clock.prototype.start = function () {\r\n\r\n\tthis.startTime = Date.now();\r\n\tthis.oldTime = this.startTime;\r\n\r\n\tthis.running = true;\r\n\r\n};\r\n\r\nTHREE.Clock.prototype.stop = function () {\r\n\r\n\tthis.getElapsedTime();\r\n\r\n\tthis.running = false;\r\n\r\n};\r\n\r\nTHREE.Clock.prototype.getElapsedTime = function () {\r\n\r\n\tthis.getDelta();\r\n\r\n\treturn this.elapsedTime;\r\n\r\n};\r\n\r\n\r\nTHREE.Clock.prototype.getDelta = function () {\r\n\r\n\tvar diff = 0;\r\n\r\n\tif ( this.autoStart && ! this.running ) {\r\n\r\n\t\tthis.start();\r\n\r\n\t}\r\n\r\n\tif ( this.running ) {\r\n\r\n\t\tvar newTime = Date.now();\r\n\t\tdiff = 0.001 * ( newTime - this.oldTime );\r\n\t\tthis.oldTime = newTime;\r\n\r\n\t\tthis.elapsedTime += diff;\r\n\r\n\t}\r\n\r\n\treturn diff;\r\n\r\n};/**\r\n * https://github.com/mrdoob/eventdispatcher.js/\r\n */\r\n\r\nTHREE.EventDispatcher = function () {\r\n\r\n\tvar listeners = {};\r\n\r\n\tthis.addEventListener = function ( type, listener ) {\r\n\r\n\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.removeEventListener = function ( type, listener ) {\r\n\r\n\t\tvar index = listeners[ type ].indexOf( listener );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].splice( index, 1 );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.dispatchEvent = function ( event ) {\r\n\r\n\t\tvar listenerArray = listeners[ event.type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tevent.target = this;\r\n\r\n\t\t\tfor ( var i = 0, l = listenerArray.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tlistenerArray[ i ].call( this, event );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author bhouston / http://exocortex.com/\r\n */\r\n\r\n( function ( THREE ) {\r\n\r\n\tTHREE.Raycaster = function ( origin, direction, near, far ) {\r\n\r\n\t\tthis.ray = new THREE.Ray( origin, direction );\r\n\t\t\r\n\t\t// normalized ray.direction required for accurate distance calculations\r\n\t\tif( this.ray.direction.length() > 0 ) {\r\n\r\n\t\t\tthis.ray.direction.normalize();\r\n\r\n\t\t}\r\n\r\n\t\tthis.near = near || 0;\r\n\t\tthis.far = far || Infinity;\r\n\r\n\t};\r\n\r\n\tvar sphere = new THREE.Sphere();\r\n\tvar localRay = new THREE.Ray();\r\n\tvar facePlane = new THREE.Plane();\r\n\tvar intersectPoint = new THREE.Vector3();\r\n\r\n\tvar inverseMatrix = new THREE.Matrix4();\r\n\r\n\tvar descSort = function ( a, b ) {\r\n\r\n\t\treturn a.distance - b.distance;\r\n\r\n\t};\r\n\r\n\tvar intersectObject = function ( object, raycaster, intersects ) {\r\n\r\n\t\tif ( object instanceof THREE.Particle ) {\r\n\r\n\t\t\tvar distance = raycaster.ray.distanceToPoint( object.matrixWorld.getPosition() );\r\n\r\n\t\t\tif ( distance > object.scale.x ) {\r\n\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersects.push( {\r\n\r\n\t\t\t\tdistance: distance,\r\n\t\t\t\tpoint: object.position,\r\n\t\t\t\tface: null,\r\n\t\t\t\tobject: object\r\n\r\n\t\t\t} );\r\n\r\n\t\t} else if ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\t\t\tsphere.set(\r\n\t\t\t\tobject.matrixWorld.getPosition(),\r\n\t\t\t\tobject.geometry.boundingSphere.radius* object.matrixWorld.getMaxScaleOnAxis() );\r\n\r\n\t\t\tif ( ! raycaster.ray.isIntersectionSphere( sphere ) ) {\r\n\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Checking faces\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\tvar isFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;\r\n\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material.materials : null;\r\n\r\n\t\t\tvar side = object.material.side;\r\n\r\n\t\t\tvar a, b, c, d;\r\n\t\t\tvar precision = raycaster.precision;\r\n\r\n\t\t\tobject.matrixRotationWorld.extractRotation( object.matrixWorld );\r\n\r\n\t\t\tinverseMatrix.getInverse( object.matrixWorld );\r\n\r\n\t\t\tlocalRay.copy( raycaster.ray ).transform( inverseMatrix );\r\n\t\r\n\t\t\tfor ( var f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tvar face = geometry.faces[ f ];\r\n\r\n\t\t\t\tvar material = isFaceMaterial === true ? objectMaterials[ face.materialIndex ] : object.material;\r\n\r\n\t\t\t\tif ( material === undefined ) continue;\r\n\t\t\t\t\r\n\t\t\t\tfacePlane.setFromNormalAndCoplanarPoint( face.normal, vertices[face.a] );\r\n\r\n\t\t\t\tvar planeDistance = localRay.distanceToPlane( facePlane );\r\n\t\r\n\t\t\t\t// bail if raycaster and plane are parallel\r\n\t\t\t\tif ( Math.abs( planeDistance ) < precision ) continue;\r\n\t\r\n\t\t\t\t// if negative distance, then plane is behind raycaster\r\n\t\t\t\tif ( planeDistance < 0 ) continue;\r\n\r\n\t\t\t\t// check if we hit the wrong side of a single sided face\r\n\t\t\t\tside = material.side;\r\n\t\t\t\tif( side !== THREE.DoubleSide ) {\r\n\r\n\t\t\t\t\tvar planeSign = localRay.direction.dot( facePlane.normal );\r\n\r\n\t\t\t\t\tif( ! ( side === THREE.FrontSide ? planeSign < 0 : planeSign > 0 ) ) continue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// this can be done using the planeDistance from localRay because localRay wasn't normalized, but ray was\r\n\t\t\t\tif ( planeDistance < raycaster.near || planeDistance > raycaster.far ) continue;\r\n\t\t\t\t\r\n\t\t\t\tintersectPoint = localRay.at( planeDistance, intersectPoint ); // passing in intersectPoint avoids a copy\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\ta = vertices[ face.a ];\r\n\t\t\t\t\tb = vertices[ face.b ];\r\n\t\t\t\t\tc = vertices[ face.c ];\r\n\r\n\t\t\t\t\tif ( ! THREE.Triangle.containsPoint( intersectPoint, a, b, c ) ) continue;\r\n\r\n\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\ta = vertices[ face.a ];\r\n\t\t\t\t\tb = vertices[ face.b ];\r\n\t\t\t\t\tc = vertices[ face.c ];\r\n\t\t\t\t\td = vertices[ face.d ];\r\n\r\n\t\t\t\t\tif ( ( ! THREE.Triangle.containsPoint( intersectPoint, a, b, d ) ) &&\r\n\t\t\t\t\t\t ( ! THREE.Triangle.containsPoint( intersectPoint, b, c, d ) ) ) continue;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// This is added because if we call out of this if/else group when none of the cases\r\n\t\t\t\t\t//    match it will add a point to the intersection list erroneously.\r\n\t\t\t\t\tthrow Error( \"face type not supported\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\tdistance: planeDistance,\t// this works because the original ray was normalized, and the transformed localRay wasn't\r\n\t\t\t\t\tpoint: raycaster.ray.at( planeDistance ),\r\n\t\t\t\t\tface: face,\r\n\t\t\t\t\tfaceIndex: f,\r\n\t\t\t\t\tobject: object\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar intersectDescendants = function ( object, raycaster, intersects ) {\r\n\r\n\t\tvar descendants = object.getDescendants();\r\n\r\n\t\tfor ( var i = 0, l = descendants.length; i < l; i ++ ) {\r\n\r\n\t\t\tintersectObject( descendants[ i ], raycaster, intersects );\r\n\r\n\t\t}\r\n\t};\r\n\r\n\t//\r\n\r\n\tTHREE.Raycaster.prototype.precision = 0.0001;\r\n\r\n\tTHREE.Raycaster.prototype.set = function ( origin, direction ) {\r\n\r\n\t\tthis.ray.set( origin, direction );\r\n\r\n\t\t// normalized ray.direction required for accurate distance calculations\r\n\t\tif( this.ray.direction.length() > 0 ) {\r\n\r\n\t\t\tthis.ray.direction.normalize();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tTHREE.Raycaster.prototype.intersectObject = function ( object, recursive ) {\r\n\r\n\t\tvar intersects = [];\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tintersectDescendants( object, this, intersects );\r\n\r\n\t\t}\r\n\r\n\t\tintersectObject( object, this, intersects );\r\n\r\n\t\tintersects.sort( descSort );\r\n\r\n\t\treturn intersects;\r\n\r\n\t};\r\n\r\n\tTHREE.Raycaster.prototype.intersectObjects = function ( objects, recursive ) {\r\n\r\n\t\tvar intersects = [];\r\n\r\n\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\t\tintersectObject( objects[ i ], this, intersects );\r\n\r\n\t\t\tif ( recursive === true ) {\r\n\r\n\t\t\t\tintersectDescendants( objects[ i ], this, intersects );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tintersects.sort( descSort );\r\n\r\n\t\treturn intersects;\r\n\r\n\t};\r\n\r\n}( THREE ) );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Object3D = function () {\r\n\r\n\tthis.id = THREE.Object3DIdCount ++;\r\n\r\n\tthis.name = '';\r\n\tthis.properties = {};\r\n\r\n\tthis.parent = undefined;\r\n\tthis.children = [];\r\n\r\n\tthis.up = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\tthis.position = new THREE.Vector3();\r\n\tthis.rotation = new THREE.Vector3();\r\n\tthis.eulerOrder = THREE.Object3D.defaultEulerOrder;\r\n\tthis.scale = new THREE.Vector3( 1, 1, 1 );\r\n\r\n\tthis.renderDepth = null;\r\n\r\n\tthis.rotationAutoUpdate = true;\r\n\r\n\tthis.matrix = new THREE.Matrix4();\r\n\tthis.matrixWorld = new THREE.Matrix4();\r\n\tthis.matrixRotationWorld = new THREE.Matrix4();\r\n\r\n\tthis.matrixAutoUpdate = true;\r\n\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\tthis.quaternion = new THREE.Quaternion();\r\n\tthis.useQuaternion = false;\r\n\r\n\tthis.visible = true;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.receiveShadow = false;\r\n\r\n\tthis.frustumCulled = true;\r\n\r\n\tthis._vector = new THREE.Vector3();\r\n\r\n};\r\n\r\n\r\nTHREE.Object3D.prototype = {\r\n\r\n\tconstructor: THREE.Object3D,\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\r\n\r\n\t\tthis.scale.getScaleFromMatrix( this.matrix );\r\n\r\n\t\tvar mat = new THREE.Matrix4().extractRotation( this.matrix );\r\n\t\tthis.rotation.setEulerFromRotationMatrix( mat, this.eulerOrder );\r\n\r\n\t\tthis.position.getPositionFromMatrix( this.matrix );\r\n\r\n\t},\r\n\r\n\ttranslate: function ( distance, axis ) {\r\n\r\n\t\tthis.matrix.rotateAxis( axis );\r\n\t\tthis.position.add( axis.multiplyScalar( distance ) );\r\n\r\n\t},\r\n\r\n\ttranslateX: function ( distance ) {\r\n\r\n\t\tthis.translate( distance, this._vector.set( 1, 0, 0 ) );\r\n\r\n\t},\r\n\r\n\ttranslateY: function ( distance ) {\r\n\r\n\t\tthis.translate( distance, this._vector.set( 0, 1, 0 ) );\r\n\r\n\t},\r\n\r\n\ttranslateZ: function ( distance ) {\r\n\r\n\t\tthis.translate( distance, this._vector.set( 0, 0, 1 ) );\r\n\r\n\t},\r\n\r\n\tlocalToWorld: function ( vector ) {\r\n\r\n\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t},\r\n\r\n\tworldToLocal: function ( vector ) {\r\n\r\n\t\treturn vector.applyMatrix4( THREE.Object3D.__m1.getInverse( this.matrixWorld ) );\r\n\r\n\t},\r\n\r\n\tlookAt: function ( vector ) {\r\n\r\n\t\t// TODO: Add hierarchy support.\r\n\r\n\t\tthis.matrix.lookAt( vector, this.position, this.up );\r\n\r\n\t\tif ( this.rotationAutoUpdate ) {\r\n\r\n\t\t\tif ( this.useQuaternion === false )  {\r\n\r\n\t\t\t\tthis.rotation.setEulerFromRotationMatrix( this.matrix, this.eulerOrder );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.quaternion.copy( this.matrix.decompose()[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tadd: function ( object ) {\r\n\r\n\t\tif ( object === this ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D.add: An object can\\'t be added as a child of itself.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object instanceof THREE.Object3D ) {\r\n\r\n\t\t\tif ( object.parent !== undefined ) {\r\n\r\n\t\t\t\tobject.parent.remove( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.parent = this;\r\n\t\t\tthis.children.push( object );\r\n\r\n\t\t\t// add to scene\r\n\r\n\t\t\tvar scene = this;\r\n\r\n\t\t\twhile ( scene.parent !== undefined ) {\r\n\r\n\t\t\t\tscene = scene.parent;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( scene !== undefined && scene instanceof THREE.Scene )  {\r\n\r\n\t\t\t\tscene.__addObject( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tremove: function ( object ) {\r\n\r\n\t\tvar index = this.children.indexOf( object );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tobject.parent = undefined;\r\n\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t\t// remove from scene\r\n\r\n\t\t\tvar scene = this;\r\n\r\n\t\t\twhile ( scene.parent !== undefined ) {\r\n\r\n\t\t\t\tscene = scene.parent;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( scene !== undefined && scene instanceof THREE.Scene ) {\r\n\r\n\t\t\t\tscene.__removeObject( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttraverse: function ( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.children[ i ].traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetChildByName: function ( name, recursive ) {\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar child = this.children[ i ];\r\n\r\n\t\t\tif ( child.name === name ) {\r\n\r\n\t\t\t\treturn child;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( recursive === true ) {\r\n\r\n\t\t\t\tchild = child.getChildByName( name, recursive );\r\n\r\n\t\t\t\tif ( child !== undefined ) {\r\n\r\n\t\t\t\t\treturn child;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t},\r\n\r\n\tgetDescendants: function ( array ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\r\n\t\tArray.prototype.push.apply( array, this.children );\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.children[ i ].getDescendants( array );\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tupdateMatrix: function () {\r\n\r\n\t\tthis.matrix.setPosition( this.position );\r\n\r\n\t\tif ( this.useQuaternion === false )  {\r\n\r\n\t\t\tthis.matrix.setRotationFromEuler( this.rotation, this.eulerOrder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.matrix.setRotationFromQuaternion( this.quaternion );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.scale.x !== 1 || this.scale.y !== 1 || this.scale.z !== 1 ) {\r\n\r\n\t\t\tthis.matrix.scale( this.scale );\r\n\r\n\t\t}\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\r\n\r\n\t\t\tif ( this.parent === undefined ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\tforce = true;\r\n\r\n\t\t}\r\n\r\n\t\t// update children\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function ( object ) {\r\n\r\n\t\tif ( object === undefined ) object = new THREE.Object3D();\r\n\r\n\t\tobject.name = this.name;\r\n\r\n\t\tobject.up.copy( this.up );\r\n\r\n\t\tobject.position.copy( this.position );\r\n\t\tif ( object.rotation instanceof THREE.Vector3 ) object.rotation.copy( this.rotation ); // because of Sprite madness\r\n\t\tobject.eulerOrder = this.eulerOrder;\r\n\t\tobject.scale.copy( this.scale );\r\n\r\n\t\tobject.renderDepth = this.renderDepth;\r\n\r\n\t\tobject.rotationAutoUpdate = this.rotationAutoUpdate;\r\n\r\n\t\tobject.matrix.copy( this.matrix );\r\n\t\tobject.matrixWorld.copy( this.matrixWorld );\r\n\t\tobject.matrixRotationWorld.copy( this.matrixRotationWorld );\r\n\r\n\t\tobject.matrixAutoUpdate = this.matrixAutoUpdate;\r\n\t\tobject.matrixWorldNeedsUpdate = this.matrixWorldNeedsUpdate;\r\n\r\n\t\tobject.quaternion.copy( this.quaternion );\r\n\t\tobject.useQuaternion = this.useQuaternion;\r\n\r\n\t\tobject.visible = this.visible;\r\n\r\n\t\tobject.castShadow = this.castShadow;\r\n\t\tobject.receiveShadow = this.receiveShadow;\r\n\r\n\t\tobject.frustumCulled = this.frustumCulled;\r\n\r\n\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\tvar child = this.children[ i ];\r\n\t\t\tobject.add( child.clone() );\r\n\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Object3D.__m1 = new THREE.Matrix4();\r\nTHREE.Object3D.defaultEulerOrder = 'XYZ',\r\n\r\nTHREE.Object3DIdCount = 0;\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author julianwa / https://github.com/julianwa\r\n */\r\n\r\nTHREE.Projector = function() {\r\n\r\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\r\n\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\r\n\t_face, _face3Count, _face3Pool = [], _face3PoolLength = 0,\r\n\t_face4Count, _face4Pool = [], _face4PoolLength = 0,\r\n\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\r\n\t_particle, _particleCount, _particlePool = [], _particlePoolLength = 0,\r\n\r\n\t_renderData = { objects: [], sprites: [], lights: [], elements: [] },\r\n\r\n\t_vector3 = new THREE.Vector3(),\r\n\t_vector4 = new THREE.Vector4(),\r\n\r\n\t_clipBox = new THREE.Box3( new THREE.Vector3( -1, -1, -1 ), new THREE.Vector3( 1, 1, 1 ) ),\r\n\t_boundingBox = new THREE.Box3(),\r\n\t_points3 = new Array( 3 ),\r\n\t_points4 = new Array( 4 ),\r\n\r\n\t_viewMatrix = new THREE.Matrix4(),\r\n\t_viewProjectionMatrix = new THREE.Matrix4(),\r\n\r\n\t_modelMatrix,\r\n\t_modelViewProjectionMatrix = new THREE.Matrix4(),\r\n\r\n\t_normalMatrix = new THREE.Matrix3(),\r\n\t_normalViewMatrix = new THREE.Matrix3(),\r\n\r\n\t_centroid = new THREE.Vector3(),\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\r\n\t_clippedVertex1PositionScreen = new THREE.Vector4(),\r\n\t_clippedVertex2PositionScreen = new THREE.Vector4(),\r\n\r\n\t_face3VertexNormals;\r\n\r\n\tthis.projectVector = function ( vector, camera ) {\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\r\n\t\treturn vector.applyProjection( _viewProjectionMatrix );\r\n\r\n\t};\r\n\r\n\tthis.unprojectVector = function ( vector, camera ) {\r\n\r\n\t\tcamera.projectionMatrixInverse.getInverse( camera.projectionMatrix );\r\n\r\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.matrixWorld, camera.projectionMatrixInverse );\r\n\r\n\t\treturn vector.applyProjection( _viewProjectionMatrix );\r\n\r\n\t};\r\n\r\n\tthis.pickingRay = function ( vector, camera ) {\r\n\r\n\t\t// set two vectors with opposing z values\r\n\t\tvector.z = -1.0;\r\n\t\tvar end = new THREE.Vector3( vector.x, vector.y, 1.0 );\r\n\r\n\t\tthis.unprojectVector( vector, camera );\r\n\t\tthis.unprojectVector( end, camera );\r\n\r\n\t\t// find direction from vector to end\r\n\t\tend.sub( vector ).normalize();\r\n\r\n\t\treturn new THREE.Raycaster( vector, end );\r\n\r\n\t};\r\n\r\n\tvar projectGraph = function ( root, sortObjects ) {\r\n\r\n\t\t_objectCount = 0;\r\n\r\n\t\t_renderData.objects.length = 0;\r\n\t\t_renderData.sprites.length = 0;\r\n\t\t_renderData.lights.length = 0;\r\n\r\n\t\tvar projectObject = function ( parent ) {\r\n\r\n\t\t\tfor ( var c = 0, cl = parent.children.length; c < cl; c ++ ) {\r\n\r\n\t\t\t\tvar object = parent.children[ c ];\r\n\r\n\t\t\t\tif ( object.visible === false ) continue;\r\n\r\n\t\t\t\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\t\t\t\t_renderData.lights.push( object );\r\n\r\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {\r\n\r\n\t\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\r\n\r\n\t\t\t\t\t\t_object = getNextObjectInPool();\r\n\t\t\t\t\t\t_object.object = object;\r\n\r\n\t\t\t\t\t\tif ( object.renderDepth !== null ) {\r\n\r\n\t\t\t\t\t\t\t_object.z = object.renderDepth;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t_vector3.copy( object.matrixWorld.getPosition() );\r\n\t\t\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\r\n\t\t\t\t\t\t\t_object.z = _vector3.z;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_renderData.objects.push( _object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( object instanceof THREE.Sprite || object instanceof THREE.Particle ) {\r\n\r\n\t\t\t\t\t_object = getNextObjectInPool();\r\n\t\t\t\t\t_object.object = object;\r\n\r\n\t\t\t\t\t// TODO: Find an elegant and performant solution and remove this dupe code.\r\n\r\n\t\t\t\t\tif ( object.renderDepth !== null ) {\r\n\r\n\t\t\t\t\t\t_object.z = object.renderDepth;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_vector3.copy( object.matrixWorld.getPosition() );\r\n\t\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\r\n\t\t\t\t\t\t_object.z = _vector3.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_renderData.sprites.push( _object );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_object = getNextObjectInPool();\r\n\t\t\t\t\t_object.object = object;\r\n\r\n\t\t\t\t\tif ( object.renderDepth !== null ) {\r\n\r\n\t\t\t\t\t\t_object.z = object.renderDepth;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_vector3.copy( object.matrixWorld.getPosition() );\r\n\t\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\r\n\t\t\t\t\t\t_object.z = _vector3.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_renderData.objects.push( _object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprojectObject( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tprojectObject( root );\r\n\r\n\t\tif ( sortObjects === true ) _renderData.objects.sort( painterSort );\r\n\r\n\t\treturn _renderData;\r\n\r\n\t};\r\n\r\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\r\n\r\n\t\tvar visible = false,\r\n\t\to, ol, v, vl, f, fl, n, nl, c, cl, u, ul, object,\r\n\t\tgeometry, vertices, vertex, vertexPositionScreen,\r\n\t\tfaces, face, faceVertexNormals, faceVertexUvs, uvs,\r\n\t\tv1, v2, v3, v4, isFaceMaterial, objectMaterials;\r\n\r\n\t\t_face3Count = 0;\r\n\t\t_face4Count = 0;\r\n\t\t_lineCount = 0;\r\n\t\t_particleCount = 0;\r\n\r\n\t\t_renderData.elements.length = 0;\r\n\r\n\t\tscene.updateMatrixWorld();\r\n\r\n\t\tif ( camera.parent === undefined ) camera.updateMatrixWorld();\r\n\r\n\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\r\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\r\n\r\n\t\t_normalViewMatrix.getInverse( _viewMatrix );\r\n\t\t_normalViewMatrix.transpose();\r\n\r\n\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\r\n\r\n\t\t_renderData = projectGraph( scene, sortObjects );\r\n\r\n\t\tfor ( o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\r\n\r\n\t\t\tobject = _renderData.objects[ o ].object;\r\n\r\n\t\t\t_modelMatrix = object.matrixWorld;\r\n\r\n\t\t\t_vertexCount = 0;\r\n\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tvertices = geometry.vertices;\r\n\t\t\t\tfaces = geometry.faces;\r\n\t\t\t\tfaceVertexUvs = geometry.faceVertexUvs;\r\n\r\n\t\t\t\t_normalMatrix.getInverse( _modelMatrix );\r\n\t\t\t\t_normalMatrix.transpose();\r\n\r\n\t\t\t\tisFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;\r\n\t\t\t\tobjectMaterials = isFaceMaterial === true ? object.material : null;\r\n\r\n\t\t\t\tfor ( v = 0, vl = vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\t\t_vertex = getNextVertexInPool();\r\n\r\n\t\t\t\t\t_vertex.positionWorld.copy( vertices[ v ] ).applyMatrix4( _modelMatrix );\r\n\t\t\t\t\t_vertex.positionScreen.copy( _vertex.positionWorld ).applyMatrix4( _viewProjectionMatrix );\r\n\r\n\t\t\t\t\t_vertex.positionScreen.x /= _vertex.positionScreen.w;\r\n\t\t\t\t\t_vertex.positionScreen.y /= _vertex.positionScreen.w;\r\n\t\t\t\t\t_vertex.positionScreen.z /= _vertex.positionScreen.w;\r\n\r\n\t\t\t\t\t_vertex.visible = ! ( _vertex.positionScreen.x < -1 || _vertex.positionScreen.x > 1 ||\r\n\t\t\t\t\t\t\t      _vertex.positionScreen.y < -1 || _vertex.positionScreen.y > 1 ||\r\n\t\t\t\t\t\t\t      _vertex.positionScreen.z < -1 || _vertex.positionScreen.z > 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = faces[ f ];\r\n\r\n\t\t\t\t\tvar material = isFaceMaterial === true\r\n\t\t\t\t\t\t? objectMaterials.materials[ face.materialIndex ]\r\n\t\t\t\t\t\t: object.material;\r\n\r\n\t\t\t\t\tif ( material === undefined ) continue;\r\n\r\n\t\t\t\t\tvar side = material.side;\r\n\r\n\t\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\t\tv1 = _vertexPool[ face.a ];\r\n\t\t\t\t\t\tv2 = _vertexPool[ face.b ];\r\n\t\t\t\t\t\tv3 = _vertexPool[ face.c ];\r\n\r\n\t\t\t\t\t\t_points3[ 0 ] = v1.positionScreen;\r\n\t\t\t\t\t\t_points3[ 1 ] = v2.positionScreen;\r\n\t\t\t\t\t\t_points3[ 2 ] = v3.positionScreen;\r\n\r\n\t\t\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ||\r\n\t\t\t\t\t\t\t_clipBox.isIntersectionBox( _boundingBox.setFromPoints( _points3 ) ) ) {\r\n\r\n\t\t\t\t\t\t\tvisible = ( ( v3.positionScreen.x - v1.positionScreen.x ) * ( v2.positionScreen.y - v1.positionScreen.y ) -\r\n\t\t\t\t\t\t\t\t( v3.positionScreen.y - v1.positionScreen.y ) * ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\r\n\r\n\t\t\t\t\t\t\tif ( side === THREE.DoubleSide || visible === ( side === THREE.FrontSide ) ) {\r\n\r\n\t\t\t\t\t\t\t\t_face = getNextFace3InPool();\r\n\r\n\t\t\t\t\t\t\t\t_face.v1.copy( v1 );\r\n\t\t\t\t\t\t\t\t_face.v2.copy( v2 );\r\n\t\t\t\t\t\t\t\t_face.v3.copy( v3 );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\t\tv1 = _vertexPool[ face.a ];\r\n\t\t\t\t\t\tv2 = _vertexPool[ face.b ];\r\n\t\t\t\t\t\tv3 = _vertexPool[ face.c ];\r\n\t\t\t\t\t\tv4 = _vertexPool[ face.d ];\r\n\r\n\t\t\t\t\t\t_points4[ 0 ] = v1.positionScreen;\r\n\t\t\t\t\t\t_points4[ 1 ] = v2.positionScreen;\r\n\t\t\t\t\t\t_points4[ 2 ] = v3.positionScreen;\r\n\t\t\t\t\t\t_points4[ 3 ] = v4.positionScreen;\r\n\r\n\t\t\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true || v4.visible === true ||\r\n\t\t\t\t\t\t\t_clipBox.isIntersectionBox( _boundingBox.setFromPoints( _points4 ) ) ) {\r\n\r\n\t\t\t\t\t\t\tvisible = ( v4.positionScreen.x - v1.positionScreen.x ) * ( v2.positionScreen.y - v1.positionScreen.y ) -\r\n\t\t\t\t\t\t\t\t( v4.positionScreen.y - v1.positionScreen.y ) * ( v2.positionScreen.x - v1.positionScreen.x ) < 0 ||\r\n\t\t\t\t\t\t\t\t( v2.positionScreen.x - v3.positionScreen.x ) * ( v4.positionScreen.y - v3.positionScreen.y ) -\r\n\t\t\t\t\t\t\t\t( v2.positionScreen.y - v3.positionScreen.y ) * ( v4.positionScreen.x - v3.positionScreen.x ) < 0;\r\n\r\n\r\n\t\t\t\t\t\t\tif ( side === THREE.DoubleSide || visible === ( side === THREE.FrontSide ) ) {\r\n\r\n\t\t\t\t\t\t\t\t_face = getNextFace4InPool();\r\n\r\n\t\t\t\t\t\t\t\t_face.v1.copy( v1 );\r\n\t\t\t\t\t\t\t\t_face.v2.copy( v2 );\r\n\t\t\t\t\t\t\t\t_face.v3.copy( v3 );\r\n\t\t\t\t\t\t\t\t_face.v4.copy( v4 );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_face.normalModel.copy( face.normal );\r\n\r\n\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\r\n\r\n\t\t\t\t\t\t_face.normalModel.negate();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\r\n\r\n\t\t\t\t\t_face.normalModelView.copy( _face.normalModel ).applyMatrix3( _normalViewMatrix );\r\n\r\n\t\t\t\t\t_face.centroidModel.copy( face.centroid ).applyMatrix4( _modelMatrix );\r\n\r\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\t\tfor ( n = 0, nl = faceVertexNormals.length; n < nl; n ++ ) {\r\n\r\n\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\r\n\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\r\n\r\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\r\n\r\n\t\t\t\t\t\t\tnormalModel.negate();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\r\n\r\n\t\t\t\t\t\tvar normalModelView = _face.vertexNormalsModelView[ n ];\r\n\t\t\t\t\t\tnormalModelView.copy( normalModel ).applyMatrix3( _normalViewMatrix );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\r\n\r\n\t\t\t\t\tfor ( c = 0, cl = faceVertexUvs.length; c < cl; c ++ ) {\r\n\r\n\t\t\t\t\t\tuvs = faceVertexUvs[ c ][ f ];\r\n\r\n\t\t\t\t\t\tif ( uvs === undefined ) continue;\r\n\r\n\t\t\t\t\t\tfor ( u = 0, ul = uvs.length; u < ul; u ++ ) {\r\n\r\n\t\t\t\t\t\t\t_face.uvs[ c ][ u ] = uvs[ u ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_face.color = face.color;\r\n\t\t\t\t\t_face.material = material;\r\n\r\n\t\t\t\t\t_centroid.copy( _face.centroidModel ).applyProjection( _viewProjectionMatrix );\r\n\r\n\t\t\t\t\t_face.z = _centroid.z;\r\n\r\n\t\t\t\t\t_renderData.elements.push( _face );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\r\n\r\n\t\t\t\tvertices = object.geometry.vertices;\r\n\r\n\t\t\t\tv1 = getNextVertexInPool();\r\n\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\r\n\r\n\t\t\t\t// Handle LineStrip and LinePieces\r\n\t\t\t\tvar step = object.type === THREE.LinePieces ? 2 : 1;\r\n\r\n\t\t\t\tfor ( v = 1, vl = vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\t\tv1 = getNextVertexInPool();\r\n\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\r\n\r\n\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\r\n\r\n\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\r\n\r\n\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\r\n\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\r\n\r\n\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\r\n\r\n\t\t\t\t\t\t// Perform the perspective divide\r\n\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\r\n\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\r\n\r\n\t\t\t\t\t\t_line = getNextLineInPool();\r\n\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\r\n\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\r\n\r\n\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\r\n\r\n\t\t\t\t\t\t_line.material = object.material;\r\n\r\n\t\t\t\t\t\t_renderData.elements.push( _line );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( o = 0, ol = _renderData.sprites.length; o < ol; o++ ) {\r\n\r\n\t\t\tobject = _renderData.sprites[ o ].object;\r\n\r\n\t\t\t_modelMatrix = object.matrixWorld;\r\n\r\n\t\t\tif ( object instanceof THREE.Particle ) {\r\n\r\n\t\t\t\t_vector4.set( _modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1 );\r\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\r\n\r\n\t\t\t\t_vector4.z /= _vector4.w;\r\n\r\n\t\t\t\tif ( _vector4.z > 0 && _vector4.z < 1 ) {\r\n\r\n\t\t\t\t\t_particle = getNextParticleInPool();\r\n\t\t\t\t\t_particle.object = object;\r\n\t\t\t\t\t_particle.x = _vector4.x / _vector4.w;\r\n\t\t\t\t\t_particle.y = _vector4.y / _vector4.w;\r\n\t\t\t\t\t_particle.z = _vector4.z;\r\n\r\n\t\t\t\t\t_particle.rotation = object.rotation.z;\r\n\r\n\t\t\t\t\t_particle.scale.x = object.scale.x * Math.abs( _particle.x - ( _vector4.x + camera.projectionMatrix.elements[0] ) / ( _vector4.w + camera.projectionMatrix.elements[12] ) );\r\n\t\t\t\t\t_particle.scale.y = object.scale.y * Math.abs( _particle.y - ( _vector4.y + camera.projectionMatrix.elements[5] ) / ( _vector4.w + camera.projectionMatrix.elements[13] ) );\r\n\r\n\t\t\t\t\t_particle.material = object.material;\r\n\r\n\t\t\t\t\t_renderData.elements.push( _particle );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( sortElements === true ) _renderData.elements.sort( painterSort );\r\n\r\n\t\treturn _renderData;\r\n\r\n\t};\r\n\r\n\t// Pools\r\n\r\n\tfunction getNextObjectInPool() {\r\n\r\n\t\tif ( _objectCount === _objectPoolLength ) {\r\n\r\n\t\t\tvar object = new THREE.RenderableObject();\r\n\t\t\t_objectPool.push( object );\r\n\t\t\t_objectPoolLength ++;\r\n\t\t\t_objectCount ++;\r\n\t\t\treturn object;\r\n\r\n\t\t}\r\n\r\n\t\treturn _objectPool[ _objectCount ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextVertexInPool() {\r\n\r\n\t\tif ( _vertexCount === _vertexPoolLength ) {\r\n\r\n\t\t\tvar vertex = new THREE.RenderableVertex();\r\n\t\t\t_vertexPool.push( vertex );\r\n\t\t\t_vertexPoolLength ++;\r\n\t\t\t_vertexCount ++;\r\n\t\t\treturn vertex;\r\n\r\n\t\t}\r\n\r\n\t\treturn _vertexPool[ _vertexCount ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextFace3InPool() {\r\n\r\n\t\tif ( _face3Count === _face3PoolLength ) {\r\n\r\n\t\t\tvar face = new THREE.RenderableFace3();\r\n\t\t\t_face3Pool.push( face );\r\n\t\t\t_face3PoolLength ++;\r\n\t\t\t_face3Count ++;\r\n\t\t\treturn face;\r\n\r\n\t\t}\r\n\r\n\t\treturn _face3Pool[ _face3Count ++ ];\r\n\r\n\r\n\t}\r\n\r\n\tfunction getNextFace4InPool() {\r\n\r\n\t\tif ( _face4Count === _face4PoolLength ) {\r\n\r\n\t\t\tvar face = new THREE.RenderableFace4();\r\n\t\t\t_face4Pool.push( face );\r\n\t\t\t_face4PoolLength ++;\r\n\t\t\t_face4Count ++;\r\n\t\t\treturn face;\r\n\r\n\t\t}\r\n\r\n\t\treturn _face4Pool[ _face4Count ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextLineInPool() {\r\n\r\n\t\tif ( _lineCount === _linePoolLength ) {\r\n\r\n\t\t\tvar line = new THREE.RenderableLine();\r\n\t\t\t_linePool.push( line );\r\n\t\t\t_linePoolLength ++;\r\n\t\t\t_lineCount ++\r\n\t\t\treturn line;\r\n\r\n\t\t}\r\n\r\n\t\treturn _linePool[ _lineCount ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextParticleInPool() {\r\n\r\n\t\tif ( _particleCount === _particlePoolLength ) {\r\n\r\n\t\t\tvar particle = new THREE.RenderableParticle();\r\n\t\t\t_particlePool.push( particle );\r\n\t\t\t_particlePoolLength ++;\r\n\t\t\t_particleCount ++\r\n\t\t\treturn particle;\r\n\r\n\t\t}\r\n\r\n\t\treturn _particlePool[ _particleCount ++ ];\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction painterSort( a, b ) {\r\n\r\n\t\treturn b.z - a.z;\r\n\r\n\t}\r\n\r\n\tfunction clipLine( s1, s2 ) {\r\n\r\n\t\tvar alpha1 = 0, alpha2 = 1,\r\n\r\n\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\r\n\t\t// Z = -1 and Z = +1, respectively.\r\n\t\tbc1near =  s1.z + s1.w,\r\n\t\tbc2near =  s2.z + s2.w,\r\n\t\tbc1far =  - s1.z + s1.w,\r\n\t\tbc2far =  - s2.z + s2.w;\r\n\r\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\r\n\r\n\t\t\t// Both vertices lie entirely within all clip planes.\r\n\t\t\treturn true;\r\n\r\n\t\t} else if ( ( bc1near < 0 && bc2near < 0) || (bc1far < 0 && bc2far < 0 ) ) {\r\n\r\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\r\n\t\t\treturn false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// The line segment spans at least one clip plane.\r\n\r\n\t\t\tif ( bc1near < 0 ) {\r\n\r\n\t\t\t\t// v1 lies outside the near plane, v2 inside\r\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\r\n\r\n\t\t\t} else if ( bc2near < 0 ) {\r\n\r\n\t\t\t\t// v2 lies outside the near plane, v1 inside\r\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( bc1far < 0 ) {\r\n\r\n\t\t\t\t// v1 lies outside the far plane, v2 inside\r\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\r\n\r\n\t\t\t} else if ( bc2far < 0 ) {\r\n\r\n\t\t\t\t// v2 lies outside the far plane, v2 inside\r\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( alpha2 < alpha1 ) {\r\n\r\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\r\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\r\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\r\n\t\t\t\ts1.lerp( s2, alpha1 );\r\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\r\n\r\n\tthis.a = a;\r\n\tthis.b = b;\r\n\tthis.c = c;\r\n\r\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\r\n\tthis.vertexNormals = normal instanceof Array ? normal : [ ];\r\n\r\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\r\n\tthis.vertexColors = color instanceof Array ? color : [];\r\n\r\n\tthis.vertexTangents = [];\r\n\r\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n\tthis.centroid = new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Face3.prototype = {\r\n\r\n\tconstructor: THREE.Face3,\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar face = new THREE.Face3( this.a, this.b, this.c );\r\n\r\n\t\tface.normal.copy( this.normal );\r\n\t\tface.color.copy( this.color );\r\n\t\tface.centroid.copy( this.centroid );\r\n\r\n\t\tface.materialIndex = this.materialIndex;\r\n\r\n\t\tvar i, il;\r\n\t\tfor ( i = 0, il = this.vertexNormals.length; i < il; i ++ ) face.vertexNormals[ i ] = this.vertexNormals[ i ].clone();\r\n\t\tfor ( i = 0, il = this.vertexColors.length; i < il; i ++ ) face.vertexColors[ i ] = this.vertexColors[ i ].clone();\r\n\t\tfor ( i = 0, il = this.vertexTangents.length; i < il; i ++ ) face.vertexTangents[ i ] = this.vertexTangents[ i ].clone();\r\n\r\n\t\treturn face;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {\r\n\r\n\tthis.a = a;\r\n\tthis.b = b;\r\n\tthis.c = c;\r\n\tthis.d = d;\r\n\r\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\r\n\tthis.vertexNormals = normal instanceof Array ? normal : [ ];\r\n\r\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\r\n\tthis.vertexColors = color instanceof Array ? color : [];\r\n\r\n\tthis.vertexTangents = [];\r\n\r\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n\tthis.centroid = new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Face4.prototype = {\r\n\r\n\tconstructor: THREE.Face4,\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar face = new THREE.Face4( this.a, this.b, this.c, this.d );\r\n\r\n\t\tface.normal.copy( this.normal );\r\n\t\tface.color.copy( this.color );\r\n\t\tface.centroid.copy( this.centroid );\r\n\r\n\t\tface.materialIndex = this.materialIndex;\r\n\r\n\t\tvar i, il;\r\n\t\tfor ( i = 0, il = this.vertexNormals.length; i < il; i ++ ) face.vertexNormals[ i ] = this.vertexNormals[ i ].clone();\r\n\t\tfor ( i = 0, il = this.vertexColors.length; i < il; i ++ ) face.vertexColors[ i ] = this.vertexColors[ i ].clone();\r\n\t\tfor ( i = 0, il = this.vertexTangents.length; i < il; i ++ ) face.vertexTangents[ i ] = this.vertexTangents[ i ].clone();\r\n\r\n\t\treturn face;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author kile / http://kile.stravaganza.org/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Geometry = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.id = THREE.GeometryIdCount ++;\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.vertices = [];\r\n\tthis.colors = [];  // one-to-one vertex colors, used in ParticleSystem, Line and Ribbon\r\n\tthis.normals = []; // one-to-one vertex normals, used in Ribbon\r\n\r\n\tthis.faces = [];\r\n\r\n\tthis.faceUvs = [[]];\r\n\tthis.faceVertexUvs = [[]];\r\n\r\n\tthis.morphTargets = [];\r\n\tthis.morphColors = [];\r\n\tthis.morphNormals = [];\r\n\r\n\tthis.skinWeights = [];\r\n\tthis.skinIndices = [];\r\n\r\n\tthis.lineDistances = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\tthis.hasTangents = false;\r\n\r\n\tthis.dynamic = true; // the intermediate typed arrays will be deleted when set to false\r\n\r\n\t// update flags\r\n\r\n\tthis.verticesNeedUpdate = false;\r\n\tthis.elementsNeedUpdate = false;\r\n\tthis.uvsNeedUpdate = false;\r\n\tthis.normalsNeedUpdate = false;\r\n\tthis.tangentsNeedUpdate = false;\r\n\tthis.colorsNeedUpdate = false;\r\n\tthis.lineDistancesNeedUpdate = false;\r\n\r\n\tthis.buffersNeedUpdate = false;\r\n\r\n};\r\n\r\nTHREE.Geometry.prototype = {\r\n\r\n\tconstructor: THREE.Geometry,\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar normalMatrix = new THREE.Matrix3().getInverse( matrix ).transpose();\r\n\r\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\tvertex.applyMatrix4( matrix );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ i ];\r\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tface.centroid.applyMatrix4( matrix );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeCentroids: function () {\r\n\r\n\t\tvar f, fl, face;\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\t\t\tface.centroid.set( 0, 0, 0 );\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tface.centroid.add( this.vertices[ face.a ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.b ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.c ] );\r\n\t\t\t\tface.centroid.divideScalar( 3 );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tface.centroid.add( this.vertices[ face.a ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.b ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.c ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.d ] );\r\n\t\t\t\tface.centroid.divideScalar( 4 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\tvar n, nl, v, vl, vertex, f, fl, face, vA, vB, vC,\r\n\t\tcb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\tcb.subVectors( vC, vB );\r\n\t\t\tab.subVectors( vA, vB );\r\n\t\t\tcb.cross( ab );\r\n\r\n\t\t\tcb.normalize();\r\n\r\n\t\t\tface.normal.copy( cb );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\r\n\t\tvar v, vl, f, fl, face, vertices;\r\n\r\n\t\t// create internal buffers for reuse when calling this method repeatedly\r\n\t\t// (otherwise memory allocation / deallocation every frame is big resource hog)\r\n\r\n\t\tif ( this.__tmpVertices === undefined ) {\r\n\r\n\t\t\tthis.__tmpVertices = new Array( this.vertices.length );\r\n\t\t\tvertices = this.__tmpVertices;\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ] = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\tface.vertexNormals = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\r\n\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\tface.vertexNormals = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvertices = this.__tmpVertices;\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ].set( 0, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( areaWeighted ) {\r\n\r\n\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\r\n\t\t\tvar vA, vB, vC, vD;\r\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3(),\r\n\t\t\t\tdb = new THREE.Vector3(), dc = new THREE.Vector3(), bc = new THREE.Vector3();\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\t\tvertices[ face.c ].add( cb );\r\n\r\n\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\t\tvC = this.vertices[ face.c ];\r\n\t\t\t\t\tvD = this.vertices[ face.d ];\r\n\r\n\t\t\t\t\t// abd\r\n\r\n\t\t\t\t\tdb.subVectors( vD, vB );\r\n\t\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\t\tdb.cross( ab );\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( db );\r\n\t\t\t\t\tvertices[ face.b ].add( db );\r\n\t\t\t\t\tvertices[ face.d ].add( db );\r\n\r\n\t\t\t\t\t// bcd\r\n\r\n\t\t\t\t\tdc.subVectors( vD, vC );\r\n\t\t\t\t\tbc.subVectors( vB, vC );\r\n\t\t\t\t\tdc.cross( bc );\r\n\r\n\t\t\t\t\tvertices[ face.b ].add( dc );\r\n\t\t\t\t\tvertices[ face.c ].add( dc );\r\n\t\t\t\t\tvertices[ face.d ].add( dc );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\r\n\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.d ].add( face.normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\tvertices[ v ].normalize();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tface.vertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\tface.vertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\tface.vertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tface.vertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\tface.vertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\tface.vertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\t\t\t\tface.vertexNormals[ 3 ].copy( vertices[ face.d ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeMorphNormals: function () {\r\n\r\n\t\tvar i, il, f, fl, face;\r\n\r\n\t\t// save original normals\r\n\t\t// - create temp variables on first access\r\n\t\t//   otherwise just copy (for faster repeated calls)\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\r\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\r\n\r\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\r\n\t\tvar tmpGeo = new THREE.Geometry();\r\n\t\ttmpGeo.faces = this.faces;\r\n\r\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t// create on first access\r\n\r\n\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\r\n\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\r\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tfaceNormal = new THREE.Vector3();\r\n\r\n\t\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3(), d: new THREE.Vector3() };\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\r\n\t\t\t// set vertices to morph target\r\n\r\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\r\n\t\t\t// compute morph normals\r\n\r\n\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\ttmpGeo.computeVertexNormals();\r\n\r\n\t\t\t// store morph normals\r\n\r\n\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\r\n\t\t\t\tfaceNormal.copy( face.normal );\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\t\t\t\t\tvertexNormals.d.copy( face.vertexNormals[ 3 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore original normals\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeTangents: function () {\r\n\r\n\t\t// based on http://www.terathon.com/code/tangent.html\r\n\t\t// tangents go to vertices\r\n\r\n\t\tvar f, fl, v, vl, i, il, vertexIndex,\r\n\t\t\tface, uv, vA, vB, vC, uvA, uvB, uvC,\r\n\t\t\tx1, x2, y1, y2, z1, z2,\r\n\t\t\ts1, s2, t1, t2, r, t, test,\r\n\t\t\ttan1 = [], tan2 = [],\r\n\t\t\tsdir = new THREE.Vector3(), tdir = new THREE.Vector3(),\r\n\t\t\ttmp = new THREE.Vector3(), tmp2 = new THREE.Vector3(),\r\n\t\t\tn = new THREE.Vector3(), w;\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\ttan1[ v ] = new THREE.Vector3();\r\n\t\t\ttan2[ v ] = new THREE.Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tfunction handleTriangle( context, a, b, c, ua, ub, uc ) {\r\n\r\n\t\t\tvA = context.vertices[ a ];\r\n\t\t\tvB = context.vertices[ b ];\r\n\t\t\tvC = context.vertices[ c ];\r\n\r\n\t\t\tuvA = uv[ ua ];\r\n\t\t\tuvB = uv[ ub ];\r\n\t\t\tuvC = uv[ uc ];\r\n\r\n\t\t\tx1 = vB.x - vA.x;\r\n\t\t\tx2 = vC.x - vA.x;\r\n\t\t\ty1 = vB.y - vA.y;\r\n\t\t\ty2 = vC.y - vA.y;\r\n\t\t\tz1 = vB.z - vA.z;\r\n\t\t\tz2 = vC.z - vA.z;\r\n\r\n\t\t\ts1 = uvB.x - uvA.x;\r\n\t\t\ts2 = uvC.x - uvA.x;\r\n\t\t\tt1 = uvB.y - uvA.y;\r\n\t\t\tt2 = uvC.y - uvA.y;\r\n\r\n\t\t\tr = 1.0 / ( s1 * t2 - s2 * t1 );\r\n\t\t\tsdir.set( ( t2 * x1 - t1 * x2 ) * r,\r\n\t\t\t\t\t  ( t2 * y1 - t1 * y2 ) * r,\r\n\t\t\t\t\t  ( t2 * z1 - t1 * z2 ) * r );\r\n\t\t\ttdir.set( ( s1 * x2 - s2 * x1 ) * r,\r\n\t\t\t\t\t  ( s1 * y2 - s2 * y1 ) * r,\r\n\t\t\t\t\t  ( s1 * z2 - s2 * z1 ) * r );\r\n\r\n\t\t\ttan1[ a ].add( sdir );\r\n\t\t\ttan1[ b ].add( sdir );\r\n\t\t\ttan1[ c ].add( sdir );\r\n\r\n\t\t\ttan2[ a ].add( tdir );\r\n\t\t\ttan2[ b ].add( tdir );\r\n\t\t\ttan2[ c ].add( tdir );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\t\t\tuv = this.faceVertexUvs[ 0 ][ f ]; // use UV layer 0 for tangents\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\thandleTriangle( this, face.a, face.b, face.c, 0, 1, 2 );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\thandleTriangle( this, face.a, face.b, face.d, 0, 1, 3 );\r\n\t\t\t\thandleTriangle( this, face.b, face.c, face.d, 1, 2, 3 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar faceIndex = [ 'a', 'b', 'c', 'd' ];\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tfor ( i = 0; i < face.vertexNormals.length; i++ ) {\r\n\r\n\t\t\t\tn.copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\tvertexIndex = face[ faceIndex[ i ] ];\r\n\r\n\t\t\t\tt = tan1[ vertexIndex ];\r\n\r\n\t\t\t\t// Gram-Schmidt orthogonalize\r\n\r\n\t\t\t\ttmp.copy( t );\r\n\t\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\r\n\r\n\t\t\t\t// Calculate handedness\r\n\r\n\t\t\t\ttmp2.crossVectors( face.vertexNormals[ i ], t );\r\n\t\t\t\ttest = tmp2.dot( tan2[ vertexIndex ] );\r\n\t\t\t\tw = (test < 0.0) ? -1.0 : 1.0;\r\n\r\n\t\t\t\tface.vertexTangents[ i ] = new THREE.Vector4( tmp.x, tmp.y, tmp.z, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.hasTangents = true;\r\n\r\n\t},\r\n\r\n\tcomputeLineDistances: function ( ) {\r\n\r\n\t\tvar d = 0;\r\n\t\tvar vertices = this.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tif ( i > 0 ) {\r\n\r\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.lineDistances[ i ] = d;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingSphere.setFromCenterAndPoints( this.boundingSphere.center, this.vertices );\r\n\r\n\t},\r\n\r\n\t/*\r\n\t * Checks for duplicate vertices with hashmap.\r\n\t * Duplicated vertices are removed\r\n\t * and faces' vertices are updated.\r\n\t */\r\n\r\n\tmergeVertices: function () {\r\n\r\n\t\tvar verticesMap = {}; // Hashmap for looking up vertice by position coordinates (and making sure they are unique)\r\n\t\tvar unique = [], changes = [];\r\n\r\n\t\tvar v, key;\r\n\t\tvar precisionPoints = 4; // number of decimal points, eg. 4 for epsilon of 0.0001\r\n\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\tvar i,il, face;\r\n\t\tvar indices, k, j, jl, u;\r\n\r\n\t\t// reset cache of vertices as it now will be changing.\r\n\t\tthis.__tmpVertices = undefined;\r\n\r\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tv = this.vertices[ i ];\r\n\t\t\tkey = [ Math.round( v.x * precision ), Math.round( v.y * precision ), Math.round( v.z * precision ) ].join( '_' );\r\n\r\n\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\r\n\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t// have to remove them from the geometry.\r\n\t\tvar faceIndicesToRemove = [];\r\n\r\n\t\tfor( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = this.faces[ i ];\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tface.a = changes[ face.a ];\r\n\t\t\t\tface.b = changes[ face.b ];\r\n\t\t\t\tface.c = changes[ face.c ];\r\n\r\n\t\t\t\tindices = [ face.a, face.b, face.c ];\r\n\r\n\t\t\t\tvar dupIndex = -1;\r\n\r\n\t\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\t\t\t\t\tif ( indices[ n ] == indices[ ( n + 1 ) % 3 ] ) {\r\n\r\n\t\t\t\t\t\tdupIndex = n;\r\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tface.a = changes[ face.a ];\r\n\t\t\t\tface.b = changes[ face.b ];\r\n\t\t\t\tface.c = changes[ face.c ];\r\n\t\t\t\tface.d = changes[ face.d ];\r\n\r\n\t\t\t\t// check dups in (a, b, c, d) and convert to -> face3\r\n\r\n\t\t\t\tindices = [ face.a, face.b, face.c, face.d ];\r\n\r\n\t\t\t\tvar dupIndex = -1;\r\n\r\n\t\t\t\tfor ( var n = 0; n < 4; n ++ ) {\r\n\r\n\t\t\t\t\tif ( indices[ n ] == indices[ ( n + 1 ) % 4 ] ) {\r\n\r\n\t\t\t\t\t\t// if more than one duplicated vertex is found\r\n\t\t\t\t\t\t// we can't generate any valid Face3's, thus\r\n\t\t\t\t\t\t// we need to remove this face complete.\r\n\t\t\t\t\t\tif ( dupIndex >= 0 ) {\r\n\r\n\t\t\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdupIndex = n;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( dupIndex >= 0 ) {\r\n\r\n\t\t\t\t\tindices.splice( dupIndex, 1 );\r\n\r\n\t\t\t\t\tvar newFace = new THREE.Face3( indices[0], indices[1], indices[2], face.normal, face.color, face.materialIndex );\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tu = this.faceVertexUvs[ j ][ i ];\r\n\r\n\t\t\t\t\t\tif ( u ) {\r\n\t\t\t\t\t\t\tu.splice( dupIndex, 1 );\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif( face.vertexNormals && face.vertexNormals.length > 0) {\r\n\r\n\t\t\t\t\t\tnewFace.vertexNormals = face.vertexNormals;\r\n\t\t\t\t\t\tnewFace.vertexNormals.splice( dupIndex, 1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif( face.vertexColors && face.vertexColors.length > 0 ) {\r\n\r\n\t\t\t\t\t\tnewFace.vertexColors = face.vertexColors;\r\n\t\t\t\t\t\tnewFace.vertexColors.splice( dupIndex, 1 );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.faces[ i ] = newFace;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\r\n\t\t\tthis.faces.splice( i, 1 );\r\n\r\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tthis.faceVertexUvs[ j ].splice( i, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Use unique set of vertices\r\n\r\n\t\tvar diff = this.vertices.length - unique.length;\r\n\t\tthis.vertices = unique;\r\n\t\treturn diff;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar geometry = new THREE.Geometry();\r\n\r\n\t\tvar vertices = this.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tgeometry.vertices.push( vertices[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar faces = this.faces;\r\n\r\n\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tgeometry.faces.push( faces[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar uvs = this.faceVertexUvs[ 0 ];\r\n\r\n\t\tfor ( var i = 0, il = uvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uv = uvs[ i ], uvCopy = [];\r\n\r\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tuvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.faceVertexUvs[ 0 ].push( uvCopy );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.GeometryIdCount = 0;\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.BufferGeometry = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.id = THREE.GeometryIdCount ++;\r\n\r\n\t// attributes\r\n\r\n\tthis.attributes = {};\r\n\r\n\t// attributes typed arrays are kept only if dynamic flag is set\r\n\r\n\tthis.dynamic = false;\r\n\r\n\t// offsets for chunks when using indexed elements\r\n\r\n\tthis.offsets = [];\r\n\r\n\t// boundings\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\tthis.hasTangents = false;\r\n\r\n\t// for compatibility\r\n\r\n\tthis.morphTargets = [];\r\n\r\n};\r\n\r\nTHREE.BufferGeometry.prototype = {\r\n\r\n\tconstructor : THREE.BufferGeometry,\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar positionArray;\r\n\t\tvar normalArray;\r\n\r\n\t\tif ( this.attributes[ \"position\" ] ) positionArray = this.attributes[ \"position\" ].array;\r\n\t\tif ( this.attributes[ \"normal\" ] ) normalArray = this.attributes[ \"normal\" ].array;\r\n\r\n\t\tif ( positionArray !== undefined ) {\r\n\r\n\t\t\tmatrix.multiplyVector3Array( positionArray );\r\n\t\t\tthis.verticesNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( normalArray !== undefined ) {\r\n\r\n\t\t\tvar normalMatrix = new THREE.Matrix3();\r\n\t\t\tnormalMatrix.getInverse( matrix ).transpose();\r\n\r\n\t\t\tnormalMatrix.multiplyVector3Array( normalArray );\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t}\r\n\r\n\t\tvar positions = this.attributes[ \"position\" ].array;\r\n\r\n\t\tif ( positions ) {\r\n\r\n\t\t\tvar bb = this.boundingBox;\r\n\t\t\tvar x, y, z;\r\n\r\n\t\t\tif( positions.length >= 3 ) {\r\n\t\t\t\tbb.min.x = bb.max.x = positions[ 0 ];\r\n\t\t\t\tbb.min.y = bb.max.y = positions[ 1 ];\r\n\t\t\t\tbb.min.z = bb.max.z = positions[ 2 ];\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 3, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\tx = positions[ i ];\r\n\t\t\t\ty = positions[ i + 1 ];\r\n\t\t\t\tz = positions[ i + 2 ];\r\n\r\n\t\t\t\t// bounding box\r\n\r\n\t\t\t\tif ( x < bb.min.x ) {\r\n\r\n\t\t\t\t\tbb.min.x = x;\r\n\r\n\t\t\t\t} else if ( x > bb.max.x ) {\r\n\r\n\t\t\t\t\tbb.max.x = x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( y < bb.min.y ) {\r\n\r\n\t\t\t\t\tbb.min.y = y;\r\n\r\n\t\t\t\t} else if ( y > bb.max.y ) {\r\n\r\n\t\t\t\t\tbb.max.y = y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( z < bb.min.z ) {\r\n\r\n\t\t\t\t\tbb.min.z = z;\r\n\r\n\t\t\t\t} else if ( z > bb.max.z ) {\r\n\r\n\t\t\t\t\tbb.max.z = z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( positions === undefined || positions.length === 0 ) {\r\n\r\n\t\t\tthis.boundingBox.min.set( 0, 0, 0 );\r\n\t\t\tthis.boundingBox.max.set( 0, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tvar positions = this.attributes[ \"position\" ].array;\r\n\r\n\t\tif ( positions ) {\r\n\r\n\t\t\tvar radiusSq, maxRadiusSq = 0;\r\n\t\t\tvar x, y, z;\r\n\r\n\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\tx = positions[ i ];\r\n\t\t\t\ty = positions[ i + 1 ];\r\n\t\t\t\tz = positions[ i + 2 ];\r\n\r\n\t\t\t\tradiusSq =  x * x + y * y + z * z;\r\n\t\t\t\tif ( radiusSq > maxRadiusSq ) maxRadiusSq = radiusSq;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function () {\r\n\r\n\t\tif ( this.attributes[ \"position\" ] ) {\r\n\r\n\t\t\tvar i, il;\r\n\t\t\tvar j, jl;\r\n\r\n\t\t\tvar nVertexElements = this.attributes[ \"position\" ].array.length;\r\n\r\n\t\t\tif ( this.attributes[ \"normal\" ] === undefined ) {\r\n\r\n\t\t\t\tthis.attributes[ \"normal\" ] = {\r\n\r\n\t\t\t\t\titemSize: 3,\r\n\t\t\t\t\tarray: new Float32Array( nVertexElements ),\r\n\t\t\t\t\tnumItems: nVertexElements\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\tfor ( i = 0, il = this.attributes[ \"normal\" ].array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tthis.attributes[ \"normal\" ].array[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar positions = this.attributes[ \"position\" ].array;\r\n\t\t\tvar normals = this.attributes[ \"normal\" ].array;\r\n\r\n\t\t\tvar vA, vB, vC, x, y, z,\r\n\r\n\t\t\tpA = new THREE.Vector3(),\r\n\t\t\tpB = new THREE.Vector3(),\r\n\t\t\tpC = new THREE.Vector3(),\r\n\r\n\t\t\tcb = new THREE.Vector3(),\r\n\t\t\tab = new THREE.Vector3();\r\n\r\n\t\t\t// indexed elements\r\n\r\n\t\t\tif ( this.attributes[ \"index\" ] ) {\r\n\r\n\t\t\t\tvar indices = this.attributes[ \"index\" ].array;\r\n\r\n\t\t\t\tvar offsets = this.offsets;\r\n\r\n\t\t\t\tfor ( j = 0, jl = offsets.length; j < jl; ++ j ) {\r\n\r\n\t\t\t\t\tvar start = offsets[ j ].start;\r\n\t\t\t\t\tvar count = offsets[ j ].count;\r\n\t\t\t\t\tvar index = offsets[ j ].index;\r\n\r\n\t\t\t\t\tfor ( i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\tvA = index + indices[ i ];\r\n\t\t\t\t\t\tvB = index + indices[ i + 1 ];\r\n\t\t\t\t\t\tvC = index + indices[ i + 2 ];\r\n\r\n\t\t\t\t\t\tx = positions[ vA * 3 ];\r\n\t\t\t\t\t\ty = positions[ vA * 3 + 1 ];\r\n\t\t\t\t\t\tz = positions[ vA * 3 + 2 ];\r\n\t\t\t\t\t\tpA.set( x, y, z );\r\n\r\n\t\t\t\t\t\tx = positions[ vB * 3 ];\r\n\t\t\t\t\t\ty = positions[ vB * 3 + 1 ];\r\n\t\t\t\t\t\tz = positions[ vB * 3 + 2 ];\r\n\t\t\t\t\t\tpB.set( x, y, z );\r\n\r\n\t\t\t\t\t\tx = positions[ vC * 3 ];\r\n\t\t\t\t\t\ty = positions[ vC * 3 + 1 ];\r\n\t\t\t\t\t\tz = positions[ vC * 3 + 2 ];\r\n\t\t\t\t\t\tpC.set( x, y, z );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ vA * 3 ]     += cb.x;\r\n\t\t\t\t\t\tnormals[ vA * 3 + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vA * 3 + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vB * 3 ]     += cb.x;\r\n\t\t\t\t\t\tnormals[ vB * 3 + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vB * 3 + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vC * 3 ]     += cb.x;\r\n\t\t\t\t\t\tnormals[ vC * 3 + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vC * 3 + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( i = 0, il = positions.length; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\tx = positions[ i ];\r\n\t\t\t\t\ty = positions[ i + 1 ];\r\n\t\t\t\t\tz = positions[ i + 2 ];\r\n\t\t\t\t\tpA.set( x, y, z );\r\n\r\n\t\t\t\t\tx = positions[ i + 3 ];\r\n\t\t\t\t\ty = positions[ i + 4 ];\r\n\t\t\t\t\tz = positions[ i + 5 ];\r\n\t\t\t\t\tpB.set( x, y, z );\r\n\r\n\t\t\t\t\tx = positions[ i + 6 ];\r\n\t\t\t\t\ty = positions[ i + 7 ];\r\n\t\t\t\t\tz = positions[ i + 8 ];\r\n\t\t\t\t\tpC.set( x, y, z );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnormals[ i ] \t = cb.x;\r\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tnormalizeNormals: function () {\r\n\r\n\t\tvar normals = this.attributes[ \"normal\" ].array;\r\n\r\n\t\tvar x, y, z, n;\r\n\r\n\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\r\n\r\n\t\t\tx = normals[ i ];\r\n\t\t\ty = normals[ i + 1 ];\r\n\t\t\tz = normals[ i + 2 ];\r\n\r\n\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\r\n\r\n\t\t\tnormals[ i ] \t *= n;\r\n\t\t\tnormals[ i + 1 ] *= n;\r\n\t\t\tnormals[ i + 2 ] *= n;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeTangents: function () {\r\n\r\n\t\t// based on http://www.terathon.com/code/tangent.html\r\n\t\t// (per vertex tangents)\r\n\r\n\t\tif ( this.attributes[ \"index\" ] === undefined ||\r\n\t\t\t this.attributes[ \"position\" ] === undefined ||\r\n\t\t\t this.attributes[ \"normal\" ] === undefined ||\r\n\t\t\t this.attributes[ \"uv\" ] === undefined ) {\r\n\r\n\t\t\tconsole.warn( \"Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()\" );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar indices = this.attributes[ \"index\" ].array;\r\n\t\tvar positions = this.attributes[ \"position\" ].array;\r\n\t\tvar normals = this.attributes[ \"normal\" ].array;\r\n\t\tvar uvs = this.attributes[ \"uv\" ].array;\r\n\r\n\t\tvar nVertices = positions.length / 3;\r\n\r\n\t\tif ( this.attributes[ \"tangent\" ] === undefined ) {\r\n\r\n\t\t\tvar nTangentElements = 4 * nVertices;\r\n\r\n\t\t\tthis.attributes[ \"tangent\" ] = {\r\n\r\n\t\t\t\titemSize: 4,\r\n\t\t\t\tarray: new Float32Array( nTangentElements ),\r\n\t\t\t\tnumItems: nTangentElements\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar tangents = this.attributes[ \"tangent\" ].array;\r\n\r\n\t\tvar tan1 = [], tan2 = [];\r\n\r\n\t\tfor ( var k = 0; k < nVertices; k ++ ) {\r\n\r\n\t\t\ttan1[ k ] = new THREE.Vector3();\r\n\t\t\ttan2[ k ] = new THREE.Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tvar xA, yA, zA,\r\n\t\t\txB, yB, zB,\r\n\t\t\txC, yC, zC,\r\n\r\n\t\t\tuA, vA,\r\n\t\t\tuB, vB,\r\n\t\t\tuC, vC,\r\n\r\n\t\t\tx1, x2, y1, y2, z1, z2,\r\n\t\t\ts1, s2, t1, t2, r;\r\n\r\n\t\tvar sdir = new THREE.Vector3(), tdir = new THREE.Vector3();\r\n\r\n\t\tfunction handleTriangle( a, b, c ) {\r\n\r\n\t\t\txA = positions[ a * 3 ];\r\n\t\t\tyA = positions[ a * 3 + 1 ];\r\n\t\t\tzA = positions[ a * 3 + 2 ];\r\n\r\n\t\t\txB = positions[ b * 3 ];\r\n\t\t\tyB = positions[ b * 3 + 1 ];\r\n\t\t\tzB = positions[ b * 3 + 2 ];\r\n\r\n\t\t\txC = positions[ c * 3 ];\r\n\t\t\tyC = positions[ c * 3 + 1 ];\r\n\t\t\tzC = positions[ c * 3 + 2 ];\r\n\r\n\t\t\tuA = uvs[ a * 2 ];\r\n\t\t\tvA = uvs[ a * 2 + 1 ];\r\n\r\n\t\t\tuB = uvs[ b * 2 ];\r\n\t\t\tvB = uvs[ b * 2 + 1 ];\r\n\r\n\t\t\tuC = uvs[ c * 2 ];\r\n\t\t\tvC = uvs[ c * 2 + 1 ];\r\n\r\n\t\t\tx1 = xB - xA;\r\n\t\t\tx2 = xC - xA;\r\n\r\n\t\t\ty1 = yB - yA;\r\n\t\t\ty2 = yC - yA;\r\n\r\n\t\t\tz1 = zB - zA;\r\n\t\t\tz2 = zC - zA;\r\n\r\n\t\t\ts1 = uB - uA;\r\n\t\t\ts2 = uC - uA;\r\n\r\n\t\t\tt1 = vB - vA;\r\n\t\t\tt2 = vC - vA;\r\n\r\n\t\t\tr = 1.0 / ( s1 * t2 - s2 * t1 );\r\n\r\n\t\t\tsdir.set(\r\n\t\t\t\t( t2 * x1 - t1 * x2 ) * r,\r\n\t\t\t\t( t2 * y1 - t1 * y2 ) * r,\r\n\t\t\t\t( t2 * z1 - t1 * z2 ) * r\r\n\t\t\t);\r\n\r\n\t\t\ttdir.set(\r\n\t\t\t\t( s1 * x2 - s2 * x1 ) * r,\r\n\t\t\t\t( s1 * y2 - s2 * y1 ) * r,\r\n\t\t\t\t( s1 * z2 - s2 * z1 ) * r\r\n\t\t\t);\r\n\r\n\t\t\ttan1[ a ].add( sdir );\r\n\t\t\ttan1[ b ].add( sdir );\r\n\t\t\ttan1[ c ].add( sdir );\r\n\r\n\t\t\ttan2[ a ].add( tdir );\r\n\t\t\ttan2[ b ].add( tdir );\r\n\t\t\ttan2[ c ].add( tdir );\r\n\r\n\t\t}\r\n\r\n\t\tvar i, il;\r\n\t\tvar j, jl;\r\n\t\tvar iA, iB, iC;\r\n\r\n\t\tvar offsets = this.offsets;\r\n\r\n\t\tfor ( j = 0, jl = offsets.length; j < jl; ++ j ) {\r\n\r\n\t\t\tvar start = offsets[ j ].start;\r\n\t\t\tvar count = offsets[ j ].count;\r\n\t\t\tvar index = offsets[ j ].index;\r\n\r\n\t\t\tfor ( i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\tiA = index + indices[ i ];\r\n\t\t\t\tiB = index + indices[ i + 1 ];\r\n\t\t\t\tiC = index + indices[ i + 2 ];\r\n\r\n\t\t\t\thandleTriangle( iA, iB, iC );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3();\r\n\t\tvar n = new THREE.Vector3(), n2 = new THREE.Vector3();\r\n\t\tvar w, t, test;\r\n\t\tvar nx, ny, nz;\r\n\r\n\t\tfunction handleVertex( v ) {\r\n\r\n\t\t\tn.x = normals[ v * 3 ];\r\n\t\t\tn.y = normals[ v * 3 + 1 ];\r\n\t\t\tn.z = normals[ v * 3 + 2 ];\r\n\r\n\t\t\tn2.copy( n );\r\n\r\n\t\t\tt = tan1[ v ];\r\n\r\n\t\t\t// Gram-Schmidt orthogonalize\r\n\r\n\t\t\ttmp.copy( t );\r\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\r\n\r\n\t\t\t// Calculate handedness\r\n\r\n\t\t\ttmp2.crossVectors( n2, t );\r\n\t\t\ttest = tmp2.dot( tan2[ v ] );\r\n\t\t\tw = ( test < 0.0 ) ? -1.0 : 1.0;\r\n\r\n\t\t\ttangents[ v * 4 ] \t  = tmp.x;\r\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\r\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\r\n\t\t\ttangents[ v * 4 + 3 ] = w;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( j = 0, jl = offsets.length; j < jl; ++ j ) {\r\n\r\n\t\t\tvar start = offsets[ j ].start;\r\n\t\t\tvar count = offsets[ j ].count;\r\n\t\t\tvar index = offsets[ j ].index;\r\n\r\n\t\t\tfor ( i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\tiA = index + indices[ i ];\r\n\t\t\t\tiB = index + indices[ i + 1 ];\r\n\t\t\t\tiC = index + indices[ i + 2 ];\r\n\r\n\t\t\t\thandleVertex( iA );\r\n\t\t\t\thandleVertex( iB );\r\n\t\t\t\thandleVertex( iC );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.hasTangents = true;\r\n\t\tthis.tangentsNeedUpdate = true;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n */\r\n\r\nTHREE.Camera = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.matrixWorldInverse = new THREE.Matrix4();\r\n\r\n\tthis.projectionMatrix = new THREE.Matrix4();\r\n\tthis.projectionMatrixInverse = new THREE.Matrix4();\r\n\r\n};\r\n\r\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Camera.prototype.lookAt = function ( vector ) {\r\n\r\n\t// TODO: Add hierarchy support.\r\n\r\n\tthis.matrix.lookAt( this.position, vector, this.up );\r\n\r\n\tif ( this.rotationAutoUpdate === true ) {\r\n\r\n\t\tif ( this.useQuaternion === false )  {\r\n\r\n\t\t\tthis.rotation.setEulerFromRotationMatrix( this.matrix, this.eulerOrder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.quaternion.copy( this.matrix.decompose()[ 1 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.left = left;\r\n\tthis.right = right;\r\n\tthis.top = top;\r\n\tthis.bottom = bottom;\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 0.1;\r\n\tthis.far = ( far !== undefined ) ? far : 2000;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );\r\n\r\nTHREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {\r\n\r\n\tthis.projectionMatrix.makeOrthographic( this.left, this.right, this.top, this.bottom, this.near, this.far );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author greggman / http://games.greggman.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.PerspectiveCamera = function ( fov, aspect, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.fov = fov !== undefined ? fov : 50;\r\n\tthis.aspect = aspect !== undefined ? aspect : 1;\r\n\tthis.near = near !== undefined ? near : 0.1;\r\n\tthis.far = far !== undefined ? far : 2000;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );\r\n\r\n\r\n/**\r\n * Uses Focal Length (in mm) to estimate and set FOV\r\n * 35mm (fullframe) camera is used if frame size is not specified;\r\n * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\r\n */\r\n\r\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {\r\n\r\n\tif ( frameHeight === undefined ) frameHeight = 24;\r\n\r\n\tthis.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\r\n\tthis.updateProjectionMatrix();\r\n\r\n}\r\n\r\n\r\n/**\r\n * Sets an offset in a larger frustum. This is useful for multi-window or\r\n * multi-monitor/multi-machine setups.\r\n *\r\n * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n * the monitors are in grid like this\r\n *\r\n *   +---+---+---+\r\n *   | A | B | C |\r\n *   +---+---+---+\r\n *   | D | E | F |\r\n *   +---+---+---+\r\n *\r\n * then for each monitor you would call it like this\r\n *\r\n *   var w = 1920;\r\n *   var h = 1080;\r\n *   var fullWidth = w * 3;\r\n *   var fullHeight = h * 2;\r\n *\r\n *   --A--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n *   --B--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n *   --C--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n *   --D--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n *   --E--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n *   --F--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n *\r\n *   Note there is no reason monitors have to be the same size or in a grid.\r\n */\r\n\r\nTHREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\tthis.fullWidth = fullWidth;\r\n\tthis.fullHeight = fullHeight;\r\n\tthis.x = x;\r\n\tthis.y = y;\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\n\r\nTHREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {\r\n\r\n\tif ( this.fullWidth ) {\r\n\r\n\t\tvar aspect = this.fullWidth / this.fullHeight;\r\n\t\tvar top = Math.tan( THREE.Math.degToRad( this.fov * 0.5 ) ) * this.near;\r\n\t\tvar bottom = -top;\r\n\t\tvar left = aspect * bottom;\r\n\t\tvar right = aspect * top;\r\n\t\tvar width = Math.abs( right - left );\r\n\t\tvar height = Math.abs( top - bottom );\r\n\r\n\t\tthis.projectionMatrix.makeFrustum(\r\n\t\t\tleft + this.x * width / this.fullWidth,\r\n\t\t\tleft + ( this.x + this.width ) * width / this.fullWidth,\r\n\t\t\ttop - ( this.y + this.height ) * height / this.fullHeight,\r\n\t\t\ttop - this.y * height / this.fullHeight,\r\n\t\t\tthis.near,\r\n\t\t\tthis.far\r\n\t\t);\r\n\r\n\t} else {\r\n\r\n\t\tthis.projectionMatrix.makePerspective( this.fov, this.aspect, this.near, this.far );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n \r\nTHREE.Light = function ( hex ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.color = new THREE.Color( hex );\r\n\r\n};\r\n\r\nTHREE.Light.prototype = Object.create( THREE.Object3D.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AmbientLight = function ( hex ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n};\r\n\r\nTHREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author MPanknin / http://www.redplant.de/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.AreaLight = function ( hex, intensity ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n\tthis.normal = new THREE.Vector3( 0, -1, 0 );\r\n\tthis.right = new THREE.Vector3( 1, 0, 0 );\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\r\n\tthis.width = 1.0;\r\n\tthis.height = 1.0;\r\n\r\n\tthis.constantAttenuation = 1.5;\r\n\tthis.linearAttenuation = 0.5;\r\n\tthis.quadraticAttenuation = 0.1;\r\n\r\n};\r\n\r\nTHREE.AreaLight.prototype = Object.create( THREE.Light.prototype );\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DirectionalLight = function ( hex, intensity ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n\tthis.position = new THREE.Vector3( 0, 1, 0 );\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.onlyShadow = false;\r\n\r\n\t//\r\n\r\n\tthis.shadowCameraNear = 50;\r\n\tthis.shadowCameraFar = 5000;\r\n\r\n\tthis.shadowCameraLeft = -500;\r\n\tthis.shadowCameraRight = 500;\r\n\tthis.shadowCameraTop = 500;\r\n\tthis.shadowCameraBottom = -500;\r\n\r\n\tthis.shadowCameraVisible = false;\r\n\r\n\tthis.shadowBias = 0;\r\n\tthis.shadowDarkness = 0.5;\r\n\r\n\tthis.shadowMapWidth = 512;\r\n\tthis.shadowMapHeight = 512;\r\n\r\n\t//\r\n\r\n\tthis.shadowCascade = false;\r\n\r\n\tthis.shadowCascadeOffset = new THREE.Vector3( 0, 0, -1000 );\r\n\tthis.shadowCascadeCount = 2;\r\n\r\n\tthis.shadowCascadeBias = [ 0, 0, 0 ];\r\n\tthis.shadowCascadeWidth = [ 512, 512, 512 ];\r\n\tthis.shadowCascadeHeight = [ 512, 512, 512 ];\r\n\r\n\tthis.shadowCascadeNearZ = [ -1.000, 0.990, 0.998 ];\r\n\tthis.shadowCascadeFarZ  = [  0.990, 0.998, 1.000 ];\r\n\r\n\tthis.shadowCascadeArray = [];\r\n\r\n\t//\r\n\r\n\tthis.shadowMap = null;\r\n\tthis.shadowMapSize = null;\r\n\tthis.shadowCamera = null;\r\n\tthis.shadowMatrix = null;\r\n\r\n};\r\n\r\nTHREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.HemisphereLight = function ( skyColorHex, groundColorHex, intensity ) {\r\n\r\n\tTHREE.Light.call( this, skyColorHex );\r\n\r\n\tthis.groundColor = new THREE.Color( groundColorHex );\r\n\r\n\tthis.position = new THREE.Vector3( 0, 100, 0 );\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\r\n};\r\n\r\nTHREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.PointLight = function ( hex, intensity, distance ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n\tthis.position = new THREE.Vector3( 0, 0, 0 );\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\r\n};\r\n\r\nTHREE.PointLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpotLight = function ( hex, intensity, distance, angle, exponent ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n\tthis.position = new THREE.Vector3( 0, 1, 0 );\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 2;\r\n\tthis.exponent = ( exponent !== undefined ) ? exponent : 10;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.onlyShadow = false;\r\n\r\n\t//\r\n\r\n\tthis.shadowCameraNear = 50;\r\n\tthis.shadowCameraFar = 5000;\r\n\tthis.shadowCameraFov = 50;\r\n\r\n\tthis.shadowCameraVisible = false;\r\n\r\n\tthis.shadowBias = 0;\r\n\tthis.shadowDarkness = 0.5;\r\n\r\n\tthis.shadowMapWidth = 512;\r\n\tthis.shadowMapHeight = 512;\r\n\r\n\t//\r\n\r\n\tthis.shadowMap = null;\r\n\tthis.shadowMapSize = null;\r\n\tthis.shadowCamera = null;\r\n\tthis.shadowMatrix = null;\r\n\r\n};\r\n\r\nTHREE.SpotLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Loader = function ( showStatus ) {\r\n\r\n\tthis.showStatus = showStatus;\r\n\tthis.statusDomElement = showStatus ? THREE.Loader.prototype.addStatusElement() : null;\r\n\r\n\tthis.onLoadStart = function () {};\r\n\tthis.onLoadProgress = function () {};\r\n\tthis.onLoadComplete = function () {};\r\n\r\n};\r\n\r\nTHREE.Loader.prototype = {\r\n\r\n\tconstructor: THREE.Loader,\r\n\r\n\tcrossOrigin: 'anonymous',\r\n\r\n\taddStatusElement: function () {\r\n\r\n\t\tvar e = document.createElement( \"div\" );\r\n\r\n\t\te.style.position = \"absolute\";\r\n\t\te.style.right = \"0px\";\r\n\t\te.style.top = \"0px\";\r\n\t\te.style.fontSize = \"0.8em\";\r\n\t\te.style.textAlign = \"left\";\r\n\t\te.style.background = \"rgba(0,0,0,0.25)\";\r\n\t\te.style.color = \"#fff\";\r\n\t\te.style.width = \"120px\";\r\n\t\te.style.padding = \"0.5em 0.5em 0.5em 0.5em\";\r\n\t\te.style.zIndex = 1000;\r\n\r\n\t\te.innerHTML = \"Loading ...\";\r\n\r\n\t\treturn e;\r\n\r\n\t},\r\n\r\n\tupdateProgress: function ( progress ) {\r\n\r\n\t\tvar message = \"Loaded \";\r\n\r\n\t\tif ( progress.total ) {\r\n\r\n\t\t\tmessage += ( 100 * progress.loaded / progress.total ).toFixed(0) + \"%\";\r\n\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmessage += ( progress.loaded / 1000 ).toFixed(2) + \" KB\";\r\n\r\n\t\t}\r\n\r\n\t\tthis.statusDomElement.innerHTML = message;\r\n\r\n\t},\r\n\r\n\textractUrlBase: function ( url ) {\r\n\r\n\t\tvar parts = url.split( '/' );\r\n\t\tparts.pop();\r\n\t\treturn ( parts.length < 1 ? '.' : parts.join( '/' ) ) + '/';\r\n\r\n\t},\r\n\r\n\tinitMaterials: function ( materials, texturePath ) {\r\n\r\n\t\tvar array = [];\r\n\r\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\r\n\r\n\t\t\tarray[ i ] = THREE.Loader.prototype.createMaterial( materials[ i ], texturePath );\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tneedsTangents: function ( materials ) {\r\n\r\n\t\tfor( var i = 0, il = materials.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar m = materials[ i ];\r\n\r\n\t\t\tif ( m instanceof THREE.ShaderMaterial ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tcreateMaterial: function ( m, texturePath ) {\r\n\r\n\t\tvar _this = this;\r\n\r\n\t\tfunction is_pow2( n ) {\r\n\r\n\t\t\tvar l = Math.log( n ) / Math.LN2;\r\n\t\t\treturn Math.floor( l ) == l;\r\n\r\n\t\t}\r\n\r\n\t\tfunction nearest_pow2( n ) {\r\n\r\n\t\t\tvar l = Math.log( n ) / Math.LN2;\r\n\t\t\treturn Math.pow( 2, Math.round(  l ) );\r\n\r\n\t\t}\r\n\r\n\t\tfunction load_image( where, url ) {\r\n\r\n\t\t\tvar image = new Image();\r\n\r\n\t\t\timage.onload = function () {\r\n\r\n\t\t\t\tif ( !is_pow2( this.width ) || !is_pow2( this.height ) ) {\r\n\r\n\t\t\t\t\tvar width = nearest_pow2( this.width );\r\n\t\t\t\t\tvar height = nearest_pow2( this.height );\r\n\r\n\t\t\t\t\twhere.image.width = width;\r\n\t\t\t\t\twhere.image.height = height;\r\n\t\t\t\t\twhere.image.getContext( '2d' ).drawImage( this, 0, 0, width, height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\twhere.image = this;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\twhere.needsUpdate = true;\r\n\r\n\t\t\t};\r\n\r\n\t\t\timage.crossOrigin = _this.crossOrigin;\r\n\t\t\timage.src = url;\r\n\r\n\t\t}\r\n\r\n\t\tfunction create_texture( where, name, sourceFile, repeat, offset, wrap, anisotropy ) {\r\n\r\n\t\t\tvar isCompressed = sourceFile.toLowerCase().endsWith( \".dds\" );\r\n\t\t\tvar fullPath = texturePath + \"/\" + sourceFile;\r\n\r\n\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\tvar texture = THREE.ImageUtils.loadCompressedTexture( fullPath );\r\n\r\n\t\t\t\twhere[ name ] = texture;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar texture = document.createElement( 'canvas' );\r\n\r\n\t\t\t\twhere[ name ] = new THREE.Texture( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhere[ name ].sourceFile = sourceFile;\r\n\r\n\t\t\tif( repeat ) {\r\n\r\n\t\t\t\twhere[ name ].repeat.set( repeat[ 0 ], repeat[ 1 ] );\r\n\r\n\t\t\t\tif ( repeat[ 0 ] !== 1 ) where[ name ].wrapS = THREE.RepeatWrapping;\r\n\t\t\t\tif ( repeat[ 1 ] !== 1 ) where[ name ].wrapT = THREE.RepeatWrapping;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset ) {\r\n\r\n\t\t\t\twhere[ name ].offset.set( offset[ 0 ], offset[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( wrap ) {\r\n\r\n\t\t\t\tvar wrapMap = {\r\n\t\t\t\t\t\"repeat\": THREE.RepeatWrapping,\r\n\t\t\t\t\t\"mirror\": THREE.MirroredRepeatWrapping\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( wrapMap[ wrap[ 0 ] ] !== undefined ) where[ name ].wrapS = wrapMap[ wrap[ 0 ] ];\r\n\t\t\t\tif ( wrapMap[ wrap[ 1 ] ] !== undefined ) where[ name ].wrapT = wrapMap[ wrap[ 1 ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( anisotropy ) {\r\n\r\n\t\t\t\twhere[ name ].anisotropy = anisotropy;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! isCompressed ) {\r\n\r\n\t\t\t\tload_image( where[ name ], fullPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction rgb2hex( rgb ) {\r\n\r\n\t\t\treturn ( rgb[ 0 ] * 255 << 16 ) + ( rgb[ 1 ] * 255 << 8 ) + rgb[ 2 ] * 255;\r\n\r\n\t\t}\r\n\r\n\t\t// defaults\r\n\r\n\t\tvar mtype = \"MeshLambertMaterial\";\r\n\t\tvar mpars = { color: 0xeeeeee, opacity: 1.0, map: null, lightMap: null, normalMap: null, bumpMap: null, wireframe: false };\r\n\r\n\t\t// parameters from model file\r\n\r\n\t\tif ( m.shading ) {\r\n\r\n\t\t\tvar shading = m.shading.toLowerCase();\r\n\r\n\t\t\tif ( shading === \"phong\" ) mtype = \"MeshPhongMaterial\";\r\n\t\t\telse if ( shading === \"basic\" ) mtype = \"MeshBasicMaterial\";\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.blending !== undefined && THREE[ m.blending ] !== undefined ) {\r\n\r\n\t\t\tmpars.blending = THREE[ m.blending ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.transparent !== undefined || m.opacity < 1.0 ) {\r\n\r\n\t\t\tmpars.transparent = m.transparent;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.depthTest !== undefined ) {\r\n\r\n\t\t\tmpars.depthTest = m.depthTest;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.depthWrite !== undefined ) {\r\n\r\n\t\t\tmpars.depthWrite = m.depthWrite;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.visible !== undefined ) {\r\n\r\n\t\t\tmpars.visible = m.visible;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.flipSided !== undefined ) {\r\n\r\n\t\t\tmpars.side = THREE.BackSide;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.doubleSided !== undefined ) {\r\n\r\n\t\t\tmpars.side = THREE.DoubleSide;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.wireframe !== undefined ) {\r\n\r\n\t\t\tmpars.wireframe = m.wireframe;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.vertexColors !== undefined ) {\r\n\r\n\t\t\tif ( m.vertexColors === \"face\" ) {\r\n\r\n\t\t\t\tmpars.vertexColors = THREE.FaceColors;\r\n\r\n\t\t\t} else if ( m.vertexColors ) {\r\n\r\n\t\t\t\tmpars.vertexColors = THREE.VertexColors;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// colors\r\n\r\n\t\tif ( m.colorDiffuse ) {\r\n\r\n\t\t\tmpars.color = rgb2hex( m.colorDiffuse );\r\n\r\n\t\t} else if ( m.DbgColor ) {\r\n\r\n\t\t\tmpars.color = m.DbgColor;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.colorSpecular ) {\r\n\r\n\t\t\tmpars.specular = rgb2hex( m.colorSpecular );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.colorAmbient ) {\r\n\r\n\t\t\tmpars.ambient = rgb2hex( m.colorAmbient );\r\n\r\n\t\t}\r\n\r\n\t\t// modifiers\r\n\r\n\t\tif ( m.transparency ) {\r\n\r\n\t\t\tmpars.opacity = m.transparency;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.specularCoef ) {\r\n\r\n\t\t\tmpars.shininess = m.specularCoef;\r\n\r\n\t\t}\r\n\r\n\t\t// textures\r\n\r\n\t\tif ( m.mapDiffuse && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"map\", m.mapDiffuse, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.mapLight && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"lightMap\", m.mapLight, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.mapBump && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"bumpMap\", m.mapBump, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.mapNormal && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"normalMap\", m.mapNormal, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.mapSpecular && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"specularMap\", m.mapSpecular, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( m.mapBumpScale ) {\r\n\r\n\t\t\tmpars.bumpScale = m.mapBumpScale;\r\n\r\n\t\t}\r\n\r\n\t\t// special case for normal mapped material\r\n\r\n\t\tif ( m.mapNormal ) {\r\n\r\n\t\t\tvar shader = THREE.ShaderLib[ \"normalmap\" ];\r\n\t\t\tvar uniforms = THREE.UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\t\tuniforms[ \"tNormal\" ].value = mpars.normalMap;\r\n\r\n\t\t\tif ( m.mapNormalFactor ) {\r\n\r\n\t\t\t\tuniforms[ \"uNormalScale\" ].value.set( m.mapNormalFactor, m.mapNormalFactor );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( mpars.map ) {\r\n\r\n\t\t\t\tuniforms[ \"tDiffuse\" ].value = mpars.map;\r\n\t\t\t\tuniforms[ \"enableDiffuse\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( mpars.specularMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tSpecular\" ].value = mpars.specularMap;\r\n\t\t\t\tuniforms[ \"enableSpecular\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( mpars.lightMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tAO\" ].value = mpars.lightMap;\r\n\t\t\t\tuniforms[ \"enableAO\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// for the moment don't handle displacement texture\r\n\r\n\t\t\tuniforms[ \"uDiffuseColor\" ].value.setHex( mpars.color );\r\n\t\t\tuniforms[ \"uSpecularColor\" ].value.setHex( mpars.specular );\r\n\t\t\tuniforms[ \"uAmbientColor\" ].value.setHex( mpars.ambient );\r\n\r\n\t\t\tuniforms[ \"uShininess\" ].value = mpars.shininess;\r\n\r\n\t\t\tif ( mpars.opacity !== undefined ) {\r\n\r\n\t\t\t\tuniforms[ \"uOpacity\" ].value = mpars.opacity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };\r\n\t\t\tvar material = new THREE.ShaderMaterial( parameters );\r\n\r\n\t\t\tif ( mpars.transparent ) {\r\n\r\n\t\t\t\tmaterial.transparent = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar material = new THREE[ mtype ]( mpars );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.DbgName !== undefined ) material.name = m.DbgName;\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ImageLoader = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.crossOrigin = null;\r\n\r\n};\r\n\r\nTHREE.ImageLoader.prototype = {\r\n\r\n\tconstructor: THREE.ImageLoader,\r\n\r\n\tload: function ( url, image ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tif ( image === undefined ) image = new Image();\r\n\r\n\t\timage.addEventListener( 'load', function () {\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'load', content: image } );\r\n\r\n\t\t}, false );\r\n\r\n\t\timage.addEventListener( 'error', function () {\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'error', message: 'Couldn\\'t load URL [' + url + ']' } );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( scope.crossOrigin ) image.crossOrigin = scope.crossOrigin;\r\n\r\n\t\timage.src = url;\r\n\r\n\t}\r\n\r\n}\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.JSONLoader = function ( showStatus ) {\r\n\r\n\tTHREE.Loader.call( this, showStatus );\r\n\r\n\tthis.withCredentials = false;\r\n\r\n};\r\n\r\nTHREE.JSONLoader.prototype = Object.create( THREE.Loader.prototype );\r\n\r\nTHREE.JSONLoader.prototype.load = function ( url, callback, texturePath ) {\r\n\r\n\tvar scope = this;\r\n\r\n\t// todo: unify load API to for easier SceneLoader use\r\n\r\n\ttexturePath = texturePath && ( typeof texturePath === \"string\" ) ? texturePath : this.extractUrlBase( url );\r\n\r\n\tthis.onLoadStart();\r\n\tthis.loadAjaxJSON( this, url, callback, texturePath );\r\n\r\n};\r\n\r\nTHREE.JSONLoader.prototype.loadAjaxJSON = function ( context, url, callback, texturePath, callbackProgress ) {\r\n\r\n\tvar xhr = new XMLHttpRequest();\r\n\r\n\tvar length = 0;\r\n\r\n\txhr.onreadystatechange = function () {\r\n\r\n\t\tif ( xhr.readyState === xhr.DONE ) {\r\n\r\n\t\t\tif ( xhr.status === 200 || xhr.status === 0 ) {\r\n\r\n\t\t\t\tif ( xhr.responseText ) {\r\n\r\n\t\t\t\t\tvar json = JSON.parse( xhr.responseText );\r\n\t\t\t\t\tcontext.createModel( json, callback, texturePath );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.JSONLoader: [\" + url + \"] seems to be unreachable or file there is empty\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// in context of more complex asset initialization\r\n\t\t\t\t// do not block on single failed file\r\n\t\t\t\t// maybe should go even one more level up\r\n\r\n\t\t\t\tcontext.onLoadComplete();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( \"THREE.JSONLoader: Couldn't load [\" + url + \"] [\" + xhr.status + \"]\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( xhr.readyState === xhr.LOADING ) {\r\n\r\n\t\t\tif ( callbackProgress ) {\r\n\r\n\t\t\t\tif ( length === 0 ) {\r\n\r\n\t\t\t\t\tlength = xhr.getResponseHeader( \"Content-Length\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallbackProgress( { total: length, loaded: xhr.responseText.length } );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( xhr.readyState === xhr.HEADERS_RECEIVED ) {\r\n\r\n\t\t\tlength = xhr.getResponseHeader( \"Content-Length\" );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\txhr.open( \"GET\", url, true );\r\n\txhr.withCredentials = this.withCredentials;\r\n\txhr.send( null );\r\n\r\n};\r\n\r\nTHREE.JSONLoader.prototype.createModel = function ( json, callback, texturePath ) {\r\n\r\n\tvar scope = this,\r\n\tgeometry = new THREE.Geometry(),\r\n\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\r\n\r\n\tparseModel( scale );\r\n\r\n\tparseSkin();\r\n\tparseMorphing( scale );\r\n\r\n\tgeometry.computeCentroids();\r\n\tgeometry.computeFaceNormals();\r\n\r\n\tfunction parseModel( scale ) {\r\n\r\n\t\tfunction isBitSet( value, position ) {\r\n\r\n\t\t\treturn value & ( 1 << position );\r\n\r\n\t\t}\r\n\r\n\t\tvar i, j, fi,\r\n\r\n\t\toffset, zLength, nVertices,\r\n\r\n\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\r\n\r\n\t\ttype,\r\n\t\tisQuad,\r\n\t\thasMaterial,\r\n\t\thasFaceUv, hasFaceVertexUv,\r\n\t\thasFaceNormal, hasFaceVertexNormal,\r\n\t\thasFaceColor, hasFaceVertexColor,\r\n\r\n\t\tvertex, face, color, normal,\r\n\r\n\t\tuvLayer, uvs, u, v,\r\n\r\n\t\tfaces = json.faces,\r\n\t\tvertices = json.vertices,\r\n\t\tnormals = json.normals,\r\n\t\tcolors = json.colors,\r\n\r\n\t\tnUvLayers = 0;\r\n\r\n\t\t// disregard empty arrays\r\n\r\n\t\tfor ( i = 0; i < json.uvs.length; i++ ) {\r\n\r\n\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 0; i < nUvLayers; i++ ) {\r\n\r\n\t\t\tgeometry.faceUvs[ i ] = [];\r\n\t\t\tgeometry.faceVertexUvs[ i ] = [];\r\n\r\n\t\t}\r\n\r\n\t\toffset = 0;\r\n\t\tzLength = vertices.length;\r\n\r\n\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\tvertex = new THREE.Vector3();\r\n\r\n\t\t\tvertex.x = vertices[ offset ++ ] * scale;\r\n\t\t\tvertex.y = vertices[ offset ++ ] * scale;\r\n\t\t\tvertex.z = vertices[ offset ++ ] * scale;\r\n\r\n\t\t\tgeometry.vertices.push( vertex );\r\n\r\n\t\t}\r\n\r\n\t\toffset = 0;\r\n\t\tzLength = faces.length;\r\n\r\n\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\ttype = faces[ offset ++ ];\r\n\r\n\r\n\t\t\tisQuad          \t= isBitSet( type, 0 );\r\n\t\t\thasMaterial         = isBitSet( type, 1 );\r\n\t\t\thasFaceUv           = isBitSet( type, 2 );\r\n\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\r\n\t\t\thasFaceNormal       = isBitSet( type, 4 );\r\n\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\r\n\t\t\thasFaceColor\t    = isBitSet( type, 6 );\r\n\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\r\n\r\n\t\t\t//console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceUv, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\r\n\r\n\t\t\tif ( isQuad ) {\r\n\r\n\t\t\t\tface = new THREE.Face4();\r\n\r\n\t\t\t\tface.a = faces[ offset ++ ];\r\n\t\t\t\tface.b = faces[ offset ++ ];\r\n\t\t\t\tface.c = faces[ offset ++ ];\r\n\t\t\t\tface.d = faces[ offset ++ ];\r\n\r\n\t\t\t\tnVertices = 4;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tface = new THREE.Face3();\r\n\r\n\t\t\t\tface.a = faces[ offset ++ ];\r\n\t\t\t\tface.b = faces[ offset ++ ];\r\n\t\t\t\tface.c = faces[ offset ++ ];\r\n\r\n\t\t\t\tnVertices = 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasMaterial ) {\r\n\r\n\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\tface.materialIndex = materialIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// to get face <=> uv index correspondence\r\n\r\n\t\t\tfi = geometry.faces.length;\r\n\r\n\t\t\tif ( hasFaceUv ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < nUvLayers; i++ ) {\r\n\r\n\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\tgeometry.faceUvs[ i ][ fi ] = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < nUvLayers; i++ ) {\r\n\r\n\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\tuvs = [];\r\n\r\n\t\t\t\t\tfor ( j = 0; j < nVertices; j ++ ) {\r\n\r\n\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\t\tuvs[ j ] = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = uvs;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\tnormal = new THREE.Vector3();\r\n\r\n\t\t\t\tnormal.x = normals[ normalIndex ++ ];\r\n\t\t\t\tnormal.y = normals[ normalIndex ++ ];\r\n\t\t\t\tnormal.z = normals[ normalIndex ];\r\n\r\n\t\t\t\tface.normal = normal;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < nVertices; i++ ) {\r\n\r\n\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\tnormal = new THREE.Vector3();\r\n\r\n\t\t\t\t\tnormal.x = normals[ normalIndex ++ ];\r\n\t\t\t\t\tnormal.y = normals[ normalIndex ++ ];\r\n\t\t\t\t\tnormal.z = normals[ normalIndex ];\r\n\r\n\t\t\t\t\tface.vertexNormals.push( normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\tcolor = new THREE.Color( colors[ colorIndex ] );\r\n\t\t\t\tface.color = color;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < nVertices; i++ ) {\r\n\r\n\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\tcolor = new THREE.Color( colors[ colorIndex ] );\r\n\t\t\t\t\tface.vertexColors.push( color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.faces.push( face );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction parseSkin() {\r\n\r\n\t\tvar i, l, x, y, z, w, a, b, c, d;\r\n\r\n\t\tif ( json.skinWeights ) {\r\n\r\n\t\t\tfor ( i = 0, l = json.skinWeights.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\tx = json.skinWeights[ i     ];\r\n\t\t\t\ty = json.skinWeights[ i + 1 ];\r\n\t\t\t\tz = 0;\r\n\t\t\t\tw = 0;\r\n\r\n\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.skinIndices ) {\r\n\r\n\t\t\tfor ( i = 0, l = json.skinIndices.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\ta = json.skinIndices[ i     ];\r\n\t\t\t\tb = json.skinIndices[ i + 1 ];\r\n\t\t\t\tc = 0;\r\n\t\t\t\td = 0;\r\n\r\n\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.bones = json.bones;\r\n\t\tgeometry.animation = json.animation;\r\n\r\n\t};\r\n\r\n\tfunction parseMorphing( scale ) {\r\n\r\n\t\tif ( json.morphTargets !== undefined ) {\r\n\r\n\t\t\tvar i, l, v, vl, dstVertices, srcVertices;\r\n\r\n\t\t\tfor ( i = 0, l = json.morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tgeometry.morphTargets[ i ] = {};\r\n\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\r\n\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\r\n\r\n\t\t\t\tdstVertices = geometry.morphTargets[ i ].vertices;\r\n\t\t\t\tsrcVertices = json.morphTargets [ i ].vertices;\r\n\r\n\t\t\t\tfor( v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\r\n\r\n\t\t\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\r\n\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\r\n\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\r\n\r\n\t\t\t\t\tdstVertices.push( vertex );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.morphColors !== undefined ) {\r\n\r\n\t\t\tvar i, l, c, cl, dstColors, srcColors, color;\r\n\r\n\t\t\tfor ( i = 0, l = json.morphColors.length; i < l; i++ ) {\r\n\r\n\t\t\t\tgeometry.morphColors[ i ] = {};\r\n\t\t\t\tgeometry.morphColors[ i ].name = json.morphColors[ i ].name;\r\n\t\t\t\tgeometry.morphColors[ i ].colors = [];\r\n\r\n\t\t\t\tdstColors = geometry.morphColors[ i ].colors;\r\n\t\t\t\tsrcColors = json.morphColors [ i ].colors;\r\n\r\n\t\t\t\tfor ( c = 0, cl = srcColors.length; c < cl; c += 3 ) {\r\n\r\n\t\t\t\t\tcolor = new THREE.Color( 0xffaa00 );\r\n\t\t\t\t\tcolor.setRGB( srcColors[ c ], srcColors[ c + 1 ], srcColors[ c + 2 ] );\r\n\t\t\t\t\tdstColors.push( color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar materials = this.initMaterials( json.materials, texturePath );\r\n\r\n\tif ( this.needsTangents( materials ) ) geometry.computeTangents();\r\n\r\n\tcallback( geometry, materials );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LoadingMonitor = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tvar loaded = 0;\r\n\tvar total = 0;\r\n\r\n\tvar onLoad = function ( event ) {\r\n\r\n\t\tloaded ++;\r\n\r\n\t\tscope.dispatchEvent( { type: 'progress', loaded: loaded, total: total } );\r\n\r\n\t\tif ( loaded === total ) {\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'load' } );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.add = function ( loader ) {\r\n\r\n\t\ttotal ++;\r\n\r\n\t\tloader.addEventListener( 'load', onLoad, false );\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SceneLoader = function () {\r\n\r\n\tthis.onLoadStart = function () {};\r\n\tthis.onLoadProgress = function() {};\r\n\tthis.onLoadComplete = function () {};\r\n\r\n\tthis.callbackSync = function () {};\r\n\tthis.callbackProgress = function () {};\r\n\r\n\tthis.geometryHandlerMap = {};\r\n\tthis.hierarchyHandlerMap = {};\r\n\r\n\tthis.addGeometryHandler( \"ascii\", THREE.JSONLoader );\r\n\r\n};\r\n\r\nTHREE.SceneLoader.prototype.constructor = THREE.SceneLoader;\r\n\r\nTHREE.SceneLoader.prototype.load = function ( url, callbackFinished ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar xhr = new XMLHttpRequest();\r\n\r\n\txhr.onreadystatechange = function () {\r\n\r\n\t\tif ( xhr.readyState === 4 ) {\r\n\r\n\t\t\tif ( xhr.status === 200 || xhr.status === 0 ) {\r\n\r\n\t\t\t\tvar json = JSON.parse( xhr.responseText );\r\n\t\t\t\tscope.parse( json, callbackFinished, url );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( \"THREE.SceneLoader: Couldn't load [\" + url + \"] [\" + xhr.status + \"]\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\txhr.open( \"GET\", url, true );\r\n\txhr.send( null );\r\n\r\n};\r\n\r\nTHREE.SceneLoader.prototype.addGeometryHandler = function ( typeID, loaderClass ) {\r\n\r\n\tthis.geometryHandlerMap[ typeID ] = { \"loaderClass\": loaderClass };\r\n\r\n};\r\n\r\nTHREE.SceneLoader.prototype.addHierarchyHandler = function ( typeID, loaderClass ) {\r\n\r\n\tthis.hierarchyHandlerMap[ typeID ] = { \"loaderClass\": loaderClass };\r\n\r\n};\r\n\r\nTHREE.SceneLoader.prototype.parse = function ( json, callbackFinished, url ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar urlBase = THREE.Loader.prototype.extractUrlBase( url );\r\n\r\n\tvar geometry, material, camera, fog,\r\n\t\ttexture, images, color,\r\n\t\tlight, hex, intensity,\r\n\t\tcounter_models, counter_textures,\r\n\t\ttotal_models, total_textures,\r\n\t\tresult;\r\n\r\n\tvar target_array = [];\r\n\r\n\tvar data = json;\r\n\r\n\t// async geometry loaders\r\n\r\n\tfor ( var typeID in this.geometryHandlerMap ) {\r\n\r\n\t\tvar loaderClass = this.geometryHandlerMap[ typeID ][ \"loaderClass\" ];\r\n\t\tthis.geometryHandlerMap[ typeID ][ \"loaderObject\" ] = new loaderClass();\r\n\r\n\t}\r\n\r\n\t// async hierachy loaders\r\n\r\n\tfor ( var typeID in this.hierarchyHandlerMap ) {\r\n\r\n\t\tvar loaderClass = this.hierarchyHandlerMap[ typeID ][ \"loaderClass\" ];\r\n\t\tthis.hierarchyHandlerMap[ typeID ][ \"loaderObject\" ] = new loaderClass();\r\n\r\n\t}\r\n\r\n\tcounter_models = 0;\r\n\tcounter_textures = 0;\r\n\r\n\tresult = {\r\n\r\n\t\tscene: new THREE.Scene(),\r\n\t\tgeometries: {},\r\n\t\tface_materials: {},\r\n\t\tmaterials: {},\r\n\t\ttextures: {},\r\n\t\tobjects: {},\r\n\t\tcameras: {},\r\n\t\tlights: {},\r\n\t\tfogs: {},\r\n\t\tempties: {},\r\n\t\tgroups: {}\r\n\r\n\t};\r\n\r\n\tif ( data.transform ) {\r\n\r\n\t\tvar position = data.transform.position,\r\n\t\t\trotation = data.transform.rotation,\r\n\t\t\tscale = data.transform.scale;\r\n\r\n\t\tif ( position )\r\n\t\t\tresult.scene.position.set( position[ 0 ], position[ 1 ], position [ 2 ] );\r\n\r\n\t\tif ( rotation )\r\n\t\t\tresult.scene.rotation.set( rotation[ 0 ], rotation[ 1 ], rotation [ 2 ] );\r\n\r\n\t\tif ( scale )\r\n\t\t\tresult.scene.scale.set( scale[ 0 ], scale[ 1 ], scale [ 2 ] );\r\n\r\n\t\tif ( position || rotation || scale ) {\r\n\r\n\t\t\tresult.scene.updateMatrix();\r\n\t\t\tresult.scene.updateMatrixWorld();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction get_url( source_url, url_type ) {\r\n\r\n\t\tif ( url_type == \"relativeToHTML\" ) {\r\n\r\n\t\t\treturn source_url;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn urlBase + \"/\" + source_url;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// toplevel loader function, delegates to handle_children\r\n\r\n\tfunction handle_objects() {\r\n\r\n\t\thandle_children( result.scene, data.objects );\r\n\r\n\t}\r\n\r\n\t// handle all the children from the loaded json and attach them to given parent\r\n\r\n\tfunction handle_children( parent, children ) {\r\n\r\n\t\tvar mat, dst, pos, rot, scl, quat;\r\n\r\n\t\tfor ( var objID in children ) {\r\n\r\n\t\t\t// check by id if child has already been handled,\r\n\t\t\t// if not, create new object\r\n\r\n\t\t\tif ( result.objects[ objID ] === undefined ) {\r\n\r\n\t\t\t\tvar objJSON = children[ objID ];\r\n\r\n\t\t\t\tvar object = null;\r\n\r\n\t\t\t\t// meshes\r\n\r\n\t\t\t\tif ( objJSON.type && ( objJSON.type in scope.hierarchyHandlerMap ) ) {\r\n\r\n\t\t\t\t\tif ( objJSON.loading === undefined ) {\r\n\r\n\t\t\t\t\t\tvar reservedTypes = { \"type\": 1, \"url\": 1, \"material\": 1,\r\n\t\t\t\t\t\t\t\t\t\t\t  \"position\": 1, \"rotation\": 1, \"scale\" : 1,\r\n\t\t\t\t\t\t\t\t\t\t\t  \"visible\": 1, \"children\": 1, \"properties\": 1,\r\n\t\t\t\t\t\t\t\t\t\t\t  \"skin\": 1, \"morph\": 1, \"mirroredLoop\": 1, \"duration\": 1 };\r\n\r\n\t\t\t\t\t\tvar loaderParameters = {};\r\n\r\n\t\t\t\t\t\tfor ( var parType in objJSON ) {\r\n\r\n\t\t\t\t\t\t\tif ( ! ( parType in reservedTypes ) ) {\r\n\r\n\t\t\t\t\t\t\t\tloaderParameters[ parType ] = objJSON[ parType ];\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaterial = result.materials[ objJSON.material ];\r\n\r\n\t\t\t\t\t\tobjJSON.loading = true;\r\n\r\n\t\t\t\t\t\tvar loader = scope.hierarchyHandlerMap[ objJSON.type ][ \"loaderObject\" ];\r\n\r\n\t\t\t\t\t\t// ColladaLoader\r\n\r\n\t\t\t\t\t\tif ( loader.options ) {\r\n\r\n\t\t\t\t\t\t\tloader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ) );\r\n\r\n\t\t\t\t\t\t// UTF8Loader\r\n\t\t\t\t\t\t// OBJLoader\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tloader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ), loaderParameters );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( objJSON.geometry !== undefined ) {\r\n\r\n\t\t\t\t\tgeometry = result.geometries[ objJSON.geometry ];\r\n\r\n\t\t\t\t\t// geometry already loaded\r\n\r\n\t\t\t\t\tif ( geometry ) {\r\n\r\n\t\t\t\t\t\tvar needsTangents = false;\r\n\r\n\t\t\t\t\t\tmaterial = result.materials[ objJSON.material ];\r\n\t\t\t\t\t\tneedsTangents = material instanceof THREE.ShaderMaterial;\r\n\r\n\t\t\t\t\t\tpos = objJSON.position;\r\n\t\t\t\t\t\trot = objJSON.rotation;\r\n\t\t\t\t\t\tscl = objJSON.scale;\r\n\t\t\t\t\t\tmat = objJSON.matrix;\r\n\t\t\t\t\t\tquat = objJSON.quaternion;\r\n\r\n\t\t\t\t\t\t// use materials from the model file\r\n\t\t\t\t\t\t// if there is no material specified in the object\r\n\r\n\t\t\t\t\t\tif ( ! objJSON.material ) {\r\n\r\n\t\t\t\t\t\t\tmaterial = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// use materials from the model file\r\n\t\t\t\t\t\t// if there is just empty face material\r\n\t\t\t\t\t\t// (must create new material as each model has its own face material)\r\n\r\n\t\t\t\t\t\tif ( ( material instanceof THREE.MeshFaceMaterial ) && material.materials.length === 0 ) {\r\n\r\n\t\t\t\t\t\t\tmaterial = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( material instanceof THREE.MeshFaceMaterial ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0; i < material.materials.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tneedsTangents = needsTangents || ( material.materials[ i ] instanceof THREE.ShaderMaterial );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( needsTangents ) {\r\n\r\n\t\t\t\t\t\t\tgeometry.computeTangents();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( objJSON.skin ) {\r\n\r\n\t\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry, material );\r\n\r\n\t\t\t\t\t\t} else if ( objJSON.morph ) {\r\n\r\n\t\t\t\t\t\t\tobject = new THREE.MorphAnimMesh( geometry, material );\r\n\r\n\t\t\t\t\t\t\tif ( objJSON.duration !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tobject.duration = objJSON.duration;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( objJSON.time !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tobject.time = objJSON.time;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( objJSON.mirroredLoop !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tobject.mirroredLoop = objJSON.mirroredLoop;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t\t\t\tgeometry.computeMorphNormals();\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tobject.name = objID;\r\n\r\n\t\t\t\t\t\tif ( mat ) {\r\n\r\n\t\t\t\t\t\t\tobject.matrixAutoUpdate = false;\r\n\t\t\t\t\t\t\tobject.matrix.set(\r\n\t\t\t\t\t\t\t\tmat[0],  mat[1],  mat[2],  mat[3],\r\n\t\t\t\t\t\t\t\tmat[4],  mat[5],  mat[6],  mat[7],\r\n\t\t\t\t\t\t\t\tmat[8],  mat[9],  mat[10], mat[11],\r\n\t\t\t\t\t\t\t\tmat[12], mat[13], mat[14], mat[15]\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tobject.position.set( pos[0], pos[1], pos[2] );\r\n\r\n\t\t\t\t\t\t\tif ( quat ) {\r\n\r\n\t\t\t\t\t\t\t\tobject.quaternion.set( quat[0], quat[1], quat[2], quat[3] );\r\n\t\t\t\t\t\t\t\tobject.useQuaternion = true;\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tobject.rotation.set( rot[0], rot[1], rot[2] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tobject.scale.set( scl[0], scl[1], scl[2] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tobject.visible = objJSON.visible;\r\n\t\t\t\t\t\tobject.castShadow = objJSON.castShadow;\r\n\t\t\t\t\t\tobject.receiveShadow = objJSON.receiveShadow;\r\n\r\n\t\t\t\t\t\tparent.add( object );\r\n\r\n\t\t\t\t\t\tresult.objects[ objID ] = object;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t// lights\r\n\r\n\t\t\t\t} else if ( objJSON.type === \"DirectionalLight\" || objJSON.type === \"PointLight\" || objJSON.type === \"AmbientLight\" ) {\r\n\r\n\t\t\t\t\thex = ( objJSON.color !== undefined ) ? objJSON.color : 0xffffff;\r\n\t\t\t\t\tintensity = ( objJSON.intensity !== undefined ) ? objJSON.intensity : 1;\r\n\r\n\t\t\t\t\tif ( objJSON.type === \"DirectionalLight\" ) {\r\n\r\n\t\t\t\t\t\tpos = objJSON.direction;\r\n\r\n\t\t\t\t\t\tlight = new THREE.DirectionalLight( hex, intensity );\r\n\t\t\t\t\t\tlight.position.set( pos[0], pos[1], pos[2] );\r\n\r\n\t\t\t\t\t\tif ( objJSON.target ) {\r\n\r\n\t\t\t\t\t\t\ttarget_array.push( { \"object\": light, \"targetName\" : objJSON.target } );\r\n\r\n\t\t\t\t\t\t\t// kill existing default target\r\n\t\t\t\t\t\t\t// otherwise it gets added to scene when parent gets added\r\n\r\n\t\t\t\t\t\t\tlight.target = null;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( objJSON.type === \"PointLight\" ) {\r\n\r\n\t\t\t\t\t\tpos = objJSON.position;\r\n\t\t\t\t\t\tdst = objJSON.distance;\r\n\r\n\t\t\t\t\t\tlight = new THREE.PointLight( hex, intensity, dst );\r\n\t\t\t\t\t\tlight.position.set( pos[0], pos[1], pos[2] );\r\n\r\n\t\t\t\t\t} else if ( objJSON.type === \"AmbientLight\" ) {\r\n\r\n\t\t\t\t\t\tlight = new THREE.AmbientLight( hex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tparent.add( light );\r\n\r\n\t\t\t\t\tlight.name = objID;\r\n\t\t\t\t\tresult.lights[ objID ] = light;\r\n\t\t\t\t\tresult.objects[ objID ] = light;\r\n\r\n\t\t\t\t// cameras\r\n\r\n\t\t\t\t} else if ( objJSON.type === \"PerspectiveCamera\" || objJSON.type === \"OrthographicCamera\" ) {\r\n\r\n\t\t\t\t\tif ( objJSON.type === \"PerspectiveCamera\" ) {\r\n\r\n\t\t\t\t\t\tcamera = new THREE.PerspectiveCamera( objJSON.fov, objJSON.aspect, objJSON.near, objJSON.far );\r\n\r\n\t\t\t\t\t} else if ( objJSON.type === \"OrthographicCamera\" ) {\r\n\r\n\t\t\t\t\t\tcamera = new THREE.OrthographicCamera( objJSON.left, objJSON.right, objJSON.top, objJSON.bottom, objJSON.near, objJSON.far );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpos = objJSON.position;\r\n\t\t\t\t\tcamera.position.set( pos[0], pos[1], pos[2] );\r\n\t\t\t\t\tparent.add( camera );\r\n\r\n\t\t\t\t\tcamera.name = objID;\r\n\t\t\t\t\tresult.cameras[ objID ] = camera;\r\n\t\t\t\t\tresult.objects[ objID ] = camera;\r\n\r\n\t\t\t\t// pure Object3D\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tpos = objJSON.position;\r\n\t\t\t\t\trot = objJSON.rotation;\r\n\t\t\t\t\tscl = objJSON.scale;\r\n\t\t\t\t\tquat = objJSON.quaternion;\r\n\r\n\t\t\t\t\tobject = new THREE.Object3D();\r\n\t\t\t\t\tobject.name = objID;\r\n\t\t\t\t\tobject.position.set( pos[0], pos[1], pos[2] );\r\n\r\n\t\t\t\t\tif ( quat ) {\r\n\r\n\t\t\t\t\t\tobject.quaternion.set( quat[0], quat[1], quat[2], quat[3] );\r\n\t\t\t\t\t\tobject.useQuaternion = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tobject.rotation.set( rot[0], rot[1], rot[2] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tobject.scale.set( scl[0], scl[1], scl[2] );\r\n\t\t\t\t\tobject.visible = ( objJSON.visible !== undefined ) ? objJSON.visible : false;\r\n\r\n\t\t\t\t\tparent.add( object );\r\n\r\n\t\t\t\t\tresult.objects[ objID ] = object;\r\n\t\t\t\t\tresult.empties[ objID ] = object;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( object ) {\r\n\r\n\t\t\t\t\tif ( objJSON.properties !== undefined )  {\r\n\r\n\t\t\t\t\t\tfor ( var key in objJSON.properties ) {\r\n\r\n\t\t\t\t\t\t\tvar value = objJSON.properties[ key ];\r\n\t\t\t\t\t\t\tobject.properties[ key ] = value;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( objJSON.groups !== undefined ) {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < objJSON.groups.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar groupID = objJSON.groups[ i ];\r\n\r\n\t\t\t\t\t\t\tif ( result.groups[ groupID ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tresult.groups[ groupID ] = [];\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tresult.groups[ groupID ].push( objID );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( objJSON.children !== undefined ) {\r\n\r\n\t\t\t\t\t\thandle_children( object, objJSON.children );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction handle_mesh( geo, mat, id ) {\r\n\r\n\t\tresult.geometries[ id ] = geo;\r\n\t\tresult.face_materials[ id ] = mat;\r\n\t\thandle_objects();\r\n\r\n\t};\r\n\r\n\tfunction handle_hierarchy( node, id, parent, material, obj ) {\r\n\r\n\t\tvar p = obj.position;\r\n\t\tvar r = obj.rotation;\r\n\t\tvar q = obj.quaternion;\r\n\t\tvar s = obj.scale;\r\n\r\n\t\tnode.position.set( p[0], p[1], p[2] );\r\n\r\n\t\tif ( q ) {\r\n\r\n\t\t\tnode.quaternion.set( q[0], q[1], q[2], q[3] );\r\n\t\t\tnode.useQuaternion = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnode.rotation.set( r[0], r[1], r[2] );\r\n\r\n\t\t}\r\n\r\n\t\tnode.scale.set( s[0], s[1], s[2] );\r\n\r\n\t\t// override children materials\r\n\t\t// if object material was specified in JSON explicitly\r\n\r\n\t\tif ( material ) {\r\n\r\n\t\t\tnode.traverse( function ( child )  {\r\n\r\n\t\t\t\tchild.material = material;\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\t// override children visibility\r\n\t\t// with root node visibility as specified in JSON\r\n\r\n\t\tvar visible = ( obj.visible !== undefined ) ? obj.visible : true;\r\n\r\n\t\tnode.traverse( function ( child )  {\r\n\r\n\t\t\tchild.visible = visible;\r\n\r\n\t\t} );\r\n\r\n\t\tparent.add( node );\r\n\r\n\t\tnode.name = id;\r\n\r\n\t\tresult.objects[ id ] = node;\r\n\t\thandle_objects();\r\n\r\n\t};\r\n\r\n\tfunction create_callback_geometry( id ) {\r\n\r\n\t\treturn function( geo, mat ) {\r\n\r\n\t\t\thandle_mesh( geo, mat, id );\r\n\r\n\t\t\tcounter_models -= 1;\r\n\r\n\t\t\tscope.onLoadComplete();\r\n\r\n\t\t\tasync_callback_gate();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction create_callback_hierachy( id, parent, material, obj ) {\r\n\r\n\t\treturn function( event ) {\r\n\r\n\t\t\tvar result;\r\n\r\n\t\t\t// loaders which use EventDispatcher\r\n\r\n\t\t\tif ( event.content ) {\r\n\r\n\t\t\t\tresult = event.content;\r\n\r\n\t\t\t// ColladaLoader\r\n\r\n\t\t\t} else if ( event.dae ) {\r\n\r\n\t\t\t\tresult = event.scene;\r\n\r\n\r\n\t\t\t// UTF8Loader\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult = event;\r\n\r\n\t\t\t}\r\n\r\n\t\t\thandle_hierarchy( result, id, parent, material, obj );\r\n\r\n\t\t\tcounter_models -= 1;\r\n\r\n\t\t\tscope.onLoadComplete();\r\n\r\n\t\t\tasync_callback_gate();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction create_callback_embed( id ) {\r\n\r\n\t\treturn function( geo, mat ) {\r\n\r\n\t\t\tresult.geometries[ id ] = geo;\r\n\t\t\tresult.face_materials[ id ] = mat;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction async_callback_gate() {\r\n\r\n\t\tvar progress = {\r\n\r\n\t\t\ttotalModels : total_models,\r\n\t\t\ttotalTextures : total_textures,\r\n\t\t\tloadedModels : total_models - counter_models,\r\n\t\t\tloadedTextures : total_textures - counter_textures\r\n\r\n\t\t};\r\n\r\n\t\tscope.callbackProgress( progress, result );\r\n\r\n\t\tscope.onLoadProgress();\r\n\r\n\t\tif ( counter_models === 0 && counter_textures === 0 ) {\r\n\r\n\t\t\tfinalize();\r\n\t\t\tcallbackFinished( result );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction finalize() {\r\n\r\n\t\t// take care of targets which could be asynchronously loaded objects\r\n\r\n\t\tfor ( var i = 0; i < target_array.length; i ++ ) {\r\n\r\n\t\t\tvar ta = target_array[ i ];\r\n\r\n\t\t\tvar target = result.objects[ ta.targetName ];\r\n\r\n\t\t\tif ( target ) {\r\n\r\n\t\t\t\tta.object.target = target;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// if there was error and target of specified name doesn't exist in the scene file\r\n\t\t\t\t// create instead dummy target\r\n\t\t\t\t// (target must be added to scene explicitly as parent is already added)\r\n\r\n\t\t\t\tta.object.target = new THREE.Object3D();\r\n\t\t\t\tresult.scene.add( ta.object.target );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tta.object.target.properties.targetInverse = ta.object;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar callbackTexture = function ( count ) {\r\n\r\n\t\tcounter_textures -= count;\r\n\t\tasync_callback_gate();\r\n\r\n\t\tscope.onLoadComplete();\r\n\r\n\t};\r\n\r\n\t// must use this instead of just directly calling callbackTexture\r\n\t// because of closure in the calling context loop\r\n\r\n\tvar generateTextureCallback = function ( count ) {\r\n\r\n\t\treturn function() {\r\n\r\n\t\t\tcallbackTexture( count );\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t// first go synchronous elements\r\n\r\n\t// fogs\r\n\r\n\tvar fogID, fogJSON;\r\n\r\n\tfor ( fogID in data.fogs ) {\r\n\r\n\t\tfogJSON = data.fogs[ fogID ];\r\n\r\n\t\tif ( fogJSON.type === \"linear\" ) {\r\n\r\n\t\t\tfog = new THREE.Fog( 0x000000, fogJSON.near, fogJSON.far );\r\n\r\n\t\t} else if ( fogJSON.type === \"exp2\" ) {\r\n\r\n\t\t\tfog = new THREE.FogExp2( 0x000000, fogJSON.density );\r\n\r\n\t\t}\r\n\r\n\t\tcolor = fogJSON.color;\r\n\t\tfog.color.setRGB( color[0], color[1], color[2] );\r\n\r\n\t\tresult.fogs[ fogID ] = fog;\r\n\r\n\t}\r\n\r\n\t// now come potentially asynchronous elements\r\n\r\n\t// geometries\r\n\r\n\t// count how many geometries will be loaded asynchronously\r\n\r\n\tvar geoID, geoJSON;\r\n\r\n\tfor ( geoID in data.geometries ) {\r\n\r\n\t\tgeoJSON = data.geometries[ geoID ];\r\n\r\n\t\tif ( geoJSON.type in this.geometryHandlerMap ) {\r\n\r\n\t\t\tcounter_models += 1;\r\n\r\n\t\t\tscope.onLoadStart();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// count how many hierarchies will be loaded asynchronously\r\n\r\n\tvar objID, objJSON;\r\n\r\n\tfor ( objID in data.objects ) {\r\n\r\n\t\tobjJSON = data.objects[ objID ];\r\n\r\n\t\tif ( objJSON.type && ( objJSON.type in this.hierarchyHandlerMap ) ) {\r\n\r\n\t\t\tcounter_models += 1;\r\n\r\n\t\t\tscope.onLoadStart();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttotal_models = counter_models;\r\n\r\n\tfor ( geoID in data.geometries ) {\r\n\r\n\t\tgeoJSON = data.geometries[ geoID ];\r\n\r\n\t\tif ( geoJSON.type === \"cube\" ) {\r\n\r\n\t\t\tgeometry = new THREE.CubeGeometry( geoJSON.width, geoJSON.height, geoJSON.depth, geoJSON.widthSegments, geoJSON.heightSegments, geoJSON.depthSegments );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"plane\" ) {\r\n\r\n\t\t\tgeometry = new THREE.PlaneGeometry( geoJSON.width, geoJSON.height, geoJSON.widthSegments, geoJSON.heightSegments );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"sphere\" ) {\r\n\r\n\t\t\tgeometry = new THREE.SphereGeometry( geoJSON.radius, geoJSON.widthSegments, geoJSON.heightSegments );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"cylinder\" ) {\r\n\r\n\t\t\tgeometry = new THREE.CylinderGeometry( geoJSON.topRad, geoJSON.botRad, geoJSON.height, geoJSON.radSegs, geoJSON.heightSegs );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"torus\" ) {\r\n\r\n\t\t\tgeometry = new THREE.TorusGeometry( geoJSON.radius, geoJSON.tube, geoJSON.segmentsR, geoJSON.segmentsT );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"icosahedron\" ) {\r\n\r\n\t\t\tgeometry = new THREE.IcosahedronGeometry( geoJSON.radius, geoJSON.subdivisions );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type in this.geometryHandlerMap ) {\r\n\r\n\t\t\tvar loaderParameters = {};\r\n\r\n\t\t\tfor ( var parType in geoJSON ) {\r\n\r\n\t\t\t\tif ( parType !== \"type\" && parType !== \"url\" ) {\r\n\r\n\t\t\t\t\tloaderParameters[ parType ] = geoJSON[ parType ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar loader = this.geometryHandlerMap[ geoJSON.type ][ \"loaderObject\" ];\r\n\t\t\tloader.load( get_url( geoJSON.url, data.urlBaseType ), create_callback_geometry( geoID ), loaderParameters );\r\n\r\n\t\t} else if ( geoJSON.type === \"embedded\" ) {\r\n\r\n\t\t\tvar modelJson = data.embeds[ geoJSON.id ],\r\n\t\t\t\ttexture_path = \"\";\r\n\r\n\t\t\t// pass metadata along to jsonLoader so it knows the format version\r\n\r\n\t\t\tmodelJson.metadata = data.metadata;\r\n\r\n\t\t\tif ( modelJson ) {\r\n\r\n\t\t\t\tvar jsonLoader = this.geometryHandlerMap[ \"ascii\" ][ \"loaderObject\" ];\r\n\t\t\t\tjsonLoader.createModel( modelJson, create_callback_embed( geoID ), texture_path );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// textures\r\n\r\n\t// count how many textures will be loaded asynchronously\r\n\r\n\tvar textureID, textureJSON;\r\n\r\n\tfor ( textureID in data.textures ) {\r\n\r\n\t\ttextureJSON = data.textures[ textureID ];\r\n\r\n\t\tif ( textureJSON.url instanceof Array ) {\r\n\r\n\t\t\tcounter_textures += textureJSON.url.length;\r\n\r\n\t\t\tfor( var n = 0; n < textureJSON.url.length; n ++ ) {\r\n\r\n\t\t\t\tscope.onLoadStart();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcounter_textures += 1;\r\n\r\n\t\t\tscope.onLoadStart();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttotal_textures = counter_textures;\r\n\r\n\tfor ( textureID in data.textures ) {\r\n\r\n\t\ttextureJSON = data.textures[ textureID ];\r\n\r\n\t\tif ( textureJSON.mapping !== undefined && THREE[ textureJSON.mapping ] !== undefined  ) {\r\n\r\n\t\t\ttextureJSON.mapping = new THREE[ textureJSON.mapping ]();\r\n\r\n\t\t}\r\n\r\n\t\tif ( textureJSON.url instanceof Array ) {\r\n\r\n\t\t\tvar count = textureJSON.url.length;\r\n\t\t\tvar url_array = [];\r\n\r\n\t\t\tfor( var i = 0; i < count; i ++ ) {\r\n\r\n\t\t\t\turl_array[ i ] = get_url( textureJSON.url[ i ], data.urlBaseType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar isCompressed = url_array[ 0 ].endsWith( \".dds\" );\r\n\r\n\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\ttexture = THREE.ImageUtils.loadCompressedTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttexture = THREE.ImageUtils.loadTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar isCompressed = textureJSON.url.toLowerCase().endsWith( \".dds\" );\r\n\t\t\tvar fullUrl = get_url( textureJSON.url, data.urlBaseType );\r\n\t\t\tvar textureCallback = generateTextureCallback( 1 );\r\n\r\n\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\ttexture = THREE.ImageUtils.loadCompressedTexture( fullUrl, textureJSON.mapping, textureCallback );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttexture = THREE.ImageUtils.loadTexture( fullUrl, textureJSON.mapping, textureCallback );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( THREE[ textureJSON.minFilter ] !== undefined )\r\n\t\t\t\ttexture.minFilter = THREE[ textureJSON.minFilter ];\r\n\r\n\t\t\tif ( THREE[ textureJSON.magFilter ] !== undefined )\r\n\t\t\t\ttexture.magFilter = THREE[ textureJSON.magFilter ];\r\n\r\n\t\t\tif ( textureJSON.anisotropy ) texture.anisotropy = textureJSON.anisotropy;\r\n\r\n\t\t\tif ( textureJSON.repeat ) {\r\n\r\n\t\t\t\ttexture.repeat.set( textureJSON.repeat[ 0 ], textureJSON.repeat[ 1 ] );\r\n\r\n\t\t\t\tif ( textureJSON.repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\tif ( textureJSON.repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureJSON.offset ) {\r\n\r\n\t\t\t\ttexture.offset.set( textureJSON.offset[ 0 ], textureJSON.offset[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// handle wrap after repeat so that default repeat can be overriden\r\n\r\n\t\t\tif ( textureJSON.wrap ) {\r\n\r\n\t\t\t\tvar wrapMap = {\r\n\t\t\t\t\"repeat\" \t: THREE.RepeatWrapping,\r\n\t\t\t\t\"mirror\"\t: THREE.MirroredRepeatWrapping\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( wrapMap[ textureJSON.wrap[ 0 ] ] !== undefined ) texture.wrapS = wrapMap[ textureJSON.wrap[ 0 ] ];\r\n\t\t\t\tif ( wrapMap[ textureJSON.wrap[ 1 ] ] !== undefined ) texture.wrapT = wrapMap[ textureJSON.wrap[ 1 ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tresult.textures[ textureID ] = texture;\r\n\r\n\t}\r\n\r\n\t// materials\r\n\r\n\tvar matID, matJSON;\r\n\tvar parID;\r\n\r\n\tfor ( matID in data.materials ) {\r\n\r\n\t\tmatJSON = data.materials[ matID ];\r\n\r\n\t\tfor ( parID in matJSON.parameters ) {\r\n\r\n\t\t\tif ( parID === \"envMap\" || parID === \"map\" || parID === \"lightMap\" || parID === \"bumpMap\" ) {\r\n\r\n\t\t\t\tmatJSON.parameters[ parID ] = result.textures[ matJSON.parameters[ parID ] ];\r\n\r\n\t\t\t} else if ( parID === \"shading\" ) {\r\n\r\n\t\t\t\tmatJSON.parameters[ parID ] = ( matJSON.parameters[ parID ] === \"flat\" ) ? THREE.FlatShading : THREE.SmoothShading;\r\n\r\n\t\t\t} else if ( parID === \"side\" ) {\r\n\r\n\t\t\t\tif ( matJSON.parameters[ parID ] == \"double\" ) {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.DoubleSide;\r\n\r\n\t\t\t\t} else if ( matJSON.parameters[ parID ] == \"back\" ) {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.BackSide;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.FrontSide;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( parID === \"blending\" ) {\r\n\r\n\t\t\t\tmatJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.NormalBlending;\r\n\r\n\t\t\t} else if ( parID === \"combine\" ) {\r\n\r\n\t\t\t\tmatJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.MultiplyOperation;\r\n\r\n\t\t\t} else if ( parID === \"vertexColors\" ) {\r\n\r\n\t\t\t\tif ( matJSON.parameters[ parID ] == \"face\" ) {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.FaceColors;\r\n\r\n\t\t\t\t// default to vertex colors if \"vertexColors\" is anything else face colors or 0 / null / false\r\n\r\n\t\t\t\t} else if ( matJSON.parameters[ parID ] )   {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.VertexColors;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( parID === \"wrapRGB\" ) {\r\n\r\n\t\t\t\tvar v3 = matJSON.parameters[ parID ];\r\n\t\t\t\tmatJSON.parameters[ parID ] = new THREE.Vector3( v3[ 0 ], v3[ 1 ], v3[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( matJSON.parameters.opacity !== undefined && matJSON.parameters.opacity < 1.0 ) {\r\n\r\n\t\t\tmatJSON.parameters.transparent = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( matJSON.parameters.normalMap ) {\r\n\r\n\t\t\tvar shader = THREE.ShaderLib[ \"normalmap\" ];\r\n\t\t\tvar uniforms = THREE.UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\t\tvar diffuse = matJSON.parameters.color;\r\n\t\t\tvar specular = matJSON.parameters.specular;\r\n\t\t\tvar ambient = matJSON.parameters.ambient;\r\n\t\t\tvar shininess = matJSON.parameters.shininess;\r\n\r\n\t\t\tuniforms[ \"tNormal\" ].value = result.textures[ matJSON.parameters.normalMap ];\r\n\r\n\t\t\tif ( matJSON.parameters.normalScale ) {\r\n\r\n\t\t\t\tuniforms[ \"uNormalScale\" ].value.set( matJSON.parameters.normalScale[ 0 ], matJSON.parameters.normalScale[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.map ) {\r\n\r\n\t\t\t\tuniforms[ \"tDiffuse\" ].value = matJSON.parameters.map;\r\n\t\t\t\tuniforms[ \"enableDiffuse\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.envMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tCube\" ].value = matJSON.parameters.envMap;\r\n\t\t\t\tuniforms[ \"enableReflection\" ].value = true;\r\n\t\t\t\tuniforms[ \"uReflectivity\" ].value = matJSON.parameters.reflectivity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.lightMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tAO\" ].value = matJSON.parameters.lightMap;\r\n\t\t\t\tuniforms[ \"enableAO\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.specularMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tSpecular\" ].value = result.textures[ matJSON.parameters.specularMap ];\r\n\t\t\t\tuniforms[ \"enableSpecular\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.displacementMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tDisplacement\" ].value = result.textures[ matJSON.parameters.displacementMap ];\r\n\t\t\t\tuniforms[ \"enableDisplacement\" ].value = true;\r\n\r\n\t\t\t\tuniforms[ \"uDisplacementBias\" ].value = matJSON.parameters.displacementBias;\r\n\t\t\t\tuniforms[ \"uDisplacementScale\" ].value = matJSON.parameters.displacementScale;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms[ \"uDiffuseColor\" ].value.setHex( diffuse );\r\n\t\t\tuniforms[ \"uSpecularColor\" ].value.setHex( specular );\r\n\t\t\tuniforms[ \"uAmbientColor\" ].value.setHex( ambient );\r\n\r\n\t\t\tuniforms[ \"uShininess\" ].value = shininess;\r\n\r\n\t\t\tif ( matJSON.parameters.opacity ) {\r\n\r\n\t\t\t\tuniforms[ \"uOpacity\" ].value = matJSON.parameters.opacity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };\r\n\r\n\t\t\tmaterial = new THREE.ShaderMaterial( parameters );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmaterial = new THREE[ matJSON.type ]( matJSON.parameters );\r\n\r\n\t\t}\r\n\r\n\t\tresult.materials[ matID ] = material;\r\n\r\n\t}\r\n\r\n\t// second pass through all materials to initialize MeshFaceMaterials\r\n\t// that could be referring to other materials out of order\r\n\r\n\tfor ( matID in data.materials ) {\r\n\r\n\t\tmatJSON = data.materials[ matID ];\r\n\r\n\t\tif ( matJSON.parameters.materials ) {\r\n\r\n\t\t\tvar materialArray = [];\r\n\r\n\t\t\tfor ( var i = 0; i < matJSON.parameters.materials.length; i ++ ) {\r\n\r\n\t\t\t\tvar label = matJSON.parameters.materials[ i ];\r\n\t\t\t\tmaterialArray.push( result.materials[ label ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult.materials[ matID ].materials = materialArray;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// objects ( synchronous init of procedural primitives )\r\n\r\n\thandle_objects();\r\n\r\n\t// defaults\r\n\r\n\tif ( result.cameras && data.defaults.camera ) {\r\n\r\n\t\tresult.currentCamera = result.cameras[ data.defaults.camera ];\r\n\r\n\t}\r\n\r\n\tif ( result.fogs && data.defaults.fog ) {\r\n\r\n\t\tresult.scene.fog = result.fogs[ data.defaults.fog ];\r\n\r\n\t}\r\n\r\n\t// synchronous callback\r\n\r\n\tscope.callbackSync( result );\r\n\r\n\t// just in case there are no async elements\r\n\r\n\tasync_callback_gate();\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.TextureLoader = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.crossOrigin = null;\r\n\r\n};\r\n\r\nTHREE.TextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.TextureLoader,\r\n\r\n\tload: function ( url ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar image = new Image();\r\n\r\n\t\timage.addEventListener( 'load', function () {\r\n\r\n\t\t\tvar texture = new THREE.Texture( image );\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'load', content: texture } );\r\n\r\n\t\t}, false );\r\n\r\n\t\timage.addEventListener( 'error', function () {\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'error', message: 'Couldn\\'t load URL [' + url + ']' } );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( scope.crossOrigin ) image.crossOrigin = scope.crossOrigin;\r\n\r\n\t\timage.src = url;\r\n\r\n\t}\r\n\r\n}\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Material = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.id = THREE.MaterialIdCount ++;\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.side = THREE.FrontSide;\r\n\r\n\tthis.opacity = 1;\r\n\tthis.transparent = false;\r\n\r\n\tthis.blending = THREE.NormalBlending;\r\n\r\n\tthis.blendSrc = THREE.SrcAlphaFactor;\r\n\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\r\n\tthis.blendEquation = THREE.AddEquation;\r\n\r\n\tthis.depthTest = true;\r\n\tthis.depthWrite = true;\r\n\r\n\tthis.polygonOffset = false;\r\n\tthis.polygonOffsetFactor = 0;\r\n\tthis.polygonOffsetUnits = 0;\r\n\r\n\tthis.alphaTest = 0;\r\n\r\n\tthis.overdraw = false; // Boolean for fixing antialiasing gaps in CanvasRenderer\r\n\r\n\tthis.visible = true;\r\n\r\n\tthis.needsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.Material.prototype.setValues = function ( values ) {\r\n\r\n\tif ( values === undefined ) return;\r\n\r\n\tfor ( var key in values ) {\r\n\r\n\t\tvar newValue = values[ key ];\r\n\r\n\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\r\n\t\t\tcontinue;\r\n\r\n\t\t}\r\n\r\n\t\tif ( key in this ) {\r\n\r\n\t\t\tvar currentValue = this[ key ];\r\n\r\n\t\t\tif ( currentValue instanceof THREE.Color && newValue instanceof THREE.Color ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else if ( currentValue instanceof THREE.Color ) {\r\n\r\n\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Material.prototype.clone = function ( material ) {\r\n\r\n\tif ( material === undefined ) material = new THREE.Material();\r\n\r\n\tmaterial.name = this.name;\r\n\r\n\tmaterial.side = this.side;\r\n\r\n\tmaterial.opacity = this.opacity;\r\n\tmaterial.transparent = this.transparent;\r\n\r\n\tmaterial.blending = this.blending;\r\n\r\n\tmaterial.blendSrc = this.blendSrc;\r\n\tmaterial.blendDst = this.blendDst;\r\n\tmaterial.blendEquation = this.blendEquation;\r\n\r\n\tmaterial.depthTest = this.depthTest;\r\n\tmaterial.depthWrite = this.depthWrite;\r\n\r\n\tmaterial.polygonOffset = this.polygonOffset;\r\n\tmaterial.polygonOffsetFactor = this.polygonOffsetFactor;\r\n\tmaterial.polygonOffsetUnits = this.polygonOffsetUnits;\r\n\r\n\tmaterial.alphaTest = this.alphaTest;\r\n\r\n\tmaterial.overdraw = this.overdraw;\r\n\r\n\tmaterial.visible = this.visible;\r\n\r\n\treturn material;\r\n\r\n};\r\n\r\nTHREE.Material.prototype.dispose = function () {\r\n\r\n\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n};\r\n\r\nTHREE.MaterialIdCount = 0;\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  linewidth: <float>,\r\n *  linecap: \"round\",\r\n *  linejoin: \"round\",\r\n *\r\n *  vertexColors: <bool>\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.LineBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\tthis.linecap = 'round';\r\n\tthis.linejoin = 'round';\r\n\r\n\tthis.vertexColors = false;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.LineBasicMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.LineBasicMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\r\n\tmaterial.linewidth = this.linewidth;\r\n\tmaterial.linecap = this.linecap;\r\n\tmaterial.linejoin = this.linejoin;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  linewidth: <float>,\r\n *\r\n *  scale: <float>,\r\n *  dashSize: <float>,\r\n *  gapSize: <float>,\r\n *\r\n *  vertexColors: <bool>\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.LineDashedMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\r\n\tthis.scale = 1;\r\n\tthis.dashSize = 3;\r\n\tthis.gapSize = 1;\r\n\r\n\tthis.vertexColors = false;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.LineDashedMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.LineDashedMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\r\n\tmaterial.linewidth = this.linewidth;\r\n\r\n\tmaterial.scale = this.scale;\r\n\tmaterial.dashSize = this.dashSize;\r\n\tmaterial.gapSize = this.gapSize;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // emissive\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshBasicMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.MeshBasicMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.lightMap = this.lightMap;\r\n\r\n\tmaterial.specularMap = this.specularMap;\r\n\r\n\tmaterial.envMap = this.envMap;\r\n\tmaterial.combine = this.combine;\r\n\tmaterial.reflectivity = this.reflectivity;\r\n\tmaterial.refractionRatio = this.refractionRatio;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\tmaterial.wireframeLinecap = this.wireframeLinecap;\r\n\tmaterial.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.skinning = this.skinning;\r\n\tmaterial.morphTargets = this.morphTargets;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  ambient: <hex>,\r\n *  emissive: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshLambertMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.ambient = new THREE.Color( 0xffffff );\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\r\n\tthis.wrapAround = false;\r\n\tthis.wrapRGB = new THREE.Vector3( 1, 1, 1 );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshLambertMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.MeshLambertMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\tmaterial.ambient.copy( this.ambient );\r\n\tmaterial.emissive.copy( this.emissive );\r\n\r\n\tmaterial.wrapAround = this.wrapAround;\r\n\tmaterial.wrapRGB.copy( this.wrapRGB );\r\n\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.lightMap = this.lightMap;\r\n\r\n\tmaterial.specularMap = this.specularMap;\r\n\r\n\tmaterial.envMap = this.envMap;\r\n\tmaterial.combine = this.combine;\r\n\tmaterial.reflectivity = this.reflectivity;\r\n\tmaterial.refractionRatio = this.refractionRatio;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\tmaterial.wireframeLinecap = this.wireframeLinecap;\r\n\tmaterial.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.skinning = this.skinning;\r\n\tmaterial.morphTargets = this.morphTargets;\r\n\tmaterial.morphNormals = this.morphNormals;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  ambient: <hex>,\r\n *  emissive: <hex>,\r\n *  specular: <hex>,\r\n *  shininess: <float>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalScale: <Vector2>,\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshPhongMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.ambient = new THREE.Color( 0xffffff );\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\tthis.specular = new THREE.Color( 0x111111 );\r\n\tthis.shininess = 30;\r\n\r\n\tthis.metal = false;\r\n\tthis.perPixel = true;\r\n\r\n\tthis.wrapAround = false;\r\n\tthis.wrapRGB = new THREE.Vector3( 1, 1, 1 );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\r\n\tthis.bumpMap = null;\r\n\tthis.bumpScale = 1;\r\n\r\n\tthis.normalMap = null;\r\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshPhongMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.MeshPhongMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\tmaterial.ambient.copy( this.ambient );\r\n\tmaterial.emissive.copy( this.emissive );\r\n\tmaterial.specular.copy( this.specular );\r\n\tmaterial.shininess = this.shininess;\r\n\r\n\tmaterial.metal = this.metal;\r\n\tmaterial.perPixel = this.perPixel;\r\n\r\n\tmaterial.wrapAround = this.wrapAround;\r\n\tmaterial.wrapRGB.copy( this.wrapRGB );\r\n\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.lightMap = this.lightMap;\r\n\r\n\tmaterial.bumpMap = this.bumpMap;\r\n\tmaterial.bumpScale = this.bumpScale;\r\n\r\n\tmaterial.normalMap = this.normalMap;\r\n\tmaterial.normalScale.copy( this.normalScale );\r\n\r\n\tmaterial.specularMap = this.specularMap;\r\n\r\n\tmaterial.envMap = this.envMap;\r\n\tmaterial.combine = this.combine;\r\n\tmaterial.reflectivity = this.reflectivity;\r\n\tmaterial.refractionRatio = this.refractionRatio;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\tmaterial.wireframeLinecap = this.wireframeLinecap;\r\n\tmaterial.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.skinning = this.skinning;\r\n\tmaterial.morphTargets = this.morphTargets;\r\n\tmaterial.morphNormals = this.morphNormals;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  opacity: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshDepthMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshDepthMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.LineBasicMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * parameters = {\r\n *  opacity: <float>,\r\n *\r\n *  shading: THREE.FlatShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshNormalMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this, parameters );\r\n\r\n\tthis.shading = THREE.FlatShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshNormalMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.MeshNormalMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.MeshFaceMaterial = function ( materials ) {\r\n\r\n\tthis.materials = materials instanceof Array ? materials : [];\r\n\r\n};\r\n\r\nTHREE.MeshFaceMaterial.prototype.clone = function () {\r\n\r\n\treturn new THREE.MeshFaceMaterial( this.materials.slice( 0 ) );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  size: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  vertexColors: <bool>,\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.ParticleBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.size = 1;\r\n\tthis.sizeAttenuation = true;\r\n\r\n\tthis.vertexColors = false;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.ParticleBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.ParticleBasicMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.ParticleBasicMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.size = this.size;\r\n\tmaterial.sizeAttenuation = this.sizeAttenuation;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  program: <function>,\r\n *  opacity: <float>,\r\n *  blending: THREE.NormalBlending\r\n * }\r\n */\r\n\r\nTHREE.ParticleCanvasMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\tthis.program = function ( context, color ) {};\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.ParticleCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.ParticleCanvasMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.ParticleCanvasMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\tmaterial.program = this.program;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  fragmentShader: <string>,\r\n *  vertexShader: <string>,\r\n *\r\n *  uniforms: { \"parameter1\": { type: \"f\", value: 1.0 }, \"parameter2\": { type: \"i\" value2: 2 } },\r\n *\r\n *  defines: { \"label\" : \"value\" },\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  lights: <bool>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.ShaderMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.fragmentShader = \"void main() {}\";\r\n\tthis.vertexShader = \"void main() {}\";\r\n\tthis.uniforms = {};\r\n\tthis.defines = {};\r\n\tthis.attributes = null;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.fog = false; // set to use scene fog\r\n\r\n\tthis.lights = false; // set to use scene lights\r\n\r\n\tthis.vertexColors = THREE.NoColors; // set to use \"color\" attribute stream\r\n\r\n\tthis.skinning = false; // set to use skinning attribute streams\r\n\r\n\tthis.morphTargets = false; // set to use morph targets\r\n\tthis.morphNormals = false; // set to use morph normals\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.ShaderMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.ShaderMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.fragmentShader = this.fragmentShader;\r\n\tmaterial.vertexShader = this.vertexShader;\r\n\r\n\tmaterial.uniforms = THREE.UniformsUtils.clone( this.uniforms );\r\n\r\n\tmaterial.attributes = this.attributes;\r\n\tmaterial.defines = this.defines;\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\tmaterial.lights = this.lights;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.skinning = this.skinning;\r\n\r\n\tmaterial.morphTargets = this.morphTargets;\r\n\tmaterial.morphNormals = this.morphNormals;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  useScreenCoordinates: <bool>,\r\n *  sizeAttenuation: <bool>,\r\n *  scaleByViewport: <bool>,\r\n *  alignment: THREE.SpriteAlignment.center,\r\n *\r\n *\tuvOffset: new THREE.Vector2(),\r\n *\tuvScale: new THREE.Vector2(),\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.SpriteMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\t// defaults\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\tthis.map = new THREE.Texture();\r\n\r\n\tthis.useScreenCoordinates = true;\r\n\tthis.depthTest = !this.useScreenCoordinates;\r\n\tthis.sizeAttenuation = !this.useScreenCoordinates;\r\n\tthis.scaleByViewport = !this.sizeAttenuation;\r\n\tthis.alignment = THREE.SpriteAlignment.center.clone();\r\n\r\n\tthis.fog = false;\r\n\r\n\tthis.uvOffset = new THREE.Vector2( 0, 0 );\r\n\tthis.uvScale  = new THREE.Vector2( 1, 1 );\r\n\r\n\t// set parameters\r\n\r\n\tthis.setValues( parameters );\r\n\r\n\t// override coupled defaults if not specified explicitly by parameters\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tif ( parameters.depthTest === undefined ) this.depthTest = !this.useScreenCoordinates;\r\n\tif ( parameters.sizeAttenuation === undefined ) this.sizeAttenuation = !this.useScreenCoordinates;\r\n\tif ( parameters.scaleByViewport === undefined ) this.scaleByViewport = !this.sizeAttenuation;\r\n\r\n};\r\n\r\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.SpriteMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.SpriteMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.useScreenCoordinates = this.useScreenCoordinates;\r\n\tmaterial.sizeAttenuation = this.sizeAttenuation;\r\n\tmaterial.scaleByViewport = this.scaleByViewport;\r\n\tmaterial.alignment.copy( this.alignment );\r\n\r\n\tmaterial.uvOffset.copy( this.uvOffset );\r\n\tmaterial.uvScale.copy( this.uvScale );\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\treturn material;\r\n\r\n};\r\n\r\n// Alignment enums\r\n\r\nTHREE.SpriteAlignment = {};\r\nTHREE.SpriteAlignment.topLeft = new THREE.Vector2( 1, -1 );\r\nTHREE.SpriteAlignment.topCenter = new THREE.Vector2( 0, -1 );\r\nTHREE.SpriteAlignment.topRight = new THREE.Vector2( -1, -1 );\r\nTHREE.SpriteAlignment.centerLeft = new THREE.Vector2( 1, 0 );\r\nTHREE.SpriteAlignment.center = new THREE.Vector2( 0, 0 );\r\nTHREE.SpriteAlignment.centerRight = new THREE.Vector2( -1, 0 );\r\nTHREE.SpriteAlignment.bottomLeft = new THREE.Vector2( 1, 1 );\r\nTHREE.SpriteAlignment.bottomCenter = new THREE.Vector2( 0, 1 );\r\nTHREE.SpriteAlignment.bottomRight = new THREE.Vector2( -1, 1 );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n */\r\n\r\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.id = THREE.TextureIdCount ++;\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.image = image;\r\n\tthis.mipmaps = [];\r\n\r\n\tthis.mapping = mapping !== undefined ? mapping : new THREE.UVMapping();\r\n\r\n\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\r\n\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\r\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\r\n\r\n\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\r\n\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\r\n\r\n\tthis.offset = new THREE.Vector2( 0, 0 );\r\n\tthis.repeat = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.generateMipmaps = true;\r\n\tthis.premultiplyAlpha = false;\r\n\tthis.flipY = true;\r\n\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\tthis.needsUpdate = false;\r\n\tthis.onUpdate = null;\r\n\r\n};\r\n\r\nTHREE.Texture.prototype = {\r\n\r\n\tconstructor: THREE.Texture,\r\n\r\n\tclone: function ( texture ) {\r\n\r\n\t\tif ( texture === undefined ) texture = new THREE.Texture();\r\n\r\n\t\ttexture.image = this.image;\r\n\t\ttexture.mipmaps = this.mipmaps.slice(0);\r\n\r\n\t\ttexture.mapping = this.mapping;\r\n\r\n\t\ttexture.wrapS = this.wrapS;\r\n\t\ttexture.wrapT = this.wrapT;\r\n\r\n\t\ttexture.magFilter = this.magFilter;\r\n\t\ttexture.minFilter = this.minFilter;\r\n\r\n\t\ttexture.anisotropy = this.anisotropy;\r\n\r\n\t\ttexture.format = this.format;\r\n\t\ttexture.type = this.type;\r\n\r\n\t\ttexture.offset.copy( this.offset );\r\n\t\ttexture.repeat.copy( this.repeat );\r\n\r\n\t\ttexture.generateMipmaps = this.generateMipmaps;\r\n\t\ttexture.premultiplyAlpha = this.premultiplyAlpha;\r\n\t\ttexture.flipY = this.flipY;\r\n\t\ttexture.unpackAlignment = this.unpackAlignment;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.TextureIdCount = 0;\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.image = { width: width, height: height };\r\n\tthis.mipmaps = mipmaps;\r\n\r\n\tthis.generateMipmaps = false; // WebGL currently can't generate mipmaps for compressed textures, they must be embedded in DDS file\r\n\r\n};\r\n\r\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\r\nTHREE.CompressedTexture.prototype.clone = function () {\r\n\r\n\tvar texture = new THREE.CompressedTexture();\r\n\r\n\tTHREE.Texture.prototype.clone.call( this, texture );\r\n\r\n\treturn texture;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.image = { data: data, width: width, height: height };\r\n\r\n};\r\n\r\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\r\nTHREE.DataTexture.prototype.clone = function () {\r\n\r\n\tvar texture = new THREE.DataTexture();\r\n\r\n\tTHREE.Texture.prototype.clone.call( this, texture );\r\n\r\n\treturn texture;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Particle = function ( material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.material = material;\r\n\r\n};\r\n\r\nTHREE.Particle.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Particle.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Particle( this.material );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ParticleSystem = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.geometry = geometry;\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.ParticleBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\tthis.sortParticles = false;\r\n\r\n\tif ( this.geometry ) {\r\n\r\n\t\t// calc bound radius\r\n\r\n\t\tif( this.geometry.boundingSphere === null ) {\r\n\r\n\t\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.frustumCulled = false;\r\n\r\n};\r\n\r\nTHREE.ParticleSystem.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.ParticleSystem.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.ParticleSystem( this.geometry, this.material );\r\n\tobject.sortParticles = this.sortParticles;\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Line = function ( geometry, material, type ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.geometry = geometry;\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\tthis.type = ( type !== undefined ) ? type : THREE.LineStrip;\r\n\r\n\tif ( this.geometry ) {\r\n\r\n\t\tif ( ! this.geometry.boundingSphere ) {\r\n\r\n\t\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LineStrip = 0;\r\nTHREE.LinePieces = 1;\r\n\r\nTHREE.Line.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Line.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Line( this.geometry, this.material, this.type );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author jonobr1 / http://jonobr1.com/\r\n */\r\n\r\nTHREE.Mesh = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.geometry = geometry;\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff, wireframe: true } );\r\n\r\n\tif ( this.geometry !== undefined ) {\r\n\r\n\t\tif ( this.geometry.boundingSphere === null ) {\r\n\r\n\t\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Mesh.prototype.updateMorphTargets = function () {\r\n\r\n\tif ( this.geometry.morphTargets.length > 0 ) {\r\n\r\n\t\tthis.morphTargetBase = -1;\r\n\t\tthis.morphTargetForcedOrder = [];\r\n\t\tthis.morphTargetInfluences = [];\r\n\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\r\n\r\n\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {\r\n\r\n\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\r\n\r\n\t\treturn this.morphTargetDictionary[ name ];\r\n\r\n\t}\r\n\r\n\tconsole.log( \"THREE.Mesh.getMorphTargetIndexByName: morph target \" + name + \" does not exist. Returning 0.\" );\r\n\r\n\treturn 0;\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Mesh( this.geometry, this.material );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Bone = function( belongsToSkin ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.skin = belongsToSkin;\r\n\tthis.skinMatrix = new THREE.Matrix4();\r\n\r\n};\r\n\r\nTHREE.Bone.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Bone.prototype.update = function ( parentSkinMatrix, forceUpdate ) {\r\n\r\n\t// update local\r\n\r\n\tif ( this.matrixAutoUpdate ) {\r\n\r\n\t\tforceUpdate |= this.updateMatrix();\r\n\r\n\t}\r\n\r\n\t// update skin matrix\r\n\r\n\tif ( forceUpdate || this.matrixWorldNeedsUpdate ) {\r\n\r\n\t\tif( parentSkinMatrix ) {\r\n\r\n\t\t\tthis.skinMatrix.multiplyMatrices( parentSkinMatrix, this.matrix );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.skinMatrix.copy( this.matrix );\r\n\r\n\t\t}\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\t\tforceUpdate = true;\r\n\r\n\t}\r\n\r\n\t// update children\r\n\r\n\tvar child, i, l = this.children.length;\r\n\r\n\tfor ( i = 0; i < l; i ++ ) {\r\n\r\n\t\tthis.children[ i ].update( this.skinMatrix, forceUpdate );\r\n\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\t//\r\n\r\n\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\r\n\r\n\t// init bones\r\n\r\n\tthis.identityMatrix = new THREE.Matrix4();\r\n\r\n\tthis.bones = [];\r\n\tthis.boneMatrices = [];\r\n\r\n\tvar b, bone, gbone, p, q, s;\r\n\r\n\tif ( this.geometry && this.geometry.bones !== undefined ) {\r\n\r\n\t\tfor ( b = 0; b < this.geometry.bones.length; b ++ ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\r\n\t\t\tp = gbone.pos;\r\n\t\t\tq = gbone.rotq;\r\n\t\t\ts = gbone.scl;\r\n\r\n\t\t\tbone = this.addBone();\r\n\r\n\t\t\tbone.name = gbone.name;\r\n\t\t\tbone.position.set( p[0], p[1], p[2] );\r\n\t\t\tbone.quaternion.set( q[0], q[1], q[2], q[3] );\r\n\t\t\tbone.useQuaternion = true;\r\n\r\n\t\t\tif ( s !== undefined ) {\r\n\r\n\t\t\t\tbone.scale.set( s[0], s[1], s[2] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbone.scale.set( 1, 1, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( b = 0; b < this.bones.length; b ++ ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\t\t\tbone = this.bones[ b ];\r\n\r\n\t\t\tif ( gbone.parent === -1 ) {\r\n\r\n\t\t\t\tthis.add( bone );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.bones[ gbone.parent ].add( bone );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar nBones = this.bones.length;\r\n\r\n\t\tif ( this.useVertexTexture ) {\r\n\r\n\t\t\t// layout (1 matrix = 4 pixels)\r\n\t\t\t//\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t\t//  with  8x8  pixel texture max   16 bones  (8 * 8  / 4)\r\n\t\t\t//  \t 16x16 pixel texture max   64 bones (16 * 16 / 4)\r\n\t\t\t//  \t 32x32 pixel texture max  256 bones (32 * 32 / 4)\r\n\t\t\t//  \t 64x64 pixel texture max 1024 bones (64 * 64 / 4)\r\n\r\n\t\t\tvar size;\r\n\r\n\t\t\tif ( nBones > 256 )\r\n\t\t\t\tsize = 64;\r\n\t\t\telse if ( nBones > 64 )\r\n\t\t\t\tsize = 32;\r\n\t\t\telse if ( nBones > 16 )\r\n\t\t\t\tsize = 16;\r\n\t\t\telse\r\n\t\t\t\tsize = 8;\r\n\r\n\t\t\tthis.boneTextureWidth = size;\r\n\t\t\tthis.boneTextureHeight = size;\r\n\r\n\t\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\r\n\t\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\r\n\t\t\tthis.boneTexture.minFilter = THREE.NearestFilter;\r\n\t\t\tthis.boneTexture.magFilter = THREE.NearestFilter;\r\n\t\t\tthis.boneTexture.generateMipmaps = false;\r\n\t\t\tthis.boneTexture.flipY = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.boneMatrices = new Float32Array( 16 * nBones );\r\n\r\n\t\t}\r\n\r\n\t\tthis.pose();\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\r\nTHREE.SkinnedMesh.prototype.addBone = function( bone ) {\r\n\r\n\tif ( bone === undefined ) {\r\n\r\n\t\tbone = new THREE.Bone( this );\r\n\r\n\t}\r\n\r\n\tthis.bones.push( bone );\r\n\r\n\treturn bone;\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\tthis.matrixAutoUpdate && this.updateMatrix();\r\n\r\n\t// update matrixWorld\r\n\r\n\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\tif ( this.parent ) {\r\n\r\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t}\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tforce = true;\r\n\r\n\t}\r\n\r\n\t// update children\r\n\r\n\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\tvar child = this.children[ i ];\r\n\r\n\t\tif ( child instanceof THREE.Bone ) {\r\n\r\n\t\t\tchild.update( this.identityMatrix, false );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tchild.updateMatrixWorld( true );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// make a snapshot of the bones' rest position\r\n\r\n\tif ( this.boneInverses == undefined ) {\r\n\r\n\t\tthis.boneInverses = [];\r\n\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\tvar inverse = new THREE.Matrix4();\r\n\r\n\t\t\tinverse.getInverse( this.bones[ b ].skinMatrix );\r\n\r\n\t\t\tthis.boneInverses.push( inverse );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// flatten bone matrices to array\r\n\r\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t// compute the offset between the current and the original transform;\r\n\r\n\t\t//TODO: we could get rid of this multiplication step if the skinMatrix\r\n\t\t// was already representing the offset; however, this requires some\r\n\t\t// major changes to the animation system\r\n\r\n\t\tTHREE.SkinnedMesh.offsetMatrix.multiplyMatrices( this.bones[ b ].skinMatrix, this.boneInverses[ b ] );\r\n\r\n\t\tTHREE.SkinnedMesh.offsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );\r\n\r\n\t}\r\n\r\n\tif ( this.useVertexTexture ) {\r\n\r\n\t\tthis.boneTexture.needsUpdate = true;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.pose = function () {\r\n\r\n\tthis.updateMatrixWorld( true );\r\n\r\n\tfor ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {\r\n\r\n\t\t// normalize weights\r\n\r\n\t\tvar sw = this.geometry.skinWeights[ i ];\r\n\r\n\t\tvar scale = 1.0 / sw.lengthManhattan();\r\n\r\n\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\tsw.multiplyScalar( scale );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsw.set( 1 ); // this will be normalized by the shader anyway\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.SkinnedMesh( this.geometry, this.material, this.useVertexTexture );\r\n\r\n\tTHREE.Mesh.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.offsetMatrix = new THREE.Matrix4();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MorphAnimMesh = function ( geometry, material ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\t// API\r\n\r\n\tthis.duration = 1000; // milliseconds\r\n\tthis.mirroredLoop = false;\r\n\tthis.time = 0;\r\n\r\n\t// internals\r\n\r\n\tthis.lastKeyframe = 0;\r\n\tthis.currentKeyframe = 0;\r\n\r\n\tthis.direction = 1;\r\n\tthis.directionBackwards = false;\r\n\r\n\tthis.setFrameRange( 0, this.geometry.morphTargets.length - 1 );\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\r\nTHREE.MorphAnimMesh.prototype.setFrameRange = function ( start, end ) {\r\n\r\n\tthis.startKeyframe = start;\r\n\tthis.endKeyframe = end;\r\n\r\n\tthis.length = this.endKeyframe - this.startKeyframe + 1;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.setDirectionForward = function () {\r\n\r\n\tthis.direction = 1;\r\n\tthis.directionBackwards = false;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.setDirectionBackward = function () {\r\n\r\n\tthis.direction = -1;\r\n\tthis.directionBackwards = true;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.parseAnimations = function () {\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tif ( ! geometry.animations ) geometry.animations = {};\r\n\r\n\tvar firstAnimation, animations = geometry.animations;\r\n\r\n\tvar pattern = /([a-z]+)(\\d+)/;\r\n\r\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\tvar parts = morph.name.match( pattern );\r\n\r\n\t\tif ( parts && parts.length > 1 ) {\r\n\r\n\t\t\tvar label = parts[ 1 ];\r\n\t\t\tvar num = parts[ 2 ];\r\n\r\n\t\t\tif ( ! animations[ label ] ) animations[ label ] = { start: Infinity, end: -Infinity };\r\n\r\n\t\t\tvar animation = animations[ label ];\r\n\r\n\t\t\tif ( i < animation.start ) animation.start = i;\r\n\t\t\tif ( i > animation.end ) animation.end = i;\r\n\r\n\t\t\tif ( ! firstAnimation ) firstAnimation = label;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgeometry.firstAnimation = firstAnimation;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.setAnimationLabel = function ( label, start, end ) {\r\n\r\n\tif ( ! this.geometry.animations ) this.geometry.animations = {};\r\n\r\n\tthis.geometry.animations[ label ] = { start: start, end: end };\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.playAnimation = function ( label, fps ) {\r\n\r\n\tvar animation = this.geometry.animations[ label ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tthis.setFrameRange( animation.start, animation.end );\r\n\t\tthis.duration = 1000 * ( ( animation.end - animation.start ) / fps );\r\n\t\tthis.time = 0;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( \"animation[\" + label + \"] undefined\" );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.updateAnimation = function ( delta ) {\r\n\r\n\tvar frameTime = this.duration / this.length;\r\n\r\n\tthis.time += this.direction * delta;\r\n\r\n\tif ( this.mirroredLoop ) {\r\n\r\n\t\tif ( this.time > this.duration || this.time < 0 ) {\r\n\r\n\t\t\tthis.direction *= -1;\r\n\r\n\t\t\tif ( this.time > this.duration ) {\r\n\r\n\t\t\t\tthis.time = this.duration;\r\n\t\t\t\tthis.directionBackwards = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.time < 0 ) {\r\n\r\n\t\t\t\tthis.time = 0;\r\n\t\t\t\tthis.directionBackwards = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tthis.time = this.time % this.duration;\r\n\r\n\t\tif ( this.time < 0 ) this.time += this.duration;\r\n\r\n\t}\r\n\r\n\tvar keyframe = this.startKeyframe + THREE.Math.clamp( Math.floor( this.time / frameTime ), 0, this.length - 1 );\r\n\r\n\tif ( keyframe !== this.currentKeyframe ) {\r\n\r\n\t\tthis.morphTargetInfluences[ this.lastKeyframe ] = 0;\r\n\t\tthis.morphTargetInfluences[ this.currentKeyframe ] = 1;\r\n\r\n\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n\t\tthis.lastKeyframe = this.currentKeyframe;\r\n\t\tthis.currentKeyframe = keyframe;\r\n\r\n\t}\r\n\r\n\tvar mix = ( this.time % frameTime ) / frameTime;\r\n\r\n\tif ( this.directionBackwards ) {\r\n\r\n\t\tmix = 1 - mix;\r\n\r\n\t}\r\n\r\n\tthis.morphTargetInfluences[ this.currentKeyframe ] = mix;\r\n\tthis.morphTargetInfluences[ this.lastKeyframe ] = 1 - mix;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.MorphAnimMesh( this.geometry, this.material );\r\n\r\n\tobject.duration = this.duration;\r\n\tobject.mirroredLoop = this.mirroredLoop;\r\n\tobject.time = this.time;\r\n\r\n\tobject.lastKeyframe = this.lastKeyframe;\r\n\tobject.currentKeyframe = this.currentKeyframe;\r\n\r\n\tobject.direction = this.direction;\r\n\tobject.directionBackwards = this.directionBackwards;\r\n\r\n\tTHREE.Mesh.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Ribbon = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.geometry = geometry;\r\n\tthis.material = material;\r\n\r\n};\r\n\r\nTHREE.Ribbon.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Ribbon.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Ribbon( this.geometry, this.material );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LOD = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.LODs = [];\r\n\r\n};\r\n\r\n\r\nTHREE.LOD.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.LOD.prototype.addLevel = function ( object3D, visibleAtDistance ) {\r\n\r\n\tif ( visibleAtDistance === undefined ) {\r\n\r\n\t\tvisibleAtDistance = 0;\r\n\r\n\t}\r\n\r\n\tvisibleAtDistance = Math.abs( visibleAtDistance );\r\n\r\n\tfor ( var l = 0; l < this.LODs.length; l ++ ) {\r\n\r\n\t\tif ( visibleAtDistance < this.LODs[ l ].visibleAtDistance ) {\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.LODs.splice( l, 0, { visibleAtDistance: visibleAtDistance, object3D: object3D } );\r\n\tthis.add( object3D );\r\n\r\n};\r\n\r\nTHREE.LOD.prototype.update = function ( camera ) {\r\n\r\n\tif ( this.LODs.length > 1 ) {\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\tvar inverse  = camera.matrixWorldInverse;\r\n\t\tvar distance = -( inverse.elements[2] * this.matrixWorld.elements[12] + inverse.elements[6] * this.matrixWorld.elements[13] + inverse.elements[10] * this.matrixWorld.elements[14] + inverse.elements[14] );\r\n\r\n\t\tthis.LODs[ 0 ].object3D.visible = true;\r\n\r\n\t\tfor ( var l = 1; l < this.LODs.length; l ++ ) {\r\n\r\n\t\t\tif( distance >= this.LODs[ l ].visibleAtDistance ) {\r\n\r\n\t\t\t\tthis.LODs[ l - 1 ].object3D.visible = false;\r\n\t\t\t\tthis.LODs[ l     ].object3D.visible = true;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor( ; l < this.LODs.length; l ++ ) {\r\n\r\n\t\t\tthis.LODs[ l ].object3D.visible = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LOD.prototype.clone = function () {\r\n\r\n\t// TODO\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Sprite = function ( material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\r\n\r\n\tthis.rotation3d = this.rotation;\r\n\tthis.rotation = 0;\r\n\r\n};\r\n\r\nTHREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\n/*\r\n * Custom update matrix\r\n */\r\n\r\nTHREE.Sprite.prototype.updateMatrix = function () {\r\n\r\n\tthis.matrix.setPosition( this.position );\r\n\r\n\tthis.rotation3d.set( 0, 0, this.rotation );\r\n\tthis.matrix.setRotationFromEuler( this.rotation3d );\r\n\r\n\tif ( this.scale.x !== 1 || this.scale.y !== 1 ) {\r\n\r\n\t\tthis.matrix.scale( this.scale );\r\n\r\n\t}\r\n\r\n\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.Sprite.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Sprite( this.material );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Scene = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.fog = null;\r\n\tthis.overrideMaterial = null;\r\n\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.__objects = [];\r\n\tthis.__lights = [];\r\n\r\n\tthis.__objectsAdded = [];\r\n\tthis.__objectsRemoved = [];\r\n\r\n};\r\n\r\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Scene.prototype.__addObject = function ( object ) {\r\n\r\n\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\tif ( this.__lights.indexOf( object ) === - 1 ) {\r\n\r\n\t\t\tthis.__lights.push( object );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.target && object.target.parent === undefined ) {\r\n\r\n\t\t\tthis.add( object.target );\r\n\r\n\t\t}\r\n\r\n\t} else if ( !( object instanceof THREE.Camera || object instanceof THREE.Bone ) ) {\r\n\r\n\t\tif ( this.__objects.indexOf( object ) === - 1 ) {\r\n\r\n\t\t\tthis.__objects.push( object );\r\n\t\t\tthis.__objectsAdded.push( object );\r\n\r\n\t\t\t// check if previously removed\r\n\r\n\t\t\tvar i = this.__objectsRemoved.indexOf( object );\r\n\r\n\t\t\tif ( i !== -1 ) {\r\n\r\n\t\t\t\tthis.__objectsRemoved.splice( i, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var c = 0; c < object.children.length; c ++ ) {\r\n\r\n\t\tthis.__addObject( object.children[ c ] );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Scene.prototype.__removeObject = function ( object ) {\r\n\r\n\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\tvar i = this.__lights.indexOf( object );\r\n\r\n\t\tif ( i !== -1 ) {\r\n\r\n\t\t\tthis.__lights.splice( i, 1 );\r\n\r\n\t\t}\r\n\r\n\t} else if ( !( object instanceof THREE.Camera ) ) {\r\n\r\n\t\tvar i = this.__objects.indexOf( object );\r\n\r\n\t\tif( i !== -1 ) {\r\n\r\n\t\t\tthis.__objects.splice( i, 1 );\r\n\t\t\tthis.__objectsRemoved.push( object );\r\n\r\n\t\t\t// check if previously added\r\n\r\n\t\t\tvar ai = this.__objectsAdded.indexOf( object );\r\n\r\n\t\t\tif ( ai !== -1 ) {\r\n\r\n\t\t\t\tthis.__objectsAdded.splice( ai, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var c = 0; c < object.children.length; c ++ ) {\r\n\r\n\t\tthis.__removeObject( object.children[ c ] );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Fog = function ( hex, near, far ) {\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.color = new THREE.Color( hex );\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 1;\r\n\tthis.far = ( far !== undefined ) ? far : 1000;\r\n\r\n};\r\n\r\nTHREE.Fog.prototype.clone = function () {\r\n\r\n\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.FogExp2 = function ( hex, density ) {\r\n\r\n\tthis.name = '';\r\n\tthis.color = new THREE.Color( hex );\r\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\r\n\r\n};\r\n\r\nTHREE.FogExp2.prototype.clone = function () {\r\n\r\n\treturn new THREE.FogExp2( this.color.getHex(), this.density );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CanvasRenderer = function ( parameters ) {\r\n\r\n\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar _this = this,\r\n\t_renderData, _elements, _lights,\r\n\t_projector = new THREE.Projector(),\r\n\r\n\t_canvas = parameters.canvas !== undefined\r\n\t\t\t? parameters.canvas\r\n\t\t\t: document.createElement( 'canvas' ),\r\n\r\n\t_canvasWidth, _canvasHeight, _canvasWidthHalf, _canvasHeightHalf,\r\n\t_context = _canvas.getContext( '2d' ),\r\n\r\n\t_clearColor = new THREE.Color( 0x000000 ),\r\n\t_clearOpacity = 0,\r\n\r\n\t_contextGlobalAlpha = 1,\r\n\t_contextGlobalCompositeOperation = 0,\r\n\t_contextStrokeStyle = null,\r\n\t_contextFillStyle = null,\r\n\t_contextLineWidth = null,\r\n\t_contextLineCap = null,\r\n\t_contextLineJoin = null,\r\n\r\n\t_v1, _v2, _v3, _v4,\r\n\t_v5 = new THREE.RenderableVertex(),\r\n\t_v6 = new THREE.RenderableVertex(),\r\n\r\n\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\r\n\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\r\n\r\n\t_color = new THREE.Color(),\r\n\t_color1 = new THREE.Color(),\r\n\t_color2 = new THREE.Color(),\r\n\t_color3 = new THREE.Color(),\r\n\t_color4 = new THREE.Color(),\r\n\r\n\t_diffuseColor = new THREE.Color(),\r\n\t_emissiveColor = new THREE.Color(),\r\n\r\n\t_lightColor = new THREE.Color(),\r\n\r\n\t_patterns = {}, _imagedatas = {},\r\n\r\n\t_near, _far,\r\n\r\n\t_image, _uvs,\r\n\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\r\n\r\n\t_clipBox = new THREE.Box2(),\r\n\t_clearBox = new THREE.Box2(),\r\n\t_elemBox = new THREE.Box2(),\r\n\r\n\t_enableLighting = false,\r\n\t_ambientLight = new THREE.Color(),\r\n\t_directionalLights = new THREE.Color(),\r\n\t_pointLights = new THREE.Color(),\r\n\r\n\t_pi2 = Math.PI * 2,\r\n\t_vector3 = new THREE.Vector3(), // Needed for PointLight\r\n\r\n\t_pixelMap, _pixelMapContext, _pixelMapImage, _pixelMapData,\r\n\t_gradientMap, _gradientMapContext, _gradientMapQuality = 16;\r\n\r\n\t_pixelMap = document.createElement( 'canvas' );\r\n\t_pixelMap.width = _pixelMap.height = 2;\r\n\r\n\t_pixelMapContext = _pixelMap.getContext( '2d' );\r\n\t_pixelMapContext.fillStyle = 'rgba(0,0,0,1)';\r\n\t_pixelMapContext.fillRect( 0, 0, 2, 2 );\r\n\r\n\t_pixelMapImage = _pixelMapContext.getImageData( 0, 0, 2, 2 );\r\n\t_pixelMapData = _pixelMapImage.data;\r\n\r\n\t_gradientMap = document.createElement( 'canvas' );\r\n\t_gradientMap.width = _gradientMap.height = _gradientMapQuality;\r\n\r\n\t_gradientMapContext = _gradientMap.getContext( '2d' );\r\n\t_gradientMapContext.translate( - _gradientMapQuality / 2, - _gradientMapQuality / 2 );\r\n\t_gradientMapContext.scale( _gradientMapQuality, _gradientMapQuality );\r\n\r\n\t_gradientMapQuality --; // Fix UVs\r\n\r\n\tthis.domElement = _canvas;\r\n\r\n\tthis.devicePixelRatio = parameters.devicePixelRatio !== undefined\r\n\t\t\t\t? parameters.devicePixelRatio\r\n\t\t\t\t: window.devicePixelRatio !== undefined\r\n\t\t\t\t\t? window.devicePixelRatio\r\n\t\t\t\t\t: 1;\r\n\r\n\tthis.autoClear = true;\r\n\tthis.sortObjects = true;\r\n\tthis.sortElements = true;\r\n\r\n\tthis.info = {\r\n\r\n\t\trender: {\r\n\r\n\t\t\tvertices: 0,\r\n\t\t\tfaces: 0\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// WebGLRenderer compatibility\r\n\r\n\tthis.supportsVertexTextures = function () {};\r\n\tthis.setFaceCulling = function () {};\r\n\r\n\tthis.setSize = function ( width, height ) {\r\n\r\n\t\t_canvasWidth = width * this.devicePixelRatio;\r\n\t\t_canvasHeight = height * this.devicePixelRatio;\r\n\r\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\r\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\r\n\r\n\t\t_canvas.width = _canvasWidth;\r\n\t\t_canvas.height = _canvasHeight;\r\n\r\n\t\t_canvas.style.width = width + 'px';\r\n\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\t_clipBox.set(\r\n\t\t\tnew THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\r\n\t\t\tnew THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\r\n\t\t);\r\n\r\n\t\t_clearBox.set(\r\n\t\t\tnew THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\r\n\t\t\tnew THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\r\n\t\t);\r\n\r\n\t\t_contextGlobalAlpha = 1;\r\n\t\t_contextGlobalCompositeOperation = 0;\r\n\t\t_contextStrokeStyle = null;\r\n\t\t_contextFillStyle = null;\r\n\t\t_contextLineWidth = null;\r\n\t\t_contextLineCap = null;\r\n\t\t_contextLineJoin = null;\r\n\r\n\t};\r\n\r\n\tthis.setClearColor = function ( color, opacity ) {\r\n\r\n\t\t_clearColor.copy( color );\r\n\t\t_clearOpacity = opacity !== undefined ? opacity : 1;\r\n\r\n\t\t_clearBox.set(\r\n\t\t\tnew THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\r\n\t\t\tnew THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\r\n\t\t);\r\n\r\n\t};\r\n\r\n\tthis.setClearColorHex = function ( hex, opacity ) {\r\n\r\n\t\t_clearColor.setHex( hex );\r\n\t\t_clearOpacity = opacity !== undefined ? opacity : 1;\r\n\r\n\t\t_clearBox.set(\r\n\t\t\tnew THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\r\n\t\t\tnew THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\r\n\t\t);\r\n\r\n\t};\r\n\r\n\tthis.getMaxAnisotropy  = function () {\r\n\r\n\t\treturn 0;\r\n\r\n\t};\r\n\r\n\tthis.clear = function () {\r\n\r\n\t\t_context.setTransform( 1, 0, 0, - 1, _canvasWidthHalf, _canvasHeightHalf );\r\n\r\n\t\tif ( _clearBox.empty() === false ) {\r\n\r\n\t\t\t_clearBox.intersect( _clipBox );\r\n\t\t\t_clearBox.expandByScalar( 2 );\r\n\r\n\t\t\tif ( _clearOpacity < 1 ) {\r\n\r\n\t\t\t\t_context.clearRect(\r\n\t\t\t\t\t_clearBox.min.x | 0,\r\n\t\t\t\t\t_clearBox.min.y | 0,\r\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\r\n\t\t\t\t\t( _clearBox.max.y - _clearBox.min.y ) | 0\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _clearOpacity > 0 ) {\r\n\r\n\t\t\t\tsetBlending( THREE.NormalBlending );\r\n\t\t\t\tsetOpacity( 1 );\r\n\r\n\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearOpacity + ')' );\r\n\r\n\t\t\t\t_context.fillRect(\r\n\t\t\t\t\t_clearBox.min.x | 0,\r\n\t\t\t\t\t_clearBox.min.y | 0,\r\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\r\n\t\t\t\t\t( _clearBox.max.y - _clearBox.min.y ) | 0\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_clearBox.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.autoClear === true ) {\r\n\r\n\t\t\tthis.clear();\r\n\r\n\t\t}\r\n\r\n\t\t_context.setTransform( 1, 0, 0, - 1, _canvasWidthHalf, _canvasHeightHalf );\r\n\r\n\t\t_this.info.render.vertices = 0;\r\n\t\t_this.info.render.faces = 0;\r\n\r\n\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\r\n\t\t_elements = _renderData.elements;\r\n\t\t_lights = _renderData.lights;\r\n\r\n\t\t/* DEBUG\r\n\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\r\n\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\r\n\t\t*/\r\n\r\n\t\t_enableLighting = _lights.length > 0;\r\n\r\n\t\tif ( _enableLighting === true ) {\r\n\r\n\t\t\t calculateLights();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var e = 0, el = _elements.length; e < el; e++ ) {\r\n\r\n\t\t\tvar element = _elements[ e ];\r\n\r\n\t\t\tvar material = element.material;\r\n\r\n\t\t\tif ( material === undefined || material.visible === false ) continue;\r\n\r\n\t\t\t_elemBox.makeEmpty();\r\n\r\n\t\t\tif ( element instanceof THREE.RenderableParticle ) {\r\n\r\n\t\t\t\t_v1 = element;\r\n\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\trenderParticle( _v1, element, material, scene );\r\n\r\n\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\r\n\r\n\t\t\t\t_v1 = element.v1; _v2 = element.v2;\r\n\r\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\t_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen ] );\r\n\r\n\t\t\t\tif ( _clipBox.isIntersectionBox( _elemBox ) === true ) {\r\n\r\n\t\t\t\t\trenderLine( _v1, _v2, element, material, scene );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( element instanceof THREE.RenderableFace3 ) {\r\n\r\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\r\n\r\n\t\t\t\tif ( _v1.positionScreen.z < -1 || _v1.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v2.positionScreen.z < -1 || _v2.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v3.positionScreen.z < -1 || _v3.positionScreen.z > 1 ) continue;\r\n\r\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\tif ( material.overdraw === true ) {\r\n\r\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen );\r\n\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen );\r\n\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ] );\r\n\r\n\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material, scene );\r\n\r\n\t\t\t} else if ( element instanceof THREE.RenderableFace4 ) {\r\n\r\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3; _v4 = element.v4;\r\n\r\n\t\t\t\tif ( _v1.positionScreen.z < -1 || _v1.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v2.positionScreen.z < -1 || _v2.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v3.positionScreen.z < -1 || _v3.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v4.positionScreen.z < -1 || _v4.positionScreen.z > 1 ) continue;\r\n\r\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v4.positionScreen.x *= _canvasWidthHalf; _v4.positionScreen.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\t_v5.positionScreen.copy( _v2.positionScreen );\r\n\t\t\t\t_v6.positionScreen.copy( _v4.positionScreen );\r\n\r\n\t\t\t\tif ( material.overdraw === true ) {\r\n\r\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen );\r\n\t\t\t\t\texpand( _v2.positionScreen, _v4.positionScreen );\r\n\t\t\t\t\texpand( _v4.positionScreen, _v1.positionScreen );\r\n\r\n\t\t\t\t\texpand( _v3.positionScreen, _v5.positionScreen );\r\n\t\t\t\t\texpand( _v3.positionScreen, _v6.positionScreen );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen, _v4.positionScreen ] );\r\n\r\n\t\t\t\trenderFace4( _v1, _v2, _v3, _v4, _v5, _v6, element, material, scene );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/* DEBUG\r\n\t\t\tsetLineWidth( 1 );\r\n\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\r\n\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\r\n\t\t\t*/\r\n\r\n\t\t\t_clearBox.union( _elemBox );\r\n\r\n\t\t}\r\n\r\n\t\t/* DEBUG\r\n\t\tsetLineWidth( 1 );\r\n\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\r\n\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\r\n\t\t*/\r\n\r\n\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\r\n\r\n\t\t//\r\n\r\n\t\tfunction calculateLights() {\r\n\r\n\t\t\t_ambientLight.setRGB( 0, 0, 0 );\r\n\t\t\t_directionalLights.setRGB( 0, 0, 0 );\r\n\t\t\t_pointLights.setRGB( 0, 0, 0 );\r\n\r\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\t\tvar light = _lights[ l ];\r\n\t\t\t\tvar lightColor = light.color;\r\n\r\n\t\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\r\n\t\t\t\t\t_ambientLight.add( lightColor );\r\n\r\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\t\t// for particles\r\n\r\n\t\t\t\t\t_directionalLights.add( lightColor );\r\n\r\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\t\t// for particles\r\n\r\n\t\t\t\t\t_pointLights.add( lightColor );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction calculateLight( position, normal, color ) {\r\n\r\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\t\tvar light = _lights[ l ];\r\n\r\n\t\t\t\t_lightColor.copy( light.color );\r\n\r\n\t\t\t\tif ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\t\tvar lightPosition = light.matrixWorld.getPosition().normalize();\r\n\r\n\t\t\t\t\tvar amount = normal.dot( lightPosition );\r\n\r\n\t\t\t\t\tif ( amount <= 0 ) continue;\r\n\r\n\t\t\t\t\tamount *= light.intensity;\r\n\r\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\r\n\r\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\t\tvar lightPosition = light.matrixWorld.getPosition();\r\n\r\n\t\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\r\n\r\n\t\t\t\t\tif ( amount <= 0 ) continue;\r\n\r\n\t\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\r\n\r\n\t\t\t\t\tif ( amount == 0 ) continue;\r\n\r\n\t\t\t\t\tamount *= light.intensity;\r\n\r\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderParticle( v1, element, material, scene ) {\r\n\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\r\n\t\t\tvar width, height, scaleX, scaleY,\r\n\t\t\tbitmap, bitmapWidth, bitmapHeight;\r\n\r\n\t\t\tif ( material instanceof THREE.ParticleBasicMaterial ) {\r\n\r\n\t\t\t\tif ( material.map === null ) {\r\n\r\n\t\t\t\t\tscaleX = element.object.scale.x;\r\n\t\t\t\t\tscaleY = element.object.scale.y;\r\n\r\n\t\t\t\t\t// TODO: Be able to disable this\r\n\r\n\t\t\t\t\tscaleX *= element.scale.x * _canvasWidthHalf;\r\n\t\t\t\t\tscaleY *= element.scale.y * _canvasHeightHalf;\r\n\r\n\t\t\t\t\t_elemBox.min.set( v1.x - scaleX, v1.y - scaleY );\r\n\t\t\t\t\t_elemBox.max.set( v1.x + scaleX, v1.y + scaleY );\r\n\r\n\t\t\t\t\tif ( _clipBox.isIntersectionBox( _elemBox ) === false ) {\r\n\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tsetFillStyle( material.color.getStyle() );\r\n\r\n\t\t\t\t\t_context.save();\r\n\t\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\t\t_context.rotate( - element.rotation );\r\n\t\t\t\t\t_context.scale( scaleX, scaleY );\r\n\t\t\t\t\t_context.fillRect( -1, -1, 2, 2 );\r\n\t\t\t\t\t_context.restore();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbitmap = material.map.image;\r\n\t\t\t\t\tbitmapWidth = bitmap.width >> 1;\r\n\t\t\t\t\tbitmapHeight = bitmap.height >> 1;\r\n\r\n\t\t\t\t\tscaleX = element.scale.x * _canvasWidthHalf;\r\n\t\t\t\t\tscaleY = element.scale.y * _canvasHeightHalf;\r\n\r\n\t\t\t\t\twidth = scaleX * bitmapWidth;\r\n\t\t\t\t\theight = scaleY * bitmapHeight;\r\n\r\n\t\t\t\t\t// TODO: Rotations break this...\r\n\r\n\t\t\t\t\t_elemBox.min.set( v1.x - width, v1.y - height );\r\n\t\t\t\t\t_elemBox.max.set( v1.x + width, v1.y + height );\r\n\r\n\t\t\t\t\tif ( _clipBox.isIntersectionBox( _elemBox ) === false ) {\r\n\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_context.save();\r\n\t\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\t\t_context.rotate( - element.rotation );\r\n\t\t\t\t\t_context.scale( scaleX, - scaleY );\r\n\r\n\t\t\t\t\t_context.translate( - bitmapWidth, - bitmapHeight );\r\n\t\t\t\t\t_context.drawImage( bitmap, 0, 0 );\r\n\t\t\t\t\t_context.restore();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* DEBUG\r\n\t\t\t\tsetStrokeStyle( 'rgb(255,255,0)' );\r\n\t\t\t\t_context.beginPath();\r\n\t\t\t\t_context.moveTo( v1.x - 10, v1.y );\r\n\t\t\t\t_context.lineTo( v1.x + 10, v1.y );\r\n\t\t\t\t_context.moveTo( v1.x, v1.y - 10 );\r\n\t\t\t\t_context.lineTo( v1.x, v1.y + 10 );\r\n\t\t\t\t_context.stroke();\r\n\t\t\t\t*/\r\n\r\n\t\t\t} else if ( material instanceof THREE.ParticleCanvasMaterial ) {\r\n\r\n\t\t\t\twidth = element.scale.x * _canvasWidthHalf;\r\n\t\t\t\theight = element.scale.y * _canvasHeightHalf;\r\n\r\n\t\t\t\t_elemBox.min.set( v1.x - width, v1.y - height );\r\n\t\t\t\t_elemBox.max.set( v1.x + width, v1.y + height );\r\n\r\n\t\t\t\tif ( _clipBox.isIntersectionBox( _elemBox ) === false ) {\r\n\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\r\n\t\t\t\tsetFillStyle( material.color.getStyle() );\r\n\r\n\t\t\t\t_context.save();\r\n\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\t_context.rotate( - element.rotation );\r\n\t\t\t\t_context.scale( width, height );\r\n\r\n\t\t\t\tmaterial.program( _context );\r\n\r\n\t\t\t\t_context.restore();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderLine( v1, v2, element, material, scene ) {\r\n\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\r\n\t\t\t_context.beginPath();\r\n\t\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\r\n\t\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\r\n\r\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\t\tsetLineWidth( material.linewidth );\r\n\t\t\t\tsetLineCap( material.linecap );\r\n\t\t\t\tsetLineJoin( material.linejoin );\r\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\r\n\r\n\t\t\t\t_context.stroke();\r\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material, scene ) {\r\n\r\n\t\t\t_this.info.render.vertices += 3;\r\n\t\t\t_this.info.render.faces ++;\r\n\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\r\n\t\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\r\n\t\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\r\n\t\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\r\n\r\n\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\r\n\r\n\t\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null && material.map === null ) {\r\n\r\n\t\t\t\t_diffuseColor.copy( material.color );\r\n\t\t\t\t_emissiveColor.copy( material.emissive );\r\n\r\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t\t_diffuseColor.multiply( element.color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _enableLighting === true ) {\r\n\r\n\t\t\t\t\tif ( material.wireframe === false && material.shading == THREE.SmoothShading && element.vertexNormalsLength == 3 ) {\r\n\r\n\t\t\t\t\t\t_color1.copy( _ambientLight );\r\n\t\t\t\t\t\t_color2.copy( _ambientLight );\r\n\t\t\t\t\t\t_color3.copy( _ambientLight );\r\n\r\n\t\t\t\t\t\tcalculateLight( element.v1.positionWorld, element.vertexNormalsModel[ 0 ], _color1 );\r\n\t\t\t\t\t\tcalculateLight( element.v2.positionWorld, element.vertexNormalsModel[ 1 ], _color2 );\r\n\t\t\t\t\t\tcalculateLight( element.v3.positionWorld, element.vertexNormalsModel[ 2 ], _color3 );\r\n\r\n\t\t\t\t\t\t_color1.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color2.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color3.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );\r\n\r\n\t\t\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_color.copy( _ambientLight );\r\n\r\n\t\t\t\t\t\tcalculateLight( element.centroidModel, element.normalModel, _color );\r\n\r\n\t\t\t\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\r\n\r\n\t\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( material.color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( material.color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\tif ( material.map !== null ) {\r\n\r\n\t\t\t\t\tif ( material.map.mapping instanceof THREE.UVMapping ) {\r\n\r\n\t\t\t\t\t\t_uvs = element.uvs[ 0 ];\r\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t} else if ( material.envMap !== null ) {\r\n\r\n\t\t\t\t\tif ( material.envMap.mapping instanceof THREE.SphericalReflectionMapping ) {\r\n\r\n\t\t\t\t\t\t_vector3.copy( element.vertexNormalsModelView[ uv1 ] );\r\n\t\t\t\t\t\t_uv1x = 0.5 * _vector3.x + 0.5;\r\n\t\t\t\t\t\t_uv1y = 0.5 * _vector3.y + 0.5;\r\n\r\n\t\t\t\t\t\t_vector3.copy( element.vertexNormalsModelView[ uv2 ] );\r\n\t\t\t\t\t\t_uv2x = 0.5 * _vector3.x + 0.5;\r\n\t\t\t\t\t\t_uv2y = 0.5 * _vector3.y + 0.5;\r\n\r\n\t\t\t\t\t\t_vector3.copy( element.vertexNormalsModelView[ uv3 ] );\r\n\t\t\t\t\t\t_uv3x = 0.5 * _vector3.x + 0.5;\r\n\t\t\t\t\t\t_uv3y = 0.5 * _vector3.y + 0.5;\r\n\r\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\r\n\r\n\t\t\t\t\t}/* else if ( material.envMap.mapping == THREE.SphericalRefractionMapping ) {\r\n\r\n\r\n\r\n\t\t\t\t\t}*/\r\n\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_color.copy( material.color );\r\n\r\n\t\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t\t\t_color.multiply( element.color );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\t_near = camera.near;\r\n\t\t\t\t_far = camera.far;\r\n\r\n\t\t\t\tvar depth;\r\n\r\n\t\t\t\tdepth = 1 - smoothstep( v1.positionScreen.z * v1.positionScreen.w, _near, _far );\r\n\t\t\t\t_color1.setRGB( depth, depth, depth );\r\n\r\n\t\t\t\tdepth = 1 - smoothstep( v2.positionScreen.z * v2.positionScreen.w, _near, _far )\r\n\t\t\t\t_color2.setRGB( depth, depth, depth );\r\n\r\n\t\t\t\tdepth = 1 - smoothstep( v3.positionScreen.z * v3.positionScreen.w, _near, _far );\r\n\t\t\t\t_color3.setRGB( depth, depth, depth );\r\n\r\n\t\t\t\t_color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );\r\n\r\n\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t\tvar normal;\r\n\r\n\t\t\t\tif ( material.shading == THREE.FlatShading ) {\r\n\r\n\t\t\t\t\tnormal = element.normalModelView;\r\n\r\n\t\t\t\t\t_color.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t} else if ( material.shading == THREE.SmoothShading ) {\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ uv1 ];\r\n\t\t\t\t\t_color1.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ uv2 ];\r\n\t\t\t\t\t_color2.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ uv3 ];\r\n\t\t\t\t\t_color3.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\t_color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );\r\n\r\n\t\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderFace4( v1, v2, v3, v4, v5, v6, element, material, scene ) {\r\n\r\n\t\t\t_this.info.render.vertices += 4;\r\n\t\t\t_this.info.render.faces ++;\r\n\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\r\n\t\t\tif ( ( material.map !== undefined && material.map !== null ) || ( material.envMap !== undefined && material.envMap !== null ) ) {\r\n\r\n\t\t\t\t// Let renderFace3() handle this\r\n\r\n\t\t\t\trenderFace3( v1, v2, v4, 0, 1, 3, element, material, scene );\r\n\t\t\t\trenderFace3( v5, v3, v6, 1, 2, 3, element, material, scene );\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\r\n\t\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\r\n\t\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\r\n\t\t\t_v4x = v4.positionScreen.x; _v4y = v4.positionScreen.y;\r\n\t\t\t_v5x = v5.positionScreen.x; _v5y = v5.positionScreen.y;\r\n\t\t\t_v6x = v6.positionScreen.x; _v6y = v6.positionScreen.y;\r\n\r\n\t\t\tif ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\t_diffuseColor.copy( material.color );\r\n\t\t\t\t_emissiveColor.copy( material.emissive );\r\n\r\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t\t_diffuseColor.multiply( element.color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _enableLighting === true ) {\r\n\r\n\t\t\t\t\tif ( material.wireframe === false && material.shading == THREE.SmoothShading && element.vertexNormalsLength == 4 ) {\r\n\r\n\t\t\t\t\t\t_color1.copy( _ambientLight );\r\n\t\t\t\t\t\t_color2.copy( _ambientLight );\r\n\t\t\t\t\t\t_color3.copy( _ambientLight );\r\n\t\t\t\t\t\t_color4.copy( _ambientLight );\r\n\r\n\t\t\t\t\t\tcalculateLight( element.v1.positionWorld, element.vertexNormalsModel[ 0 ], _color1 );\r\n\t\t\t\t\t\tcalculateLight( element.v2.positionWorld, element.vertexNormalsModel[ 1 ], _color2 );\r\n\t\t\t\t\t\tcalculateLight( element.v4.positionWorld, element.vertexNormalsModel[ 3 ], _color3 );\r\n\t\t\t\t\t\tcalculateLight( element.v3.positionWorld, element.vertexNormalsModel[ 2 ], _color4 );\r\n\r\n\t\t\t\t\t\t_color1.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color2.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color3.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color4.multiply( _diffuseColor ).add( _emissiveColor );\r\n\r\n\t\t\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t\t\t// TODO: UVs are incorrect, v4->v3?\r\n\r\n\t\t\t\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y );\r\n\t\t\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\t\t\tdrawTriangle( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y );\r\n\t\t\t\t\t\tclipImage( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_color.copy( _ambientLight );\r\n\r\n\t\t\t\t\t\tcalculateLight( element.centroidModel, element.normalModel, _color );\r\n\r\n\t\t\t\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\r\n\r\n\t\t\t\t\t\tdrawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );\r\n\r\n\t\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_color.addColors( _diffuseColor, _emissiveColor );\r\n\r\n\t\t\t\t\tdrawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshBasicMaterial ) {\r\n\r\n\t\t\t\t_color.copy( material.color );\r\n\r\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t\t_color.multiply( element.color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdrawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );\r\n\r\n\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t\tvar normal;\r\n\r\n\t\t\t\tif ( material.shading == THREE.FlatShading ) {\r\n\r\n\t\t\t\t\tnormal = element.normalModelView;\r\n\t\t\t\t\t_color.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tdrawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t} else if ( material.shading == THREE.SmoothShading ) {\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ 0 ];\r\n\t\t\t\t\t_color1.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ 1 ];\r\n\t\t\t\t\t_color2.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ 3 ];\r\n\t\t\t\t\t_color3.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ 2 ];\r\n\t\t\t\t\t_color4.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y );\r\n\t\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\t\tdrawTriangle( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y );\r\n\t\t\t\t\tclipImage( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image );\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\t_near = camera.near;\r\n\t\t\t\t_far = camera.far;\r\n\r\n\t\t\t\t_color1.r = _color1.g = _color1.b = 1 - smoothstep( v1.positionScreen.z * v1.positionScreen.w, _near, _far );\r\n\t\t\t\t_color2.r = _color2.g = _color2.b = 1 - smoothstep( v2.positionScreen.z * v2.positionScreen.w, _near, _far );\r\n\t\t\t\t_color3.r = _color3.g = _color3.b = 1 - smoothstep( v4.positionScreen.z * v4.positionScreen.w, _near, _far );\r\n\t\t\t\t_color4.r = _color4.g = _color4.b = 1 - smoothstep( v3.positionScreen.z * v3.positionScreen.w, _near, _far );\r\n\r\n\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t// TODO: UVs are incorrect, v4->v3?\r\n\r\n\t\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y );\r\n\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\tdrawTriangle( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y );\r\n\t\t\t\tclipImage( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\r\n\r\n\t\t\t_context.beginPath();\r\n\t\t\t_context.moveTo( x0, y0 );\r\n\t\t\t_context.lineTo( x1, y1 );\r\n\t\t\t_context.lineTo( x2, y2 );\r\n\t\t\t_context.closePath();\r\n\r\n\t\t}\r\n\r\n\t\tfunction drawQuad( x0, y0, x1, y1, x2, y2, x3, y3 ) {\r\n\r\n\t\t\t_context.beginPath();\r\n\t\t\t_context.moveTo( x0, y0 );\r\n\t\t\t_context.lineTo( x1, y1 );\r\n\t\t\t_context.lineTo( x2, y2 );\r\n\t\t\t_context.lineTo( x3, y3 );\r\n\t\t\t_context.closePath();\r\n\r\n\t\t}\r\n\r\n\t\tfunction strokePath( color, linewidth, linecap, linejoin ) {\r\n\r\n\t\t\tsetLineWidth( linewidth );\r\n\t\t\tsetLineCap( linecap );\r\n\t\t\tsetLineJoin( linejoin );\r\n\t\t\tsetStrokeStyle( color.getStyle() );\r\n\r\n\t\t\t_context.stroke();\r\n\r\n\t\t\t_elemBox.expandByScalar( linewidth * 2 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction fillPath( color ) {\r\n\r\n\t\t\tsetFillStyle( color.getStyle() );\r\n\t\t\t_context.fill();\r\n\r\n\t\t}\r\n\r\n\t\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\r\n\r\n\t\t\tif ( texture instanceof THREE.DataTexture || texture.image === undefined || texture.image.width == 0 ) return;\r\n\r\n\t\t\tif ( texture.needsUpdate === true ) {\r\n\r\n\t\t\t\tvar repeatX = texture.wrapS == THREE.RepeatWrapping;\r\n\t\t\t\tvar repeatY = texture.wrapT == THREE.RepeatWrapping;\r\n\r\n\t\t\t\t_patterns[ texture.id ] = _context.createPattern(\r\n\t\t\t\t\ttexture.image, repeatX === true && repeatY === true\r\n\t\t\t\t\t\t? 'repeat'\r\n\t\t\t\t\t\t: repeatX === true && repeatY === false\r\n\t\t\t\t\t\t\t? 'repeat-x'\r\n\t\t\t\t\t\t\t: repeatX === false && repeatY === true\r\n\t\t\t\t\t\t\t\t? 'repeat-y'\r\n\t\t\t\t\t\t\t\t: 'no-repeat'\r\n\t\t\t\t);\r\n\r\n\t\t\t\ttexture.needsUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_patterns[ texture.id ] === undefined\r\n\t\t\t\t? setFillStyle( 'rgba(0,0,0,1)' )\r\n\t\t\t\t: setFillStyle( _patterns[ texture.id ] );\r\n\r\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\r\n\r\n\t\t\tvar a, b, c, d, e, f, det, idet,\r\n\t\t\toffsetX = texture.offset.x / texture.repeat.x,\r\n\t\t\toffsetY = texture.offset.y / texture.repeat.y,\r\n\t\t\twidth = texture.image.width * texture.repeat.x,\r\n\t\t\theight = texture.image.height * texture.repeat.y;\r\n\r\n\t\t\tu0 = ( u0 + offsetX ) * width;\r\n\t\t\tv0 = ( 1.0 - v0 + offsetY ) * height;\r\n\r\n\t\t\tu1 = ( u1 + offsetX ) * width;\r\n\t\t\tv1 = ( 1.0 - v1 + offsetY ) * height;\r\n\r\n\t\t\tu2 = ( u2 + offsetX ) * width;\r\n\t\t\tv2 = ( 1.0 - v2 + offsetY ) * height;\r\n\r\n\t\t\tx1 -= x0; y1 -= y0;\r\n\t\t\tx2 -= x0; y2 -= y0;\r\n\r\n\t\t\tu1 -= u0; v1 -= v0;\r\n\t\t\tu2 -= u0; v2 -= v0;\r\n\r\n\t\t\tdet = u1 * v2 - u2 * v1;\r\n\r\n\t\t\tif ( det === 0 ) {\r\n\r\n\t\t\t\tif ( _imagedatas[ texture.id ] === undefined ) {\r\n\r\n\t\t\t\t\tvar canvas = document.createElement( 'canvas' )\r\n\t\t\t\t\tcanvas.width = texture.image.width;\r\n\t\t\t\t\tcanvas.height = texture.image.height;\r\n\r\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\t\t\tcontext.drawImage( texture.image, 0, 0 );\r\n\r\n\t\t\t\t\t_imagedatas[ texture.id ] = context.getImageData( 0, 0, texture.image.width, texture.image.height ).data;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar data = _imagedatas[ texture.id ];\r\n\t\t\t\tvar index = ( Math.floor( u0 ) + Math.floor( v0 ) * texture.image.width ) * 4;\r\n\r\n\t\t\t\t_color.setRGB( data[ index ] / 255, data[ index + 1 ] / 255, data[ index + 2 ] / 255 );\r\n\t\t\t\tfillPath( _color );\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tidet = 1 / det;\r\n\r\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\r\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\r\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\r\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\r\n\r\n\t\t\te = x0 - a * u0 - c * v0;\r\n\t\t\tf = y0 - b * u0 - d * v0;\r\n\r\n\t\t\t_context.save();\r\n\t\t\t_context.transform( a, b, c, d, e, f );\r\n\t\t\t_context.fill();\r\n\t\t\t_context.restore();\r\n\r\n\t\t}\r\n\r\n\t\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\r\n\r\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\r\n\r\n\t\t\tvar a, b, c, d, e, f, det, idet,\r\n\t\t\twidth = image.width - 1,\r\n\t\t\theight = image.height - 1;\r\n\r\n\t\t\tu0 *= width; v0 *= height;\r\n\t\t\tu1 *= width; v1 *= height;\r\n\t\t\tu2 *= width; v2 *= height;\r\n\r\n\t\t\tx1 -= x0; y1 -= y0;\r\n\t\t\tx2 -= x0; y2 -= y0;\r\n\r\n\t\t\tu1 -= u0; v1 -= v0;\r\n\t\t\tu2 -= u0; v2 -= v0;\r\n\r\n\t\t\tdet = u1 * v2 - u2 * v1;\r\n\r\n\t\t\tidet = 1 / det;\r\n\r\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\r\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\r\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\r\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\r\n\r\n\t\t\te = x0 - a * u0 - c * v0;\r\n\t\t\tf = y0 - b * u0 - d * v0;\r\n\r\n\t\t\t_context.save();\r\n\t\t\t_context.transform( a, b, c, d, e, f );\r\n\t\t\t_context.clip();\r\n\t\t\t_context.drawImage( image, 0, 0 );\r\n\t\t\t_context.restore();\r\n\r\n\t\t}\r\n\r\n\t\tfunction getGradientTexture( color1, color2, color3, color4 ) {\r\n\r\n\t\t\t// http://mrdoob.com/blog/post/710\r\n\r\n\t\t\t_pixelMapData[ 0 ] = ( color1.r * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 1 ] = ( color1.g * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 2 ] = ( color1.b * 255 ) | 0;\r\n\r\n\t\t\t_pixelMapData[ 4 ] = ( color2.r * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 5 ] = ( color2.g * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 6 ] = ( color2.b * 255 ) | 0;\r\n\r\n\t\t\t_pixelMapData[ 8 ] = ( color3.r * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 9 ] = ( color3.g * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 10 ] = ( color3.b * 255 ) | 0;\r\n\r\n\t\t\t_pixelMapData[ 12 ] = ( color4.r * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 13 ] = ( color4.g * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 14 ] = ( color4.b * 255 ) | 0;\r\n\r\n\t\t\t_pixelMapContext.putImageData( _pixelMapImage, 0, 0 );\r\n\t\t\t_gradientMapContext.drawImage( _pixelMap, 0, 0 );\r\n\r\n\t\t\treturn _gradientMap;\r\n\r\n\t\t}\r\n\r\n\t\tfunction smoothstep( value, min, max ) {\r\n\r\n\t\t\tvar x = ( value - min ) / ( max - min );\r\n\t\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t\t}\r\n\r\n\t\t// Hide anti-alias gaps\r\n\r\n\t\tfunction expand( v1, v2 ) {\r\n\r\n\t\t\tvar x = v2.x - v1.x, y =  v2.y - v1.y,\r\n\t\t\tdet = x * x + y * y, idet;\r\n\r\n\t\t\tif ( det === 0 ) return;\r\n\r\n\t\t\tidet = 1 / Math.sqrt( det );\r\n\r\n\t\t\tx *= idet; y *= idet;\r\n\r\n\t\t\tv2.x += x; v2.y += y;\r\n\t\t\tv1.x -= x; v1.y -= y;\r\n\r\n\t\t}\r\n\t};\r\n\r\n\t// Context cached methods.\r\n\r\n\tfunction setOpacity( value ) {\r\n\r\n\t\tif ( _contextGlobalAlpha !== value ) {\r\n\r\n\t\t\t_context.globalAlpha = value;\r\n\t\t\t_contextGlobalAlpha = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setBlending( value ) {\r\n\r\n\t\tif ( _contextGlobalCompositeOperation !== value ) {\r\n\r\n\t\t\tif ( value === THREE.NormalBlending ) {\r\n\r\n\t\t\t\t_context.globalCompositeOperation = 'source-over';\r\n\r\n\t\t\t} else if ( value === THREE.AdditiveBlending ) {\r\n\r\n\t\t\t\t_context.globalCompositeOperation = 'lighter';\r\n\r\n\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\r\n\r\n\t\t\t\t_context.globalCompositeOperation = 'darker';\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_contextGlobalCompositeOperation = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setLineWidth( value ) {\r\n\r\n\t\tif ( _contextLineWidth !== value ) {\r\n\r\n\t\t\t_context.lineWidth = value;\r\n\t\t\t_contextLineWidth = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setLineCap( value ) {\r\n\r\n\t\t// \"butt\", \"round\", \"square\"\r\n\r\n\t\tif ( _contextLineCap !== value ) {\r\n\r\n\t\t\t_context.lineCap = value;\r\n\t\t\t_contextLineCap = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setLineJoin( value ) {\r\n\r\n\t\t// \"round\", \"bevel\", \"miter\"\r\n\r\n\t\tif ( _contextLineJoin !== value ) {\r\n\r\n\t\t\t_context.lineJoin = value;\r\n\t\t\t_contextLineJoin = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setStrokeStyle( value ) {\r\n\r\n\t\tif ( _contextStrokeStyle !== value ) {\r\n\r\n\t\t\t_context.strokeStyle = value;\r\n\t\t\t_contextStrokeStyle = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setFillStyle( value ) {\r\n\r\n\t\tif ( _contextFillStyle !== value ) {\r\n\r\n\t\t\t_context.fillStyle = value;\r\n\t\t\t_contextFillStyle = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n */\r\n\r\nTHREE.ShaderChunk = {\r\n\r\n\t// FOG\r\n\r\n\tfog_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_FOG\",\r\n\r\n\t\t\t\"uniform vec3 fogColor;\",\r\n\r\n\t\t\t\"#ifdef FOG_EXP2\",\r\n\r\n\t\t\t\t\"uniform float fogDensity;\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"uniform float fogNear;\",\r\n\t\t\t\t\"uniform float fogFar;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tfog_fragment: [\r\n\r\n\t\t\"#ifdef USE_FOG\",\r\n\r\n\t\t\t\"float depth = gl_FragCoord.z / gl_FragCoord.w;\",\r\n\r\n\t\t\t\"#ifdef FOG_EXP2\",\r\n\r\n\t\t\t\t\"const float LOG2 = 1.442695;\",\r\n\t\t\t\t\"float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\",\r\n\t\t\t\t\"fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"float fogFactor = smoothstep( fogNear, fogFar, depth );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// ENVIRONMENT MAP\r\n\r\n\tenvmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_ENVMAP\",\r\n\r\n\t\t\t\"uniform float reflectivity;\",\r\n\t\t\t\"uniform samplerCube envMap;\",\r\n\t\t\t\"uniform float flipEnvMap;\",\r\n\t\t\t\"uniform int combine;\",\r\n\r\n\t\t\t\"#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\",\r\n\r\n\t\t\t\t\"uniform bool useRefract;\",\r\n\t\t\t\t\"uniform float refractionRatio;\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"varying vec3 vReflect;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tenvmap_fragment: [\r\n\r\n\t\t\"#ifdef USE_ENVMAP\",\r\n\r\n\t\t\t\"vec3 reflectVec;\",\r\n\r\n\t\t\t\"#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\",\r\n\r\n\t\t\t\t\"vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\",\r\n\r\n\t\t\t\t\"if ( useRefract ) {\",\r\n\r\n\t\t\t\t\t\"reflectVec = refract( cameraToVertex, normal, refractionRatio );\",\r\n\r\n\t\t\t\t\"} else { \",\r\n\r\n\t\t\t\t\t\"reflectVec = reflect( cameraToVertex, normal );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"reflectVec = vReflect;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\",\r\n\t\t\t\t\"vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\"cubeColor.xyz *= cubeColor.xyz;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"if ( combine == 1 ) {\",\r\n\r\n\t\t\t\t\"gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\",\r\n\r\n\t\t\t\"} else if ( combine == 2 ) {\",\r\n\r\n\t\t\t\t\"gl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\",\r\n\r\n\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\"gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tenvmap_pars_vertex: [\r\n\r\n\t\t\"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\",\r\n\r\n\t\t\t\"varying vec3 vReflect;\",\r\n\r\n\t\t\t\"uniform float refractionRatio;\",\r\n\t\t\t\"uniform bool useRefract;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tworldpos_vertex : [\r\n\r\n\t\t\"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\",\r\n\r\n\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * skinned;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\",\r\n\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\",\r\n\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tenvmap_vertex : [\r\n\r\n\t\t\"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\",\r\n\r\n\t\t\t\"vec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\",\r\n\t\t\t\"worldNormal = normalize( worldNormal );\",\r\n\r\n\t\t\t\"vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\",\r\n\r\n\t\t\t\"if ( useRefract ) {\",\r\n\r\n\t\t\t\t\"vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\",\r\n\r\n\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\"vReflect = reflect( cameraToVertex, worldNormal );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// COLOR MAP (particles)\r\n\r\n\tmap_particle_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_MAP\",\r\n\r\n\t\t\t\"uniform sampler2D map;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\r\n\tmap_particle_fragment: [\r\n\r\n\t\t\"#ifdef USE_MAP\",\r\n\r\n\t\t\t\"gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// COLOR MAP (triangles)\r\n\r\n\tmap_pars_vertex: [\r\n\r\n\t\t\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\",\r\n\r\n\t\t\t\"varying vec2 vUv;\",\r\n\t\t\t\"uniform vec4 offsetRepeat;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmap_pars_fragment: [\r\n\r\n\t\t\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\",\r\n\r\n\t\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef USE_MAP\",\r\n\r\n\t\t\t\"uniform sampler2D map;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmap_vertex: [\r\n\r\n\t\t\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\",\r\n\r\n\t\t\t\"vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmap_fragment: [\r\n\r\n\t\t\"#ifdef USE_MAP\",\r\n\r\n\t\t\t\"vec4 texelColor = texture2D( map, vUv );\",\r\n\r\n\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\"texelColor.xyz *= texelColor.xyz;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"gl_FragColor = gl_FragColor * texelColor;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// LIGHT MAP\r\n\r\n\tlightmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_LIGHTMAP\",\r\n\r\n\t\t\t\"varying vec2 vUv2;\",\r\n\t\t\t\"uniform sampler2D lightMap;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlightmap_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_LIGHTMAP\",\r\n\r\n\t\t\t\"varying vec2 vUv2;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlightmap_fragment: [\r\n\r\n\t\t\"#ifdef USE_LIGHTMAP\",\r\n\r\n\t\t\t\"gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlightmap_vertex: [\r\n\r\n\t\t\"#ifdef USE_LIGHTMAP\",\r\n\r\n\t\t\t\"vUv2 = uv2;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// BUMP MAP\r\n\r\n\tbumpmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_BUMPMAP\",\r\n\r\n\t\t\t\"uniform sampler2D bumpMap;\",\r\n\t\t\t\"uniform float bumpScale;\",\r\n\r\n\t\t\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\r\n\t\t\t//\thttp://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\r\n\r\n\t\t\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\r\n\r\n\t\t\t\"vec2 dHdxy_fwd() {\",\r\n\r\n\t\t\t\t\"vec2 dSTdx = dFdx( vUv );\",\r\n\t\t\t\t\"vec2 dSTdy = dFdy( vUv );\",\r\n\r\n\t\t\t\t\"float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\",\r\n\t\t\t\t\"float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\",\r\n\t\t\t\t\"float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\",\r\n\r\n\t\t\t\t\"return vec2( dBx, dBy );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\t\"vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\",\r\n\r\n\t\t\t\t\"vec3 vSigmaX = dFdx( surf_pos );\",\r\n\t\t\t\t\"vec3 vSigmaY = dFdy( surf_pos );\",\r\n\t\t\t\t\"vec3 vN = surf_norm;\",\t\t// normalized\r\n\r\n\t\t\t\t\"vec3 R1 = cross( vSigmaY, vN );\",\r\n\t\t\t\t\"vec3 R2 = cross( vN, vSigmaX );\",\r\n\r\n\t\t\t\t\"float fDet = dot( vSigmaX, R1 );\",\r\n\r\n\t\t\t\t\"vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\",\r\n\t\t\t\t\"return normalize( abs( fDet ) * surf_norm - vGrad );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// NORMAL MAP\r\n\r\n\tnormalmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_NORMALMAP\",\r\n\r\n\t\t\t\"uniform sampler2D normalMap;\",\r\n\t\t\t\"uniform vec2 normalScale;\",\r\n\r\n\t\t\t// Per-Pixel Tangent Space Normal Mapping\r\n\t\t\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\r\n\r\n\t\t\t\"vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\",\r\n\r\n\t\t\t\t\"vec3 q0 = dFdx( eye_pos.xyz );\",\r\n\t\t\t\t\"vec3 q1 = dFdy( eye_pos.xyz );\",\r\n\t\t\t\t\"vec2 st0 = dFdx( vUv.st );\",\r\n\t\t\t\t\"vec2 st1 = dFdy( vUv.st );\",\r\n\r\n\t\t\t\t\"vec3 S = normalize(  q0 * st1.t - q1 * st0.t );\",\r\n\t\t\t\t\"vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\",\r\n\t\t\t\t\"vec3 N = normalize( surf_norm );\",\r\n\r\n\t\t\t\t\"vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\",\r\n\t\t\t\t\"mapN.xy = normalScale * mapN.xy;\",\r\n\t\t\t\t\"mat3 tsn = mat3( S, T, N );\",\r\n\t\t\t\t\"return normalize( tsn * mapN );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// SPECULAR MAP\r\n\r\n\tspecularmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_SPECULARMAP\",\r\n\r\n\t\t\t\"uniform sampler2D specularMap;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tspecularmap_fragment: [\r\n\r\n\t\t\"float specularStrength;\",\r\n\r\n\t\t\"#ifdef USE_SPECULARMAP\",\r\n\r\n\t\t\t\"vec4 texelSpecular = texture2D( specularMap, vUv );\",\r\n\t\t\t\"specularStrength = texelSpecular.r;\",\r\n\r\n\t\t\"#else\",\r\n\r\n\t\t\t\"specularStrength = 1.0;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// LIGHTS LAMBERT\r\n\r\n\tlights_lambert_pars_vertex: [\r\n\r\n\t\t\"uniform vec3 ambient;\",\r\n\t\t\"uniform vec3 diffuse;\",\r\n\t\t\"uniform vec3 emissive;\",\r\n\r\n\t\t\"uniform vec3 ambientLightColor;\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\"uniform vec3 wrapRGB;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlights_lambert_vertex: [\r\n\r\n\t\t\"vLightFront = vec3( 0.0 );\",\r\n\r\n\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\"vLightBack = vec3( 0.0 );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"transformedNormal = normalize( transformedNormal );\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\"for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\",\r\n\t\t\t\"vec3 dirVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\"float dotProduct = dot( transformedNormal, dirVector );\",\r\n\t\t\t\"vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\"vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\"vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\t\t\t\t\"directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\",\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\"directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"vLightFront += directionalLightColor[ i ] * directionalLightWeighting;\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\r\n\r\n\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\"if ( pointLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\"lVector = normalize( lVector );\",\r\n\t\t\t\t\"float dotProduct = dot( transformedNormal, lVector );\",\r\n\r\n\t\t\t\t\"vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\"vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\"vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\"vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\t\t\t\t\t\"pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\",\r\n\r\n\t\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\t\"pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\",\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\"vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\r\n\r\n\t\t\t\t\"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\",\r\n\r\n\t\t\t\t\"if ( spotEffect > spotLightAngleCos[ i ] ) {\",\r\n\r\n\t\t\t\t\t\"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\",\r\n\r\n\t\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\t\"if ( spotLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\"lVector = normalize( lVector );\",\r\n\r\n\t\t\t\t\t\"float dotProduct = dot( transformedNormal, lVector );\",\r\n\t\t\t\t\t\"vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\t\"vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\"vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\t\t\t\t\t\t\"spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\t\t\"spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\",\r\n\r\n\t\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\t\"vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\"vec3 lVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t\"float dotProduct = dot( transformedNormal, lVector );\",\r\n\r\n\t\t\t\t\"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\",\r\n\t\t\t\t\"float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\",\r\n\r\n\t\t\t\t\"vLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\",\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\"vLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\",\r\n\r\n\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\"vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// LIGHTS PHONG\r\n\r\n\tlights_phong_pars_vertex: [\r\n\r\n\t\t\"#ifndef PHONG_PER_PIXEL\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"varying vec4 vPointLight[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\r\n\tlights_phong_vertex: [\r\n\r\n\t\t\"#ifndef PHONG_PER_PIXEL\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\r\n\r\n\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\"if ( pointLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\"vPointLight[ i ] = vec4( lVector, lDistance );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\r\n\r\n\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\"if ( spotLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\"vSpotLight[ i ] = vec4( lVector, lDistance );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\",\r\n\r\n\t\t\t\"vWorldPosition = worldPosition.xyz;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlights_phong_pars_fragment: [\r\n\r\n\t\t\"uniform vec3 ambientLightColor;\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"#ifdef PHONG_PER_PIXEL\",\r\n\r\n\t\t\t\t\"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"varying vec4 vPointLight[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"#ifdef PHONG_PER_PIXEL\",\r\n\r\n\t\t\t\t\"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\"uniform vec3 wrapRGB;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"varying vec3 vViewPosition;\",\r\n\t\t\"varying vec3 vNormal;\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlights_phong_fragment: [\r\n\r\n\t\t\"vec3 normal = normalize( vNormal );\",\r\n\t\t\"vec3 viewPosition = normalize( vViewPosition );\",\r\n\r\n\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\"normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef USE_NORMALMAP\",\r\n\r\n\t\t\t\"normal = perturbNormal2Arb( -viewPosition, normal );\",\r\n\r\n\t\t\"#elif defined( USE_BUMPMAP )\",\r\n\r\n\t\t\t\"normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"vec3 pointDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\"vec3 pointSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\"for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"#ifdef PHONG_PER_PIXEL\",\r\n\r\n\t\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\t\"vec3 lVector = lPosition.xyz + vViewPosition.xyz;\",\r\n\r\n\t\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\t\"if ( pointLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\"lVector = normalize( lVector );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"vec3 lVector = normalize( vPointLight[ i ].xyz );\",\r\n\t\t\t\t\t\"float lDistance = vPointLight[ i ].w;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\"float dotProduct = dot( normal, lVector );\",\r\n\r\n\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\"float pointDiffuseWeightFull = max( dotProduct, 0.0 );\",\r\n\t\t\t\t\t\"float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\"vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"float pointDiffuseWeight = max( dotProduct, 0.0 );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"pointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\",\r\n\r\n\t\t\t\t// specular\r\n\r\n\t\t\t\t\"vec3 pointHalfVector = normalize( lVector + viewPosition );\",\r\n\t\t\t\t\"float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\",\r\n\t\t\t\t\"float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\"pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"pointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"vec3 spotDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\"vec3 spotSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\"for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"#ifdef PHONG_PER_PIXEL\",\r\n\r\n\t\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\t\"vec3 lVector = lPosition.xyz + vViewPosition.xyz;\",\r\n\r\n\t\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\t\"if ( spotLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\"lVector = normalize( lVector );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"vec3 lVector = normalize( vSpotLight[ i ].xyz );\",\r\n\t\t\t\t\t\"float lDistance = vSpotLight[ i ].w;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\",\r\n\r\n\t\t\t\t\"if ( spotEffect > spotLightAngleCos[ i ] ) {\",\r\n\r\n\t\t\t\t\t\"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\",\r\n\r\n\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\"float dotProduct = dot( normal, lVector );\",\r\n\r\n\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\"float spotDiffuseWeightFull = max( dotProduct, 0.0 );\",\r\n\t\t\t\t\t\t\"float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"float spotDiffuseWeight = max( dotProduct, 0.0 );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\",\r\n\r\n\t\t\t\t\t// specular\r\n\r\n\t\t\t\t\t\"vec3 spotHalfVector = normalize( lVector + viewPosition );\",\r\n\t\t\t\t\t\"float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\",\r\n\t\t\t\t\t\"float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\t\"spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"spotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\"vec3 dirDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\"vec3 dirSpecular = vec3( 0.0 );\" ,\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\"vec3 dirVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\"float dotProduct = dot( normal, dirVector );\",\r\n\r\n\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\"float dirDiffuseWeightFull = max( dotProduct, 0.0 );\",\r\n\t\t\t\t\t\"float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\"vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"float dirDiffuseWeight = max( dotProduct, 0.0 );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"dirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\",\r\n\r\n\t\t\t\t// specular\r\n\r\n\t\t\t\t\"vec3 dirHalfVector = normalize( dirVector + viewPosition );\",\r\n\t\t\t\t\"float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\",\r\n\t\t\t\t\"float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t// fresnel term from skin shader\r\n\t\t\t\t\t\"const float F0 = 0.128;\",\r\n\r\n\t\t\t\t\t\"float base = 1.0 - dot( viewPosition, dirHalfVector );\",\r\n\t\t\t\t\t\"float exponential = pow( base, 5.0 );\",\r\n\r\n\t\t\t\t\t\"float fresnel = exponential + F0 * ( 1.0 - exponential );\",\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t// fresnel term from fresnel shader\r\n\t\t\t\t\t\"const float mFresnelBias = 0.08;\",\r\n\t\t\t\t\t\"const float mFresnelScale = 0.3;\",\r\n\t\t\t\t\t\"const float mFresnelPower = 5.0;\",\r\n\r\n\t\t\t\t\t\"float fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\",\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t//\"dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\",\r\n\r\n\t\t\t\t\t\"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\"dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"vec3 hemiDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\"vec3 hemiSpecular = vec3( 0.0 );\" ,\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\"vec3 lVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\"float dotProduct = dot( normal, lVector );\",\r\n\t\t\t\t\"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\",\r\n\r\n\t\t\t\t\"vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\",\r\n\r\n\t\t\t\t\"hemiDiffuse += diffuse * hemiColor;\",\r\n\r\n\t\t\t\t// specular (sky light)\r\n\r\n\t\t\t\t\"vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\",\r\n\t\t\t\t\"float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\",\r\n\t\t\t\t\"float hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t// specular (ground light)\r\n\r\n\t\t\t\t\"vec3 lVectorGround = -lVector;\",\r\n\r\n\t\t\t\t\"vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\",\r\n\t\t\t\t\"float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\",\r\n\t\t\t\t\"float hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\"float dotProductGround = dot( normal, lVectorGround );\",\r\n\r\n\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\"vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\",\r\n\t\t\t\t\t\"vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\",\r\n\t\t\t\t\t\"hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"hemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"vec3 totalDiffuse = vec3( 0.0 );\",\r\n\t\t\"vec3 totalSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\"totalDiffuse += dirDiffuse;\",\r\n\t\t\t\"totalSpecular += dirSpecular;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"totalDiffuse += hemiDiffuse;\",\r\n\t\t\t\"totalSpecular += hemiSpecular;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"totalDiffuse += pointDiffuse;\",\r\n\t\t\t\"totalSpecular += pointSpecular;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"totalDiffuse += spotDiffuse;\",\r\n\t\t\t\"totalSpecular += spotSpecular;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef METAL\",\r\n\r\n\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\",\r\n\r\n\t\t\"#else\",\r\n\r\n\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// VERTEX COLORS\r\n\r\n\tcolor_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\"varying vec3 vColor;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\r\n\tcolor_fragment: [\r\n\r\n\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\"gl_FragColor = gl_FragColor * vec4( vColor, opacity );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tcolor_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\"varying vec3 vColor;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\r\n\tcolor_vertex: [\r\n\r\n\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\"vColor = color * color;\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"vColor = color;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// SKINNING\r\n\r\n\tskinning_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"#ifdef BONE_TEXTURE\",\r\n\r\n\t\t\t\t\"uniform sampler2D boneTexture;\",\r\n\r\n\t\t\t\t\"mat4 getBoneMatrix( const in float i ) {\",\r\n\r\n\t\t\t\t\t\"float j = i * 4.0;\",\r\n\t\t\t\t\t\"float x = mod( j, N_BONE_PIXEL_X );\",\r\n\t\t\t\t\t\"float y = floor( j / N_BONE_PIXEL_X );\",\r\n\r\n\t\t\t\t\t\"const float dx = 1.0 / N_BONE_PIXEL_X;\",\r\n\t\t\t\t\t\"const float dy = 1.0 / N_BONE_PIXEL_Y;\",\r\n\r\n\t\t\t\t\t\"y = dy * ( y + 0.5 );\",\r\n\r\n\t\t\t\t\t\"vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\",\r\n\t\t\t\t\t\"vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\",\r\n\t\t\t\t\t\"vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\",\r\n\t\t\t\t\t\"vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\",\r\n\r\n\t\t\t\t\t\"mat4 bone = mat4( v1, v2, v3, v4 );\",\r\n\r\n\t\t\t\t\t\"return bone;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"uniform mat4 boneGlobalMatrices[ MAX_BONES ];\",\r\n\r\n\t\t\t\t\"mat4 getBoneMatrix( const in float i ) {\",\r\n\r\n\t\t\t\t\t\"mat4 bone = boneGlobalMatrices[ int(i) ];\",\r\n\t\t\t\t\t\"return bone;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tskinbase_vertex: [\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"mat4 boneMatX = getBoneMatrix( skinIndex.x );\",\r\n\t\t\t\"mat4 boneMatY = getBoneMatrix( skinIndex.y );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tskinning_vertex: [\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"#ifdef USE_MORPHTARGETS\",\r\n\r\n\t\t\t\"vec4 skinVertex = vec4( morphed, 1.0 );\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\"vec4 skinVertex = vec4( position, 1.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;\",\r\n\t\t\t\"skinned \t  += boneMatY * skinVertex * skinWeight.y;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// MORPHING\r\n\r\n\tmorphtarget_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_MORPHTARGETS\",\r\n\r\n\t\t\t\"#ifndef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\"uniform float morphTargetInfluences[ 8 ];\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\"uniform float morphTargetInfluences[ 4 ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmorphtarget_vertex: [\r\n\r\n\t\t\"#ifdef USE_MORPHTARGETS\",\r\n\r\n\t\t\t\"vec3 morphed = vec3( 0.0 );\",\r\n\t\t\t\"morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\",\r\n\t\t\t\"morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\",\r\n\t\t\t\"morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\",\r\n\t\t\t\"morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\",\r\n\r\n\t\t\t\"#ifndef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\"morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\",\r\n\t\t\t\"morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\",\r\n\t\t\t\"morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\",\r\n\t\t\t\"morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"morphed += position;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tdefault_vertex : [\r\n\r\n\t\t\"vec4 mvPosition;\",\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"mvPosition = modelViewMatrix * skinned;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\",\r\n\r\n\t\t\t\"mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\",\r\n\r\n\t\t\t\"mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"gl_Position = projectionMatrix * mvPosition;\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmorphnormal_vertex: [\r\n\r\n\t\t\"#ifdef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\"vec3 morphedNormal = vec3( 0.0 );\",\r\n\r\n\t\t\t\"morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\",\r\n\t\t\t\"morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\",\r\n\t\t\t\"morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\",\r\n\t\t\t\"morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\",\r\n\r\n\t\t\t\"morphedNormal += normal;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tskinnormal_vertex: [\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"mat4 skinMatrix = skinWeight.x * boneMatX;\",\r\n\t\t\t\"skinMatrix \t+= skinWeight.y * boneMatY;\",\r\n\r\n\t\t\t\"#ifdef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\"vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\"vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tdefaultnormal_vertex: [\r\n\r\n\t\t\"vec3 objectNormal;\",\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"objectNormal = skinnedNormal.xyz;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\",\r\n\r\n\t\t\t\"objectNormal = morphedNormal;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\",\r\n\r\n\t\t\t\"objectNormal = normal;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef FLIP_SIDED\",\r\n\r\n\t\t\t\"objectNormal = -objectNormal;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"vec3 transformedNormal = normalMatrix * objectNormal;\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// SHADOW MAP\r\n\r\n\t// based on SpiderGL shadow map and Fabien Sanglard's GLSL shadow mapping examples\r\n\t//  http://spidergl.org/example.php?id=6\r\n\t// \thttp://fabiensanglard.net/shadowmapping\r\n\r\n\tshadowmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\"uniform sampler2D shadowMap[ MAX_SHADOWS ];\",\r\n\t\t\t\"uniform vec2 shadowMapSize[ MAX_SHADOWS ];\",\r\n\r\n\t\t\t\"uniform float shadowDarkness[ MAX_SHADOWS ];\",\r\n\t\t\t\"uniform float shadowBias[ MAX_SHADOWS ];\",\r\n\r\n\t\t\t\"varying vec4 vShadowCoord[ MAX_SHADOWS ];\",\r\n\r\n\t\t\t\"float unpackDepth( const in vec4 rgba_depth ) {\",\r\n\r\n\t\t\t\t\"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\",\r\n\t\t\t\t\"float depth = dot( rgba_depth, bit_shift );\",\r\n\t\t\t\t\"return depth;\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tshadowmap_fragment: [\r\n\r\n\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\"#ifdef SHADOWMAP_DEBUG\",\r\n\r\n\t\t\t\t\"vec3 frustumColors[3];\",\r\n\t\t\t\t\"frustumColors[0] = vec3( 1.0, 0.5, 0.0 );\",\r\n\t\t\t\t\"frustumColors[1] = vec3( 0.0, 1.0, 0.8 );\",\r\n\t\t\t\t\"frustumColors[2] = vec3( 0.0, 0.5, 1.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef SHADOWMAP_CASCADE\",\r\n\r\n\t\t\t\t\"int inFrustumCount = 0;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"float fDepth;\",\r\n\t\t\t\"vec3 shadowColor = vec3( 1.0 );\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_SHADOWS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\",\r\n\r\n\t\t\t\t// \"if ( something && something )\" \t\t breaks ATI OpenGL shader compiler\r\n\t\t\t\t// \"if ( all( something, something ) )\"  using this instead\r\n\r\n\t\t\t\t\"bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\",\r\n\t\t\t\t\"bool inFrustum = all( inFrustumVec );\",\r\n\r\n\t\t\t\t// don't shadow pixels outside of light frustum\r\n\t\t\t\t// use just first frustum (for cascades)\r\n\t\t\t\t// don't shadow pixels behind far plane of light frustum\r\n\r\n\t\t\t\t\"#ifdef SHADOWMAP_CASCADE\",\r\n\r\n\t\t\t\t\t\"inFrustumCount += int( inFrustum );\",\r\n\t\t\t\t\t\"bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"bool frustumTest = all( frustumTestVec );\",\r\n\r\n\t\t\t\t\"if ( frustumTest ) {\",\r\n\r\n\t\t\t\t\t\"shadowCoord.z += shadowBias[ i ];\",\r\n\r\n\t\t\t\t\t\"#if defined( SHADOWMAP_TYPE_PCF )\",\r\n\r\n\t\t\t\t\t\t// Percentage-close filtering\r\n\t\t\t\t\t\t// (9 pixel kernel)\r\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\r\n\r\n\t\t\t\t\t\t\"float shadow = 0.0;\",\r\n\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\r\n\t\t\t\t\t\t// must enroll loop manually\r\n\r\n\t\t\t\t\t\t\"for ( float y = -1.25; y <= 1.25; y += 1.25 )\",\r\n\t\t\t\t\t\t\t\"for ( float x = -1.25; x <= 1.25; x += 1.25 ) {\",\r\n\r\n\t\t\t\t\t\t\t\t\"vec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\",\r\n\r\n\t\t\t\t\t\t\t\t// doesn't seem to produce any noticeable visual difference compared to simple \"texture2D\" lookup\r\n\t\t\t\t\t\t\t\t//\"vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\",\r\n\r\n\t\t\t\t\t\t\t\t\"float fDepth = unpackDepth( rgbaDepth );\",\r\n\r\n\t\t\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z )\",\r\n\t\t\t\t\t\t\t\t\t\"shadow += 1.0;\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\t\"shadow /= 9.0;\",\r\n\r\n\t\t\t\t\t\t*/\r\n\r\n\t\t\t\t\t\t\"const float shadowDelta = 1.0 / 9.0;\",\r\n\r\n\t\t\t\t\t\t\"float xPixelOffset = 1.0 / shadowMapSize[ i ].x;\",\r\n\t\t\t\t\t\t\"float yPixelOffset = 1.0 / shadowMapSize[ i ].y;\",\r\n\r\n\t\t\t\t\t\t\"float dx0 = -1.25 * xPixelOffset;\",\r\n\t\t\t\t\t\t\"float dy0 = -1.25 * yPixelOffset;\",\r\n\t\t\t\t\t\t\"float dx1 = 1.25 * xPixelOffset;\",\r\n\t\t\t\t\t\t\"float dy1 = 1.25 * yPixelOffset;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\",\r\n\r\n\t\t\t\t\t\"#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\",\r\n\r\n\t\t\t\t\t\t// Percentage-close filtering\r\n\t\t\t\t\t\t// (9 pixel kernel)\r\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\r\n\r\n\t\t\t\t\t\t\"float shadow = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"float xPixelOffset = 1.0 / shadowMapSize[ i ].x;\",\r\n\t\t\t\t\t\t\"float yPixelOffset = 1.0 / shadowMapSize[ i ].y;\",\r\n\r\n\t\t\t\t\t\t\"float dx0 = -1.0 * xPixelOffset;\",\r\n\t\t\t\t\t\t\"float dy0 = -1.0 * yPixelOffset;\",\r\n\t\t\t\t\t\t\"float dx1 = 1.0 * xPixelOffset;\",\r\n\t\t\t\t\t\t\"float dy1 = 1.0 * yPixelOffset;\",\r\n\r\n\t\t\t\t\t\t\"mat3 shadowKernel;\",\r\n\t\t\t\t\t\t\"mat3 depthKernel;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[0][0] < shadowCoord.z ) shadowKernel[0][0] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[0][0] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[0][1] < shadowCoord.z ) shadowKernel[0][1] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[0][1] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i], shadowCoord.xy + vec2( dx0, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[0][2] < shadowCoord.z ) shadowKernel[0][2] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[0][2] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[1][0] < shadowCoord.z ) shadowKernel[1][0] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[1][0] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[1][1] < shadowCoord.z ) shadowKernel[1][1] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[1][1] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[1][2] < shadowCoord.z ) shadowKernel[1][2] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[1][2] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[2][0] < shadowCoord.z ) shadowKernel[2][0] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[2][0] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[2][1] < shadowCoord.z ) shadowKernel[2][1] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[2][1] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[2][2] < shadowCoord.z ) shadowKernel[2][2] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[2][2] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\",\r\n\r\n\t\t\t\t\t\t\"shadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\",\r\n\t\t\t\t\t\t\"shadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\",\r\n\r\n\t\t\t\t\t\t\"vec4 shadowValues;\",\r\n\t\t\t\t\t\t\"shadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\",\r\n\t\t\t\t\t\t\"shadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\",\r\n\t\t\t\t\t\t\"shadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\",\r\n\t\t\t\t\t\t\"shadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\",\r\n\r\n\t\t\t\t\t\t\"shadow = dot( shadowValues, vec4( 1.0 ) );\",\r\n\r\n\t\t\t\t\t\t\"shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\",\r\n\t\t\t\t\t\t\"float fDepth = unpackDepth( rgbaDepth );\",\r\n\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z )\",\r\n\r\n\t\t\t\t\t\t\t// spot with multiple shadows is darker\r\n\r\n\t\t\t\t\t\t\t\"shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\",\r\n\r\n\t\t\t\t\t\t\t// spot with multiple shadows has the same color as single shadow spot\r\n\r\n\t\t\t\t\t\t\t//\"shadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\r\n\t\t\t\t\"#ifdef SHADOWMAP_DEBUG\",\r\n\r\n\t\t\t\t\t\"#ifdef SHADOWMAP_CASCADE\",\r\n\r\n\t\t\t\t\t\t\"if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\t\"#ifdef GAMMA_OUTPUT\",\r\n\r\n\t\t\t\t\"shadowColor *= shadowColor;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tshadowmap_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\"varying vec4 vShadowCoord[ MAX_SHADOWS ];\",\r\n\t\t\t\"uniform mat4 shadowMatrix[ MAX_SHADOWS ];\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tshadowmap_vertex: [\r\n\r\n\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_SHADOWS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// ALPHATEST\r\n\r\n\talphatest_fragment: [\r\n\r\n\t\t\"#ifdef ALPHATEST\",\r\n\r\n\t\t\t\"if ( gl_FragColor.a < ALPHATEST ) discard;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// LINEAR SPACE\r\n\r\n\tlinear_to_gamma_fragment: [\r\n\r\n\t\t\"#ifdef GAMMA_OUTPUT\",\r\n\r\n\t\t\t\"gl_FragColor.xyz = sqrt( gl_FragColor.xyz );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\")\r\n\r\n\r\n};\r\n\r\nTHREE.UniformsUtils = {\r\n\r\n\tmerge: function ( uniforms ) {\r\n\r\n\t\tvar u, p, tmp, merged = {};\r\n\r\n\t\tfor ( u = 0; u < uniforms.length; u ++ ) {\r\n\r\n\t\t\ttmp = this.clone( uniforms[ u ] );\r\n\r\n\t\t\tfor ( p in tmp ) {\r\n\r\n\t\t\t\tmerged[ p ] = tmp[ p ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn merged;\r\n\r\n\t},\r\n\r\n\tclone: function ( uniforms_src ) {\r\n\r\n\t\tvar u, p, parameter, parameter_src, uniforms_dst = {};\r\n\r\n\t\tfor ( u in uniforms_src ) {\r\n\r\n\t\t\tuniforms_dst[ u ] = {};\r\n\r\n\t\t\tfor ( p in uniforms_src[ u ] ) {\r\n\r\n\t\t\t\tparameter_src = uniforms_src[ u ][ p ];\r\n\r\n\t\t\t\tif ( parameter_src instanceof THREE.Color ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\r\n\r\n\t\t\t\t} else if ( parameter_src instanceof Array ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn uniforms_dst;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.UniformsLib = {\r\n\r\n\tcommon: {\r\n\r\n\t\t\"diffuse\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\" : { type: \"f\", value: 1.0 },\r\n\r\n\t\t\"map\" : { type: \"t\", value: null },\r\n\t\t\"offsetRepeat\" : { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\r\n\r\n\t\t\"lightMap\" : { type: \"t\", value: null },\r\n\t\t\"specularMap\" : { type: \"t\", value: null },\r\n\r\n\t\t\"envMap\" : { type: \"t\", value: null },\r\n\t\t\"flipEnvMap\" : { type: \"f\", value: -1 },\r\n\t\t\"useRefract\" : { type: \"i\", value: 0 },\r\n\t\t\"reflectivity\" : { type: \"f\", value: 1.0 },\r\n\t\t\"refractionRatio\" : { type: \"f\", value: 0.98 },\r\n\t\t\"combine\" : { type: \"i\", value: 0 },\r\n\r\n\t\t\"morphTargetInfluences\" : { type: \"f\", value: 0 }\r\n\r\n\t},\r\n\r\n\tbump: {\r\n\r\n\t\t\"bumpMap\" : { type: \"t\", value: null },\r\n\t\t\"bumpScale\" : { type: \"f\", value: 1 }\r\n\r\n\t},\r\n\r\n\tnormalmap: {\r\n\r\n\t\t\"normalMap\" : { type: \"t\", value: null },\r\n\t\t\"normalScale\" : { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\r\n\t},\r\n\r\n\tfog : {\r\n\r\n\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\r\n\t\t\"fogNear\" : { type: \"f\", value: 1 },\r\n\t\t\"fogFar\" : { type: \"f\", value: 2000 },\r\n\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\r\n\t},\r\n\r\n\tlights: {\r\n\r\n\t\t\"ambientLightColor\" : { type: \"fv\", value: [] },\r\n\r\n\t\t\"directionalLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\"directionalLightColor\" : { type: \"fv\", value: [] },\r\n\r\n\t\t\"hemisphereLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\"hemisphereLightSkyColor\" : { type: \"fv\", value: [] },\r\n\t\t\"hemisphereLightGroundColor\" : { type: \"fv\", value: [] },\r\n\r\n\t\t\"pointLightColor\" : { type: \"fv\", value: [] },\r\n\t\t\"pointLightPosition\" : { type: \"fv\", value: [] },\r\n\t\t\"pointLightDistance\" : { type: \"fv1\", value: [] },\r\n\r\n\t\t\"spotLightColor\" : { type: \"fv\", value: [] },\r\n\t\t\"spotLightPosition\" : { type: \"fv\", value: [] },\r\n\t\t\"spotLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\"spotLightDistance\" : { type: \"fv1\", value: [] },\r\n\t\t\"spotLightAngleCos\" : { type: \"fv1\", value: [] },\r\n\t\t\"spotLightExponent\" : { type: \"fv1\", value: [] }\r\n\r\n\t},\r\n\r\n\tparticle: {\r\n\r\n\t\t\"psColor\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\" : { type: \"f\", value: 1.0 },\r\n\t\t\"size\" : { type: \"f\", value: 1.0 },\r\n\t\t\"scale\" : { type: \"f\", value: 1.0 },\r\n\t\t\"map\" : { type: \"t\", value: null },\r\n\r\n\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\r\n\t\t\"fogNear\" : { type: \"f\", value: 1 },\r\n\t\t\"fogFar\" : { type: \"f\", value: 2000 },\r\n\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\r\n\t},\r\n\r\n\tshadowmap: {\r\n\r\n\t\t\"shadowMap\": { type: \"tv\", value: [] },\r\n\t\t\"shadowMapSize\": { type: \"v2v\", value: [] },\r\n\r\n\t\t\"shadowBias\" : { type: \"fv1\", value: [] },\r\n\t\t\"shadowDarkness\": { type: \"fv1\", value: [] },\r\n\r\n\t\t\"shadowMatrix\" : { type: \"m4v\", value: [] }\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ShaderLib = {\r\n\r\n\t'basic': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\r\n\t\t\t\t\"#ifdef USE_ENVMAP\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( diffuse, opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'lambert': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"ambient\"  : { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"#define LAMBERT\",\r\n\r\n\t\t\t\"varying vec3 vLightFront;\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"varying vec3 vLightBack;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lights_lambert_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_lambert_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"varying vec3 vLightFront;\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"varying vec3 vLightBack;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t//\"float isFront = float( gl_FrontFacing );\",\r\n\t\t\t\t\t//\"gl_FragColor.xyz *= isFront * vLightFront + ( 1.0 - isFront ) * vLightBack;\",\r\n\r\n\t\t\t\t\t\"if ( gl_FrontFacing )\",\r\n\t\t\t\t\t\t\"gl_FragColor.xyz *= vLightFront;\",\r\n\t\t\t\t\t\"else\",\r\n\t\t\t\t\t\t\"gl_FragColor.xyz *= vLightBack;\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"gl_FragColor.xyz *= vLightFront;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'phong': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"bump\" ],\r\n\t\t\tTHREE.UniformsLib[ \"normalmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"ambient\"  : { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\"specular\" : { type: \"c\", value: new THREE.Color( 0x111111 ) },\r\n\t\t\t\t\"shininess\": { type: \"f\", value: 30 },\r\n\t\t\t\t\"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"#define PHONG\",\r\n\r\n\t\t\t\"varying vec3 vViewPosition;\",\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\r\n\t\t\t\t\"vNormal = normalize( transformedNormal );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\r\n\r\n\t\t\t\t\"vViewPosition = -mvPosition.xyz;\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"uniform vec3 ambient;\",\r\n\t\t\t\"uniform vec3 emissive;\",\r\n\t\t\t\"uniform vec3 specular;\",\r\n\t\t\t\"uniform float shininess;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"bumpmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"normalmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'particle_basic': {\r\n\r\n\t\tuniforms:  THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"particle\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform float size;\",\r\n\t\t\t\"uniform float scale;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\t\"#ifdef USE_SIZEATTENUATION\",\r\n\t\t\t\t\t\"gl_PointSize = size * ( scale / length( mvPosition.xyz ) );\",\r\n\t\t\t\t\"#else\",\r\n\t\t\t\t\t\"gl_PointSize = size;\",\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 psColor;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_particle_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( psColor, opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_particle_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'dashed': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"scale\":     { type: \"f\", value: 1 },\r\n\t\t\t\t\"dashSize\":  { type: \"f\", value: 1 },\r\n\t\t\t\t\"totalSize\": { type: \"f\", value: 2 }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform float scale;\",\r\n\t\t\t\"attribute float lineDistance;\",\r\n\r\n\t\t\t\"varying float vLineDistance;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\t\"vLineDistance = scale * lineDistance;\",\r\n\r\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"uniform float dashSize;\",\r\n\t\t\t\"uniform float totalSize;\",\r\n\r\n\t\t\t\"varying float vLineDistance;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"if ( mod( vLineDistance, totalSize ) > dashSize ) {\",\r\n\r\n\t\t\t\t\t\"discard;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( diffuse, opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'depth': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"mNear\": { type: \"f\", value: 1.0 },\r\n\t\t\t\"mFar\" : { type: \"f\", value: 2000.0 },\r\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform float mNear;\",\r\n\t\t\t\"uniform float mFar;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"float depth = gl_FragCoord.z / gl_FragCoord.w;\",\r\n\t\t\t\t\"float color = 1.0 - smoothstep( mNear, mFar, depth );\",\r\n\t\t\t\t\"gl_FragColor = vec4( vec3( color ), opacity );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'normal': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\t\t\t\t\"vNormal = normalize( normalMatrix * normal );\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform float opacity;\",\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tNormal map shader\r\n\t//\t\t- Blinn-Phong\r\n\t//\t\t- normal + diffuse + specular + AO + displacement + reflection + shadow maps\r\n\t//\t\t- point and directional lights (use with \"lights: true\" material option)\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'normalmap' : {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\r\n\r\n\t\t\t{\r\n\r\n\t\t\t\"enableAO\"\t\t  : { type: \"i\", value: 0 },\r\n\t\t\t\"enableDiffuse\"\t  : { type: \"i\", value: 0 },\r\n\t\t\t\"enableSpecular\"  : { type: \"i\", value: 0 },\r\n\t\t\t\"enableReflection\": { type: \"i\", value: 0 },\r\n\t\t\t\"enableDisplacement\": { type: \"i\", value: 0 },\r\n\r\n\t\t\t\"tDisplacement\": { type: \"t\", value: null }, // must go first as this is vertex texture\r\n\t\t\t\"tDiffuse\"\t   : { type: \"t\", value: null },\r\n\t\t\t\"tCube\"\t\t   : { type: \"t\", value: null },\r\n\t\t\t\"tNormal\"\t   : { type: \"t\", value: null },\r\n\t\t\t\"tSpecular\"\t   : { type: \"t\", value: null },\r\n\t\t\t\"tAO\"\t\t   : { type: \"t\", value: null },\r\n\r\n\t\t\t\"uNormalScale\": { type: \"v2\", value: new THREE.Vector2( 1, 1 ) },\r\n\r\n\t\t\t\"uDisplacementBias\": { type: \"f\", value: 0.0 },\r\n\t\t\t\"uDisplacementScale\": { type: \"f\", value: 1.0 },\r\n\r\n\t\t\t\"uDiffuseColor\": { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\t\"uSpecularColor\": { type: \"c\", value: new THREE.Color( 0x111111 ) },\r\n\t\t\t\"uAmbientColor\": { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\t\"uShininess\": { type: \"f\", value: 30 },\r\n\t\t\t\"uOpacity\": { type: \"f\", value: 1 },\r\n\r\n\t\t\t\"useRefract\": { type: \"i\", value: 0 },\r\n\t\t\t\"uRefractionRatio\": { type: \"f\", value: 0.98 },\r\n\t\t\t\"uReflectivity\": { type: \"f\", value: 0.5 },\r\n\r\n\t\t\t\"uOffset\" : { type: \"v2\", value: new THREE.Vector2( 0, 0 ) },\r\n\t\t\t\"uRepeat\" : { type: \"v2\", value: new THREE.Vector2( 1, 1 ) },\r\n\r\n\t\t\t\"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\r\n\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 uAmbientColor;\",\r\n\t\t\t\"uniform vec3 uDiffuseColor;\",\r\n\t\t\t\"uniform vec3 uSpecularColor;\",\r\n\t\t\t\"uniform float uShininess;\",\r\n\t\t\t\"uniform float uOpacity;\",\r\n\r\n\t\t\t\"uniform bool enableDiffuse;\",\r\n\t\t\t\"uniform bool enableSpecular;\",\r\n\t\t\t\"uniform bool enableAO;\",\r\n\t\t\t\"uniform bool enableReflection;\",\r\n\r\n\t\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\t\"uniform sampler2D tNormal;\",\r\n\t\t\t\"uniform sampler2D tSpecular;\",\r\n\t\t\t\"uniform sampler2D tAO;\",\r\n\r\n\t\t\t\"uniform samplerCube tCube;\",\r\n\r\n\t\t\t\"uniform vec2 uNormalScale;\",\r\n\r\n\t\t\t\"uniform bool useRefract;\",\r\n\t\t\t\"uniform float uRefractionRatio;\",\r\n\t\t\t\"uniform float uReflectivity;\",\r\n\r\n\t\t\t\"varying vec3 vTangent;\",\r\n\t\t\t\"varying vec3 vBinormal;\",\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\t\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\t\"uniform vec3 ambientLightColor;\",\r\n\r\n\t\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\t\"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\t\"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\"uniform vec3 wrapRGB;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\t\t\t\"varying vec3 vViewPosition;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( vec3( 1.0 ), uOpacity );\",\r\n\r\n\t\t\t\t\"vec3 specularTex = vec3( 1.0 );\",\r\n\r\n\t\t\t\t\"vec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\",\r\n\t\t\t\t\"normalTex.xy *= uNormalScale;\",\r\n\t\t\t\t\"normalTex = normalize( normalTex );\",\r\n\r\n\t\t\t\t\"if( enableDiffuse ) {\",\r\n\r\n\t\t\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\t\t\"vec4 texelColor = texture2D( tDiffuse, vUv );\",\r\n\t\t\t\t\t\t\"texelColor.xyz *= texelColor.xyz;\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor = gl_FragColor * texelColor;\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"if( enableAO ) {\",\r\n\r\n\t\t\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\t\t\"vec4 aoColor = texture2D( tAO, vUv );\",\r\n\t\t\t\t\t\t\"aoColor.xyz *= aoColor.xyz;\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"if( enableSpecular )\",\r\n\t\t\t\t\t\"specularTex = texture2D( tSpecular, vUv ).xyz;\",\r\n\r\n\t\t\t\t\"mat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\",\r\n\t\t\t\t\"vec3 finalNormal = tsb * normalTex;\",\r\n\r\n\t\t\t\t\"#ifdef FLIP_SIDED\",\r\n\r\n\t\t\t\t\t\"finalNormal = -finalNormal;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"vec3 normal = normalize( finalNormal );\",\r\n\t\t\t\t\"vec3 viewPosition = normalize( vViewPosition );\",\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t\t\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"vec3 pointDiffuse = vec3( 0.0 );\",\r\n\t\t\t\t\t\"vec3 pointSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\t\t\"for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\t\t\"vec3 pointVector = lPosition.xyz + vViewPosition.xyz;\",\r\n\r\n\t\t\t\t\t\t\"float pointDistance = 1.0;\",\r\n\t\t\t\t\t\t\"if ( pointLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\t\"pointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\t\"pointVector = normalize( pointVector );\",\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\t\"float pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\",\r\n\t\t\t\t\t\t\t\"float pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"float pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\t\"pointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t// specular\r\n\r\n\t\t\t\t\t\t\"vec3 pointHalfVector = normalize( pointVector + viewPosition );\",\r\n\t\t\t\t\t\t\"float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\",\r\n\t\t\t\t\t\t\"float pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\t\"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\t\t\"pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"pointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// spot lights\r\n\r\n\t\t\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"vec3 spotDiffuse = vec3( 0.0 );\",\r\n\t\t\t\t\t\"vec3 spotSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\t\t\"for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\t\t\"vec3 spotVector = lPosition.xyz + vViewPosition.xyz;\",\r\n\r\n\t\t\t\t\t\t\"float spotDistance = 1.0;\",\r\n\t\t\t\t\t\t\"if ( spotLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\t\"spotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\t\"spotVector = normalize( spotVector );\",\r\n\r\n\t\t\t\t\t\t\"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\",\r\n\r\n\t\t\t\t\t\t\"if ( spotEffect > spotLightAngleCos[ i ] ) {\",\r\n\r\n\t\t\t\t\t\t\t\"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\t\t\"float spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\",\r\n\t\t\t\t\t\t\t\t\"float spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\t\"vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\t\"float spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\t\t\"spotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\",\r\n\r\n\t\t\t\t\t\t\t// specular\r\n\r\n\t\t\t\t\t\t\t\"vec3 spotHalfVector = normalize( spotVector + viewPosition );\",\r\n\t\t\t\t\t\t\t\"float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\",\r\n\t\t\t\t\t\t\t\"float spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\t\t\"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\t\t\"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\t\t\t\"spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\",\r\n\r\n\t\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\t\"spotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\",\r\n\r\n\t\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t\t\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"vec3 dirDiffuse = vec3( 0.0 );\",\r\n\t\t\t\t\t\"vec3 dirSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\t\t\"for( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\t\t\"vec3 dirVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\t\"float directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\",\r\n\t\t\t\t\t\t\t\"float directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"float dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\t\"dirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t// specular\r\n\r\n\t\t\t\t\t\t\"vec3 dirHalfVector = normalize( dirVector + viewPosition );\",\r\n\t\t\t\t\t\t\"float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\",\r\n\t\t\t\t\t\t\"float dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\t\"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\t\t\"dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"dirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t\t\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"vec3 hemiDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\t\t\"vec3 hemiSpecular = vec3( 0.0 );\" ,\r\n\r\n\t\t\t\t\t\"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\t\t\"vec3 lVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\t\"float dotProduct = dot( normal, lVector );\",\r\n\t\t\t\t\t\t\"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\",\r\n\r\n\t\t\t\t\t\t\"vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\",\r\n\r\n\t\t\t\t\t\t\"hemiDiffuse += uDiffuseColor * hemiColor;\",\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\r\n\t\t\t\t\t\t\"vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\",\r\n\t\t\t\t\t\t\"float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\",\r\n\t\t\t\t\t\t\"float hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\t\t\t\t\"vec3 lVectorGround = -lVector;\",\r\n\r\n\t\t\t\t\t\t\"vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\",\r\n\t\t\t\t\t\t\"float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\",\r\n\t\t\t\t\t\t\"float hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t\t\"float dotProductGround = dot( normal, lVectorGround );\",\r\n\r\n\t\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\t\"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\",\r\n\t\t\t\t\t\t\t\"vec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\",\r\n\t\t\t\t\t\t\t\"hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"hemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\t\t\t\t\"vec3 totalDiffuse = vec3( 0.0 );\",\r\n\t\t\t\t\"vec3 totalSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"totalDiffuse += dirDiffuse;\",\r\n\t\t\t\t\t\"totalSpecular += dirSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"totalDiffuse += hemiDiffuse;\",\r\n\t\t\t\t\t\"totalSpecular += hemiSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"totalDiffuse += pointDiffuse;\",\r\n\t\t\t\t\t\"totalSpecular += pointSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"totalDiffuse += spotDiffuse;\",\r\n\t\t\t\t\t\"totalSpecular += spotSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#ifdef METAL\",\r\n\r\n\t\t\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"if ( enableReflection ) {\",\r\n\r\n\t\t\t\t\t\"vec3 vReflect;\",\r\n\t\t\t\t\t\"vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\",\r\n\r\n\t\t\t\t\t\"if ( useRefract ) {\",\r\n\r\n\t\t\t\t\t\t\"vReflect = refract( cameraToVertex, normal, uRefractionRatio );\",\r\n\r\n\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\"vReflect = reflect( cameraToVertex, normal );\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"vec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\",\r\n\r\n\t\t\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\t\t\"cubeColor.xyz *= cubeColor.xyz;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"attribute vec4 tangent;\",\r\n\r\n\t\t\t\"uniform vec2 uOffset;\",\r\n\t\t\t\"uniform vec2 uRepeat;\",\r\n\r\n\t\t\t\"uniform bool enableDisplacement;\",\r\n\r\n\t\t\t\"#ifdef VERTEX_TEXTURES\",\r\n\r\n\t\t\t\t\"uniform sampler2D tDisplacement;\",\r\n\t\t\t\t\"uniform float uDisplacementScale;\",\r\n\t\t\t\t\"uniform float uDisplacementBias;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"varying vec3 vTangent;\",\r\n\t\t\t\"varying vec3 vBinormal;\",\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\t\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\t\t\t\"varying vec3 vViewPosition;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\r\n\t\t\t\t// normal, tangent and binormal vectors\r\n\r\n\t\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\t\"vNormal = normalize( normalMatrix * skinnedNormal.xyz );\",\r\n\r\n\t\t\t\t\t\"vec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\",\r\n\t\t\t\t\t\"vTangent = normalize( normalMatrix * skinnedTangent.xyz );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"vNormal = normalize( normalMatrix * normal );\",\r\n\t\t\t\t\t\"vTangent = normalize( normalMatrix * tangent.xyz );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"vBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\",\r\n\r\n\t\t\t\t\"vUv = uv * uRepeat + uOffset;\",\r\n\r\n\t\t\t\t// displacement mapping\r\n\r\n\t\t\t\t\"vec3 displacedPosition;\",\r\n\r\n\t\t\t\t\"#ifdef VERTEX_TEXTURES\",\r\n\r\n\t\t\t\t\t\"if ( enableDisplacement ) {\",\r\n\r\n\t\t\t\t\t\t\"vec3 dv = texture2D( tDisplacement, uv ).xyz;\",\r\n\t\t\t\t\t\t\"float df = uDisplacementScale * dv.x + uDisplacementBias;\",\r\n\t\t\t\t\t\t\"displacedPosition = position + normalize( normal ) * df;\",\r\n\r\n\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\t\t\t\"vec4 skinVertex = vec4( position, 1.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;\",\r\n\t\t\t\t\t\t\t\"skinned \t  += boneMatY * skinVertex * skinWeight.y;\",\r\n\r\n\t\t\t\t\t\t\t\"displacedPosition  = skinned.xyz;\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"displacedPosition = position;\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\t\t\"vec4 skinVertex = vec4( position, 1.0 );\",\r\n\r\n\t\t\t\t\t\t\"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;\",\r\n\t\t\t\t\t\t\"skinned \t  += boneMatY * skinVertex * skinWeight.y;\",\r\n\r\n\t\t\t\t\t\t\"displacedPosition  = skinned.xyz;\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"displacedPosition = position;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\",\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\t\"vWorldPosition = worldPosition.xyz;\",\r\n\t\t\t\t\"vViewPosition = -mvPosition.xyz;\",\r\n\r\n\t\t\t\t// shadows\r\n\r\n\t\t\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\t\t\"for( int i = 0; i < MAX_SHADOWS; i ++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tCube map shader\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'cube': {\r\n\r\n\t\tuniforms: { \"tCube\": { type: \"t\", value: null },\r\n\t\t\t\t\t\"tFlip\": { type: \"f\", value: -1 } },\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\r\n\t\t\t\t\"vWorldPosition = worldPosition.xyz;\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform samplerCube tCube;\",\r\n\t\t\t\"uniform float tFlip;\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t// Depth encoding into RGBA texture\r\n\t// \tbased on SpiderGL shadow map example\r\n\t// \t\thttp://spidergl.org/example.php?id=6\r\n\t// \toriginally from\r\n\t//\t\thttp://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD\r\n\t// \tsee also here:\r\n\t//\t\thttp://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\r\n\r\n\t'depthRGBA': {\r\n\r\n\t\tuniforms: {},\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"vec4 pack_depth( const in float depth ) {\",\r\n\r\n\t\t\t\t\"const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\",\r\n\t\t\t\t\"const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\",\r\n\t\t\t\t\"vec4 res = fract( depth * bit_shift );\",\r\n\t\t\t\t\"res -= res.xxyz * bit_mask;\",\r\n\t\t\t\t\"return res;\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\",\r\n\r\n\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );\",\r\n\t\t\t\t//\"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );\",\r\n\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( z );\",\r\n\t\t\t\t//\"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n */\r\n\r\nTHREE.WebGLRenderer = function ( parameters ) {\r\n\r\n\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),\r\n\r\n\t_precision = parameters.precision !== undefined ? parameters.precision : 'highp',\r\n\r\n\t_alpha = parameters.alpha !== undefined ? parameters.alpha : true,\r\n\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\r\n\r\n\t_clearColor = parameters.clearColor !== undefined ? new THREE.Color( parameters.clearColor ) : new THREE.Color( 0x000000 ),\r\n\t_clearAlpha = parameters.clearAlpha !== undefined ? parameters.clearAlpha : 0;\r\n\r\n\t// public properties\r\n\r\n\tthis.domElement = _canvas;\r\n\tthis.context = null;\r\n\tthis.devicePixelRatio = parameters.devicePixelRatio !== undefined\r\n\t\t\t\t? parameters.devicePixelRatio\r\n\t\t\t\t: window.devicePixelRatio !== undefined\r\n\t\t\t\t\t? window.devicePixelRatio\r\n\t\t\t\t\t: 1;\r\n\r\n\t// clearing\r\n\r\n\tthis.autoClear = true;\r\n\tthis.autoClearColor = true;\r\n\tthis.autoClearDepth = true;\r\n\tthis.autoClearStencil = true;\r\n\r\n\t// scene graph\r\n\r\n\tthis.sortObjects = true;\r\n\r\n\tthis.autoUpdateObjects = true;\r\n\tthis.autoUpdateScene = true;\r\n\r\n\t// physically based shading\r\n\r\n\tthis.gammaInput = false;\r\n\tthis.gammaOutput = false;\r\n\tthis.physicallyBasedShading = false;\r\n\r\n\t// shadow map\r\n\r\n\tthis.shadowMapEnabled = false;\r\n\tthis.shadowMapAutoUpdate = true;\r\n\tthis.shadowMapType = THREE.PCFShadowMap;\r\n\tthis.shadowMapCullFace = THREE.CullFaceFront;\r\n\tthis.shadowMapDebug = false;\r\n\tthis.shadowMapCascade = false;\r\n\r\n\t// morphs\r\n\r\n\tthis.maxMorphTargets = 8;\r\n\tthis.maxMorphNormals = 4;\r\n\r\n\t// flags\r\n\r\n\tthis.autoScaleCubemaps = true;\r\n\r\n\t// custom render plugins\r\n\r\n\tthis.renderPluginsPre = [];\r\n\tthis.renderPluginsPost = [];\r\n\r\n\t// info\r\n\r\n\tthis.info = {\r\n\r\n\t\tmemory: {\r\n\r\n\t\t\tprograms: 0,\r\n\t\t\tgeometries: 0,\r\n\t\t\ttextures: 0\r\n\r\n\t\t},\r\n\r\n\t\trender: {\r\n\r\n\t\t\tcalls: 0,\r\n\t\t\tvertices: 0,\r\n\t\t\tfaces: 0,\r\n\t\t\tpoints: 0\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// internal properties\r\n\r\n\tvar _this = this,\r\n\r\n\t_programs = [],\r\n\t_programs_counter = 0,\r\n\r\n\t// internal state cache\r\n\r\n\t_currentProgram = null,\r\n\t_currentFramebuffer = null,\r\n\t_currentMaterialId = -1,\r\n\t_currentGeometryGroupHash = null,\r\n\t_currentCamera = null,\r\n\t_geometryGroupCounter = 0,\r\n\r\n\t_usedTextureUnits = 0,\r\n\r\n\t// GL state cache\r\n\r\n\t_oldDoubleSided = -1,\r\n\t_oldFlipSided = -1,\r\n\r\n\t_oldBlending = -1,\r\n\r\n\t_oldBlendEquation = -1,\r\n\t_oldBlendSrc = -1,\r\n\t_oldBlendDst = -1,\r\n\r\n\t_oldDepthTest = -1,\r\n\t_oldDepthWrite = -1,\r\n\r\n\t_oldPolygonOffset = null,\r\n\t_oldPolygonOffsetFactor = null,\r\n\t_oldPolygonOffsetUnits = null,\r\n\r\n\t_oldLineWidth = null,\r\n\r\n\t_viewportX = 0,\r\n\t_viewportY = 0,\r\n\t_viewportWidth = 0,\r\n\t_viewportHeight = 0,\r\n\t_currentWidth = 0,\r\n\t_currentHeight = 0,\r\n\r\n\t_enabledAttributes = {},\r\n\r\n\t// frustum\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\r\n\t // camera matrices cache\r\n\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\t_projScreenMatrixPS = new THREE.Matrix4(),\r\n\r\n\t_vector3 = new THREE.Vector3(),\r\n\r\n\t// light arrays cache\r\n\r\n\t_direction = new THREE.Vector3(),\r\n\r\n\t_lightsNeedUpdate = true,\r\n\r\n\t_lights = {\r\n\r\n\t\tambient: [ 0, 0, 0 ],\r\n\t\tdirectional: { length: 0, colors: new Array(), positions: new Array() },\r\n\t\tpoint: { length: 0, colors: new Array(), positions: new Array(), distances: new Array() },\r\n\t\tspot: { length: 0, colors: new Array(), positions: new Array(), distances: new Array(), directions: new Array(), anglesCos: new Array(), exponents: new Array() },\r\n\t\themi: { length: 0, skyColors: new Array(), groundColors: new Array(), positions: new Array() }\r\n\r\n\t};\r\n\r\n\t// initialize\r\n\r\n\tvar _gl;\r\n\r\n\tvar _glExtensionTextureFloat;\r\n\tvar _glExtensionStandardDerivatives;\r\n\tvar _glExtensionTextureFilterAnisotropic;\r\n\tvar _glExtensionCompressedTextureS3TC;\r\n\r\n\tinitGL();\r\n\r\n\tsetDefaultGLState();\r\n\r\n\tthis.context = _gl;\r\n\r\n\t// GPU capabilities\r\n\r\n\tvar _maxTextures = _gl.getParameter( _gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\tvar _maxVertexTextures = _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n\tvar _maxTextureSize = _gl.getParameter( _gl.MAX_TEXTURE_SIZE );\r\n\tvar _maxCubemapSize = _gl.getParameter( _gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n\tvar _maxAnisotropy = _glExtensionTextureFilterAnisotropic ? _gl.getParameter( _glExtensionTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT ) : 0;\r\n\r\n\tvar _supportsVertexTextures = ( _maxVertexTextures > 0 );\r\n\tvar _supportsBoneTextures = _supportsVertexTextures && _glExtensionTextureFloat;\r\n\r\n\tvar _compressedTextureFormats = _glExtensionCompressedTextureS3TC ? _gl.getParameter( _gl.COMPRESSED_TEXTURE_FORMATS ) : [];\r\n\r\n\t//\r\n\r\n\tvar _vertexShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_FLOAT );\r\n\tvar _vertexShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_FLOAT );\r\n\tvar _vertexShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_FLOAT );\r\n\r\n\tvar _fragmentShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_FLOAT );\r\n\tvar _fragmentShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_FLOAT );\r\n\tvar _fragmentShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_FLOAT );\r\n\r\n\tvar _vertexShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_INT );\r\n\tvar _vertexShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_INT );\r\n\tvar _vertexShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_INT );\r\n\r\n\tvar _fragmentShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_INT );\r\n\tvar _fragmentShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_INT );\r\n\tvar _fragmentShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_INT );\r\n\r\n\t// clamp precision to maximum available\r\n\r\n\tvar highpAvailable = _vertexShaderPrecisionHighpFloat.precision > 0 && _fragmentShaderPrecisionHighpFloat.precision > 0;\r\n\tvar mediumpAvailable = _vertexShaderPrecisionMediumpFloat.precision > 0 && _fragmentShaderPrecisionMediumpFloat.precision > 0;\r\n\r\n\tif ( _precision === \"highp\" && ! highpAvailable ) {\r\n\r\n\t\tif ( mediumpAvailable ) {\r\n\r\n\t\t\t_precision = \"mediump\";\r\n\t\t\tconsole.warn( \"WebGLRenderer: highp not supported, using mediump\" );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_precision = \"lowp\";\r\n\t\t\tconsole.warn( \"WebGLRenderer: highp and mediump not supported, using lowp\" );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tif ( _precision === \"mediump\" && ! mediumpAvailable ) {\r\n\r\n\t\t_precision = \"lowp\";\r\n\t\tconsole.warn( \"WebGLRenderer: mediump not supported, using lowp\" );\r\n\r\n\t}\r\n\r\n\t// API\r\n\r\n\tthis.getContext = function () {\r\n\r\n\t\treturn _gl;\r\n\r\n\t};\r\n\r\n\tthis.supportsVertexTextures = function () {\r\n\r\n\t\treturn _supportsVertexTextures;\r\n\r\n\t};\r\n\r\n\tthis.supportsFloatTextures = function () {\r\n\r\n\t\treturn _glExtensionTextureFloat;\r\n\r\n\t};\r\n\t\r\n\tthis.supportsStandardDerivatives = function () {\r\n\r\n\t\treturn _glExtensionStandardDerivatives;\r\n\r\n\t};\r\n\t\r\n\tthis.supportsCompressedTextureS3TC = function () {\r\n\r\n\t\treturn _glExtensionCompressedTextureS3TC;\r\n\r\n\t};\r\n\t\r\n\tthis.getMaxAnisotropy  = function () {\r\n\r\n\t\treturn _maxAnisotropy;\r\n\r\n\t};\r\n\r\n\tthis.getPrecision = function () {\r\n\r\n\t\treturn _precision;\r\n\r\n\t};\r\n\r\n\tthis.setSize = function ( width, height ) {\r\n\r\n\t\t_canvas.width = width * this.devicePixelRatio;\r\n\t\t_canvas.height = height * this.devicePixelRatio;\r\n\r\n\t\t_canvas.style.width = width + 'px';\r\n\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\tthis.setViewport( 0, 0, _canvas.width, _canvas.height );\r\n\r\n\t};\r\n\r\n\tthis.setViewport = function ( x, y, width, height ) {\r\n\r\n\t\t_viewportX = x !== undefined ? x : 0;\r\n\t\t_viewportY = y !== undefined ? y : 0;\r\n\r\n\t\t_viewportWidth = width !== undefined ? width : _canvas.width;\r\n\t\t_viewportHeight = height !== undefined ? height : _canvas.height;\r\n\r\n\t\t_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );\r\n\r\n\t};\r\n\r\n\tthis.setScissor = function ( x, y, width, height ) {\r\n\r\n\t\t_gl.scissor( x, y, width, height );\r\n\r\n\t};\r\n\r\n\tthis.enableScissorTest = function ( enable ) {\r\n\r\n\t\tenable ? _gl.enable( _gl.SCISSOR_TEST ) : _gl.disable( _gl.SCISSOR_TEST );\r\n\r\n\t};\r\n\r\n\t// Clearing\r\n\r\n\tthis.setClearColorHex = function ( hex, alpha ) {\r\n\r\n\t\t_clearColor.setHex( hex );\r\n\t\t_clearAlpha = alpha;\r\n\r\n\t\t_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.setClearColor = function ( color, alpha ) {\r\n\r\n\t\t_clearColor.copy( color );\r\n\t\t_clearAlpha = alpha;\r\n\r\n\t\t_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.getClearColor = function () {\r\n\r\n\t\treturn _clearColor;\r\n\r\n\t};\r\n\r\n\tthis.getClearAlpha = function () {\r\n\r\n\t\treturn _clearAlpha;\r\n\r\n\t};\r\n\r\n\tthis.clear = function ( color, depth, stencil ) {\r\n\r\n\t\tvar bits = 0;\r\n\r\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\r\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\r\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\r\n\r\n\t\t_gl.clear( bits );\r\n\r\n\t};\r\n\r\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\t\tthis.clear( color, depth, stencil );\r\n\r\n\t};\r\n\r\n\t// Plugins\r\n\r\n\tthis.addPostPlugin = function ( plugin ) {\r\n\r\n\t\tplugin.init( this );\r\n\t\tthis.renderPluginsPost.push( plugin );\r\n\r\n\t};\r\n\r\n\tthis.addPrePlugin = function ( plugin ) {\r\n\r\n\t\tplugin.init( this );\r\n\t\tthis.renderPluginsPre.push( plugin );\r\n\r\n\t};\r\n\r\n\t// Rendering\r\n\r\n\tthis.updateShadowMap = function ( scene, camera ) {\r\n\r\n\t\t_currentProgram = null;\r\n\t\t_oldBlending = -1;\r\n\t\t_oldDepthTest = -1;\r\n\t\t_oldDepthWrite = -1;\r\n\t\t_currentGeometryGroupHash = -1;\r\n\t\t_currentMaterialId = -1;\r\n\t\t_lightsNeedUpdate = true;\r\n\t\t_oldDoubleSided = -1;\r\n\t\t_oldFlipSided = -1;\r\n\r\n\t\tthis.shadowMapPlugin.update( scene, camera );\r\n\r\n\t};\r\n\r\n\t// Internal functions\r\n\r\n\t// Buffer allocation\r\n\r\n\tfunction createParticleBuffers ( geometry ) {\r\n\r\n\t\tgeometry.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglColorBuffer = _gl.createBuffer();\r\n\r\n\t\t_this.info.memory.geometries ++;\r\n\r\n\t};\r\n\r\n\tfunction createLineBuffers ( geometry ) {\r\n\r\n\t\tgeometry.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglColorBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglLineDistanceBuffer = _gl.createBuffer();\r\n\r\n\t\t_this.info.memory.geometries ++;\r\n\r\n\t};\r\n\r\n\tfunction createRibbonBuffers ( geometry ) {\r\n\r\n\t\tgeometry.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglColorBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglNormalBuffer = _gl.createBuffer();\r\n\r\n\t\t_this.info.memory.geometries ++;\r\n\r\n\t};\r\n\r\n\tfunction createMeshBuffers ( geometryGroup ) {\r\n\r\n\t\tgeometryGroup.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglNormalBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglTangentBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglColorBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglUVBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglUV2Buffer = _gl.createBuffer();\r\n\r\n\t\tgeometryGroup.__webglSkinIndicesBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglSkinWeightsBuffer = _gl.createBuffer();\r\n\r\n\t\tgeometryGroup.__webglFaceBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglLineBuffer = _gl.createBuffer();\r\n\r\n\t\tvar m, ml;\r\n\r\n\t\tif ( geometryGroup.numMorphTargets ) {\r\n\r\n\t\t\tgeometryGroup.__webglMorphTargetsBuffers = [];\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\r\n\r\n\t\t\t\tgeometryGroup.__webglMorphTargetsBuffers.push( _gl.createBuffer() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometryGroup.numMorphNormals ) {\r\n\r\n\t\t\tgeometryGroup.__webglMorphNormalsBuffers = [];\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\r\n\r\n\t\t\t\tgeometryGroup.__webglMorphNormalsBuffers.push( _gl.createBuffer() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_this.info.memory.geometries ++;\r\n\r\n\t};\r\n\r\n\t// Events\r\n\r\n\tvar onGeometryDispose = function ( event ) {\r\n\r\n\t\tvar geometry = event.target;\r\n\r\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tdeallocateGeometry( geometry );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\r\n\tvar onTextureDispose = function ( event ) {\r\n\r\n\t\tvar texture = event.target;\r\n\r\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\tdeallocateTexture( texture );\r\n\r\n\t\t_this.info.memory.textures --;\r\n\r\n\r\n\t};\r\n\r\n\tvar onRenderTargetDispose = function ( event ) {\r\n\r\n\t\tvar renderTarget = event.target;\r\n\r\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\tdeallocateRenderTarget( renderTarget );\r\n\r\n\t\t_this.info.memory.textures --;\r\n\r\n\t};\r\n\r\n\tvar onMaterialDispose = function ( event ) {\r\n\r\n\t\tvar material = event.target;\r\n\r\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\tdeallocateMaterial( material );\r\n\r\n\t};\r\n\r\n\t// Buffer deallocation\r\n\r\n\tvar deallocateGeometry = function ( geometry ) {\r\n\r\n\t\tgeometry.__webglInit = undefined;\r\n\r\n\t\tif ( geometry.__webglVertexBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglVertexBuffer );\r\n\t\tif ( geometry.__webglNormalBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglNormalBuffer );\r\n\t\tif ( geometry.__webglTangentBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglTangentBuffer );\r\n\t\tif ( geometry.__webglColorBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglColorBuffer );\r\n\t\tif ( geometry.__webglUVBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglUVBuffer );\r\n\t\tif ( geometry.__webglUV2Buffer !== undefined ) _gl.deleteBuffer( geometry.__webglUV2Buffer );\r\n\r\n\t\tif ( geometry.__webglSkinIndicesBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinIndicesBuffer );\r\n\t\tif ( geometry.__webglSkinWeightsBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinWeightsBuffer );\r\n\r\n\t\tif ( geometry.__webglFaceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglFaceBuffer );\r\n\t\tif ( geometry.__webglLineBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineBuffer );\r\n\r\n\t\tif ( geometry.__webglLineDistanceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineDistanceBuffer );\r\n\r\n\t\t// geometry groups\r\n\r\n\t\tif ( geometry.geometryGroups !== undefined ) {\r\n\r\n\t\t\tfor ( var g in geometry.geometryGroups ) {\r\n\r\n\t\t\t\tvar geometryGroup = geometry.geometryGroups[ g ];\r\n\r\n\t\t\t\tif ( geometryGroup.numMorphTargets !== undefined ) {\r\n\r\n\t\t\t\t\tfor ( var m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometryGroup.numMorphNormals !== undefined ) {\r\n\r\n\t\t\t\t\tfor ( var m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdeleteCustomAttributesBuffers( geometryGroup );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometry );\r\n\r\n\t};\r\n\r\n\tvar deallocateTexture = function ( texture ) {\r\n\r\n\t\tif ( texture.image && texture.image.__webglTextureCube ) {\r\n\r\n\t\t\t// cube texture\r\n\r\n\t\t\t_gl.deleteTexture( texture.image.__webglTextureCube );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// 2D texture\r\n\r\n\t\t\tif ( ! texture.__webglInit ) return;\r\n\r\n\t\t\ttexture.__webglInit = false;\r\n\t\t\t_gl.deleteTexture( texture.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar deallocateRenderTarget = function ( renderTarget ) {\r\n\r\n\t\tif ( !renderTarget || ! renderTarget.__webglTexture ) return;\r\n\r\n\t\t_gl.deleteTexture( renderTarget.__webglTexture );\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t_gl.deleteFramebuffer( renderTarget.__webglFramebuffer[ i ] );\r\n\t\t\t\t_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.deleteFramebuffer( renderTarget.__webglFramebuffer );\r\n\t\t\t_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar deallocateMaterial = function ( material ) {\r\n\r\n\t\tvar program = material.program;\r\n\r\n\t\tif ( program === undefined ) return;\r\n\r\n\t\tmaterial.program = undefined;\r\n\r\n\t\t// only deallocate GL program if this was the last use of shared program\r\n\t\t// assumed there is only single copy of any program in the _programs list\r\n\t\t// (that's how it's constructed)\r\n\r\n\t\tvar i, il, programInfo;\r\n\t\tvar deleteProgram = false;\r\n\r\n\t\tfor ( i = 0, il = _programs.length; i < il; i ++ ) {\r\n\r\n\t\t\tprogramInfo = _programs[ i ];\r\n\r\n\t\t\tif ( programInfo.program === program ) {\r\n\r\n\t\t\t\tprogramInfo.usedTimes --;\r\n\r\n\t\t\t\tif ( programInfo.usedTimes === 0 ) {\r\n\r\n\t\t\t\t\tdeleteProgram = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( deleteProgram === true ) {\r\n\r\n\t\t\t// avoid using array.splice, this is costlier than creating new array from scratch\r\n\r\n\t\t\tvar newPrograms = [];\r\n\r\n\t\t\tfor ( i = 0, il = _programs.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tprogramInfo = _programs[ i ];\r\n\r\n\t\t\t\tif ( programInfo.program !== program ) {\r\n\r\n\t\t\t\t\tnewPrograms.push( programInfo );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_programs = newPrograms;\r\n\r\n\t\t\t_gl.deleteProgram( program );\r\n\r\n\t\t\t_this.info.memory.programs --;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\t/*\r\n\tfunction deleteParticleBuffers ( geometry ) {\r\n\r\n\t\t_gl.deleteBuffer( geometry.__webglVertexBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglColorBuffer );\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometry );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\r\n\tfunction deleteLineBuffers ( geometry ) {\r\n\r\n\t\t_gl.deleteBuffer( geometry.__webglVertexBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglColorBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglLineDistanceBuffer );\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometry );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\r\n\tfunction deleteRibbonBuffers ( geometry ) {\r\n\r\n\t\t_gl.deleteBuffer( geometry.__webglVertexBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglColorBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglNormalBuffer );\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometry );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\r\n\tfunction deleteMeshBuffers ( geometryGroup ) {\r\n\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglVertexBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglNormalBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglTangentBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglColorBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglUVBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglUV2Buffer );\r\n\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglSkinIndicesBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglSkinWeightsBuffer );\r\n\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglFaceBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglLineBuffer );\r\n\r\n\t\tvar m, ml;\r\n\r\n\t\tif ( geometryGroup.numMorphTargets ) {\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\r\n\r\n\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometryGroup.numMorphNormals ) {\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\r\n\r\n\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometryGroup );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\t*/\r\n\r\n\tfunction deleteCustomAttributesBuffers( geometry ) {\r\n\r\n\t\tif ( geometry.__webglCustomAttributesList ) {\r\n\r\n\t\t\tfor ( var id in geometry.__webglCustomAttributesList ) {\r\n\r\n\t\t\t\t_gl.deleteBuffer( geometry.__webglCustomAttributesList[ id ].buffer );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Buffer initialization\r\n\r\n\tfunction initCustomAttributes ( geometry, object ) {\r\n\r\n\t\tvar nvertices = geometry.vertices.length;\r\n\r\n\t\tvar material = object.material;\r\n\r\n\t\tif ( material.attributes ) {\r\n\r\n\t\t\tif ( geometry.__webglCustomAttributesList === undefined ) {\r\n\r\n\t\t\t\tgeometry.__webglCustomAttributesList = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var a in material.attributes ) {\r\n\r\n\t\t\t\tvar attribute = material.attributes[ a ];\r\n\r\n\t\t\t\tif ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {\r\n\r\n\t\t\t\t\tattribute.__webglInitialized = true;\r\n\r\n\t\t\t\t\tvar size = 1;\t\t// \"f\" and \"i\"\r\n\r\n\t\t\t\t\tif ( attribute.type === \"v2\" ) size = 2;\r\n\t\t\t\t\telse if ( attribute.type === \"v3\" ) size = 3;\r\n\t\t\t\t\telse if ( attribute.type === \"v4\" ) size = 4;\r\n\t\t\t\t\telse if ( attribute.type === \"c\"  ) size = 3;\r\n\r\n\t\t\t\t\tattribute.size = size;\r\n\r\n\t\t\t\t\tattribute.array = new Float32Array( nvertices * size );\r\n\r\n\t\t\t\t\tattribute.buffer = _gl.createBuffer();\r\n\t\t\t\t\tattribute.buffer.belongsToAttribute = a;\r\n\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.__webglCustomAttributesList.push( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction initParticleBuffers ( geometry, object ) {\r\n\r\n\t\tvar nvertices = geometry.vertices.length;\r\n\r\n\t\tgeometry.__vertexArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__colorArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\tgeometry.__sortArray = [];\r\n\r\n\t\tgeometry.__webglParticleCount = nvertices;\r\n\r\n\t\tinitCustomAttributes ( geometry, object );\r\n\r\n\t};\r\n\r\n\tfunction initLineBuffers ( geometry, object ) {\r\n\r\n\t\tvar nvertices = geometry.vertices.length;\r\n\r\n\t\tgeometry.__vertexArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__colorArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__lineDistanceArray = new Float32Array( nvertices * 1 );\r\n\r\n\t\tgeometry.__webglLineCount = nvertices;\r\n\r\n\t\tinitCustomAttributes ( geometry, object );\r\n\r\n\t};\r\n\r\n\tfunction initRibbonBuffers ( geometry, object ) {\r\n\r\n\t\tvar nvertices = geometry.vertices.length;\r\n\r\n\t\tgeometry.__vertexArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__colorArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__normalArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\tgeometry.__webglVertexCount = nvertices;\r\n\r\n\t\tinitCustomAttributes ( geometry, object );\r\n\r\n\t};\r\n\r\n\tfunction initMeshBuffers ( geometryGroup, object ) {\r\n\r\n\t\tvar geometry = object.geometry,\r\n\t\t\tfaces3 = geometryGroup.faces3,\r\n\t\t\tfaces4 = geometryGroup.faces4,\r\n\r\n\t\t\tnvertices = faces3.length * 3 + faces4.length * 4,\r\n\t\t\tntris     = faces3.length * 1 + faces4.length * 2,\r\n\t\t\tnlines    = faces3.length * 3 + faces4.length * 4,\r\n\r\n\t\t\tmaterial = getBufferMaterial( object, geometryGroup ),\r\n\r\n\t\t\tuvType = bufferGuessUVType( material ),\r\n\t\t\tnormalType = bufferGuessNormalType( material ),\r\n\t\t\tvertexColorType = bufferGuessVertexColorType( material );\r\n\r\n\t\t//console.log( \"uvType\", uvType, \"normalType\", normalType, \"vertexColorType\", vertexColorType, object, geometryGroup, material );\r\n\r\n\t\tgeometryGroup.__vertexArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\tif ( normalType ) {\r\n\r\n\t\t\tgeometryGroup.__normalArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.hasTangents ) {\r\n\r\n\t\t\tgeometryGroup.__tangentArray = new Float32Array( nvertices * 4 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( vertexColorType ) {\r\n\r\n\t\t\tgeometryGroup.__colorArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( uvType ) {\r\n\r\n\t\t\tif ( geometry.faceUvs.length > 0 || geometry.faceVertexUvs.length > 0 ) {\r\n\r\n\t\t\t\tgeometryGroup.__uvArray = new Float32Array( nvertices * 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.faceUvs.length > 1 || geometry.faceVertexUvs.length > 1 ) {\r\n\r\n\t\t\t\tgeometryGroup.__uv2Array = new Float32Array( nvertices * 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.geometry.skinWeights.length && object.geometry.skinIndices.length ) {\r\n\r\n\t\t\tgeometryGroup.__skinIndexArray = new Float32Array( nvertices * 4 );\r\n\t\t\tgeometryGroup.__skinWeightArray = new Float32Array( nvertices * 4 );\r\n\r\n\t\t}\r\n\r\n\t\tgeometryGroup.__faceArray = new Uint16Array( ntris * 3 );\r\n\t\tgeometryGroup.__lineArray = new Uint16Array( nlines * 2 );\r\n\r\n\t\tvar m, ml;\r\n\r\n\t\tif ( geometryGroup.numMorphTargets ) {\r\n\r\n\t\t\tgeometryGroup.__morphTargetsArrays = [];\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\r\n\r\n\t\t\t\tgeometryGroup.__morphTargetsArrays.push( new Float32Array( nvertices * 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometryGroup.numMorphNormals ) {\r\n\r\n\t\t\tgeometryGroup.__morphNormalsArrays = [];\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\r\n\r\n\t\t\t\tgeometryGroup.__morphNormalsArrays.push( new Float32Array( nvertices * 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometryGroup.__webglFaceCount = ntris * 3;\r\n\t\tgeometryGroup.__webglLineCount = nlines * 2;\r\n\r\n\r\n\t\t// custom attributes\r\n\r\n\t\tif ( material.attributes ) {\r\n\r\n\t\t\tif ( geometryGroup.__webglCustomAttributesList === undefined ) {\r\n\r\n\t\t\t\tgeometryGroup.__webglCustomAttributesList = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var a in material.attributes ) {\r\n\r\n\t\t\t\t// Do a shallow copy of the attribute object so different geometryGroup chunks use different\r\n\t\t\t\t// attribute buffers which are correctly indexed in the setMeshBuffers function\r\n\r\n\t\t\t\tvar originalAttribute = material.attributes[ a ];\r\n\r\n\t\t\t\tvar attribute = {};\r\n\r\n\t\t\t\tfor ( var property in originalAttribute ) {\r\n\r\n\t\t\t\t\tattribute[ property ] = originalAttribute[ property ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {\r\n\r\n\t\t\t\t\tattribute.__webglInitialized = true;\r\n\r\n\t\t\t\t\tvar size = 1;\t\t// \"f\" and \"i\"\r\n\r\n\t\t\t\t\tif( attribute.type === \"v2\" ) size = 2;\r\n\t\t\t\t\telse if( attribute.type === \"v3\" ) size = 3;\r\n\t\t\t\t\telse if( attribute.type === \"v4\" ) size = 4;\r\n\t\t\t\t\telse if( attribute.type === \"c\"  ) size = 3;\r\n\r\n\t\t\t\t\tattribute.size = size;\r\n\r\n\t\t\t\t\tattribute.array = new Float32Array( nvertices * size );\r\n\r\n\t\t\t\t\tattribute.buffer = _gl.createBuffer();\r\n\t\t\t\t\tattribute.buffer.belongsToAttribute = a;\r\n\r\n\t\t\t\t\toriginalAttribute.needsUpdate = true;\r\n\t\t\t\t\tattribute.__original = originalAttribute;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometryGroup.__webglCustomAttributesList.push( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometryGroup.__inittedArrays = true;\r\n\r\n\t};\r\n\r\n\tfunction getBufferMaterial( object, geometryGroup ) {\r\n\r\n\t\treturn object.material instanceof THREE.MeshFaceMaterial\r\n\t\t\t? object.material.materials[ geometryGroup.materialIndex ]\r\n\t\t\t: object.material;\r\n\r\n\t};\r\n\r\n\tfunction materialNeedsSmoothNormals ( material ) {\r\n\r\n\t\treturn material && material.shading !== undefined && material.shading === THREE.SmoothShading;\r\n\r\n\t};\r\n\r\n\tfunction bufferGuessNormalType ( material ) {\r\n\r\n\t\t// only MeshBasicMaterial and MeshDepthMaterial don't need normals\r\n\r\n\t\tif ( ( material instanceof THREE.MeshBasicMaterial && !material.envMap ) || material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialNeedsSmoothNormals( material ) ) {\r\n\r\n\t\t\treturn THREE.SmoothShading;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn THREE.FlatShading;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction bufferGuessVertexColorType ( material ) {\r\n\r\n\t\tif ( material.vertexColors ) {\r\n\r\n\t\t\treturn material.vertexColors;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t};\r\n\r\n\tfunction bufferGuessUVType ( material ) {\r\n\r\n\t\t// material must use some texture to require uvs\r\n\r\n\t\tif ( material.map || material.lightMap || material.bumpMap || material.normalMap || material.specularMap || material instanceof THREE.ShaderMaterial ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction initDirectBuffers( geometry ) {\r\n\r\n\t\tvar a, attribute, type;\r\n\r\n\t\tfor ( a in geometry.attributes ) {\r\n\r\n\t\t\tif ( a === \"index\" ) {\r\n\r\n\t\t\t\ttype = _gl.ELEMENT_ARRAY_BUFFER;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttype = _gl.ARRAY_BUFFER;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tattribute = geometry.attributes[ a ];\r\n\r\n\t\t\tattribute.buffer = _gl.createBuffer();\r\n\r\n\t\t\t_gl.bindBuffer( type, attribute.buffer );\r\n\t\t\t_gl.bufferData( type, attribute.array, _gl.STATIC_DRAW );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Buffer setting\r\n\r\n\tfunction setParticleBuffers ( geometry, hint, object ) {\r\n\r\n\t\tvar v, c, vertex, offset, index, color,\r\n\r\n\t\tvertices = geometry.vertices,\r\n\t\tvl = vertices.length,\r\n\r\n\t\tcolors = geometry.colors,\r\n\t\tcl = colors.length,\r\n\r\n\t\tvertexArray = geometry.__vertexArray,\r\n\t\tcolorArray = geometry.__colorArray,\r\n\r\n\t\tsortArray = geometry.__sortArray,\r\n\r\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\r\n\t\tdirtyElements = geometry.elementsNeedUpdate,\r\n\t\tdirtyColors = geometry.colorsNeedUpdate,\r\n\r\n\t\tcustomAttributes = geometry.__webglCustomAttributesList,\r\n\t\ti, il,\r\n\t\ta, ca, cal, value,\r\n\t\tcustomAttribute;\r\n\r\n\t\tif ( object.sortParticles ) {\r\n\r\n\t\t\t_projScreenMatrixPS.copy( _projScreenMatrix );\r\n\t\t\t_projScreenMatrixPS.multiply( object.matrixWorld );\r\n\r\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertex = vertices[ v ];\r\n\r\n\t\t\t\t_vector3.copy( vertex );\r\n\t\t\t\t_vector3.applyProjection( _projScreenMatrixPS );\r\n\r\n\t\t\t\tsortArray[ v ] = [ _vector3.z, v ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsortArray.sort( numericalSort );\r\n\r\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertex = vertices[ sortArray[v][1] ];\r\n\r\n\t\t\t\toffset = v * 3;\r\n\r\n\t\t\t\tvertexArray[ offset ]     = vertex.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( c = 0; c < cl; c ++ ) {\r\n\r\n\t\t\t\toffset = c * 3;\r\n\r\n\t\t\t\tcolor = colors[ sortArray[c][1] ];\r\n\r\n\t\t\t\tcolorArray[ offset ]     = color.r;\r\n\t\t\t\tcolorArray[ offset + 1 ] = color.g;\r\n\t\t\t\tcolorArray[ offset + 2 ] = color.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( customAttributes ) {\r\n\r\n\t\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\t\tif ( ! ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) ) continue;\r\n\r\n\t\t\t\t\toffset = 0;\r\n\r\n\t\t\t\t\tcal = customAttribute.value.length;\r\n\r\n\t\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\r\n\t\t\t\t\t\t\toffset += 2;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]     = value.r;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ]      = value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\r\n\r\n\t\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( dirtyVertices ) {\r\n\r\n\t\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\t\tvertex = vertices[ v ];\r\n\r\n\t\t\t\t\toffset = v * 3;\r\n\r\n\t\t\t\t\tvertexArray[ offset ]     = vertex.x;\r\n\t\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\r\n\t\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( dirtyColors ) {\r\n\r\n\t\t\t\tfor ( c = 0; c < cl; c ++ ) {\r\n\r\n\t\t\t\t\tcolor = colors[ c ];\r\n\r\n\t\t\t\t\toffset = c * 3;\r\n\r\n\t\t\t\t\tcolorArray[ offset ]     = color.r;\r\n\t\t\t\t\tcolorArray[ offset + 1 ] = color.g;\r\n\t\t\t\t\tcolorArray[ offset + 2 ] = color.b;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( customAttributes ) {\r\n\r\n\t\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\t\tif ( customAttribute.needsUpdate &&\r\n\t\t\t\t\t\t ( customAttribute.boundTo === undefined ||\r\n\t\t\t\t\t\t   customAttribute.boundTo === \"vertices\") ) {\r\n\r\n\t\t\t\t\t\tcal = customAttribute.value.length;\r\n\r\n\t\t\t\t\t\toffset = 0;\r\n\r\n\t\t\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\r\n\t\t\t\t\t\t\t\toffset += 2;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.r;\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\r\n\r\n\t\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\r\n\r\n\t\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]      = value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\r\n\r\n\t\t\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyVertices || object.sortParticles ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyColors || object.sortParticles ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( customAttributes ) {\r\n\r\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\tif ( customAttribute.needsUpdate || object.sortParticles ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\r\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t};\r\n\r\n\tfunction setLineBuffers ( geometry, hint ) {\r\n\r\n\t\tvar v, c, d, vertex, offset, color,\r\n\r\n\t\tvertices = geometry.vertices,\r\n\t\tcolors = geometry.colors,\r\n\t\tlineDistances = geometry.lineDistances,\r\n\r\n\t\tvl = vertices.length,\r\n\t\tcl = colors.length,\r\n\t\tdl = lineDistances.length,\r\n\r\n\t\tvertexArray = geometry.__vertexArray,\r\n\t\tcolorArray = geometry.__colorArray,\r\n\t\tlineDistanceArray = geometry.__lineDistanceArray,\r\n\r\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\r\n\t\tdirtyColors = geometry.colorsNeedUpdate,\r\n\t\tdirtyLineDistances = geometry.lineDistancesNeedUpdate,\r\n\r\n\t\tcustomAttributes = geometry.__webglCustomAttributesList,\r\n\r\n\t\ti, il,\r\n\t\ta, ca, cal, value,\r\n\t\tcustomAttribute;\r\n\r\n\t\tif ( dirtyVertices ) {\r\n\r\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertex = vertices[ v ];\r\n\r\n\t\t\t\toffset = v * 3;\r\n\r\n\t\t\t\tvertexArray[ offset ]     = vertex.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyColors ) {\r\n\r\n\t\t\tfor ( c = 0; c < cl; c ++ ) {\r\n\r\n\t\t\t\tcolor = colors[ c ];\r\n\r\n\t\t\t\toffset = c * 3;\r\n\r\n\t\t\t\tcolorArray[ offset ]     = color.r;\r\n\t\t\t\tcolorArray[ offset + 1 ] = color.g;\r\n\t\t\t\tcolorArray[ offset + 2 ] = color.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyLineDistances ) {\r\n\r\n\t\t\tfor ( d = 0; d < dl; d ++ ) {\r\n\r\n\t\t\t\tlineDistanceArray[ d ] = lineDistances[ d ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglLineDistanceBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, lineDistanceArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( customAttributes ) {\r\n\r\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\tif ( customAttribute.needsUpdate &&\r\n\t\t\t\t\t ( customAttribute.boundTo === undefined ||\r\n\t\t\t\t\t   customAttribute.boundTo === \"vertices\" ) ) {\r\n\r\n\t\t\t\t\toffset = 0;\r\n\r\n\t\t\t\t\tcal = customAttribute.value.length;\r\n\r\n\t\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\r\n\t\t\t\t\t\t\toffset += 2;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.r;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t = value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\r\n\r\n\t\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\r\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setRibbonBuffers ( geometry, hint ) {\r\n\r\n\t\tvar v, c, n, vertex, offset, color, normal,\r\n\r\n\t\ti, il, ca, cal, customAttribute, value,\r\n\r\n\t\tvertices = geometry.vertices,\r\n\t\tcolors = geometry.colors,\r\n\t\tnormals = geometry.normals,\r\n\r\n\t\tvl = vertices.length,\r\n\t\tcl = colors.length,\r\n\t\tnl = normals.length,\r\n\r\n\t\tvertexArray = geometry.__vertexArray,\r\n\t\tcolorArray = geometry.__colorArray,\r\n\t\tnormalArray = geometry.__normalArray,\r\n\r\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\r\n\t\tdirtyColors = geometry.colorsNeedUpdate,\r\n\t\tdirtyNormals = geometry.normalsNeedUpdate,\r\n\r\n\t\tcustomAttributes = geometry.__webglCustomAttributesList;\r\n\r\n\t\tif ( dirtyVertices ) {\r\n\r\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertex = vertices[ v ];\r\n\r\n\t\t\t\toffset = v * 3;\r\n\r\n\t\t\t\tvertexArray[ offset ]     = vertex.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyColors ) {\r\n\r\n\t\t\tfor ( c = 0; c < cl; c ++ ) {\r\n\r\n\t\t\t\tcolor = colors[ c ];\r\n\r\n\t\t\t\toffset = c * 3;\r\n\r\n\t\t\t\tcolorArray[ offset ]     = color.r;\r\n\t\t\t\tcolorArray[ offset + 1 ] = color.g;\r\n\t\t\t\tcolorArray[ offset + 2 ] = color.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyNormals ) {\r\n\r\n\t\t\tfor ( n = 0; n < nl; n ++ ) {\r\n\r\n\t\t\t\tnormal = normals[ n ];\r\n\r\n\t\t\t\toffset = n * 3;\r\n\r\n\t\t\t\tnormalArray[ offset ]     = normal.x;\r\n\t\t\t\tnormalArray[ offset + 1 ] = normal.y;\r\n\t\t\t\tnormalArray[ offset + 2 ] = normal.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglNormalBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( customAttributes ) {\r\n\r\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\tif ( customAttribute.needsUpdate &&\r\n\t\t\t\t\t ( customAttribute.boundTo === undefined ||\r\n\t\t\t\t\t   customAttribute.boundTo === \"vertices\" ) ) {\r\n\r\n\t\t\t\t\toffset = 0;\r\n\r\n\t\t\t\t\tcal = customAttribute.value.length;\r\n\r\n\t\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\r\n\t\t\t\t\t\t\toffset += 2;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.r;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t = value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\r\n\r\n\t\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\r\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setMeshBuffers( geometryGroup, object, hint, dispose, material ) {\r\n\r\n\t\tif ( ! geometryGroup.__inittedArrays ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar normalType = bufferGuessNormalType( material ),\r\n\t\tvertexColorType = bufferGuessVertexColorType( material ),\r\n\t\tuvType = bufferGuessUVType( material ),\r\n\r\n\t\tneedsSmoothNormals = ( normalType === THREE.SmoothShading );\r\n\r\n\t\tvar f, fl, fi, face,\r\n\t\tvertexNormals, faceNormal, normal,\r\n\t\tvertexColors, faceColor,\r\n\t\tvertexTangents,\r\n\t\tuv, uv2, v1, v2, v3, v4, t1, t2, t3, t4, n1, n2, n3, n4,\r\n\t\tc1, c2, c3, c4,\r\n\t\tsw1, sw2, sw3, sw4,\r\n\t\tsi1, si2, si3, si4,\r\n\t\tsa1, sa2, sa3, sa4,\r\n\t\tsb1, sb2, sb3, sb4,\r\n\t\tm, ml, i, il,\r\n\t\tvn, uvi, uv2i,\r\n\t\tvk, vkl, vka,\r\n\t\tnka, chf, faceVertexNormals,\r\n\t\ta,\r\n\r\n\t\tvertexIndex = 0,\r\n\r\n\t\toffset = 0,\r\n\t\toffset_uv = 0,\r\n\t\toffset_uv2 = 0,\r\n\t\toffset_face = 0,\r\n\t\toffset_normal = 0,\r\n\t\toffset_tangent = 0,\r\n\t\toffset_line = 0,\r\n\t\toffset_color = 0,\r\n\t\toffset_skin = 0,\r\n\t\toffset_morphTarget = 0,\r\n\t\toffset_custom = 0,\r\n\t\toffset_customSrc = 0,\r\n\r\n\t\tvalue,\r\n\r\n\t\tvertexArray = geometryGroup.__vertexArray,\r\n\t\tuvArray = geometryGroup.__uvArray,\r\n\t\tuv2Array = geometryGroup.__uv2Array,\r\n\t\tnormalArray = geometryGroup.__normalArray,\r\n\t\ttangentArray = geometryGroup.__tangentArray,\r\n\t\tcolorArray = geometryGroup.__colorArray,\r\n\r\n\t\tskinIndexArray = geometryGroup.__skinIndexArray,\r\n\t\tskinWeightArray = geometryGroup.__skinWeightArray,\r\n\r\n\t\tmorphTargetsArrays = geometryGroup.__morphTargetsArrays,\r\n\t\tmorphNormalsArrays = geometryGroup.__morphNormalsArrays,\r\n\r\n\t\tcustomAttributes = geometryGroup.__webglCustomAttributesList,\r\n\t\tcustomAttribute,\r\n\r\n\t\tfaceArray = geometryGroup.__faceArray,\r\n\t\tlineArray = geometryGroup.__lineArray,\r\n\r\n\t\tgeometry = object.geometry, // this is shared for all chunks\r\n\r\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\r\n\t\tdirtyElements = geometry.elementsNeedUpdate,\r\n\t\tdirtyUvs = geometry.uvsNeedUpdate,\r\n\t\tdirtyNormals = geometry.normalsNeedUpdate,\r\n\t\tdirtyTangents = geometry.tangentsNeedUpdate,\r\n\t\tdirtyColors = geometry.colorsNeedUpdate,\r\n\t\tdirtyMorphTargets = geometry.morphTargetsNeedUpdate,\r\n\r\n\t\tvertices = geometry.vertices,\r\n\t\tchunk_faces3 = geometryGroup.faces3,\r\n\t\tchunk_faces4 = geometryGroup.faces4,\r\n\t\tobj_faces = geometry.faces,\r\n\r\n\t\tobj_uvs  = geometry.faceVertexUvs[ 0 ],\r\n\t\tobj_uvs2 = geometry.faceVertexUvs[ 1 ],\r\n\r\n\t\tobj_colors = geometry.colors,\r\n\r\n\t\tobj_skinIndices = geometry.skinIndices,\r\n\t\tobj_skinWeights = geometry.skinWeights,\r\n\r\n\t\tmorphTargets = geometry.morphTargets,\r\n\t\tmorphNormals = geometry.morphNormals;\r\n\r\n\t\tif ( dirtyVertices ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\tv1 = vertices[ face.a ];\r\n\t\t\t\tv2 = vertices[ face.b ];\r\n\t\t\t\tv3 = vertices[ face.c ];\r\n\r\n\t\t\t\tvertexArray[ offset ]     = v1.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = v1.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = v1.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 3 ] = v2.x;\r\n\t\t\t\tvertexArray[ offset + 4 ] = v2.y;\r\n\t\t\t\tvertexArray[ offset + 5 ] = v2.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 6 ] = v3.x;\r\n\t\t\t\tvertexArray[ offset + 7 ] = v3.y;\r\n\t\t\t\tvertexArray[ offset + 8 ] = v3.z;\r\n\r\n\t\t\t\toffset += 9;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\tv1 = vertices[ face.a ];\r\n\t\t\t\tv2 = vertices[ face.b ];\r\n\t\t\t\tv3 = vertices[ face.c ];\r\n\t\t\t\tv4 = vertices[ face.d ];\r\n\r\n\t\t\t\tvertexArray[ offset ]     = v1.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = v1.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = v1.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 3 ] = v2.x;\r\n\t\t\t\tvertexArray[ offset + 4 ] = v2.y;\r\n\t\t\t\tvertexArray[ offset + 5 ] = v2.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 6 ] = v3.x;\r\n\t\t\t\tvertexArray[ offset + 7 ] = v3.y;\r\n\t\t\t\tvertexArray[ offset + 8 ] = v3.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 9 ]  = v4.x;\r\n\t\t\t\tvertexArray[ offset + 10 ] = v4.y;\r\n\t\t\t\tvertexArray[ offset + 11 ] = v4.z;\r\n\r\n\t\t\t\toffset += 12;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyMorphTargets ) {\r\n\r\n\t\t\tfor ( vk = 0, vkl = morphTargets.length; vk < vkl; vk ++ ) {\r\n\r\n\t\t\t\toffset_morphTarget = 0;\r\n\r\n\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tchf = chunk_faces3[ f ];\r\n\t\t\t\t\tface = obj_faces[ chf ];\r\n\r\n\t\t\t\t\t// morph positions\r\n\r\n\t\t\t\t\tv1 = morphTargets[ vk ].vertices[ face.a ];\r\n\t\t\t\t\tv2 = morphTargets[ vk ].vertices[ face.b ];\r\n\t\t\t\t\tv3 = morphTargets[ vk ].vertices[ face.c ];\r\n\r\n\t\t\t\t\tvka = morphTargetsArrays[ vk ];\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget ] \t  = v1.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 1 ] = v1.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 2 ] = v1.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 3 ] = v2.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 4 ] = v2.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 5 ] = v2.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 6 ] = v3.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 7 ] = v3.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 8 ] = v3.z;\r\n\r\n\t\t\t\t\t// morph normals\r\n\r\n\t\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t\tif ( needsSmoothNormals ) {\r\n\r\n\t\t\t\t\t\t\tfaceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];\r\n\r\n\t\t\t\t\t\t\tn1 = faceVertexNormals.a;\r\n\t\t\t\t\t\t\tn2 = faceVertexNormals.b;\r\n\t\t\t\t\t\t\tn3 = faceVertexNormals.c;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tn1 = morphNormals[ vk ].faceNormals[ chf ];\r\n\t\t\t\t\t\t\tn2 = n1;\r\n\t\t\t\t\t\t\tn3 = n1;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnka = morphNormalsArrays[ vk ];\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget ] \t  = n1.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 1 ] = n1.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 2 ] = n1.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 3 ] = n2.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 4 ] = n2.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 5 ] = n2.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 6 ] = n3.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 7 ] = n3.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 8 ] = n3.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//\r\n\r\n\t\t\t\t\toffset_morphTarget += 9;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tchf = chunk_faces4[ f ];\r\n\t\t\t\t\tface = obj_faces[ chf ];\r\n\r\n\t\t\t\t\t// morph positions\r\n\r\n\t\t\t\t\tv1 = morphTargets[ vk ].vertices[ face.a ];\r\n\t\t\t\t\tv2 = morphTargets[ vk ].vertices[ face.b ];\r\n\t\t\t\t\tv3 = morphTargets[ vk ].vertices[ face.c ];\r\n\t\t\t\t\tv4 = morphTargets[ vk ].vertices[ face.d ];\r\n\r\n\t\t\t\t\tvka = morphTargetsArrays[ vk ];\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget ] \t  = v1.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 1 ] = v1.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 2 ] = v1.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 3 ] = v2.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 4 ] = v2.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 5 ] = v2.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 6 ] = v3.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 7 ] = v3.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 8 ] = v3.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 9 ]  = v4.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 10 ] = v4.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 11 ] = v4.z;\r\n\r\n\t\t\t\t\t// morph normals\r\n\r\n\t\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t\tif ( needsSmoothNormals ) {\r\n\r\n\t\t\t\t\t\t\tfaceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];\r\n\r\n\t\t\t\t\t\t\tn1 = faceVertexNormals.a;\r\n\t\t\t\t\t\t\tn2 = faceVertexNormals.b;\r\n\t\t\t\t\t\t\tn3 = faceVertexNormals.c;\r\n\t\t\t\t\t\t\tn4 = faceVertexNormals.d;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tn1 = morphNormals[ vk ].faceNormals[ chf ];\r\n\t\t\t\t\t\t\tn2 = n1;\r\n\t\t\t\t\t\t\tn3 = n1;\r\n\t\t\t\t\t\t\tn4 = n1;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnka = morphNormalsArrays[ vk ];\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget ] \t  = n1.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 1 ] = n1.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 2 ] = n1.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 3 ] = n2.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 4 ] = n2.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 5 ] = n2.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 6 ] = n3.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 7 ] = n3.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 8 ] = n3.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 9 ]  = n4.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 10 ] = n4.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 11 ] = n4.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//\r\n\r\n\t\t\t\t\toffset_morphTarget += 12;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ vk ] );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, morphTargetsArrays[ vk ], hint );\r\n\r\n\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ vk ] );\r\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, morphNormalsArrays[ vk ], hint );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( obj_skinWeights.length ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t// weights\r\n\r\n\t\t\t\tsw1 = obj_skinWeights[ face.a ];\r\n\t\t\t\tsw2 = obj_skinWeights[ face.b ];\r\n\t\t\t\tsw3 = obj_skinWeights[ face.c ];\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin ]     = sw1.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 1 ] = sw1.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 2 ] = sw1.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 3 ] = sw1.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 4 ] = sw2.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 5 ] = sw2.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 6 ] = sw2.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 7 ] = sw2.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 8 ]  = sw3.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 9 ]  = sw3.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 10 ] = sw3.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 11 ] = sw3.w;\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tsi1 = obj_skinIndices[ face.a ];\r\n\t\t\t\tsi2 = obj_skinIndices[ face.b ];\r\n\t\t\t\tsi3 = obj_skinIndices[ face.c ];\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin ]     = si1.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 1 ] = si1.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 2 ] = si1.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 3 ] = si1.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 4 ] = si2.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 5 ] = si2.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 6 ] = si2.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 7 ] = si2.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 8 ]  = si3.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 9 ]  = si3.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 10 ] = si3.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 11 ] = si3.w;\r\n\r\n\t\t\t\toffset_skin += 12;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t// weights\r\n\r\n\t\t\t\tsw1 = obj_skinWeights[ face.a ];\r\n\t\t\t\tsw2 = obj_skinWeights[ face.b ];\r\n\t\t\t\tsw3 = obj_skinWeights[ face.c ];\r\n\t\t\t\tsw4 = obj_skinWeights[ face.d ];\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin ]     = sw1.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 1 ] = sw1.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 2 ] = sw1.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 3 ] = sw1.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 4 ] = sw2.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 5 ] = sw2.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 6 ] = sw2.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 7 ] = sw2.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 8 ]  = sw3.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 9 ]  = sw3.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 10 ] = sw3.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 11 ] = sw3.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 12 ] = sw4.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 13 ] = sw4.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 14 ] = sw4.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 15 ] = sw4.w;\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tsi1 = obj_skinIndices[ face.a ];\r\n\t\t\t\tsi2 = obj_skinIndices[ face.b ];\r\n\t\t\t\tsi3 = obj_skinIndices[ face.c ];\r\n\t\t\t\tsi4 = obj_skinIndices[ face.d ];\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin ]     = si1.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 1 ] = si1.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 2 ] = si1.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 3 ] = si1.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 4 ] = si2.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 5 ] = si2.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 6 ] = si2.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 7 ] = si2.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 8 ]  = si3.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 9 ]  = si3.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 10 ] = si3.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 11 ] = si3.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 12 ] = si4.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 13 ] = si4.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 14 ] = si4.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 15 ] = si4.w;\r\n\r\n\t\t\t\toffset_skin += 16;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset_skin > 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, skinIndexArray, hint );\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, skinWeightArray, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyColors && vertexColorType ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\tvertexColors = face.vertexColors;\r\n\t\t\t\tfaceColor = face.color;\r\n\r\n\t\t\t\tif ( vertexColors.length === 3 && vertexColorType === THREE.VertexColors ) {\r\n\r\n\t\t\t\t\tc1 = vertexColors[ 0 ];\r\n\t\t\t\t\tc2 = vertexColors[ 1 ];\r\n\t\t\t\t\tc3 = vertexColors[ 2 ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tc1 = faceColor;\r\n\t\t\t\t\tc2 = faceColor;\r\n\t\t\t\t\tc3 = faceColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolorArray[ offset_color ]     = c1.r;\r\n\t\t\t\tcolorArray[ offset_color + 1 ] = c1.g;\r\n\t\t\t\tcolorArray[ offset_color + 2 ] = c1.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 3 ] = c2.r;\r\n\t\t\t\tcolorArray[ offset_color + 4 ] = c2.g;\r\n\t\t\t\tcolorArray[ offset_color + 5 ] = c2.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 6 ] = c3.r;\r\n\t\t\t\tcolorArray[ offset_color + 7 ] = c3.g;\r\n\t\t\t\tcolorArray[ offset_color + 8 ] = c3.b;\r\n\r\n\t\t\t\toffset_color += 9;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\tvertexColors = face.vertexColors;\r\n\t\t\t\tfaceColor = face.color;\r\n\r\n\t\t\t\tif ( vertexColors.length === 4 && vertexColorType === THREE.VertexColors ) {\r\n\r\n\t\t\t\t\tc1 = vertexColors[ 0 ];\r\n\t\t\t\t\tc2 = vertexColors[ 1 ];\r\n\t\t\t\t\tc3 = vertexColors[ 2 ];\r\n\t\t\t\t\tc4 = vertexColors[ 3 ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tc1 = faceColor;\r\n\t\t\t\t\tc2 = faceColor;\r\n\t\t\t\t\tc3 = faceColor;\r\n\t\t\t\t\tc4 = faceColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolorArray[ offset_color ]     = c1.r;\r\n\t\t\t\tcolorArray[ offset_color + 1 ] = c1.g;\r\n\t\t\t\tcolorArray[ offset_color + 2 ] = c1.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 3 ] = c2.r;\r\n\t\t\t\tcolorArray[ offset_color + 4 ] = c2.g;\r\n\t\t\t\tcolorArray[ offset_color + 5 ] = c2.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 6 ] = c3.r;\r\n\t\t\t\tcolorArray[ offset_color + 7 ] = c3.g;\r\n\t\t\t\tcolorArray[ offset_color + 8 ] = c3.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 9 ]  = c4.r;\r\n\t\t\t\tcolorArray[ offset_color + 10 ] = c4.g;\r\n\t\t\t\tcolorArray[ offset_color + 11 ] = c4.b;\r\n\r\n\t\t\t\toffset_color += 12;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset_color > 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyTangents && geometry.hasTangents ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\tvertexTangents = face.vertexTangents;\r\n\r\n\t\t\t\tt1 = vertexTangents[ 0 ];\r\n\t\t\t\tt2 = vertexTangents[ 1 ];\r\n\t\t\t\tt3 = vertexTangents[ 2 ];\r\n\r\n\t\t\t\ttangentArray[ offset_tangent ]     = t1.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 1 ] = t1.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 2 ] = t1.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 3 ] = t1.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 4 ] = t2.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 5 ] = t2.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 6 ] = t2.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 7 ] = t2.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 8 ]  = t3.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 9 ]  = t3.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 10 ] = t3.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 11 ] = t3.w;\r\n\r\n\t\t\t\toffset_tangent += 12;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\tvertexTangents = face.vertexTangents;\r\n\r\n\t\t\t\tt1 = vertexTangents[ 0 ];\r\n\t\t\t\tt2 = vertexTangents[ 1 ];\r\n\t\t\t\tt3 = vertexTangents[ 2 ];\r\n\t\t\t\tt4 = vertexTangents[ 3 ];\r\n\r\n\t\t\t\ttangentArray[ offset_tangent ]     = t1.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 1 ] = t1.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 2 ] = t1.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 3 ] = t1.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 4 ] = t2.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 5 ] = t2.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 6 ] = t2.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 7 ] = t2.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 8 ]  = t3.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 9 ]  = t3.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 10 ] = t3.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 11 ] = t3.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 12 ] = t4.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 13 ] = t4.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 14 ] = t4.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 15 ] = t4.w;\r\n\r\n\t\t\t\toffset_tangent += 16;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, tangentArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyNormals && normalType ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\tvertexNormals = face.vertexNormals;\r\n\t\t\t\tfaceNormal = face.normal;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 && needsSmoothNormals ) {\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\tvn = vertexNormals[ i ];\r\n\r\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = vn.x;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = vn.y;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = vn.z;\r\n\r\n\t\t\t\t\t\toffset_normal += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = faceNormal.x;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = faceNormal.y;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = faceNormal.z;\r\n\r\n\t\t\t\t\t\toffset_normal += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\tvertexNormals = face.vertexNormals;\r\n\t\t\t\tfaceNormal = face.normal;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 4 && needsSmoothNormals ) {\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\tvn = vertexNormals[ i ];\r\n\r\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = vn.x;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = vn.y;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = vn.z;\r\n\r\n\t\t\t\t\t\toffset_normal += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = faceNormal.x;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = faceNormal.y;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = faceNormal.z;\r\n\r\n\t\t\t\t\t\toffset_normal += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyUvs && obj_uvs && uvType ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfi = chunk_faces3[ f ];\r\n\r\n\t\t\t\tuv = obj_uvs[ fi ];\r\n\r\n\t\t\t\tif ( uv === undefined ) continue;\r\n\r\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\tuvi = uv[ i ];\r\n\r\n\t\t\t\t\tuvArray[ offset_uv ]     = uvi.x;\r\n\t\t\t\t\tuvArray[ offset_uv + 1 ] = uvi.y;\r\n\r\n\t\t\t\t\toffset_uv += 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfi = chunk_faces4[ f ];\r\n\r\n\t\t\t\tuv = obj_uvs[ fi ];\r\n\r\n\t\t\t\tif ( uv === undefined ) continue;\r\n\r\n\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\tuvi = uv[ i ];\r\n\r\n\t\t\t\t\tuvArray[ offset_uv ]     = uvi.x;\r\n\t\t\t\t\tuvArray[ offset_uv + 1 ] = uvi.y;\r\n\r\n\t\t\t\t\toffset_uv += 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset_uv > 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, uvArray, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyUvs && obj_uvs2 && uvType ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfi = chunk_faces3[ f ];\r\n\r\n\t\t\t\tuv2 = obj_uvs2[ fi ];\r\n\r\n\t\t\t\tif ( uv2 === undefined ) continue;\r\n\r\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\tuv2i = uv2[ i ];\r\n\r\n\t\t\t\t\tuv2Array[ offset_uv2 ]     = uv2i.x;\r\n\t\t\t\t\tuv2Array[ offset_uv2 + 1 ] = uv2i.y;\r\n\r\n\t\t\t\t\toffset_uv2 += 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfi = chunk_faces4[ f ];\r\n\r\n\t\t\t\tuv2 = obj_uvs2[ fi ];\r\n\r\n\t\t\t\tif ( uv2 === undefined ) continue;\r\n\r\n\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\tuv2i = uv2[ i ];\r\n\r\n\t\t\t\t\tuv2Array[ offset_uv2 ]     = uv2i.x;\r\n\t\t\t\t\tuv2Array[ offset_uv2 + 1 ] = uv2i.y;\r\n\r\n\t\t\t\t\toffset_uv2 += 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset_uv2 > 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, uv2Array, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyElements ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfaceArray[ offset_face ] \t = vertexIndex;\r\n\t\t\t\tfaceArray[ offset_face + 1 ] = vertexIndex + 1;\r\n\t\t\t\tfaceArray[ offset_face + 2 ] = vertexIndex + 2;\r\n\r\n\t\t\t\toffset_face += 3;\r\n\r\n\t\t\t\tlineArray[ offset_line ]     = vertexIndex;\r\n\t\t\t\tlineArray[ offset_line + 1 ] = vertexIndex + 1;\r\n\r\n\t\t\t\tlineArray[ offset_line + 2 ] = vertexIndex;\r\n\t\t\t\tlineArray[ offset_line + 3 ] = vertexIndex + 2;\r\n\r\n\t\t\t\tlineArray[ offset_line + 4 ] = vertexIndex + 1;\r\n\t\t\t\tlineArray[ offset_line + 5 ] = vertexIndex + 2;\r\n\r\n\t\t\t\toffset_line += 6;\r\n\r\n\t\t\t\tvertexIndex += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfaceArray[ offset_face ]     = vertexIndex;\r\n\t\t\t\tfaceArray[ offset_face + 1 ] = vertexIndex + 1;\r\n\t\t\t\tfaceArray[ offset_face + 2 ] = vertexIndex + 3;\r\n\r\n\t\t\t\tfaceArray[ offset_face + 3 ] = vertexIndex + 1;\r\n\t\t\t\tfaceArray[ offset_face + 4 ] = vertexIndex + 2;\r\n\t\t\t\tfaceArray[ offset_face + 5 ] = vertexIndex + 3;\r\n\r\n\t\t\t\toffset_face += 6;\r\n\r\n\t\t\t\tlineArray[ offset_line ]     = vertexIndex;\r\n\t\t\t\tlineArray[ offset_line + 1 ] = vertexIndex + 1;\r\n\r\n\t\t\t\tlineArray[ offset_line + 2 ] = vertexIndex;\r\n\t\t\t\tlineArray[ offset_line + 3 ] = vertexIndex + 3;\r\n\r\n\t\t\t\tlineArray[ offset_line + 4 ] = vertexIndex + 1;\r\n\t\t\t\tlineArray[ offset_line + 5 ] = vertexIndex + 2;\r\n\r\n\t\t\t\tlineArray[ offset_line + 6 ] = vertexIndex + 2;\r\n\t\t\t\tlineArray[ offset_line + 7 ] = vertexIndex + 3;\r\n\r\n\t\t\t\toffset_line += 8;\r\n\r\n\t\t\t\tvertexIndex += 4;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );\r\n\t\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, faceArray, hint );\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );\r\n\t\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, lineArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( customAttributes ) {\r\n\r\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\tif ( ! customAttribute.__original.needsUpdate ) continue;\r\n\r\n\t\t\t\toffset_custom = 0;\r\n\t\t\t\toffset_customSrc = 0;\r\n\r\n\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 3;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = customAttribute.value[ face.d ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faces\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = value;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 3;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = value;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 6;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\t\t\t\t\t\t\tv4 = customAttribute.value[ face.d ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v4.y;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 8;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faces\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 6;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\t\t\t\t\t\t\tv4 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v4.y;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 8;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\tvar pp;\r\n\r\n\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\tpp = [ \"r\", \"g\", \"b\" ];\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tpp = [ \"x\", \"y\", \"z\" ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 9;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\t\t\t\t\t\t\tv4 = customAttribute.value[ face.d ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v4[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v4[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v4[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faces\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 9;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\t\t\t\t\t\t\tv4 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v4[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v4[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v4[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faceVertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value[ 0 ];\r\n\t\t\t\t\t\t\tv2 = value[ 1 ];\r\n\t\t\t\t\t\t\tv3 = value[ 2 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 9;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value[ 0 ];\r\n\t\t\t\t\t\t\tv2 = value[ 1 ];\r\n\t\t\t\t\t\t\tv3 = value[ 2 ];\r\n\t\t\t\t\t\t\tv4 = value[ 3 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v4[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v4[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v4[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\t\t\t\t\t\t\tv4 = customAttribute.value[ face.d ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 12 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 13 ] = v4.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 14 ] = v4.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 15 ] = v4.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 16;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faces\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\t\t\t\t\t\t\tv4 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 12 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 13 ] = v4.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 14 ] = v4.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 15 ] = v4.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 16;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faceVertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value[ 0 ];\r\n\t\t\t\t\t\t\tv2 = value[ 1 ];\r\n\t\t\t\t\t\t\tv3 = value[ 2 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value[ 0 ];\r\n\t\t\t\t\t\t\tv2 = value[ 1 ];\r\n\t\t\t\t\t\t\tv3 = value[ 2 ];\r\n\t\t\t\t\t\t\tv4 = value[ 3 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 12 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 13 ] = v4.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 14 ] = v4.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 15 ] = v4.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 16;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dispose ) {\r\n\r\n\t\t\tdelete geometryGroup.__inittedArrays;\r\n\t\t\tdelete geometryGroup.__colorArray;\r\n\t\t\tdelete geometryGroup.__normalArray;\r\n\t\t\tdelete geometryGroup.__tangentArray;\r\n\t\t\tdelete geometryGroup.__uvArray;\r\n\t\t\tdelete geometryGroup.__uv2Array;\r\n\t\t\tdelete geometryGroup.__faceArray;\r\n\t\t\tdelete geometryGroup.__vertexArray;\r\n\t\t\tdelete geometryGroup.__lineArray;\r\n\t\t\tdelete geometryGroup.__skinIndexArray;\r\n\t\t\tdelete geometryGroup.__skinWeightArray;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setDirectBuffers ( geometry, hint, dispose ) {\r\n\r\n\t\tvar attributes = geometry.attributes;\r\n\r\n\t\tvar index = attributes[ \"index\" ];\r\n\t\tvar position = attributes[ \"position\" ];\r\n\t\tvar normal = attributes[ \"normal\" ];\r\n\t\tvar uv = attributes[ \"uv\" ];\r\n\t\tvar color = attributes[ \"color\" ];\r\n\t\tvar tangent = attributes[ \"tangent\" ];\r\n\r\n\t\tif ( geometry.elementsNeedUpdate && index !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );\r\n\t\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, index.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.verticesNeedUpdate && position !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, position.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.normalsNeedUpdate && normal !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, normal.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, normal.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvsNeedUpdate && uv !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, uv.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, uv.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.colorsNeedUpdate && color !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, color.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.tangentsNeedUpdate && tangent !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, tangent.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, tangent.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dispose ) {\r\n\r\n\t\t\tfor ( var i in geometry.attributes ) {\r\n\r\n\t\t\t\tdelete geometry.attributes[ i ].array;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Buffer rendering\r\n\r\n\tthis.renderBufferImmediate = function ( object, program, material ) {\r\n\r\n\t\tif ( object.hasPositions && ! object.__webglVertexBuffer ) object.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tif ( object.hasNormals && ! object.__webglNormalBuffer ) object.__webglNormalBuffer = _gl.createBuffer();\r\n\t\tif ( object.hasUvs && ! object.__webglUvBuffer ) object.__webglUvBuffer = _gl.createBuffer();\r\n\t\tif ( object.hasColors && ! object.__webglColorBuffer ) object.__webglColorBuffer = _gl.createBuffer();\r\n\r\n\t\tif ( object.hasPositions ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\r\n\t\t\t_gl.enableVertexAttribArray( program.attributes.position );\r\n\t\t\t_gl.vertexAttribPointer( program.attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasNormals ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglNormalBuffer );\r\n\r\n\t\t\tif ( material.shading === THREE.FlatShading ) {\r\n\r\n\t\t\t\tvar nx, ny, nz,\r\n\t\t\t\t\tnax, nbx, ncx, nay, nby, ncy, naz, nbz, ncz,\r\n\t\t\t\t\tnormalArray,\r\n\t\t\t\t\ti, il = object.count * 3;\r\n\r\n\t\t\t\tfor( i = 0; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\tnormalArray = object.normalArray;\r\n\r\n\t\t\t\t\tnax  = normalArray[ i ];\r\n\t\t\t\t\tnay  = normalArray[ i + 1 ];\r\n\t\t\t\t\tnaz  = normalArray[ i + 2 ];\r\n\r\n\t\t\t\t\tnbx  = normalArray[ i + 3 ];\r\n\t\t\t\t\tnby  = normalArray[ i + 4 ];\r\n\t\t\t\t\tnbz  = normalArray[ i + 5 ];\r\n\r\n\t\t\t\t\tncx  = normalArray[ i + 6 ];\r\n\t\t\t\t\tncy  = normalArray[ i + 7 ];\r\n\t\t\t\t\tncz  = normalArray[ i + 8 ];\r\n\r\n\t\t\t\t\tnx = ( nax + nbx + ncx ) / 3;\r\n\t\t\t\t\tny = ( nay + nby + ncy ) / 3;\r\n\t\t\t\t\tnz = ( naz + nbz + ncz ) / 3;\r\n\r\n\t\t\t\t\tnormalArray[ i ] \t = nx;\r\n\t\t\t\t\tnormalArray[ i + 1 ] = ny;\r\n\t\t\t\t\tnormalArray[ i + 2 ] = nz;\r\n\r\n\t\t\t\t\tnormalArray[ i + 3 ] = nx;\r\n\t\t\t\t\tnormalArray[ i + 4 ] = ny;\r\n\t\t\t\t\tnormalArray[ i + 5 ] = nz;\r\n\r\n\t\t\t\t\tnormalArray[ i + 6 ] = nx;\r\n\t\t\t\t\tnormalArray[ i + 7 ] = ny;\r\n\t\t\t\t\tnormalArray[ i + 8 ] = nz;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\r\n\t\t\t_gl.enableVertexAttribArray( program.attributes.normal );\r\n\t\t\t_gl.vertexAttribPointer( program.attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasUvs && material.map ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglUvBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\r\n\t\t\t_gl.enableVertexAttribArray( program.attributes.uv );\r\n\t\t\t_gl.vertexAttribPointer( program.attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglColorBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\r\n\t\t\t_gl.enableVertexAttribArray( program.attributes.color );\r\n\t\t\t_gl.vertexAttribPointer( program.attributes.color, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\r\n\r\n\t\tobject.count = 0;\r\n\r\n\t};\r\n\r\n\tthis.renderBufferDirect = function ( camera, lights, fog, material, geometry, object ) {\r\n\r\n\t\tif ( material.visible === false ) return;\r\n\r\n\t\tvar program, attributes, linewidth, primitives, a, attribute;\r\n\r\n\t\tprogram = setProgram( camera, lights, fog, material, object );\r\n\r\n\t\tattributes = program.attributes;\r\n\r\n\t\tvar updateBuffers = false,\r\n\t\t\twireframeBit = material.wireframe ? 1 : 0,\r\n\t\t\tgeometryHash = ( geometry.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;\r\n\r\n\t\tif ( geometryHash !== _currentGeometryGroupHash ) {\r\n\r\n\t\t\t_currentGeometryGroupHash = geometryHash;\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( updateBuffers ) {\r\n\r\n\t\t\tdisableAttributes();\r\n\r\n\t\t}\r\n\r\n\t\t// render mesh\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tvar index = geometry.attributes[ \"index\" ];\r\n\r\n\t\t\t// indexed triangles\r\n\r\n\t\t\tif ( index ) {\r\n\r\n\t\t\t\tvar offsets = geometry.offsets;\r\n\r\n\t\t\t\t// if there is more than 1 chunk\r\n\t\t\t\t// must set attribute pointers to use new offsets for each chunk\r\n\t\t\t\t// even if geometry and materials didn't change\r\n\r\n\t\t\t\tif ( offsets.length > 1 ) updateBuffers = true;\r\n\r\n\t\t\t\tfor ( var i = 0, il = offsets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar startIndex = offsets[ i ].index;\r\n\r\n\t\t\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t\t\t// vertices\r\n\r\n\t\t\t\t\t\tvar position = geometry.attributes[ \"position\" ];\r\n\t\t\t\t\t\tvar positionSize = position.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, startIndex * positionSize * 4 ); // 4 bytes per Float32\r\n\r\n\t\t\t\t\t\t// normals\r\n\r\n\t\t\t\t\t\tvar normal = geometry.attributes[ \"normal\" ];\r\n\r\n\t\t\t\t\t\tif ( attributes.normal >= 0 && normal ) {\r\n\r\n\t\t\t\t\t\t\tvar normalSize = normal.itemSize;\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, normal.buffer );\r\n\t\t\t\t\t\t\tenableAttribute( attributes.normal );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.normal, normalSize, _gl.FLOAT, false, 0, startIndex * normalSize * 4 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// uvs\r\n\r\n\t\t\t\t\t\tvar uv = geometry.attributes[ \"uv\" ];\r\n\r\n\t\t\t\t\t\tif ( attributes.uv >= 0 && uv ) {\r\n\r\n\t\t\t\t\t\t\tvar uvSize = uv.itemSize;\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, uv.buffer );\r\n\t\t\t\t\t\t\tenableAttribute( attributes.uv );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.uv, uvSize, _gl.FLOAT, false, 0, startIndex * uvSize * 4 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// colors\r\n\r\n\t\t\t\t\t\tvar color = geometry.attributes[ \"color\" ];\r\n\r\n\t\t\t\t\t\tif ( attributes.color >= 0 && color ) {\r\n\r\n\t\t\t\t\t\t\tvar colorSize = color.itemSize;\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, startIndex * colorSize * 4 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// tangents\r\n\r\n\t\t\t\t\t\tvar tangent = geometry.attributes[ \"tangent\" ];\r\n\r\n\t\t\t\t\t\tif ( attributes.tangent >= 0 && tangent ) {\r\n\r\n\t\t\t\t\t\t\tvar tangentSize = tangent.itemSize;\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, tangent.buffer );\r\n\t\t\t\t\t\t\tenableAttribute( attributes.tangent );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.tangent, tangentSize, _gl.FLOAT, false, 0, startIndex * tangentSize * 4 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// indices\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// render indexed triangles\r\n\r\n\t\t\t\t\t_gl.drawElements( _gl.TRIANGLES, offsets[ i ].count, _gl.UNSIGNED_SHORT, offsets[ i ].start * 2 ); // 2 bytes per Uint16\r\n\r\n\t\t\t\t\t_this.info.render.calls ++;\r\n\t\t\t\t\t_this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared\r\n\t\t\t\t\t_this.info.render.faces += offsets[ i ].count / 3;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t// non-indexed triangles\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t\t// vertices\r\n\r\n\t\t\t\t\tvar position = geometry.attributes[ \"position\" ];\r\n\t\t\t\t\tvar positionSize = position.itemSize;\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t// normals\r\n\r\n\t\t\t\t\tvar normal = geometry.attributes[ \"normal\" ];\r\n\r\n\t\t\t\t\tif ( attributes.normal >= 0 && normal ) {\r\n\r\n\t\t\t\t\t\tvar normalSize = normal.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, normal.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.normal );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.normal, normalSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// uvs\r\n\r\n\t\t\t\t\tvar uv = geometry.attributes[ \"uv\" ];\r\n\r\n\t\t\t\t\tif ( attributes.uv >= 0 && uv ) {\r\n\r\n\t\t\t\t\t\tvar uvSize = uv.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, uv.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.uv );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.uv, uvSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// colors\r\n\r\n\t\t\t\t\tvar color = geometry.attributes[ \"color\" ];\r\n\r\n\t\t\t\t\tif ( attributes.color >= 0 && color ) {\r\n\r\n\t\t\t\t\t\tvar colorSize = color.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// tangents\r\n\r\n\t\t\t\t\tvar tangent = geometry.attributes[ \"tangent\" ];\r\n\r\n\t\t\t\t\tif ( attributes.tangent >= 0 && tangent ) {\r\n\r\n\t\t\t\t\t\tvar tangentSize = tangent.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, tangent.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.tangent );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.tangent, tangentSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render non-indexed triangles\r\n\r\n\t\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, position.numItems / 3 );\r\n\r\n\t\t\t\t_this.info.render.calls ++;\r\n\t\t\t\t_this.info.render.vertices += position.numItems / 3;\r\n\t\t\t\t_this.info.render.faces += position.numItems / 3 / 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t// render particles\r\n\r\n\t\t} else if ( object instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t// vertices\r\n\r\n\t\t\t\tvar position = geometry.attributes[ \"position\" ];\r\n\t\t\t\tvar positionSize = position.itemSize;\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t// colors\r\n\r\n\t\t\t\tvar color = geometry.attributes[ \"color\" ];\r\n\r\n\t\t\t\tif ( attributes.color >= 0 && color ) {\r\n\r\n\t\t\t\t\tvar colorSize = color.itemSize;\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render particles\r\n\r\n\t\t\t\t_gl.drawArrays( _gl.POINTS, 0, position.numItems / 3 );\r\n\r\n\t\t\t\t_this.info.render.calls ++;\r\n\t\t\t\t_this.info.render.points += position.numItems / 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t// vertices\r\n\r\n\t\t\t\tvar position = geometry.attributes[ \"position\" ];\r\n\t\t\t\tvar positionSize = position.itemSize;\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t// colors\r\n\r\n\t\t\t\tvar color = geometry.attributes[ \"color\" ];\r\n\r\n\t\t\t\tif ( attributes.color >= 0 && color ) {\r\n\r\n\t\t\t\t\tvar colorSize = color.itemSize;\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render lines\r\n\r\n\t\t\t\t_gl.drawArrays( _gl.LINE_STRIP, 0, position.numItems / 3 );\r\n\r\n\t\t\t\t_this.info.render.calls ++;\r\n\t\t\t\t_this.info.render.points += position.numItems;\r\n\r\n\t\t\t}\r\n\r\n    }\r\n\r\n\t};\r\n\r\n\tthis.renderBuffer = function ( camera, lights, fog, material, geometryGroup, object ) {\r\n\r\n\t\tif ( material.visible === false ) return;\r\n\r\n\t\tvar program, attributes, linewidth, primitives, a, attribute, i, il;\r\n\r\n\t\tprogram = setProgram( camera, lights, fog, material, object );\r\n\r\n\t\tattributes = program.attributes;\r\n\r\n\t\tvar updateBuffers = false,\r\n\t\t\twireframeBit = material.wireframe ? 1 : 0,\r\n\t\t\tgeometryGroupHash = ( geometryGroup.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;\r\n\r\n\t\tif ( geometryGroupHash !== _currentGeometryGroupHash ) {\r\n\r\n\t\t\t_currentGeometryGroupHash = geometryGroupHash;\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( updateBuffers ) {\r\n\r\n\t\t\tdisableAttributes();\r\n\r\n\t\t}\r\n\r\n\t\t// vertices\r\n\r\n\t\tif ( !material.morphTargets && attributes.position >= 0 ) {\r\n\r\n\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\r\n\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( object.morphTargetBase ) {\r\n\r\n\t\t\t\tsetupMorphTargets( material, geometryGroup, object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t// custom attributes\r\n\r\n\t\t\t// Use the per-geometryGroup custom attribute arrays which are setup in initMeshBuffers\r\n\r\n\t\t\tif ( geometryGroup.__webglCustomAttributesList ) {\r\n\r\n\t\t\t\tfor ( i = 0, il = geometryGroup.__webglCustomAttributesList.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tattribute = geometryGroup.__webglCustomAttributesList[ i ];\r\n\r\n\t\t\t\t\tif ( attributes[ attribute.buffer.belongsToAttribute ] >= 0 ) {\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, attribute.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes[ attribute.buffer.belongsToAttribute ] );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ attribute.buffer.belongsToAttribute ], attribute.size, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// colors\r\n\r\n\t\t\tif ( attributes.color >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );\r\n\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// normals\r\n\r\n\t\t\tif ( attributes.normal >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );\r\n\t\t\t\tenableAttribute( attributes.normal );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// tangents\r\n\r\n\t\t\tif ( attributes.tangent >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );\r\n\t\t\t\tenableAttribute( attributes.tangent );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.tangent, 4, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uvs\r\n\r\n\t\t\tif ( attributes.uv >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );\r\n\t\t\t\tenableAttribute( attributes.uv );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( attributes.uv2 >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );\r\n\t\t\t\tenableAttribute( attributes.uv2 );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.uv2, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.skinning &&\r\n\t\t\t\t attributes.skinIndex >= 0 && attributes.skinWeight >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );\r\n\t\t\t\tenableAttribute( attributes.skinIndex );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.skinIndex, 4, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );\r\n\t\t\t\tenableAttribute( attributes.skinWeight );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.skinWeight, 4, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// line distances\r\n\r\n\t\t\tif ( attributes.lineDistance >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglLineDistanceBuffer );\r\n\t\t\t\tenableAttribute( attributes.lineDistance );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.lineDistance, 1, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// render mesh\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t// wireframe\r\n\r\n\t\t\tif ( material.wireframe ) {\r\n\r\n\t\t\t\tsetLineWidth( material.wireframeLinewidth );\r\n\r\n\t\t\t\tif ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );\r\n\t\t\t\t_gl.drawElements( _gl.LINES, geometryGroup.__webglLineCount, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t// triangles\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );\r\n\t\t\t\t_gl.drawElements( _gl.TRIANGLES, geometryGroup.__webglFaceCount, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_this.info.render.calls ++;\r\n\t\t\t_this.info.render.vertices += geometryGroup.__webglFaceCount;\r\n\t\t\t_this.info.render.faces += geometryGroup.__webglFaceCount / 3;\r\n\r\n\t\t// render lines\r\n\r\n\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\tprimitives = ( object.type === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;\r\n\r\n\t\t\tsetLineWidth( material.linewidth );\r\n\r\n\t\t\t_gl.drawArrays( primitives, 0, geometryGroup.__webglLineCount );\r\n\r\n\t\t\t_this.info.render.calls ++;\r\n\r\n\t\t// render particles\r\n\r\n\t\t} else if ( object instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\t_gl.drawArrays( _gl.POINTS, 0, geometryGroup.__webglParticleCount );\r\n\r\n\t\t\t_this.info.render.calls ++;\r\n\t\t\t_this.info.render.points += geometryGroup.__webglParticleCount;\r\n\r\n\t\t// render ribbon\r\n\r\n\t\t} else if ( object instanceof THREE.Ribbon ) {\r\n\r\n\t\t\t_gl.drawArrays( _gl.TRIANGLE_STRIP, 0, geometryGroup.__webglVertexCount );\r\n\r\n\t\t\t_this.info.render.calls ++;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction enableAttribute( attribute ) {\r\n\r\n\t\tif ( ! _enabledAttributes[ attribute ] ) {\r\n\r\n\t\t\t_gl.enableVertexAttribArray( attribute );\r\n\t\t\t_enabledAttributes[ attribute ] = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction disableAttributes() {\r\n\r\n\t\tfor ( var attribute in _enabledAttributes ) {\r\n\r\n\t\t\tif ( _enabledAttributes[ attribute ] ) {\r\n\r\n\t\t\t\t_gl.disableVertexAttribArray( attribute );\r\n\t\t\t\t_enabledAttributes[ attribute ] = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setupMorphTargets ( material, geometryGroup, object ) {\r\n\r\n\t\t// set base\r\n\r\n\t\tvar attributes = material.program.attributes;\r\n\r\n\t\tif ( object.morphTargetBase !== -1 && attributes.position >= 0 ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ object.morphTargetBase ] );\r\n\t\t\tenableAttribute( attributes.position );\r\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t} else if ( attributes.position >= 0 ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\r\n\t\t\tenableAttribute( attributes.position );\r\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.morphTargetForcedOrder.length ) {\r\n\r\n\t\t\t// set forced order\r\n\r\n\t\t\tvar m = 0;\r\n\t\t\tvar order = object.morphTargetForcedOrder;\r\n\t\t\tvar influences = object.morphTargetInfluences;\r\n\r\n\t\t\twhile ( m < material.numSupportedMorphTargets && m < order.length ) {\r\n\r\n\t\t\t\tif ( attributes[ \"morphTarget\" + m ] >= 0 ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ order[ m ] ] );\r\n\t\t\t\t\tenableAttribute( attributes[ \"morphTarget\" + m ] );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphTarget\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( attributes[ \"morphNormal\" + m ] >= 0 && material.morphNormals ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ order[ m ] ] );\r\n\t\t\t\t\tenableAttribute( attributes[ \"morphNormal\" + m ] );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphNormal\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobject.__webglMorphTargetInfluences[ m ] = influences[ order[ m ] ];\r\n\r\n\t\t\t\tm ++;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// find the most influencing\r\n\r\n\t\t\tvar influence, activeInfluenceIndices = [];\r\n\t\t\tvar influences = object.morphTargetInfluences;\r\n\t\t\tvar i, il = influences.length;\r\n\r\n\t\t\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\t\t\tinfluence = influences[ i ];\r\n\r\n\t\t\t\tif ( influence > 0 ) {\r\n\r\n\t\t\t\t\tactiveInfluenceIndices.push( [ influence, i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( activeInfluenceIndices.length > material.numSupportedMorphTargets ) {\r\n\r\n\t\t\t\tactiveInfluenceIndices.sort( numericalSort );\r\n\t\t\t\tactiveInfluenceIndices.length = material.numSupportedMorphTargets;\r\n\r\n\t\t\t} else if ( activeInfluenceIndices.length > material.numSupportedMorphNormals ) {\r\n\r\n\t\t\t\tactiveInfluenceIndices.sort( numericalSort );\r\n\r\n\t\t\t} else if ( activeInfluenceIndices.length === 0 ) {\r\n\r\n\t\t\t\tactiveInfluenceIndices.push( [ 0, 0 ] );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar influenceIndex, m = 0;\r\n\r\n\t\t\twhile ( m < material.numSupportedMorphTargets ) {\r\n\r\n\t\t\t\tif ( activeInfluenceIndices[ m ] ) {\r\n\r\n\t\t\t\t\tinfluenceIndex = activeInfluenceIndices[ m ][ 1 ];\r\n\r\n\t\t\t\t\tif ( attributes[ \"morphTarget\" + m ] >= 0 ) {\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ influenceIndex ] );\r\n\t\t\t\t\t\tenableAttribute( attributes[ \"morphTarget\" + m ] );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphTarget\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( attributes[ \"morphNormal\" + m ] >= 0 && material.morphNormals ) {\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ influenceIndex ] );\r\n\t\t\t\t\t\tenableAttribute( attributes[ \"morphNormal\" + m ] );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphNormal\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tobject.__webglMorphTargetInfluences[ m ] = influences[ influenceIndex ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphTarget\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphNormal\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\tobject.__webglMorphTargetInfluences[ m ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tm ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// load updated influences uniform\r\n\r\n\t\tif ( material.program.uniforms.morphTargetInfluences !== null ) {\r\n\r\n\t\t\t_gl.uniform1fv( material.program.uniforms.morphTargetInfluences, object.__webglMorphTargetInfluences );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Sorting\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn b.id - a.id;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction numericalSort ( a, b ) {\r\n\r\n\t\treturn b[ 0 ] - a[ 0 ];\r\n\r\n\t};\r\n\r\n\r\n\t// Rendering\r\n\r\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\r\n\r\n\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar i, il,\r\n\r\n\t\twebglObject, object,\r\n\t\trenderList,\r\n\r\n\t\tlights = scene.__lights,\r\n\t\tfog = scene.fog;\r\n\r\n\t\t// reset caching for this frame\r\n\r\n\t\t_currentMaterialId = -1;\r\n\t\t_lightsNeedUpdate = true;\r\n\r\n\t\t// update scene graph\r\n\r\n\t\tif ( this.autoUpdateScene ) scene.updateMatrixWorld();\r\n\r\n\t\t// update camera matrices and frustum\r\n\r\n\t\tif ( camera.parent === undefined ) camera.updateMatrixWorld();\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t// update WebGL objects\r\n\r\n\t\tif ( this.autoUpdateObjects ) this.initWebGLObjects( scene );\r\n\r\n\t\t// custom render plugins (pre pass)\r\n\r\n\t\trenderPlugins( this.renderPluginsPre, scene, camera );\r\n\r\n\t\t//\r\n\r\n\t\t_this.info.render.calls = 0;\r\n\t\t_this.info.render.vertices = 0;\r\n\t\t_this.info.render.faces = 0;\r\n\t\t_this.info.render.points = 0;\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\r\n\t\tif ( this.autoClear || forceClear ) {\r\n\r\n\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\r\n\r\n\t\t}\r\n\r\n\t\t// set matrices for regular objects (frustum culled)\r\n\r\n\t\trenderList = scene.__webglObjects;\r\n\r\n\t\tfor ( i = 0, il = renderList.length; i < il; i ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ i ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\twebglObject.render = false;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tif ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\tsetupMatrices( object, camera );\r\n\r\n\t\t\t\t\tunrollBufferMaterial( webglObject );\r\n\r\n\t\t\t\t\twebglObject.render = true;\r\n\r\n\t\t\t\t\tif ( this.sortObjects === true ) {\r\n\r\n\t\t\t\t\t\tif ( object.renderDepth !== null ) {\r\n\r\n\t\t\t\t\t\t\twebglObject.z = object.renderDepth;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t_vector3.copy( object.matrixWorld.getPosition() );\r\n\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t\twebglObject.z = _vector3.z;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twebglObject.id = object.id;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.sortObjects ) {\r\n\r\n\t\t\trenderList.sort( painterSortStable );\r\n\r\n\t\t}\r\n\r\n\t\t// set matrices for immediate objects\r\n\r\n\t\trenderList = scene.__webglObjectsImmediate;\r\n\r\n\t\tfor ( i = 0, il = renderList.length; i < il; i ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ i ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tsetupMatrices( object, camera );\r\n\r\n\t\t\t\tunrollImmediateBufferMaterial( webglObject );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( scene.overrideMaterial ) {\r\n\r\n\t\t\tvar material = scene.overrideMaterial;\r\n\r\n\t\t\tthis.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\t\t\tthis.setDepthTest( material.depthTest );\r\n\t\t\tthis.setDepthWrite( material.depthWrite );\r\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\t\trenderObjects( scene.__webglObjects, false, \"\", camera, lights, fog, true, material );\r\n\t\t\trenderObjectsImmediate( scene.__webglObjectsImmediate, \"\", camera, lights, fog, false, material );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar material = null;\r\n\r\n\t\t\t// opaque pass (front-to-back order)\r\n\r\n\t\t\tthis.setBlending( THREE.NoBlending );\r\n\r\n\t\t\trenderObjects( scene.__webglObjects, true, \"opaque\", camera, lights, fog, false, material );\r\n\t\t\trenderObjectsImmediate( scene.__webglObjectsImmediate, \"opaque\", camera, lights, fog, false, material );\r\n\r\n\t\t\t// transparent pass (back-to-front order)\r\n\r\n\t\t\trenderObjects( scene.__webglObjects, false, \"transparent\", camera, lights, fog, true, material );\r\n\t\t\trenderObjectsImmediate( scene.__webglObjectsImmediate, \"transparent\", camera, lights, fog, true, material );\r\n\r\n\t\t}\r\n\r\n\t\t// custom render plugins (post pass)\r\n\r\n\t\trenderPlugins( this.renderPluginsPost, scene, camera );\r\n\r\n\r\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\r\n\t\tif ( renderTarget && renderTarget.generateMipmaps && renderTarget.minFilter !== THREE.NearestFilter && renderTarget.minFilter !== THREE.LinearFilter ) {\r\n\r\n\t\t\tupdateRenderTargetMipmap( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\r\n\t\tthis.setDepthTest( true );\r\n\t\tthis.setDepthWrite( true );\r\n\r\n\t\t// _gl.finish();\r\n\r\n\t};\r\n\r\n\tfunction renderPlugins( plugins, scene, camera ) {\r\n\r\n\t\tif ( ! plugins.length ) return;\r\n\r\n\t\tfor ( var i = 0, il = plugins.length; i < il; i ++ ) {\r\n\r\n\t\t\t// reset state for plugin (to start from clean slate)\r\n\r\n\t\t\t_currentProgram = null;\r\n\t\t\t_currentCamera = null;\r\n\r\n\t\t\t_oldBlending = -1;\r\n\t\t\t_oldDepthTest = -1;\r\n\t\t\t_oldDepthWrite = -1;\r\n\t\t\t_oldDoubleSided = -1;\r\n\t\t\t_oldFlipSided = -1;\r\n\t\t\t_currentGeometryGroupHash = -1;\r\n\t\t\t_currentMaterialId = -1;\r\n\r\n\t\t\t_lightsNeedUpdate = true;\r\n\r\n\t\t\tplugins[ i ].render( scene, camera, _currentWidth, _currentHeight );\r\n\r\n\t\t\t// reset state after plugin (anything could have changed)\r\n\r\n\t\t\t_currentProgram = null;\r\n\t\t\t_currentCamera = null;\r\n\r\n\t\t\t_oldBlending = -1;\r\n\t\t\t_oldDepthTest = -1;\r\n\t\t\t_oldDepthWrite = -1;\r\n\t\t\t_oldDoubleSided = -1;\r\n\t\t\t_oldFlipSided = -1;\r\n\t\t\t_currentGeometryGroupHash = -1;\r\n\t\t\t_currentMaterialId = -1;\r\n\r\n\t\t\t_lightsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction renderObjects ( renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial ) {\r\n\r\n\t\tvar webglObject, object, buffer, material, start, end, delta;\r\n\r\n\t\tif ( reverse ) {\r\n\r\n\t\t\tstart = renderList.length - 1;\r\n\t\t\tend = -1;\r\n\t\t\tdelta = -1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstart = 0;\r\n\t\t\tend = renderList.length;\r\n\t\t\tdelta = 1;\r\n\t\t}\r\n\r\n\t\tfor ( var i = start; i !== end; i += delta ) {\r\n\r\n\t\t\twebglObject = renderList[ i ];\r\n\r\n\t\t\tif ( webglObject.render ) {\r\n\r\n\t\t\t\tobject = webglObject.object;\r\n\t\t\t\tbuffer = webglObject.buffer;\r\n\r\n\t\t\t\tif ( overrideMaterial ) {\r\n\r\n\t\t\t\t\tmaterial = overrideMaterial;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterial = webglObject[ materialType ];\r\n\r\n\t\t\t\t\tif ( ! material ) continue;\r\n\r\n\t\t\t\t\tif ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\r\n\t\t\t\t\t_this.setDepthTest( material.depthTest );\r\n\t\t\t\t\t_this.setDepthWrite( material.depthWrite );\r\n\t\t\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_this.setMaterialFaces( material );\r\n\r\n\t\t\t\tif ( buffer instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t_this.renderBufferDirect( camera, lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_this.renderBuffer( camera, lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction renderObjectsImmediate ( renderList, materialType, camera, lights, fog, useBlending, overrideMaterial ) {\r\n\r\n\t\tvar webglObject, object, material, program;\r\n\r\n\t\tfor ( var i = 0, il = renderList.length; i < il; i ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ i ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tif ( overrideMaterial ) {\r\n\r\n\t\t\t\t\tmaterial = overrideMaterial;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterial = webglObject[ materialType ];\r\n\r\n\t\t\t\t\tif ( ! material ) continue;\r\n\r\n\t\t\t\t\tif ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\r\n\t\t\t\t\t_this.setDepthTest( material.depthTest );\r\n\t\t\t\t\t_this.setDepthWrite( material.depthWrite );\r\n\t\t\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_this.renderImmediateObject( camera, lights, fog, material, object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.renderImmediateObject = function ( camera, lights, fog, material, object ) {\r\n\r\n\t\tvar program = setProgram( camera, lights, fog, material, object );\r\n\r\n\t\t_currentGeometryGroupHash = -1;\r\n\r\n\t\t_this.setMaterialFaces( material );\r\n\r\n\t\tif ( object.immediateRenderCallback ) {\r\n\r\n\t\t\tobject.immediateRenderCallback( program, _gl, _frustum );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tobject.render( function( object ) { _this.renderBufferImmediate( object, program, material ); } );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction unrollImmediateBufferMaterial ( globject ) {\r\n\r\n\t\tvar object = globject.object,\r\n\t\t\tmaterial = object.material;\r\n\r\n\t\tif ( material.transparent ) {\r\n\r\n\t\t\tglobject.transparent = material;\r\n\t\t\tglobject.opaque = null;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tglobject.opaque = material;\r\n\t\t\tglobject.transparent = null;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction unrollBufferMaterial ( globject ) {\r\n\r\n\t\tvar object = globject.object,\r\n\t\t\tbuffer = globject.buffer,\r\n\t\t\tmaterial, materialIndex, meshMaterial;\r\n\r\n\t\tmeshMaterial = object.material;\r\n\r\n\t\tif ( meshMaterial instanceof THREE.MeshFaceMaterial ) {\r\n\r\n\t\t\tmaterialIndex = buffer.materialIndex;\r\n\r\n\t\t\tmaterial = meshMaterial.materials[ materialIndex ];\r\n\r\n\t\t\tif ( material.transparent ) {\r\n\r\n\t\t\t\tglobject.transparent = material;\r\n\t\t\t\tglobject.opaque = null;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tglobject.opaque = material;\r\n\t\t\t\tglobject.transparent = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmaterial = meshMaterial;\r\n\r\n\t\t\tif ( material ) {\r\n\r\n\t\t\t\tif ( material.transparent ) {\r\n\r\n\t\t\t\t\tglobject.transparent = material;\r\n\t\t\t\t\tglobject.opaque = null;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tglobject.opaque = material;\r\n\t\t\t\t\tglobject.transparent = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Geometry splitting\r\n\r\n\tfunction sortFacesByMaterial ( geometry, material ) {\r\n\r\n\t\tvar f, fl, face, materialIndex, vertices,\r\n\t\t\tgroupHash, hash_map = {};\r\n\r\n\t\tvar numMorphTargets = geometry.morphTargets.length;\r\n\t\tvar numMorphNormals = geometry.morphNormals.length;\r\n\r\n\t\tvar usesFaceMaterial = material instanceof THREE.MeshFaceMaterial;\r\n\r\n\t\tgeometry.geometryGroups = {};\r\n\r\n\t\tfor ( f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = geometry.faces[ f ];\r\n\t\t\tmaterialIndex = usesFaceMaterial ? face.materialIndex : 0;\r\n\r\n\t\t\tif ( hash_map[ materialIndex ] === undefined ) {\r\n\r\n\t\t\t\thash_map[ materialIndex ] = { 'hash': materialIndex, 'counter': 0 };\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgroupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;\r\n\r\n\t\t\tif ( geometry.geometryGroups[ groupHash ] === undefined ) {\r\n\r\n\t\t\t\tgeometry.geometryGroups[ groupHash ] = { 'faces3': [], 'faces4': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvertices = face instanceof THREE.Face3 ? 3 : 4;\r\n\r\n\t\t\tif ( geometry.geometryGroups[ groupHash ].vertices + vertices > 65535 ) {\r\n\r\n\t\t\t\thash_map[ materialIndex ].counter += 1;\r\n\t\t\t\tgroupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;\r\n\r\n\t\t\t\tif ( geometry.geometryGroups[ groupHash ] === undefined ) {\r\n\r\n\t\t\t\t\tgeometry.geometryGroups[ groupHash ] = { 'faces3': [], 'faces4': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tgeometry.geometryGroups[ groupHash ].faces3.push( f );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgeometry.geometryGroups[ groupHash ].faces4.push( f );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.geometryGroups[ groupHash ].vertices += vertices;\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.geometryGroupsList = [];\r\n\r\n\t\tfor ( var g in geometry.geometryGroups ) {\r\n\r\n\t\t\tgeometry.geometryGroups[ g ].id = _geometryGroupCounter ++;\r\n\r\n\t\t\tgeometry.geometryGroupsList.push( geometry.geometryGroups[ g ] );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Objects refresh\r\n\r\n\tthis.initWebGLObjects = function ( scene ) {\r\n\r\n\t\tif ( !scene.__webglObjects ) {\r\n\r\n\t\t\tscene.__webglObjects = [];\r\n\t\t\tscene.__webglObjectsImmediate = [];\r\n\t\t\tscene.__webglSprites = [];\r\n\t\t\tscene.__webglFlares = [];\r\n\r\n\t\t}\r\n\r\n\t\twhile ( scene.__objectsAdded.length ) {\r\n\r\n\t\t\taddObject( scene.__objectsAdded[ 0 ], scene );\r\n\t\t\tscene.__objectsAdded.splice( 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\twhile ( scene.__objectsRemoved.length ) {\r\n\r\n\t\t\tremoveObject( scene.__objectsRemoved[ 0 ], scene );\r\n\t\t\tscene.__objectsRemoved.splice( 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\t// update must be called after objects adding / removal\r\n\r\n\t\tfor ( var o = 0, ol = scene.__webglObjects.length; o < ol; o ++ ) {\r\n\r\n\t\t\tupdateObject( scene.__webglObjects[ o ].object );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Objects adding\r\n\r\n\tfunction addObject ( object, scene ) {\r\n\r\n\t\tvar g, geometry, material, geometryGroup;\r\n\r\n\t\tif ( ! object.__webglInit ) {\r\n\r\n\t\t\tobject.__webglInit = true;\r\n\r\n\t\t\tobject._modelViewMatrix = new THREE.Matrix4();\r\n\t\t\tobject._normalMatrix = new THREE.Matrix3();\r\n\r\n\t\t\tif ( object.geometry !== undefined && object.geometry.__webglInit === undefined ) {\r\n\r\n\t\t\t\tobject.geometry.__webglInit = true;\r\n\t\t\t\tobject.geometry.addEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\t\t\t\tmaterial = object.material;\r\n\r\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\tif ( geometry.geometryGroups === undefined ) {\r\n\r\n\t\t\t\t\t\tsortFacesByMaterial( geometry, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// create separate VBOs per geometry chunk\r\n\r\n\t\t\t\t\tfor ( g in geometry.geometryGroups ) {\r\n\r\n\t\t\t\t\t\tgeometryGroup = geometry.geometryGroups[ g ];\r\n\r\n\t\t\t\t\t\t// initialise VBO on the first access\r\n\r\n\t\t\t\t\t\tif ( ! geometryGroup.__webglVertexBuffer ) {\r\n\r\n\t\t\t\t\t\t\tcreateMeshBuffers( geometryGroup );\r\n\t\t\t\t\t\t\tinitMeshBuffers( geometryGroup, object );\r\n\r\n\t\t\t\t\t\t\tgeometry.verticesNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.morphTargetsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.elementsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.uvsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.normalsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.tangentsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.colorsNeedUpdate = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\tinitDirectBuffers( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Ribbon ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tif ( ! geometry.__webglVertexBuffer ) {\r\n\r\n\t\t\t\t\tcreateRibbonBuffers( geometry );\r\n\t\t\t\t\tinitRibbonBuffers( geometry, object );\r\n\r\n\t\t\t\t\tgeometry.verticesNeedUpdate = true;\r\n\t\t\t\t\tgeometry.colorsNeedUpdate = true;\r\n\t\t\t\t\tgeometry.normalsNeedUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tif ( ! geometry.__webglVertexBuffer ) {\r\n\r\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n            createLineBuffers( geometry );\r\n            initLineBuffers( geometry, object );\r\n\r\n            geometry.verticesNeedUpdate = true;\r\n            geometry.colorsNeedUpdate = true;\r\n            geometry.lineDistancesNeedUpdate = true;\r\n\r\n          } else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t\tinitDirectBuffers( geometry );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tif ( ! geometry.__webglVertexBuffer ) {\r\n\r\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\t\tcreateParticleBuffers( geometry );\r\n\t\t\t\t\t\tinitParticleBuffers( geometry, object );\r\n\r\n\t\t\t\t\t\tgeometry.verticesNeedUpdate = true;\r\n\t\t\t\t\t\tgeometry.colorsNeedUpdate = true;\r\n\r\n\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t\tinitDirectBuffers( geometry );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! object.__webglActive ) {\r\n\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\taddBuffer( scene.__webglObjects, geometry, object );\r\n\r\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\tfor ( g in geometry.geometryGroups ) {\r\n\r\n\t\t\t\t\t\tgeometryGroup = geometry.geometryGroups[ g ];\r\n\r\n\t\t\t\t\t\taddBuffer( scene.__webglObjects, geometryGroup, object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Ribbon ||\r\n\t\t\t\t\t\tobject instanceof THREE.Line ||\r\n\t\t\t\t\t\tobject instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\t\t\t\taddBuffer( scene.__webglObjects, geometry, object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {\r\n\r\n\t\t\t\taddBufferImmediate( scene.__webglObjectsImmediate, object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\r\n\t\t\t\tscene.__webglSprites.push( object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.LensFlare ) {\r\n\r\n\t\t\t\tscene.__webglFlares.push( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.__webglActive = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction addBuffer ( objlist, buffer, object ) {\r\n\r\n\t\tobjlist.push(\r\n\t\t\t{\r\n\t\t\t\tbuffer: buffer,\r\n\t\t\t\tobject: object,\r\n\t\t\t\topaque: null,\r\n\t\t\t\ttransparent: null\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t};\r\n\r\n\tfunction addBufferImmediate ( objlist, object ) {\r\n\r\n\t\tobjlist.push(\r\n\t\t\t{\r\n\t\t\t\tobject: object,\r\n\t\t\t\topaque: null,\r\n\t\t\t\ttransparent: null\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t};\r\n\r\n\t// Objects updates\r\n\r\n\tfunction updateObject ( object ) {\r\n\r\n\t\tvar geometry = object.geometry,\r\n\t\t\tgeometryGroup, customAttributesDirty, material;\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.elementsNeedUpdate ||\r\n\t\t\t\t\t geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||\r\n\t\t\t\t\t geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate ) {\r\n\r\n\t\t\t\t\tsetDirectBuffers( geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.elementsNeedUpdate = false;\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\t\tgeometry.tangentsNeedUpdate = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// check all geometry groups\r\n\r\n\t\t\t\tfor( var i = 0, il = geometry.geometryGroupsList.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tgeometryGroup = geometry.geometryGroupsList[ i ];\r\n\r\n\t\t\t\t\tmaterial = getBufferMaterial( object, geometryGroup );\r\n\r\n\t\t\t\t\tif ( geometry.buffersNeedUpdate ) {\r\n\r\n\t\t\t\t\t\tinitMeshBuffers( geometryGroup, object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcustomAttributesDirty = material.attributes && areCustomAttributesDirty( material );\r\n\r\n\t\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.morphTargetsNeedUpdate || geometry.elementsNeedUpdate ||\r\n\t\t\t\t\t\t geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||\r\n\t\t\t\t\t\t geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate || customAttributesDirty ) {\r\n\r\n\t\t\t\t\t\tsetMeshBuffers( geometryGroup, object, _gl.DYNAMIC_DRAW, !geometry.dynamic, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.morphTargetsNeedUpdate = false;\r\n\t\t\t\tgeometry.elementsNeedUpdate = false;\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\t\tgeometry.tangentsNeedUpdate = false;\r\n\r\n\t\t\t\tgeometry.buffersNeedUpdate = false;\r\n\r\n\t\t\t\tmaterial.attributes && clearCustomAttributes( material );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Ribbon ) {\r\n\r\n\t\t\tmaterial = getBufferMaterial( object, geometry );\r\n\r\n\t\t\tcustomAttributesDirty = material.attributes && areCustomAttributesDirty( material );\r\n\r\n\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.normalsNeedUpdate || customAttributesDirty ) {\r\n\r\n\t\t\t\tsetRibbonBuffers( geometry, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\tgeometry.normalsNeedUpdate = false;\r\n\r\n\t\t\tmaterial.attributes && clearCustomAttributes( material );\r\n\r\n\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n      if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate ) {\r\n\r\n\t\t\t\t\tsetDirectBuffers( geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t\t} else {\r\n\r\n        material = getBufferMaterial( object, geometry );\r\n\r\n        customAttributesDirty = material.attributes && areCustomAttributesDirty( material );\r\n\r\n        if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.lineDistancesNeedUpdate || customAttributesDirty ) {\r\n\r\n          setLineBuffers( geometry, _gl.DYNAMIC_DRAW );\r\n\r\n        }\r\n\r\n        geometry.verticesNeedUpdate = false;\r\n        geometry.colorsNeedUpdate = false;\r\n        geometry.lineDistancesNeedUpdate = false;\r\n\r\n        material.attributes && clearCustomAttributes( material );\r\n\r\n      }\r\n\r\n\t\t} else if ( object instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate ) {\r\n\r\n\t\t\t\t\tsetDirectBuffers( geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaterial = getBufferMaterial( object, geometry );\r\n\r\n\t\t\t\tcustomAttributesDirty = material.attributes && areCustomAttributesDirty( material );\r\n\r\n\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || object.sortParticles || customAttributesDirty ) {\r\n\r\n\t\t\t\t\tsetParticleBuffers( geometry, _gl.DYNAMIC_DRAW, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t\t\tmaterial.attributes && clearCustomAttributes( material );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Objects updates - custom attributes check\r\n\r\n\tfunction areCustomAttributesDirty ( material ) {\r\n\r\n\t\tfor ( var a in material.attributes ) {\r\n\r\n\t\t\tif ( material.attributes[ a ].needsUpdate ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t};\r\n\r\n\tfunction clearCustomAttributes ( material ) {\r\n\r\n\t\tfor ( var a in material.attributes ) {\r\n\r\n\t\t\tmaterial.attributes[ a ].needsUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Objects removal\r\n\r\n\tfunction removeObject ( object, scene ) {\r\n\r\n\t\tif ( object instanceof THREE.Mesh  ||\r\n\t\t\t object instanceof THREE.ParticleSystem ||\r\n\t\t\t object instanceof THREE.Ribbon ||\r\n\t\t\t object instanceof THREE.Line ) {\r\n\r\n\t\t\tremoveInstances( scene.__webglObjects, object );\r\n\r\n\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\r\n\t\t\tremoveInstancesDirect( scene.__webglSprites, object );\r\n\r\n\t\t} else if ( object instanceof THREE.LensFlare ) {\r\n\r\n\t\t\tremoveInstancesDirect( scene.__webglFlares, object );\r\n\r\n\t\t} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {\r\n\r\n\t\t\tremoveInstances( scene.__webglObjectsImmediate, object );\r\n\r\n\t\t}\r\n\r\n\t\tobject.__webglActive = false;\r\n\r\n\t};\r\n\r\n\tfunction removeInstances ( objlist, object ) {\r\n\r\n\t\tfor ( var o = objlist.length - 1; o >= 0; o -- ) {\r\n\r\n\t\t\tif ( objlist[ o ].object === object ) {\r\n\r\n\t\t\t\tobjlist.splice( o, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction removeInstancesDirect ( objlist, object ) {\r\n\r\n\t\tfor ( var o = objlist.length - 1; o >= 0; o -- ) {\r\n\r\n\t\t\tif ( objlist[ o ] === object ) {\r\n\r\n\t\t\t\tobjlist.splice( o, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Materials\r\n\r\n\tthis.initMaterial = function ( material, lights, fog, object ) {\r\n\r\n\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\tvar u, a, identifiers, i, parameters, maxLightCount, maxBones, maxShadows, shaderID;\r\n\r\n\t\tif ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\tshaderID = 'depth';\r\n\r\n\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\tshaderID = 'normal';\r\n\r\n\t\t} else if ( material instanceof THREE.MeshBasicMaterial ) {\r\n\r\n\t\t\tshaderID = 'basic';\r\n\r\n\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\r\n\r\n\t\t\tshaderID = 'lambert';\r\n\r\n\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\tshaderID = 'phong';\r\n\r\n\t\t} else if ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\tshaderID = 'basic';\r\n\r\n\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\r\n\t\t\tshaderID = 'dashed';\r\n\r\n\t\t} else if ( material instanceof THREE.ParticleBasicMaterial ) {\r\n\r\n\t\t\tshaderID = 'particle_basic';\r\n\r\n\t\t}\r\n\r\n\t\tif ( shaderID ) {\r\n\r\n\t\t\tsetMaterialShaders( material, THREE.ShaderLib[ shaderID ] );\r\n\r\n\t\t}\r\n\r\n\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t// (not to blow over maxLights budget)\r\n\r\n\t\tmaxLightCount = allocateLights( lights );\r\n\r\n\t\tmaxShadows = allocateShadows( lights );\r\n\r\n\t\tmaxBones = allocateBones( object );\r\n\r\n\t\tparameters = {\r\n\r\n\t\t\tmap: !!material.map,\r\n\t\t\tenvMap: !!material.envMap,\r\n\t\t\tlightMap: !!material.lightMap,\r\n\t\t\tbumpMap: !!material.bumpMap,\r\n\t\t\tnormalMap: !!material.normalMap,\r\n\t\t\tspecularMap: !!material.specularMap,\r\n\r\n\t\t\tvertexColors: material.vertexColors,\r\n\r\n\t\t\tfog: fog,\r\n\t\t\tuseFog: material.fog,\r\n\t\t\tfogExp: fog instanceof THREE.FogExp2,\r\n\r\n\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\r\n\t\t\tskinning: material.skinning,\r\n\t\t\tmaxBones: maxBones,\r\n\t\t\tuseVertexTexture: _supportsBoneTextures && object && object.useVertexTexture,\r\n\t\t\tboneTextureWidth: object && object.boneTextureWidth,\r\n\t\t\tboneTextureHeight: object && object.boneTextureHeight,\r\n\r\n\t\t\tmorphTargets: material.morphTargets,\r\n\t\t\tmorphNormals: material.morphNormals,\r\n\t\t\tmaxMorphTargets: this.maxMorphTargets,\r\n\t\t\tmaxMorphNormals: this.maxMorphNormals,\r\n\r\n\t\t\tmaxDirLights: maxLightCount.directional,\r\n\t\t\tmaxPointLights: maxLightCount.point,\r\n\t\t\tmaxSpotLights: maxLightCount.spot,\r\n\t\t\tmaxHemiLights: maxLightCount.hemi,\r\n\r\n\t\t\tmaxShadows: maxShadows,\r\n\t\t\tshadowMapEnabled: this.shadowMapEnabled && object.receiveShadow,\r\n\t\t\tshadowMapType: this.shadowMapType,\r\n\t\t\tshadowMapDebug: this.shadowMapDebug,\r\n\t\t\tshadowMapCascade: this.shadowMapCascade,\r\n\r\n\t\t\talphaTest: material.alphaTest,\r\n\t\t\tmetal: material.metal,\r\n\t\t\tperPixel: material.perPixel,\r\n\t\t\twrapAround: material.wrapAround,\r\n\t\t\tdoubleSided: material.side === THREE.DoubleSide,\r\n\t\t\tflipSided: material.side === THREE.BackSide\r\n\r\n\t\t};\r\n\r\n\t\tmaterial.program = buildProgram( shaderID, material.fragmentShader, material.vertexShader, material.uniforms, material.attributes, material.defines, parameters );\r\n\r\n\t\tvar attributes = material.program.attributes;\r\n\r\n\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphTargets = 0;\r\n\r\n\t\t\tvar id, base = \"morphTarget\";\r\n\r\n\t\t\tfor ( i = 0; i < this.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\t\tid = base + i;\r\n\r\n\t\t\t\tif ( attributes[ id ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphNormals = 0;\r\n\r\n\t\t\tvar id, base = \"morphNormal\";\r\n\r\n\t\t\tfor ( i = 0; i < this.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\t\tid = base + i;\r\n\r\n\t\t\t\tif ( attributes[ id ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tmaterial.uniformsList = [];\r\n\r\n\t\tfor ( u in material.uniforms ) {\r\n\r\n\t\t\tmaterial.uniformsList.push( [ material.uniforms[ u ], u ] );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setMaterialShaders( material, shaders ) {\r\n\r\n\t\tmaterial.uniforms = THREE.UniformsUtils.clone( shaders.uniforms );\r\n\t\tmaterial.vertexShader = shaders.vertexShader;\r\n\t\tmaterial.fragmentShader = shaders.fragmentShader;\r\n\r\n\t};\r\n\r\n\tfunction setProgram( camera, lights, fog, material, object ) {\r\n\r\n\t\t_usedTextureUnits = 0;\r\n\r\n\t\tif ( material.needsUpdate ) {\r\n\r\n\t\t\tif ( material.program ) deallocateMaterial( material );\r\n\r\n\t\t\t_this.initMaterial( material, lights, fog, object );\r\n\t\t\tmaterial.needsUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\tif ( ! object.__webglMorphTargetInfluences ) {\r\n\r\n\t\t\t\tobject.__webglMorphTargetInfluences = new Float32Array( _this.maxMorphTargets );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar refreshMaterial = false;\r\n\r\n\t\tvar program = material.program,\r\n\t\t\tp_uniforms = program.uniforms,\r\n\t\t\tm_uniforms = material.uniforms;\r\n\r\n\t\tif ( program !== _currentProgram ) {\r\n\r\n\t\t\t_gl.useProgram( program );\r\n\t\t\t_currentProgram = program;\r\n\r\n\t\t\trefreshMaterial = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.id !== _currentMaterialId ) {\r\n\r\n\t\t\t_currentMaterialId = material.id;\r\n\t\t\trefreshMaterial = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshMaterial || camera !== _currentCamera ) {\r\n\r\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\r\n\t\t\tif ( camera !== _currentCamera ) _currentCamera = camera;\r\n\r\n\t\t}\r\n\r\n\t\t// skinning uniforms must be set even if material didn't change\r\n\t\t// auto-setting of texture unit for bone texture must go before other textures\r\n\t\t// not sure why, but otherwise weird things happen\r\n\r\n\t\tif ( material.skinning ) {\r\n\r\n\t\t\tif ( _supportsBoneTextures && object.useVertexTexture ) {\r\n\r\n\t\t\t\tif ( p_uniforms.boneTexture !== null ) {\r\n\r\n\t\t\t\t\tvar textureUnit = getTextureUnit();\r\n\r\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTexture, textureUnit );\r\n\t\t\t\t\t_this.setTexture( object.boneTexture, textureUnit );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( p_uniforms.boneGlobalMatrices !== null ) {\r\n\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.boneMatrices );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshMaterial ) {\r\n\r\n\t\t\t// refresh uniforms common to several materials\r\n\r\n\t\t\tif ( fog && material.fog ) {\r\n\r\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material.lights ) {\r\n\r\n\t\t\t\tif ( _lightsNeedUpdate ) {\r\n\r\n\t\t\t\t\tsetupLights( program, lights );\r\n\t\t\t\t\t_lightsNeedUpdate = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\trefreshUniformsLights( m_uniforms, _lights );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// refresh single material specific uniforms\r\n\r\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\t\t\t\trefreshUniformsDash( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.ParticleBasicMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsParticle( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\tm_uniforms.mNear.value = camera.near;\r\n\t\t\t\tm_uniforms.mFar.value = camera.far;\r\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.receiveShadow && ! material._shadowPass ) {\r\n\r\n\t\t\t\trefreshUniformsShadow( m_uniforms, lights );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// load common uniforms\r\n\r\n\t\t\tloadUniformsGeneric( program, material.uniformsList );\r\n\r\n\t\t\t// load material specific uniforms\r\n\t\t\t// (shader material also gets them for the sake of genericity)\r\n\r\n\t\t\tif ( material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material.envMap ) {\r\n\r\n\t\t\t\tif ( p_uniforms.cameraPosition !== null ) {\r\n\r\n\t\t\t\t\tvar position = camera.matrixWorld.getPosition();\r\n\t\t\t\t\t_gl.uniform3f( p_uniforms.cameraPosition, position.x, position.y, position.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material.skinning ) {\r\n\r\n\t\t\t\tif ( p_uniforms.viewMatrix !== null ) {\r\n\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tloadUniformsMatrices( p_uniforms, object );\r\n\r\n\t\tif ( p_uniforms.modelMatrix !== null ) {\r\n\r\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );\r\n\r\n\t\t}\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n\t// Uniforms (refresh uniforms objects)\r\n\r\n\tfunction refreshUniformsCommon ( uniforms, material ) {\r\n\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copyGammaToLinear( material.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms.diffuse.value = material.color;\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\tuniforms.specularMap.value = material.specularMap;\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\r\n\t\t}\r\n\r\n\t\t// uv repeat and offset setting priorities\r\n\t\t//\t1. color map\r\n\t\t//\t2. specular map\r\n\t\t//\t3. normal map\r\n\t\t//\t4. bump map\r\n\r\n\t\tvar uvScaleMap;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t} else if ( material.specularMap ) {\r\n\r\n\t\t\tuvScaleMap = material.specularMap;\r\n\r\n\t\t} else if ( material.normalMap ) {\r\n\r\n\t\t\tuvScaleMap = material.normalMap;\r\n\r\n\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\tuvScaleMap = material.bumpMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\tvar offset = uvScaleMap.offset;\r\n\t\t\tvar repeat = uvScaleMap.repeat;\r\n\r\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.envMap.value = material.envMap;\r\n\t\tuniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : -1;\r\n\r\n\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t//uniforms.reflectivity.value = material.reflectivity * material.reflectivity;\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\t\tuniforms.combine.value = material.combine;\r\n\t\tuniforms.useRefract.value = material.envMap && material.envMap.mapping instanceof THREE.CubeRefractionMapping;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsLine ( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsDash ( uniforms, material ) {\r\n\r\n\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\tuniforms.scale.value = material.scale;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsParticle ( uniforms, material ) {\r\n\r\n\t\tuniforms.psColor.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\t\tuniforms.size.value = material.size;\r\n\t\tuniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsFog ( uniforms, fog ) {\r\n\r\n\t\tuniforms.fogColor.value = fog.color;\r\n\r\n\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\tuniforms.fogFar.value = fog.far;\r\n\r\n\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\tuniforms.fogDensity.value = fog.density;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsPhong ( uniforms, material ) {\r\n\r\n\t\tuniforms.shininess.value = material.shininess;\r\n\r\n\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\tuniforms.ambient.value.copyGammaToLinear( material.ambient );\r\n\t\t\tuniforms.emissive.value.copyGammaToLinear( material.emissive );\r\n\t\t\tuniforms.specular.value.copyGammaToLinear( material.specular );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms.ambient.value = material.ambient;\r\n\t\t\tuniforms.emissive.value = material.emissive;\r\n\t\t\tuniforms.specular.value = material.specular;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.wrapAround ) {\r\n\r\n\t\t\tuniforms.wrapRGB.value.copy( material.wrapRGB );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsLambert ( uniforms, material ) {\r\n\r\n\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\tuniforms.ambient.value.copyGammaToLinear( material.ambient );\r\n\t\t\tuniforms.emissive.value.copyGammaToLinear( material.emissive );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms.ambient.value = material.ambient;\r\n\t\t\tuniforms.emissive.value = material.emissive;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.wrapAround ) {\r\n\r\n\t\t\tuniforms.wrapRGB.value.copy( material.wrapRGB );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsLights ( uniforms, lights ) {\r\n\r\n\t\tuniforms.ambientLightColor.value = lights.ambient;\r\n\r\n\t\tuniforms.directionalLightColor.value = lights.directional.colors;\r\n\t\tuniforms.directionalLightDirection.value = lights.directional.positions;\r\n\r\n\t\tuniforms.pointLightColor.value = lights.point.colors;\r\n\t\tuniforms.pointLightPosition.value = lights.point.positions;\r\n\t\tuniforms.pointLightDistance.value = lights.point.distances;\r\n\r\n\t\tuniforms.spotLightColor.value = lights.spot.colors;\r\n\t\tuniforms.spotLightPosition.value = lights.spot.positions;\r\n\t\tuniforms.spotLightDistance.value = lights.spot.distances;\r\n\t\tuniforms.spotLightDirection.value = lights.spot.directions;\r\n\t\tuniforms.spotLightAngleCos.value = lights.spot.anglesCos;\r\n\t\tuniforms.spotLightExponent.value = lights.spot.exponents;\r\n\r\n\t\tuniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;\r\n\t\tuniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;\r\n\t\tuniforms.hemisphereLightDirection.value = lights.hemi.positions;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsShadow ( uniforms, lights ) {\r\n\r\n\t\tif ( uniforms.shadowMatrix ) {\r\n\r\n\t\t\tvar j = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar light = lights[ i ];\r\n\r\n\t\t\t\tif ( ! light.castShadow ) continue;\r\n\r\n\t\t\t\tif ( light instanceof THREE.SpotLight || ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) ) {\r\n\r\n\t\t\t\t\tuniforms.shadowMap.value[ j ] = light.shadowMap;\r\n\t\t\t\t\tuniforms.shadowMapSize.value[ j ] = light.shadowMapSize;\r\n\r\n\t\t\t\t\tuniforms.shadowMatrix.value[ j ] = light.shadowMatrix;\r\n\r\n\t\t\t\t\tuniforms.shadowDarkness.value[ j ] = light.shadowDarkness;\r\n\t\t\t\t\tuniforms.shadowBias.value[ j ] = light.shadowBias;\r\n\r\n\t\t\t\t\tj ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Uniforms (load to GPU)\r\n\r\n\tfunction loadUniformsMatrices ( uniforms, object ) {\r\n\r\n\t\t_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object._modelViewMatrix.elements );\r\n\r\n\t\tif ( uniforms.normalMatrix ) {\r\n\r\n\t\t\t_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object._normalMatrix.elements );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction getTextureUnit() {\r\n\r\n\t\tvar textureUnit = _usedTextureUnits;\r\n\r\n\t\tif ( textureUnit >= _maxTextures ) {\r\n\r\n\t\t\tconsole.warn( \"WebGLRenderer: trying to use \" + textureUnit + \" texture units while this GPU supports only \" + _maxTextures );\r\n\r\n\t\t}\r\n\r\n\t\t_usedTextureUnits += 1;\r\n\r\n\t\treturn textureUnit;\r\n\r\n\t};\r\n\r\n\tfunction loadUniformsGeneric ( program, uniforms ) {\r\n\r\n\t\tvar uniform, value, type, location, texture, textureUnit, i, il, j, jl, offset;\r\n\r\n\t\tfor ( j = 0, jl = uniforms.length; j < jl; j ++ ) {\r\n\r\n\t\t\tlocation = program.uniforms[ uniforms[ j ][ 1 ] ];\r\n\t\t\tif ( !location ) continue;\r\n\r\n\t\t\tuniform = uniforms[ j ][ 0 ];\r\n\r\n\t\t\ttype = uniform.type;\r\n\t\t\tvalue = uniform.value;\r\n\r\n\t\t\tif ( type === \"i\" ) { // single integer\r\n\r\n\t\t\t\t_gl.uniform1i( location, value );\r\n\r\n\t\t\t} else if ( type === \"f\" ) { // single float\r\n\r\n\t\t\t\t_gl.uniform1f( location, value );\r\n\r\n\t\t\t} else if ( type === \"v2\" ) { // single THREE.Vector2\r\n\r\n\t\t\t\t_gl.uniform2f( location, value.x, value.y );\r\n\r\n\t\t\t} else if ( type === \"v3\" ) { // single THREE.Vector3\r\n\r\n\t\t\t\t_gl.uniform3f( location, value.x, value.y, value.z );\r\n\r\n\t\t\t} else if ( type === \"v4\" ) { // single THREE.Vector4\r\n\r\n\t\t\t\t_gl.uniform4f( location, value.x, value.y, value.z, value.w );\r\n\r\n\t\t\t} else if ( type === \"c\" ) { // single THREE.Color\r\n\r\n\t\t\t\t_gl.uniform3f( location, value.r, value.g, value.b );\r\n\r\n\t\t\t} else if ( type === \"iv1\" ) { // flat array of integers (JS or typed array)\r\n\r\n\t\t\t\t_gl.uniform1iv( location, value );\r\n\r\n\t\t\t} else if ( type === \"iv\" ) { // flat array of integers with 3 x N size (JS or typed array)\r\n\r\n\t\t\t\t_gl.uniform3iv( location, value );\r\n\r\n\t\t\t} else if ( type === \"fv1\" ) { // flat array of floats (JS or typed array)\r\n\r\n\t\t\t\t_gl.uniform1fv( location, value );\r\n\r\n\t\t\t} else if ( type === \"fv\" ) { // flat array of floats with 3 x N size (JS or typed array)\r\n\r\n\t\t\t\t_gl.uniform3fv( location, value );\r\n\r\n\t\t\t} else if ( type === \"v2v\" ) { // array of THREE.Vector2\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 2 * value.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\toffset = i * 2;\r\n\r\n\t\t\t\t\tuniform._array[ offset ] \t = value[ i ].x;\r\n\t\t\t\t\tuniform._array[ offset + 1 ] = value[ i ].y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniform2fv( location, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"v3v\" ) { // array of THREE.Vector3\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 3 * value.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\toffset = i * 3;\r\n\r\n\t\t\t\t\tuniform._array[ offset ] \t = value[ i ].x;\r\n\t\t\t\t\tuniform._array[ offset + 1 ] = value[ i ].y;\r\n\t\t\t\t\tuniform._array[ offset + 2 ] = value[ i ].z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniform3fv( location, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"v4v\" ) { // array of THREE.Vector4\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 4 * value.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\toffset = i * 4;\r\n\r\n\t\t\t\t\tuniform._array[ offset ] \t = value[ i ].x;\r\n\t\t\t\t\tuniform._array[ offset + 1 ] = value[ i ].y;\r\n\t\t\t\t\tuniform._array[ offset + 2 ] = value[ i ].z;\r\n\t\t\t\t\tuniform._array[ offset + 3 ] = value[ i ].w;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniform4fv( location, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"m4\") { // single THREE.Matrix4\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 16 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvalue.flattenToArray( uniform._array );\r\n\t\t\t\t_gl.uniformMatrix4fv( location, false, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"m4v\" ) { // array of THREE.Matrix4\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 16 * value.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 16 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniformMatrix4fv( location, false, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"t\" ) { // single THREE.Texture (2d or cube)\r\n\r\n\t\t\t\ttexture = value;\r\n\t\t\t\ttextureUnit = getTextureUnit();\r\n\r\n\t\t\t\t_gl.uniform1i( location, textureUnit );\r\n\r\n\t\t\t\tif ( !texture ) continue;\r\n\r\n\t\t\t\tif ( texture.image instanceof Array && texture.image.length === 6 ) {\r\n\r\n\t\t\t\t\tsetCubeTexture( texture, textureUnit );\r\n\r\n\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\t\t\tsetCubeTextureDynamic( texture, textureUnit );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( type === \"tv\" ) { // array of THREE.Texture (2d)\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor( i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tuniform._array[ i ] = getTextureUnit();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniform1iv( location, uniform._array );\r\n\r\n\t\t\t\tfor( i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\ttexture = uniform.value[ i ];\r\n\t\t\t\t\ttextureUnit = uniform._array[ i ];\r\n\r\n\t\t\t\t\tif ( !texture ) continue;\r\n\r\n\t\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setupMatrices ( object, camera ) {\r\n\r\n\t\tobject._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\tobject._normalMatrix.getInverse( object._modelViewMatrix );\r\n\t\tobject._normalMatrix.transpose();\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction setColorGamma( array, offset, color, intensitySq ) {\r\n\r\n\t\tarray[ offset ]     = color.r * color.r * intensitySq;\r\n\t\tarray[ offset + 1 ] = color.g * color.g * intensitySq;\r\n\t\tarray[ offset + 2 ] = color.b * color.b * intensitySq;\r\n\r\n\t};\r\n\r\n\tfunction setColorLinear( array, offset, color, intensity ) {\r\n\r\n\t\tarray[ offset ]     = color.r * intensity;\r\n\t\tarray[ offset + 1 ] = color.g * intensity;\r\n\t\tarray[ offset + 2 ] = color.b * intensity;\r\n\r\n\t};\r\n\r\n\tfunction setupLights ( program, lights ) {\r\n\r\n\t\tvar l, ll, light, n,\r\n\t\tr = 0, g = 0, b = 0,\r\n\t\tcolor, skyColor, groundColor,\r\n\t\tintensity,  intensitySq,\r\n\t\tposition,\r\n\t\tdistance,\r\n\r\n\t\tzlights = _lights,\r\n\r\n\t\tdirColors = zlights.directional.colors,\r\n\t\tdirPositions = zlights.directional.positions,\r\n\r\n\t\tpointColors = zlights.point.colors,\r\n\t\tpointPositions = zlights.point.positions,\r\n\t\tpointDistances = zlights.point.distances,\r\n\r\n\t\tspotColors = zlights.spot.colors,\r\n\t\tspotPositions = zlights.spot.positions,\r\n\t\tspotDistances = zlights.spot.distances,\r\n\t\tspotDirections = zlights.spot.directions,\r\n\t\tspotAnglesCos = zlights.spot.anglesCos,\r\n\t\tspotExponents = zlights.spot.exponents,\r\n\r\n\t\themiSkyColors = zlights.hemi.skyColors,\r\n\t\themiGroundColors = zlights.hemi.groundColors,\r\n\t\themiPositions = zlights.hemi.positions,\r\n\r\n\t\tdirLength = 0,\r\n\t\tpointLength = 0,\r\n\t\tspotLength = 0,\r\n\t\themiLength = 0,\r\n\r\n\t\tdirCount = 0,\r\n\t\tpointCount = 0,\r\n\t\tspotCount = 0,\r\n\t\themiCount = 0,\r\n\r\n\t\tdirOffset = 0,\r\n\t\tpointOffset = 0,\r\n\t\tspotOffset = 0,\r\n\t\themiOffset = 0;\r\n\r\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tlight = lights[ l ];\r\n\r\n\t\t\tif ( light.onlyShadow ) continue;\r\n\r\n\t\t\tcolor = light.color;\r\n\t\t\tintensity = light.intensity;\r\n\t\t\tdistance = light.distance;\r\n\r\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tr += color.r * color.r;\r\n\t\t\t\t\tg += color.g * color.g;\r\n\t\t\t\t\tb += color.b * color.b;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tr += color.r;\r\n\t\t\t\t\tg += color.g;\r\n\t\t\t\t\tb += color.b;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\tdirCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\t_direction.copy( light.matrixWorld.getPosition() );\r\n\t\t\t\t_direction.sub( light.target.matrixWorld.getPosition() );\r\n\t\t\t\t_direction.normalize();\r\n\r\n\t\t\t\t// skip lights with undefined direction\r\n\t\t\t\t// these create troubles in OpenGL (making pixel black)\r\n\r\n\t\t\t\tif ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;\r\n\r\n\t\t\t\tdirOffset = dirLength * 3;\r\n\r\n\t\t\t\tdirPositions[ dirOffset ]     = _direction.x;\r\n\t\t\t\tdirPositions[ dirOffset + 1 ] = _direction.y;\r\n\t\t\t\tdirPositions[ dirOffset + 2 ] = _direction.z;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tsetColorGamma( dirColors, dirOffset, color, intensity * intensity );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetColorLinear( dirColors, dirOffset, color, intensity );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdirLength += 1;\r\n\r\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\tpointCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\tpointOffset = pointLength * 3;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tsetColorGamma( pointColors, pointOffset, color, intensity * intensity );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetColorLinear( pointColors, pointOffset, color, intensity );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tposition = light.matrixWorld.getPosition();\r\n\r\n\t\t\t\tpointPositions[ pointOffset ]     = position.x;\r\n\t\t\t\tpointPositions[ pointOffset + 1 ] = position.y;\r\n\t\t\t\tpointPositions[ pointOffset + 2 ] = position.z;\r\n\r\n\t\t\t\tpointDistances[ pointLength ] = distance;\r\n\r\n\t\t\t\tpointLength += 1;\r\n\r\n\t\t\t} else if ( light instanceof THREE.SpotLight ) {\r\n\r\n\t\t\t\tspotCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\tspotOffset = spotLength * 3;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tsetColorGamma( spotColors, spotOffset, color, intensity * intensity );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetColorLinear( spotColors, spotOffset, color, intensity );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tposition = light.matrixWorld.getPosition();\r\n\r\n\t\t\t\tspotPositions[ spotOffset ]     = position.x;\r\n\t\t\t\tspotPositions[ spotOffset + 1 ] = position.y;\r\n\t\t\t\tspotPositions[ spotOffset + 2 ] = position.z;\r\n\r\n\t\t\t\tspotDistances[ spotLength ] = distance;\r\n\r\n\t\t\t\t_direction.copy( position );\r\n\t\t\t\t_direction.sub( light.target.matrixWorld.getPosition() );\r\n\t\t\t\t_direction.normalize();\r\n\r\n\t\t\t\tspotDirections[ spotOffset ]     = _direction.x;\r\n\t\t\t\tspotDirections[ spotOffset + 1 ] = _direction.y;\r\n\t\t\t\tspotDirections[ spotOffset + 2 ] = _direction.z;\r\n\r\n\t\t\t\tspotAnglesCos[ spotLength ] = Math.cos( light.angle );\r\n\t\t\t\tspotExponents[ spotLength ] = light.exponent;\r\n\r\n\t\t\t\tspotLength += 1;\r\n\r\n\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\r\n\r\n\t\t\t\themiCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\t_direction.copy( light.matrixWorld.getPosition() );\r\n\t\t\t\t_direction.normalize();\r\n\r\n\t\t\t\t// skip lights with undefined direction\r\n\t\t\t\t// these create troubles in OpenGL (making pixel black)\r\n\r\n\t\t\t\tif ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;\r\n\r\n\t\t\t\themiOffset = hemiLength * 3;\r\n\r\n\t\t\t\themiPositions[ hemiOffset ]     = _direction.x;\r\n\t\t\t\themiPositions[ hemiOffset + 1 ] = _direction.y;\r\n\t\t\t\themiPositions[ hemiOffset + 2 ] = _direction.z;\r\n\r\n\t\t\t\tskyColor = light.color;\r\n\t\t\t\tgroundColor = light.groundColor;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tintensitySq = intensity * intensity;\r\n\r\n\t\t\t\t\tsetColorGamma( hemiSkyColors, hemiOffset, skyColor, intensitySq );\r\n\t\t\t\t\tsetColorGamma( hemiGroundColors, hemiOffset, groundColor, intensitySq );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );\r\n\t\t\t\t\tsetColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\themiLength += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// null eventual remains from removed lights\r\n\t\t// (this is to avoid if in shader)\r\n\r\n\t\tfor ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;\r\n\t\tfor ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;\r\n\t\tfor ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;\r\n\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;\r\n\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;\r\n\r\n\t\tzlights.directional.length = dirLength;\r\n\t\tzlights.point.length = pointLength;\r\n\t\tzlights.spot.length = spotLength;\r\n\t\tzlights.hemi.length = hemiLength;\r\n\r\n\t\tzlights.ambient[ 0 ] = r;\r\n\t\tzlights.ambient[ 1 ] = g;\r\n\t\tzlights.ambient[ 2 ] = b;\r\n\r\n\t};\r\n\r\n\t// GL state setting\r\n\r\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\r\n\r\n\t\tif ( cullFace === THREE.CullFaceNone ) {\r\n\r\n\t\t\t_gl.disable( _gl.CULL_FACE );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( cullFace === THREE.CullFaceBack ) {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.BACK );\r\n\r\n\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.FRONT );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.FRONT_AND_BACK );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.enable( _gl.CULL_FACE );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setMaterialFaces = function ( material ) {\r\n\r\n\t\tvar doubleSided = material.side === THREE.DoubleSide;\r\n\t\tvar flipSided = material.side === THREE.BackSide;\r\n\r\n\t\tif ( _oldDoubleSided !== doubleSided ) {\r\n\r\n\t\t\tif ( doubleSided ) {\r\n\r\n\t\t\t\t_gl.disable( _gl.CULL_FACE );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.enable( _gl.CULL_FACE );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldDoubleSided = doubleSided;\r\n\r\n\t\t}\r\n\r\n\t\tif ( _oldFlipSided !== flipSided ) {\r\n\r\n\t\t\tif ( flipSided ) {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldFlipSided = flipSided;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setDepthTest = function ( depthTest ) {\r\n\r\n\t\tif ( _oldDepthTest !== depthTest ) {\r\n\r\n\t\t\tif ( depthTest ) {\r\n\r\n\t\t\t\t_gl.enable( _gl.DEPTH_TEST );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.disable( _gl.DEPTH_TEST );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldDepthTest = depthTest;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setDepthWrite = function ( depthWrite ) {\r\n\r\n\t\tif ( _oldDepthWrite !== depthWrite ) {\r\n\r\n\t\t\t_gl.depthMask( depthWrite );\r\n\t\t\t_oldDepthWrite = depthWrite;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setLineWidth ( width ) {\r\n\r\n\t\tif ( width !== _oldLineWidth ) {\r\n\r\n\t\t\t_gl.lineWidth( width );\r\n\r\n\t\t\t_oldLineWidth = width;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setPolygonOffset ( polygonoffset, factor, units ) {\r\n\r\n\t\tif ( _oldPolygonOffset !== polygonoffset ) {\r\n\r\n\t\t\tif ( polygonoffset ) {\r\n\r\n\t\t\t\t_gl.enable( _gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.disable( _gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldPolygonOffset = polygonoffset;\r\n\r\n\t\t}\r\n\r\n\t\tif ( polygonoffset && ( _oldPolygonOffsetFactor !== factor || _oldPolygonOffsetUnits !== units ) ) {\r\n\r\n\t\t\t_gl.polygonOffset( factor, units );\r\n\r\n\t\t\t_oldPolygonOffsetFactor = factor;\r\n\t\t\t_oldPolygonOffsetUnits = units;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst ) {\r\n\r\n\t\tif ( blending !== _oldBlending ) {\r\n\r\n\t\t\tif ( blending === THREE.NoBlending ) {\r\n\r\n\t\t\t\t_gl.disable( _gl.BLEND );\r\n\r\n\t\t\t} else if ( blending === THREE.AdditiveBlending ) {\r\n\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\t\t\t\t_gl.blendEquation( _gl.FUNC_ADD );\r\n\t\t\t\t_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE );\r\n\r\n\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\r\n\r\n\t\t\t\t// TODO: Find blendFuncSeparate() combination\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\t\t\t\t_gl.blendEquation( _gl.FUNC_ADD );\r\n\t\t\t\t_gl.blendFunc( _gl.ZERO, _gl.ONE_MINUS_SRC_COLOR );\r\n\r\n\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\r\n\r\n\t\t\t\t// TODO: Find blendFuncSeparate() combination\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\t\t\t\t_gl.blendEquation( _gl.FUNC_ADD );\r\n\t\t\t\t_gl.blendFunc( _gl.ZERO, _gl.SRC_COLOR );\r\n\r\n\t\t\t} else if ( blending === THREE.CustomBlending ) {\r\n\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\t\t\t\t_gl.blendEquationSeparate( _gl.FUNC_ADD, _gl.FUNC_ADD );\r\n\t\t\t\t_gl.blendFuncSeparate( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldBlending = blending;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blending === THREE.CustomBlending ) {\r\n\r\n\t\t\tif ( blendEquation !== _oldBlendEquation ) {\r\n\r\n\t\t\t\t_gl.blendEquation( paramThreeToGL( blendEquation ) );\r\n\r\n\t\t\t\t_oldBlendEquation = blendEquation;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blendSrc !== _oldBlendSrc || blendDst !== _oldBlendDst ) {\r\n\r\n\t\t\t\t_gl.blendFunc( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ) );\r\n\r\n\t\t\t\t_oldBlendSrc = blendSrc;\r\n\t\t\t\t_oldBlendDst = blendDst;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_oldBlendEquation = null;\r\n\t\t\t_oldBlendSrc = null;\r\n\t\t\t_oldBlendDst = null;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Defines\r\n\r\n\tfunction generateDefines ( defines ) {\r\n\r\n\t\tvar value, chunk, chunks = [];\r\n\r\n\t\tfor ( var d in defines ) {\r\n\r\n\t\t\tvalue = defines[ d ];\r\n\t\t\tif ( value === false ) continue;\r\n\r\n\t\t\tchunk = \"#define \" + d + \" \" + value;\r\n\t\t\tchunks.push( chunk );\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( \"\\n\" );\r\n\r\n\t};\r\n\r\n\t// Shaders\r\n\r\n\tfunction buildProgram ( shaderID, fragmentShader, vertexShader, uniforms, attributes, defines, parameters ) {\r\n\r\n\t\tvar p, pl, d, program, code;\r\n\t\tvar chunks = [];\r\n\r\n\t\t// Generate code\r\n\r\n\t\tif ( shaderID ) {\r\n\r\n\t\t\tchunks.push( shaderID );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tchunks.push( fragmentShader );\r\n\t\t\tchunks.push( vertexShader );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( d in defines ) {\r\n\r\n\t\t\tchunks.push( d );\r\n\t\t\tchunks.push( defines[ d ] );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( p in parameters ) {\r\n\r\n\t\t\tchunks.push( p );\r\n\t\t\tchunks.push( parameters[ p ] );\r\n\r\n\t\t}\r\n\r\n\t\tcode = chunks.join();\r\n\r\n\t\t// Check if code has been already compiled\r\n\r\n\t\tfor ( p = 0, pl = _programs.length; p < pl; p ++ ) {\r\n\r\n\t\t\tvar programInfo = _programs[ p ];\r\n\r\n\t\t\tif ( programInfo.code === code ) {\r\n\r\n\t\t\t\t//console.log( \"Code already compiled.\" /*: \\n\\n\" + code*/ );\r\n\r\n\t\t\t\tprogramInfo.usedTimes ++;\r\n\r\n\t\t\t\treturn programInfo.program;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar shadowMapTypeDefine = \"SHADOWMAP_TYPE_BASIC\";\r\n\r\n\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF\";\r\n\r\n\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF_SOFT\";\r\n\r\n\t\t}\r\n\r\n\t\t//console.log( \"building new program \" );\r\n\r\n\t\t//\r\n\r\n\t\tvar customDefines = generateDefines( defines );\r\n\r\n\t\t//\r\n\r\n\t\tprogram = _gl.createProgram();\r\n\r\n\t\tvar prefix_vertex = [\r\n\r\n\t\t\t\"precision \" + _precision + \" float;\",\r\n\r\n\t\t\tcustomDefines,\r\n\r\n\t\t\t_supportsVertexTextures ? \"#define VERTEX_TEXTURES\" : \"\",\r\n\r\n\t\t\t_this.gammaInput ? \"#define GAMMA_INPUT\" : \"\",\r\n\t\t\t_this.gammaOutput ? \"#define GAMMA_OUTPUT\" : \"\",\r\n\t\t\t_this.physicallyBasedShading ? \"#define PHYSICALLY_BASED_SHADING\" : \"\",\r\n\r\n\t\t\t\"#define MAX_DIR_LIGHTS \" + parameters.maxDirLights,\r\n\t\t\t\"#define MAX_POINT_LIGHTS \" + parameters.maxPointLights,\r\n\t\t\t\"#define MAX_SPOT_LIGHTS \" + parameters.maxSpotLights,\r\n\t\t\t\"#define MAX_HEMI_LIGHTS \" + parameters.maxHemiLights,\r\n\r\n\t\t\t\"#define MAX_SHADOWS \" + parameters.maxShadows,\r\n\r\n\t\t\t\"#define MAX_BONES \" + parameters.maxBones,\r\n\r\n\t\t\tparameters.map ? \"#define USE_MAP\" : \"\",\r\n\t\t\tparameters.envMap ? \"#define USE_ENVMAP\" : \"\",\r\n\t\t\tparameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\r\n\t\t\tparameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\r\n\t\t\tparameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\r\n\t\t\tparameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\r\n\t\t\tparameters.vertexColors ? \"#define USE_COLOR\" : \"\",\r\n\r\n\t\t\tparameters.skinning ? \"#define USE_SKINNING\" : \"\",\r\n\t\t\tparameters.useVertexTexture ? \"#define BONE_TEXTURE\" : \"\",\r\n\t\t\tparameters.boneTextureWidth ? \"#define N_BONE_PIXEL_X \" + parameters.boneTextureWidth.toFixed( 1 ) : \"\",\r\n\t\t\tparameters.boneTextureHeight ? \"#define N_BONE_PIXEL_Y \" + parameters.boneTextureHeight.toFixed( 1 ) : \"\",\r\n\r\n\t\t\tparameters.morphTargets ? \"#define USE_MORPHTARGETS\" : \"\",\r\n\t\t\tparameters.morphNormals ? \"#define USE_MORPHNORMALS\" : \"\",\r\n\t\t\tparameters.perPixel ? \"#define PHONG_PER_PIXEL\" : \"\",\r\n\t\t\tparameters.wrapAround ? \"#define WRAP_AROUND\" : \"\",\r\n\t\t\tparameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\r\n\t\t\tparameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\r\n\r\n\t\t\tparameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\r\n\t\t\tparameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\r\n\t\t\tparameters.shadowMapDebug ? \"#define SHADOWMAP_DEBUG\" : \"\",\r\n\t\t\tparameters.shadowMapCascade ? \"#define SHADOWMAP_CASCADE\" : \"\",\r\n\r\n\t\t\tparameters.sizeAttenuation ? \"#define USE_SIZEATTENUATION\" : \"\",\r\n\r\n\t\t\t\"uniform mat4 modelMatrix;\",\r\n\t\t\t\"uniform mat4 modelViewMatrix;\",\r\n\t\t\t\"uniform mat4 projectionMatrix;\",\r\n\t\t\t\"uniform mat4 viewMatrix;\",\r\n\t\t\t\"uniform mat3 normalMatrix;\",\r\n\t\t\t\"uniform vec3 cameraPosition;\",\r\n\r\n\t\t\t\"attribute vec3 position;\",\r\n\t\t\t\"attribute vec3 normal;\",\r\n\t\t\t\"attribute vec2 uv;\",\r\n\t\t\t\"attribute vec2 uv2;\",\r\n\r\n\t\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\t\"attribute vec3 color;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef USE_MORPHTARGETS\",\r\n\r\n\t\t\t\t\"attribute vec3 morphTarget0;\",\r\n\t\t\t\t\"attribute vec3 morphTarget1;\",\r\n\t\t\t\t\"attribute vec3 morphTarget2;\",\r\n\t\t\t\t\"attribute vec3 morphTarget3;\",\r\n\r\n\t\t\t\t\"#ifdef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\t\t\"attribute vec3 morphNormal0;\",\r\n\t\t\t\t\t\"attribute vec3 morphNormal1;\",\r\n\t\t\t\t\t\"attribute vec3 morphNormal2;\",\r\n\t\t\t\t\t\"attribute vec3 morphNormal3;\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"attribute vec3 morphTarget4;\",\r\n\t\t\t\t\t\"attribute vec3 morphTarget5;\",\r\n\t\t\t\t\t\"attribute vec3 morphTarget6;\",\r\n\t\t\t\t\t\"attribute vec3 morphTarget7;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\"attribute vec4 skinIndex;\",\r\n\t\t\t\t\"attribute vec4 skinWeight;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"\"\r\n\r\n\t\t].join(\"\\n\");\r\n\r\n\t\tvar prefix_fragment = [\r\n\r\n\t\t\t\"precision \" + _precision + \" float;\",\r\n\r\n\t\t\t( parameters.bumpMap || parameters.normalMap ) ? \"#extension GL_OES_standard_derivatives : enable\" : \"\",\r\n\r\n\t\t\tcustomDefines,\r\n\r\n\t\t\t\"#define MAX_DIR_LIGHTS \" + parameters.maxDirLights,\r\n\t\t\t\"#define MAX_POINT_LIGHTS \" + parameters.maxPointLights,\r\n\t\t\t\"#define MAX_SPOT_LIGHTS \" + parameters.maxSpotLights,\r\n\t\t\t\"#define MAX_HEMI_LIGHTS \" + parameters.maxHemiLights,\r\n\r\n\t\t\t\"#define MAX_SHADOWS \" + parameters.maxShadows,\r\n\r\n\t\t\tparameters.alphaTest ? \"#define ALPHATEST \" + parameters.alphaTest: \"\",\r\n\r\n\t\t\t_this.gammaInput ? \"#define GAMMA_INPUT\" : \"\",\r\n\t\t\t_this.gammaOutput ? \"#define GAMMA_OUTPUT\" : \"\",\r\n\t\t\t_this.physicallyBasedShading ? \"#define PHYSICALLY_BASED_SHADING\" : \"\",\r\n\r\n\t\t\t( parameters.useFog && parameters.fog ) ? \"#define USE_FOG\" : \"\",\r\n\t\t\t( parameters.useFog && parameters.fogExp ) ? \"#define FOG_EXP2\" : \"\",\r\n\r\n\t\t\tparameters.map ? \"#define USE_MAP\" : \"\",\r\n\t\t\tparameters.envMap ? \"#define USE_ENVMAP\" : \"\",\r\n\t\t\tparameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\r\n\t\t\tparameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\r\n\t\t\tparameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\r\n\t\t\tparameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\r\n\t\t\tparameters.vertexColors ? \"#define USE_COLOR\" : \"\",\r\n\r\n\t\t\tparameters.metal ? \"#define METAL\" : \"\",\r\n\t\t\tparameters.perPixel ? \"#define PHONG_PER_PIXEL\" : \"\",\r\n\t\t\tparameters.wrapAround ? \"#define WRAP_AROUND\" : \"\",\r\n\t\t\tparameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\r\n\t\t\tparameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\r\n\r\n\t\t\tparameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\r\n\t\t\tparameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\r\n\t\t\tparameters.shadowMapDebug ? \"#define SHADOWMAP_DEBUG\" : \"\",\r\n\t\t\tparameters.shadowMapCascade ? \"#define SHADOWMAP_CASCADE\" : \"\",\r\n\r\n\t\t\t\"uniform mat4 viewMatrix;\",\r\n\t\t\t\"uniform vec3 cameraPosition;\",\r\n\t\t\t\"\"\r\n\r\n\t\t].join(\"\\n\");\r\n\r\n\t\tvar glFragmentShader = getShader( \"fragment\", prefix_fragment + fragmentShader );\r\n\t\tvar glVertexShader = getShader( \"vertex\", prefix_vertex + vertexShader );\r\n\r\n\t\t_gl.attachShader( program, glVertexShader );\r\n\t\t_gl.attachShader( program, glFragmentShader );\r\n\r\n\t\t_gl.linkProgram( program );\r\n\r\n\t\tif ( !_gl.getProgramParameter( program, _gl.LINK_STATUS ) ) {\r\n\r\n\t\t\tconsole.error( \"Could not initialise shader\\n\" + \"VALIDATE_STATUS: \" + _gl.getProgramParameter( program, _gl.VALIDATE_STATUS ) + \", gl error [\" + _gl.getError() + \"]\" );\r\n\r\n\t\t}\r\n\r\n\t\t// clean up\r\n\r\n\t\t_gl.deleteShader( glFragmentShader );\r\n\t\t_gl.deleteShader( glVertexShader );\r\n\r\n\t\t//console.log( prefix_fragment + fragmentShader );\r\n\t\t//console.log( prefix_vertex + vertexShader );\r\n\r\n\t\tprogram.uniforms = {};\r\n\t\tprogram.attributes = {};\r\n\r\n\t\tvar identifiers, u, a, i;\r\n\r\n\t\t// cache uniform locations\r\n\r\n\t\tidentifiers = [\r\n\r\n\t\t\t'viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition',\r\n\t\t\t'morphTargetInfluences'\r\n\r\n\t\t];\r\n\r\n\t\tif ( parameters.useVertexTexture ) {\r\n\r\n\t\t\tidentifiers.push( 'boneTexture' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tidentifiers.push( 'boneGlobalMatrices' );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( u in uniforms ) {\r\n\r\n\t\t\tidentifiers.push( u );\r\n\r\n\t\t}\r\n\r\n\t\tcacheUniformLocations( program, identifiers );\r\n\r\n\t\t// cache attributes locations\r\n\r\n\t\tidentifiers = [\r\n\r\n\t\t\t\"position\", \"normal\", \"uv\", \"uv2\", \"tangent\", \"color\",\r\n\t\t\t\"skinIndex\", \"skinWeight\", \"lineDistance\"\r\n\r\n\t\t];\r\n\r\n\t\tfor ( i = 0; i < parameters.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\tidentifiers.push( \"morphTarget\" + i );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 0; i < parameters.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\tidentifiers.push( \"morphNormal\" + i );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( a in attributes ) {\r\n\r\n\t\t\tidentifiers.push( a );\r\n\r\n\t\t}\r\n\r\n\t\tcacheAttributeLocations( program, identifiers );\r\n\r\n\t\tprogram.id = _programs_counter ++;\r\n\r\n\t\t_programs.push( { program: program, code: code, usedTimes: 1 } );\r\n\r\n\t\t_this.info.memory.programs = _programs.length;\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n\t// Shader parameters cache\r\n\r\n\tfunction cacheUniformLocations ( program, identifiers ) {\r\n\r\n\t\tvar i, l, id;\r\n\r\n\t\tfor( i = 0, l = identifiers.length; i < l; i ++ ) {\r\n\r\n\t\t\tid = identifiers[ i ];\r\n\t\t\tprogram.uniforms[ id ] = _gl.getUniformLocation( program, id );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction cacheAttributeLocations ( program, identifiers ) {\r\n\r\n\t\tvar i, l, id;\r\n\r\n\t\tfor( i = 0, l = identifiers.length; i < l; i ++ ) {\r\n\r\n\t\t\tid = identifiers[ i ];\r\n\t\t\tprogram.attributes[ id ] = _gl.getAttribLocation( program, id );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction addLineNumbers ( string ) {\r\n\r\n\t\tvar chunks = string.split( \"\\n\" );\r\n\r\n\t\tfor ( var i = 0, il = chunks.length; i < il; i ++ ) {\r\n\r\n\t\t\t// Chrome reports shader errors on lines\r\n\t\t\t// starting counting from 1\r\n\r\n\t\t\tchunks[ i ] = ( i + 1 ) + \": \" + chunks[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( \"\\n\" );\r\n\r\n\t};\r\n\r\n\tfunction getShader ( type, string ) {\r\n\r\n\t\tvar shader;\r\n\r\n\t\tif ( type === \"fragment\" ) {\r\n\r\n\t\t\tshader = _gl.createShader( _gl.FRAGMENT_SHADER );\r\n\r\n\t\t} else if ( type === \"vertex\" ) {\r\n\r\n\t\t\tshader = _gl.createShader( _gl.VERTEX_SHADER );\r\n\r\n\t\t}\r\n\r\n\t\t_gl.shaderSource( shader, string );\r\n\t\t_gl.compileShader( shader );\r\n\r\n\t\tif ( !_gl.getShaderParameter( shader, _gl.COMPILE_STATUS ) ) {\r\n\r\n\t\t\tconsole.error( _gl.getShaderInfoLog( shader ) );\r\n\t\t\tconsole.error( addLineNumbers( string ) );\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn shader;\r\n\r\n\t};\r\n\r\n\t// Textures\r\n\r\n\r\n\tfunction isPowerOfTwo ( value ) {\r\n\r\n\t\treturn ( value & ( value - 1 ) ) === 0;\r\n\r\n\t};\r\n\r\n\tfunction setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {\r\n\r\n\t\tif ( isImagePowerOfTwo ) {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( _glExtensionTextureFilterAnisotropic && texture.type !== THREE.FloatType ) {\r\n\r\n\t\t\tif ( texture.anisotropy > 1 || texture.__oldAnisotropy ) {\r\n\r\n\t\t\t\t_gl.texParameterf( textureType, _glExtensionTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _maxAnisotropy ) );\r\n\t\t\t\ttexture.__oldAnisotropy = texture.anisotropy;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setTexture = function ( texture, slot ) {\r\n\r\n\t\tif ( texture.needsUpdate ) {\r\n\r\n\t\t\tif ( ! texture.__webglInit ) {\r\n\r\n\t\t\t\ttexture.__webglInit = true;\r\n\r\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\ttexture.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t\t_this.info.memory.textures ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );\r\n\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\r\n\t\t\tvar image = texture.image,\r\n\t\t\tisImagePowerOfTwo = isPowerOfTwo( image.width ) && isPowerOfTwo( image.height ),\r\n\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );\r\n\r\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\r\n\r\n\t\t\tif ( texture instanceof THREE.DataTexture ) {\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\r\n\r\n\t\t\t\t// compressed textures can only use manually created mipmaps\r\n\t\t\t\t// WebGL can't generate mipmaps for DDS textures\r\n\r\n\t\t\t\tfor( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t_gl.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else { // regular Texture (image, video, canvas)\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\t\ttexture.needsUpdate = false;\r\n\r\n\t\t\tif ( texture.onUpdate ) texture.onUpdate();\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction clampToMaxSize ( image, maxSize ) {\r\n\r\n\t\tif ( image.width <= maxSize && image.height <= maxSize ) {\r\n\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t\t// Warning: Scaling through the canvas will only work with images that use\r\n\t\t// premultiplied alpha.\r\n\r\n\t\tvar maxDimension = Math.max( image.width, image.height );\r\n\t\tvar newWidth = Math.floor( image.width * maxSize / maxDimension );\r\n\t\tvar newHeight = Math.floor( image.height * maxSize / maxDimension );\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\tcanvas.width = newWidth;\r\n\t\tcanvas.height = newHeight;\r\n\r\n\t\tvar ctx = canvas.getContext( \"2d\" );\r\n\t\tctx.drawImage( image, 0, 0, image.width, image.height, 0, 0, newWidth, newHeight );\r\n\r\n\t\treturn canvas;\r\n\r\n\t}\r\n\r\n\tfunction setCubeTexture ( texture, slot ) {\r\n\r\n\t\tif ( texture.image.length === 6 ) {\r\n\r\n\t\t\tif ( texture.needsUpdate ) {\r\n\r\n\t\t\t\tif ( ! texture.image.__webglTextureCube ) {\r\n\r\n\t\t\t\t\ttexture.image.__webglTextureCube = _gl.createTexture();\r\n\r\n\t\t\t\t\t_this.info.memory.textures ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );\r\n\r\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\r\n\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\r\n\r\n\t\t\t\tvar cubeImage = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( _this.autoScaleCubemaps && ! isCompressed ) {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], _maxCubemapSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = texture.image[ i ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar image = cubeImage[ 0 ],\r\n\t\t\t\tisImagePowerOfTwo = isPowerOfTwo( image.width ) && isPowerOfTwo( image.height ),\r\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\r\n\r\n\t\t\t\t\t\tfor( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\r\n\t\t\t\t\t\t\t_gl.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) {\r\n\r\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.needsUpdate = false;\r\n\r\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setCubeTextureDynamic ( texture, slot ) {\r\n\r\n\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.__webglTexture );\r\n\r\n\t};\r\n\r\n\t// Render targets\r\n\r\n\tfunction setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {\r\n\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, renderTarget.__webglTexture, 0 );\r\n\r\n\t};\r\n\r\n\tfunction setupRenderBuffer ( renderbuffer, renderTarget  ) {\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t/* For some reason this is not working. Defaulting to RGBA4.\r\n\t\t} else if( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\t\t*/\r\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setRenderTarget = function ( renderTarget ) {\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\r\n\t\tif ( renderTarget && ! renderTarget.__webglFramebuffer ) {\r\n\r\n\t\t\tif ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;\r\n\t\t\tif ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;\r\n\r\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\t\trenderTarget.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t_this.info.memory.textures ++;\r\n\r\n\t\t\t// Setup texture, create render and frame buffers\r\n\r\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget.width ) && isPowerOfTwo( renderTarget.height ),\r\n\t\t\t\tglFormat = paramThreeToGL( renderTarget.format ),\r\n\t\t\t\tglType = paramThreeToGL( renderTarget.type );\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\trenderTarget.__webglFramebuffer = [];\r\n\t\t\t\trenderTarget.__webglRenderbuffer = [];\r\n\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget, isTargetPowerOfTwo );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\trenderTarget.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\t\t\t\t\trenderTarget.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();\r\n\r\n\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t\t\tsetupFrameBuffer( renderTarget.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\r\n\t\t\t\t\tsetupRenderBuffer( renderTarget.__webglRenderbuffer[ i ], renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderTarget.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n\t\t\t\tif ( renderTarget.shareDepthFrom ) {\r\n\r\n\t\t\t\t\trenderTarget.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderTarget.__webglRenderbuffer = _gl.createRenderbuffer();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget, isTargetPowerOfTwo );\r\n\r\n\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t\tsetupFrameBuffer( renderTarget.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );\r\n\r\n\t\t\t\tif ( renderTarget.shareDepthFrom ) {\r\n\r\n\t\t\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );\r\n\r\n\t\t\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetupRenderBuffer( renderTarget.__webglRenderbuffer, renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Release everything\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t\t}\r\n\r\n\t\tvar framebuffer, width, height, vx, vy;\r\n\r\n\t\tif ( renderTarget ) {\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tframebuffer = renderTarget.__webglFramebuffer[ renderTarget.activeCubeFace ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tframebuffer = renderTarget.__webglFramebuffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twidth = renderTarget.width;\r\n\t\t\theight = renderTarget.height;\r\n\r\n\t\t\tvx = 0;\r\n\t\t\tvy = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tframebuffer = null;\r\n\r\n\t\t\twidth = _viewportWidth;\r\n\t\t\theight = _viewportHeight;\r\n\r\n\t\t\tvx = _viewportX;\r\n\t\t\tvy = _viewportY;\r\n\r\n\t\t}\r\n\r\n\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t\t_gl.viewport( vx, vy, width, height );\r\n\r\n\t\t\t_currentFramebuffer = framebuffer;\r\n\r\n\t\t}\r\n\r\n\t\t_currentWidth = width;\r\n\t\t_currentHeight = height;\r\n\r\n\t};\r\n\r\n\tfunction updateRenderTargetMipmap ( renderTarget ) {\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );\r\n\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );\r\n\t\t\t_gl.generateMipmap( _gl.TEXTURE_2D );\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, null );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Fallback filters for non-power-of-2 textures\r\n\r\n\tfunction filterFallback ( f ) {\r\n\r\n\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\r\n\r\n\t\t\treturn _gl.NEAREST;\r\n\r\n\t\t}\r\n\r\n\t\treturn _gl.LINEAR;\r\n\r\n\t};\r\n\r\n\t// Map three.js constants to WebGL constants\r\n\r\n\tfunction paramThreeToGL ( p ) {\r\n\r\n\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\r\n\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\r\n\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\r\n\r\n\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\r\n\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\r\n\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\r\n\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\r\n\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\r\n\r\n\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\r\n\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\r\n\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\r\n\t\tif ( p === THREE.IntType ) return _gl.INT;\r\n\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\r\n\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\r\n\r\n\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\r\n\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\r\n\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\r\n\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\r\n\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\r\n\r\n\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\r\n\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\r\n\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\r\n\r\n\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\r\n\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\r\n\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\r\n\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\r\n\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\r\n\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\r\n\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\r\n\r\n\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\r\n\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\r\n\r\n\t\tif ( _glExtensionCompressedTextureS3TC !== undefined ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\r\n\t};\r\n\r\n\t// Allocations\r\n\r\n\tfunction allocateBones ( object ) {\r\n\r\n\t\tif ( _supportsBoneTextures && object && object.useVertexTexture ) {\r\n\r\n\t\t\treturn 1024;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// default for when object is not specified\r\n\t\t\t// ( for example when prebuilding shader\r\n\t\t\t//   to be used with multiple objects )\r\n\t\t\t//\r\n\t\t\t// \t- leave some extra space for other uniforms\r\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t//    (up to 54 should be safe)\r\n\r\n\t\t\tvar nVertexUniforms = _gl.getParameter( _gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\r\n\t\t\tvar maxBones = nVertexMatrices;\r\n\r\n\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\t\tmaxBones = Math.min( object.bones.length, maxBones );\r\n\r\n\t\t\t\tif ( maxBones < object.bones.length ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"WebGLRenderer: too many bones - \" + object.bones.length + \", this GPU supports just \" + maxBones + \" (try OpenGL instead of ANGLE)\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn maxBones;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction allocateLights ( lights ) {\r\n\r\n\t\tvar l, ll, light, dirLights, pointLights, spotLights, hemiLights;\r\n\r\n\t\tdirLights = pointLights = spotLights = hemiLights = 0;\r\n\r\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tlight = lights[ l ];\r\n\r\n\t\t\tif ( light.onlyShadow ) continue;\r\n\r\n\t\t\tif ( light instanceof THREE.DirectionalLight ) dirLights ++;\r\n\t\t\tif ( light instanceof THREE.PointLight ) pointLights ++;\r\n\t\t\tif ( light instanceof THREE.SpotLight ) spotLights ++;\r\n\t\t\tif ( light instanceof THREE.HemisphereLight ) hemiLights ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn { 'directional' : dirLights, 'point' : pointLights, 'spot': spotLights, 'hemi': hemiLights };\r\n\r\n\t};\r\n\r\n\tfunction allocateShadows ( lights ) {\r\n\r\n\t\tvar l, ll, light, maxShadows = 0;\r\n\r\n\t\tfor ( l = 0, ll = lights.length; l < ll; l++ ) {\r\n\r\n\t\t\tlight = lights[ l ];\r\n\r\n\t\t\tif ( ! light.castShadow ) continue;\r\n\r\n\t\t\tif ( light instanceof THREE.SpotLight ) maxShadows ++;\r\n\t\t\tif ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) maxShadows ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn maxShadows;\r\n\r\n\t};\r\n\r\n\t// Initialization\r\n\r\n\tfunction initGL () {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tif ( ! ( _gl = _canvas.getContext( 'experimental-webgl', { alpha: _alpha, premultipliedAlpha: _premultipliedAlpha, antialias: _antialias, stencil: _stencil, preserveDrawingBuffer: _preserveDrawingBuffer } ) ) ) {\r\n\r\n\t\t\t\tthrow 'Error creating WebGL context.';\r\n\r\n\t\t\t}\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( error );\r\n\r\n\t\t}\r\n\r\n\t\t_glExtensionTextureFloat = _gl.getExtension( 'OES_texture_float' );\r\n\t\t_glExtensionStandardDerivatives = _gl.getExtension( 'OES_standard_derivatives' );\r\n\r\n\t\t_glExtensionTextureFilterAnisotropic = _gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\r\n\t\t\t\t\t\t\t\t\t\t\t   _gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\r\n\t\t\t\t\t\t\t\t\t\t\t   _gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\r\n\r\n\t\t_glExtensionCompressedTextureS3TC = _gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\r\n\t\t\t\t\t\t\t\t\t\t\t_gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\r\n\t\t\t\t\t\t\t\t\t\t\t_gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\tif ( ! _glExtensionTextureFloat ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Float textures not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! _glExtensionStandardDerivatives ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Standard derivatives not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! _glExtensionTextureFilterAnisotropic ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Anisotropic texture filtering not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! _glExtensionCompressedTextureS3TC ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: S3TC compressed textures not supported.' );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setDefaultGLState () {\r\n\r\n\t\t_gl.clearColor( 0, 0, 0, 1 );\r\n\t\t_gl.clearDepth( 1 );\r\n\t\t_gl.clearStencil( 0 );\r\n\r\n\t\t_gl.enable( _gl.DEPTH_TEST );\r\n\t\t_gl.depthFunc( _gl.LEQUAL );\r\n\r\n\t\t_gl.frontFace( _gl.CCW );\r\n\t\t_gl.cullFace( _gl.BACK );\r\n\t\t_gl.enable( _gl.CULL_FACE );\r\n\r\n\t\t_gl.enable( _gl.BLEND );\r\n\t\t_gl.blendEquation( _gl.FUNC_ADD );\r\n\t\t_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\t// default plugins (order is important)\r\n\r\n\tthis.shadowMapPlugin = new THREE.ShadowMapPlugin();\r\n\tthis.addPrePlugin( this.shadowMapPlugin );\r\n\r\n\tthis.addPostPlugin( new THREE.SpritePlugin() );\r\n\tthis.addPostPlugin( new THREE.LensFlarePlugin() );\r\n\r\n};\r\n/**\r\n * @author szimek / https://github.com/szimek/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\toptions = options || {};\r\n\r\n\tthis.wrapS = options.wrapS !== undefined ? options.wrapS : THREE.ClampToEdgeWrapping;\r\n\tthis.wrapT = options.wrapT !== undefined ? options.wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\tthis.magFilter = options.magFilter !== undefined ? options.magFilter : THREE.LinearFilter;\r\n\tthis.minFilter = options.minFilter !== undefined ? options.minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\tthis.anisotropy = options.anisotropy !== undefined ? options.anisotropy : 1;\r\n\r\n\tthis.offset = new THREE.Vector2( 0, 0 );\r\n\tthis.repeat = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.format = options.format !== undefined ? options.format : THREE.RGBAFormat;\r\n\tthis.type = options.type !== undefined ? options.type : THREE.UnsignedByteType;\r\n\r\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\r\n\r\n\tthis.generateMipmaps = true;\r\n\r\n\tthis.shareDepthFrom = null;\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTarget.prototype.clone = function() {\r\n\r\n\tvar tmp = new THREE.WebGLRenderTarget( this.width, this.height );\r\n\r\n\ttmp.wrapS = this.wrapS;\r\n\ttmp.wrapT = this.wrapT;\r\n\r\n\ttmp.magFilter = this.magFilter;\r\n\ttmp.minFilter = this.minFilter;\r\n\r\n\ttmp.anisotropy = this.anisotropy;\r\n\r\n\ttmp.offset.copy( this.offset );\r\n\ttmp.repeat.copy( this.repeat );\r\n\r\n\ttmp.format = this.format;\r\n\ttmp.type = this.type;\r\n\r\n\ttmp.depthBuffer = this.depthBuffer;\r\n\ttmp.stencilBuffer = this.stencilBuffer;\r\n\r\n\ttmp.generateMipmaps = this.generateMipmaps;\r\n\r\n\ttmp.shareDepthFrom = this.shareDepthFrom;\r\n\r\n\treturn tmp;\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTarget.prototype.dispose = function () {\r\n\r\n\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com\r\n */\r\n\r\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\r\n\r\n\tTHREE.WebGLRenderTarget.call( this, width, height, options );\r\n\r\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableVertex = function () {\r\n\r\n\tthis.positionWorld = new THREE.Vector3();\r\n\tthis.positionScreen = new THREE.Vector4();\r\n\r\n\tthis.visible = true;\r\n\r\n};\r\n\r\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\r\n\r\n\tthis.positionWorld.copy( vertex.positionWorld );\r\n\tthis.positionScreen.copy( vertex.positionScreen );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableFace3 = function () {\r\n\r\n\tthis.v1 = new THREE.RenderableVertex();\r\n\tthis.v2 = new THREE.RenderableVertex();\r\n\tthis.v3 = new THREE.RenderableVertex();\r\n\r\n\tthis.centroidModel = new THREE.Vector3();\r\n\r\n\tthis.normalModel = new THREE.Vector3();\r\n\tthis.normalModelView = new THREE.Vector3();\r\n\r\n\tthis.vertexNormalsLength = 0;\r\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\tthis.vertexNormalsModelView = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\r\n\tthis.color = null;\r\n\tthis.material = null;\r\n\tthis.uvs = [[]];\r\n\r\n\tthis.z = null;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableFace4 = function () {\r\n\r\n\tthis.v1 = new THREE.RenderableVertex();\r\n\tthis.v2 = new THREE.RenderableVertex();\r\n\tthis.v3 = new THREE.RenderableVertex();\r\n\tthis.v4 = new THREE.RenderableVertex();\r\n\r\n\tthis.centroidModel = new THREE.Vector3();\r\n\r\n\tthis.normalModel = new THREE.Vector3();\r\n\tthis.normalModelView = new THREE.Vector3();\r\n\r\n\tthis.vertexNormalsLength = 0;\r\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\tthis.vertexNormalsModelView = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\r\n\tthis.color = null;\r\n\tthis.material = null;\r\n\tthis.uvs = [[]];\r\n\r\n\tthis.z = null;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableObject = function () {\r\n\r\n\tthis.object = null;\r\n\tthis.z = null;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableParticle = function () {\r\n\r\n\tthis.object = null;\r\n\r\n\tthis.x = null;\r\n\tthis.y = null;\r\n\tthis.z = null;\r\n\r\n\tthis.rotation = null;\r\n\tthis.scale = new THREE.Vector2();\r\n\r\n\tthis.material = null;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableLine = function () {\r\n\r\n\tthis.z = null;\r\n\r\n\tthis.v1 = new THREE.RenderableVertex();\r\n\tthis.v2 = new THREE.RenderableVertex();\r\n\r\n\tthis.material = null;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ColorUtils = {\r\n\r\n\tadjustHSV : function ( color, h, s, v ) {\r\n\r\n\t\tvar hsv = THREE.ColorUtils.__hsv;\r\n\r\n\t\tcolor.getHSV( hsv );\r\n\r\n\t\thsv.h = THREE.Math.clamp( hsv.h + h, 0, 1 );\r\n\t\thsv.s = THREE.Math.clamp( hsv.s + s, 0, 1 );\r\n\t\thsv.v = THREE.Math.clamp( hsv.v + v, 0, 1 );\r\n\r\n\t\tcolor.setHSV( hsv.h, hsv.s, hsv.v );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ColorUtils.__hsv = { h: 0, s: 0, v: 0 };/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.GeometryUtils = {\r\n\r\n\t// Merge two geometries or geometry and geometry from object (using object's transform)\r\n\r\n\tmerge: function ( geometry1, object2 /* mesh | geometry */ ) {\r\n\r\n\t\tvar matrix, normalMatrix,\r\n\t\tvertexOffset = geometry1.vertices.length,\r\n\t\tuvPosition = geometry1.faceVertexUvs[ 0 ].length,\r\n\t\tgeometry2 = object2 instanceof THREE.Mesh ? object2.geometry : object2,\r\n\t\tvertices1 = geometry1.vertices,\r\n\t\tvertices2 = geometry2.vertices,\r\n\t\tfaces1 = geometry1.faces,\r\n\t\tfaces2 = geometry2.faces,\r\n\t\tuvs1 = geometry1.faceVertexUvs[ 0 ],\r\n\t\tuvs2 = geometry2.faceVertexUvs[ 0 ];\r\n\r\n\t\tif ( object2 instanceof THREE.Mesh ) {\r\n\r\n\t\t\tobject2.matrixAutoUpdate && object2.updateMatrix();\r\n\r\n\t\t\tmatrix = object2.matrix;\r\n\r\n\t\t\tnormalMatrix = new THREE.Matrix3();\r\n\t\t\tnormalMatrix.getInverse( matrix );\r\n\t\t\tnormalMatrix.transpose();\r\n\r\n\t\t}\r\n\r\n\t\t// vertices\r\n\r\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = vertices2[ i ];\r\n\r\n\t\t\tvar vertexCopy = vertex.clone();\r\n\r\n\t\t\tif ( matrix ) vertexCopy.applyMatrix4( matrix );\r\n\r\n\t\t\tvertices1.push( vertexCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// faces\r\n\r\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\tfaceVertexColors = face.vertexColors;\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tfaceCopy = new THREE.Face4( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset, face.d + vertexOffset );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.normal.copy( face.normal );\r\n\r\n\t\t\tif ( normalMatrix ) {\r\n\r\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\r\n\t\t\t\tif ( normalMatrix ) {\r\n\r\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.color.copy( face.color );\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.materialIndex = face.materialIndex;\r\n\r\n\t\t\tfaceCopy.centroid.copy( face.centroid );\r\n\r\n\t\t\tif ( matrix ) {\r\n\r\n\t\t\t\tfaceCopy.centroid.applyMatrix4( matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaces1.push( faceCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// uvs\r\n\r\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\r\n\r\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tuvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvs1.push( uvCopy );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tremoveMaterials: function ( geometry, materialIndexArray ) {\r\n\r\n\t\tvar materialIndexMap = {};\r\n\r\n\t\tfor ( var i = 0, il = materialIndexArray.length; i < il; i ++ ) {\r\n\r\n\t\t\tmaterialIndexMap[ materialIndexArray[i] ] = true;\r\n\r\n\t\t}\r\n\r\n\t\tvar face, newFaces = [];\r\n\r\n\t\tfor ( var i = 0, il = geometry.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = geometry.faces[ i ];\r\n\t\t\tif ( ! ( face.materialIndex in materialIndexMap ) ) newFaces.push( face );\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.faces = newFaces;\r\n\r\n\t},\r\n\r\n\t// Get random point in triangle (via barycentric coordinates)\r\n\t// \t(uniform distribution)\r\n\t// \thttp://www.cgafaq.info/wiki/Random_Point_In_Triangle\r\n\r\n\trandomPointInTriangle: function ( vectorA, vectorB, vectorC ) {\r\n\r\n\t\tvar a, b, c,\r\n\t\t\tpoint = new THREE.Vector3(),\r\n\t\t\ttmp = THREE.GeometryUtils.__v1;\r\n\r\n\t\ta = THREE.GeometryUtils.random();\r\n\t\tb = THREE.GeometryUtils.random();\r\n\r\n\t\tif ( ( a + b ) > 1 ) {\r\n\r\n\t\t\ta = 1 - a;\r\n\t\t\tb = 1 - b;\r\n\r\n\t\t}\r\n\r\n\t\tc = 1 - a - b;\r\n\r\n\t\tpoint.copy( vectorA );\r\n\t\tpoint.multiplyScalar( a );\r\n\r\n\t\ttmp.copy( vectorB );\r\n\t\ttmp.multiplyScalar( b );\r\n\r\n\t\tpoint.add( tmp );\r\n\r\n\t\ttmp.copy( vectorC );\r\n\t\ttmp.multiplyScalar( c );\r\n\r\n\t\tpoint.add( tmp );\r\n\r\n\t\treturn point;\r\n\r\n\t},\r\n\r\n\t// Get random point in face (triangle / quad)\r\n\t// (uniform distribution)\r\n\r\n\trandomPointInFace: function ( face, geometry, useCachedAreas ) {\r\n\r\n\t\tvar vA, vB, vC, vD;\r\n\r\n\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\tvA = geometry.vertices[ face.a ];\r\n\t\t\tvB = geometry.vertices[ face.b ];\r\n\t\t\tvC = geometry.vertices[ face.c ];\r\n\r\n\t\t\treturn THREE.GeometryUtils.randomPointInTriangle( vA, vB, vC );\r\n\r\n\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\tvA = geometry.vertices[ face.a ];\r\n\t\t\tvB = geometry.vertices[ face.b ];\r\n\t\t\tvC = geometry.vertices[ face.c ];\r\n\t\t\tvD = geometry.vertices[ face.d ];\r\n\r\n\t\t\tvar area1, area2;\r\n\r\n\t\t\tif ( useCachedAreas ) {\r\n\r\n\t\t\t\tif ( face._area1 && face._area2 ) {\r\n\r\n\t\t\t\t\tarea1 = face._area1;\r\n\t\t\t\t\tarea2 = face._area2;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tarea1 = THREE.GeometryUtils.triangleArea( vA, vB, vD );\r\n\t\t\t\t\tarea2 = THREE.GeometryUtils.triangleArea( vB, vC, vD );\r\n\r\n\t\t\t\t\tface._area1 = area1;\r\n\t\t\t\t\tface._area2 = area2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tarea1 = THREE.GeometryUtils.triangleArea( vA, vB, vD ),\r\n\t\t\t\tarea2 = THREE.GeometryUtils.triangleArea( vB, vC, vD );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar r = THREE.GeometryUtils.random() * ( area1 + area2 );\r\n\r\n\t\t\tif ( r < area1 ) {\r\n\r\n\t\t\t\treturn THREE.GeometryUtils.randomPointInTriangle( vA, vB, vD );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn THREE.GeometryUtils.randomPointInTriangle( vB, vC, vD );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// Get uniformly distributed random points in mesh\r\n\t// \t- create array with cumulative sums of face areas\r\n\t//  - pick random number from 0 to total area\r\n\t//  - find corresponding place in area array by binary search\r\n\t//\t- get random point in face\r\n\r\n\trandomPointsInGeometry: function ( geometry, n ) {\r\n\r\n\t\tvar face, i,\r\n\t\t\tfaces = geometry.faces,\r\n\t\t\tvertices = geometry.vertices,\r\n\t\t\til = faces.length,\r\n\t\t\ttotalArea = 0,\r\n\t\t\tcumulativeAreas = [],\r\n\t\t\tvA, vB, vC, vD;\r\n\r\n\t\t// precompute face areas\r\n\r\n\t\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\t\tface = faces[ i ];\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tvA = vertices[ face.a ];\r\n\t\t\t\tvB = vertices[ face.b ];\r\n\t\t\t\tvC = vertices[ face.c ];\r\n\r\n\t\t\t\tface._area = THREE.GeometryUtils.triangleArea( vA, vB, vC );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tvA = vertices[ face.a ];\r\n\t\t\t\tvB = vertices[ face.b ];\r\n\t\t\t\tvC = vertices[ face.c ];\r\n\t\t\t\tvD = vertices[ face.d ];\r\n\r\n\t\t\t\tface._area1 = THREE.GeometryUtils.triangleArea( vA, vB, vD );\r\n\t\t\t\tface._area2 = THREE.GeometryUtils.triangleArea( vB, vC, vD );\r\n\r\n\t\t\t\tface._area = face._area1 + face._area2;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttotalArea += face._area;\r\n\r\n\t\t\tcumulativeAreas[ i ] = totalArea;\r\n\r\n\t\t}\r\n\r\n\t\t// binary search cumulative areas array\r\n\r\n\t\tfunction binarySearchIndices( value ) {\r\n\r\n\t\t\tfunction binarySearch( start, end ) {\r\n\r\n\t\t\t\t// return closest larger index\r\n\t\t\t\t// if exact number is not found\r\n\r\n\t\t\t\tif ( end < start )\r\n\t\t\t\t\treturn start;\r\n\r\n\t\t\t\tvar mid = start + Math.floor( ( end - start ) / 2 );\r\n\r\n\t\t\t\tif ( cumulativeAreas[ mid ] > value ) {\r\n\r\n\t\t\t\t\treturn binarySearch( start, mid - 1 );\r\n\r\n\t\t\t\t} else if ( cumulativeAreas[ mid ] < value ) {\r\n\r\n\t\t\t\t\treturn binarySearch( mid + 1, end );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn mid;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar result = binarySearch( 0, cumulativeAreas.length - 1 )\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t\t// pick random face weighted by face area\r\n\r\n\t\tvar r, index,\r\n\t\t\tresult = [];\r\n\r\n\t\tvar stats = {};\r\n\r\n\t\tfor ( i = 0; i < n; i ++ ) {\r\n\r\n\t\t\tr = THREE.GeometryUtils.random() * totalArea;\r\n\r\n\t\t\tindex = binarySearchIndices( r );\r\n\r\n\t\t\tresult[ i ] = THREE.GeometryUtils.randomPointInFace( faces[ index ], geometry, true );\r\n\r\n\t\t\tif ( ! stats[ index ] ) {\r\n\r\n\t\t\t\tstats[ index ] = 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstats[ index ] += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\t// Get triangle area (half of parallelogram)\r\n\t//\thttp://mathworld.wolfram.com/TriangleArea.html\r\n\r\n\ttriangleArea: function ( vectorA, vectorB, vectorC ) {\r\n\r\n\t\tvar tmp1 = THREE.GeometryUtils.__v1,\r\n\t\t\ttmp2 = THREE.GeometryUtils.__v2;\r\n\r\n\t\ttmp1.subVectors( vectorB, vectorA );\r\n\t\ttmp2.subVectors( vectorC, vectorA );\r\n\t\ttmp1.cross( tmp2 );\r\n\r\n\t\treturn 0.5 * tmp1.length();\r\n\r\n\t},\r\n\r\n\t// Center geometry so that 0,0,0 is in center of bounding box\r\n\r\n\tcenter: function ( geometry ) {\r\n\r\n\t\tgeometry.computeBoundingBox();\r\n\r\n\t\tvar bb = geometry.boundingBox;\r\n\r\n\t\tvar offset = new THREE.Vector3();\r\n\r\n\t\toffset.addVectors( bb.min, bb.max );\r\n\t\toffset.multiplyScalar( -0.5 );\r\n\r\n\t\tgeometry.applyMatrix( new THREE.Matrix4().makeTranslation( offset.x, offset.y, offset.z ) );\r\n\t\tgeometry.computeBoundingBox();\r\n\r\n\t\treturn offset;\r\n\r\n\t},\r\n\r\n\t// Normalize UVs to be from <0,1>\r\n\t// (for now just the first set of UVs)\r\n\r\n\tnormalizeUVs: function ( geometry ) {\r\n\r\n\t\tvar uvSet = geometry.faceVertexUvs[ 0 ];\r\n\r\n\t\tfor ( var i = 0, il = uvSet.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uvs = uvSet[ i ];\r\n\r\n\t\t\tfor ( var j = 0, jl = uvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t// texture repeat\r\n\r\n\t\t\t\tif( uvs[ j ].x !== 1.0 ) uvs[ j ].x = uvs[ j ].x - Math.floor( uvs[ j ].x );\r\n\t\t\t\tif( uvs[ j ].y !== 1.0 ) uvs[ j ].y = uvs[ j ].y - Math.floor( uvs[ j ].y );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttriangulateQuads: function ( geometry ) {\r\n\r\n\t\tvar i, il, j, jl;\r\n\r\n\t\tvar faces = [];\r\n\t\tvar faceUvs = [];\r\n\t\tvar faceVertexUvs = [];\r\n\r\n\t\tfor ( i = 0, il = geometry.faceUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tfaceUvs[ i ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tfaceVertexUvs[ i ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 0, il = geometry.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = geometry.faces[ i ];\r\n\r\n\t\t\tif ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tvar a = face.a;\r\n\t\t\t\tvar b = face.b;\r\n\t\t\t\tvar c = face.c;\r\n\t\t\t\tvar d = face.d;\r\n\r\n\t\t\t\tvar triA = new THREE.Face3();\r\n\t\t\t\tvar triB = new THREE.Face3();\r\n\r\n\t\t\t\ttriA.color.copy( face.color );\r\n\t\t\t\ttriB.color.copy( face.color );\r\n\r\n\t\t\t\ttriA.materialIndex = face.materialIndex;\r\n\t\t\t\ttriB.materialIndex = face.materialIndex;\r\n\r\n\t\t\t\ttriA.a = a;\r\n\t\t\t\ttriA.b = b;\r\n\t\t\t\ttriA.c = d;\r\n\r\n\t\t\t\ttriB.a = b;\r\n\t\t\t\ttriB.b = c;\r\n\t\t\t\ttriB.c = d;\r\n\r\n\t\t\t\tif ( face.vertexColors.length === 4 ) {\r\n\r\n\t\t\t\t\ttriA.vertexColors[ 0 ] = face.vertexColors[ 0 ].clone();\r\n\t\t\t\t\ttriA.vertexColors[ 1 ] = face.vertexColors[ 1 ].clone();\r\n\t\t\t\t\ttriA.vertexColors[ 2 ] = face.vertexColors[ 3 ].clone();\r\n\r\n\t\t\t\t\ttriB.vertexColors[ 0 ] = face.vertexColors[ 1 ].clone();\r\n\t\t\t\t\ttriB.vertexColors[ 1 ] = face.vertexColors[ 2 ].clone();\r\n\t\t\t\t\ttriB.vertexColors[ 2 ] = face.vertexColors[ 3 ].clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaces.push( triA, triB );\r\n\r\n\t\t\t\tfor ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tif ( geometry.faceVertexUvs[ j ].length ) {\r\n\r\n\t\t\t\t\t\tvar uvs = geometry.faceVertexUvs[ j ][ i ];\r\n\r\n\t\t\t\t\t\tvar uvA = uvs[ 0 ];\r\n\t\t\t\t\t\tvar uvB = uvs[ 1 ];\r\n\t\t\t\t\t\tvar uvC = uvs[ 2 ];\r\n\t\t\t\t\t\tvar uvD = uvs[ 3 ];\r\n\r\n\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvB.clone(), uvD.clone() ];\r\n\t\t\t\t\t\tvar uvsTriB = [ uvB.clone(), uvC.clone(), uvD.clone() ];\r\n\r\n\t\t\t\t\t\tfaceVertexUvs[ j ].push( uvsTriA, uvsTriB );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( j = 0, jl = geometry.faceUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tif ( geometry.faceUvs[ j ].length ) {\r\n\r\n\t\t\t\t\t\tvar faceUv = geometry.faceUvs[ j ][ i ];\r\n\r\n\t\t\t\t\t\tfaceUvs[ j ].push( faceUv, faceUv );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfaces.push( face );\r\n\r\n\t\t\t\tfor ( j = 0, jl = geometry.faceUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tfaceUvs[ j ].push( geometry.faceUvs[ j ][ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tfaceVertexUvs[ j ].push( geometry.faceVertexUvs[ j ][ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.faces = faces;\r\n\t\tgeometry.faceUvs = faceUvs;\r\n\t\tgeometry.faceVertexUvs = faceVertexUvs;\r\n\r\n\t\tgeometry.computeCentroids();\r\n\t\tgeometry.computeFaceNormals();\r\n\t\tgeometry.computeVertexNormals();\r\n\r\n\t\tif ( geometry.hasTangents ) geometry.computeTangents();\r\n\r\n\t},\r\n\r\n\tsetMaterialIndex: function ( geometry, index, startFace, endFace ){\r\n\r\n\t\tvar faces = geometry.faces;\r\n\t\tvar start = startFace || 0;\r\n\t\tvar end = endFace || faces.length - 1;\r\n\r\n\t\tfor ( var i = start; i <= end; i ++ ) {\r\n\r\n\t\t\tfaces[i].materialIndex = index;\r\n\r\n\t\t}\r\n\r\n    }\r\n\r\n};\r\n\r\nTHREE.GeometryUtils.random = THREE.Math.random16;\r\n\r\nTHREE.GeometryUtils.__v1 = new THREE.Vector3();\r\nTHREE.GeometryUtils.__v2 = new THREE.Vector3();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ImageUtils = {\r\n\r\n\tcrossOrigin: 'anonymous',\r\n\r\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tvar image = new Image();\r\n\t\tvar texture = new THREE.Texture( image, mapping );\r\n\r\n\t\tvar loader = new THREE.ImageLoader();\r\n\r\n\t\tloader.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\ttexture.image = event.content;\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t} );\r\n\r\n\t\tloader.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\tif ( onError ) onError( event.message );\r\n\r\n\t\t} );\r\n\r\n\t\tloader.crossOrigin = this.crossOrigin;\r\n\t\tloader.load( url, image );\r\n\r\n\t\ttexture.sourceFile = url;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadCompressedTexture: function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tvar texture = new THREE.CompressedTexture();\r\n\t\ttexture.mapping = mapping;\r\n\r\n\t\tvar request = new XMLHttpRequest();\r\n\r\n\t\trequest.onload = function () {\r\n\r\n\t\t\tvar buffer = request.response;\r\n\t\t\tvar dds = THREE.ImageUtils.parseDDS( buffer, true );\r\n\r\n\t\t\ttexture.format = dds.format;\r\n\r\n\t\t\ttexture.mipmaps = dds.mipmaps;\r\n\t\t\ttexture.image.width = dds.width;\r\n\t\t\ttexture.image.height = dds.height;\r\n\r\n\t\t\t// gl.generateMipmap fails for compressed textures\r\n\t\t\t// mipmaps must be embedded in the DDS file\r\n\t\t\t// or texture filters must not use mipmapping\r\n\r\n\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t}\r\n\r\n\t\trequest.onerror = onError;\r\n\r\n\t\trequest.open( 'GET', url, true );\r\n\t\trequest.responseType = \"arraybuffer\";\r\n\t\trequest.send( null );\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadTextureCube: function ( array, mapping, onLoad, onError ) {\r\n\r\n\t\tvar images = [];\r\n\t\timages.loadCount = 0;\r\n\r\n\t\tvar texture = new THREE.Texture();\r\n\t\ttexture.image = images;\r\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\r\n\r\n\t\t// no flipping needed for cube textures\r\n\r\n\t\ttexture.flipY = false;\r\n\r\n\t\tfor ( var i = 0, il = array.length; i < il; ++ i ) {\r\n\r\n\t\t\tvar cubeImage = new Image();\r\n\t\t\timages[ i ] = cubeImage;\r\n\r\n\t\t\tcubeImage.onload = function () {\r\n\r\n\t\t\t\timages.loadCount += 1;\r\n\r\n\t\t\t\tif ( images.loadCount === 6 ) {\r\n\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t\tcubeImage.onerror = onError;\r\n\r\n\t\t\tcubeImage.crossOrigin = this.crossOrigin;\r\n\t\t\tcubeImage.src = array[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadCompressedTextureCube: function ( array, mapping, onLoad, onError ) {\r\n\r\n\t\tvar images = [];\r\n\t\timages.loadCount = 0;\r\n\r\n\t\tvar texture = new THREE.CompressedTexture();\r\n\t\ttexture.image = images;\r\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\r\n\r\n\t\t// no flipping for cube textures\r\n\t\t// (also flipping doesn't work for compressed textures )\r\n\r\n\t\ttexture.flipY = false;\r\n\r\n\t\t// can't generate mipmaps for compressed textures\r\n\t\t// mips must be embedded in DDS files\r\n\r\n\t\ttexture.generateMipmaps = false;\r\n\r\n\t\tvar generateCubeFaceCallback = function ( rq, img ) {\r\n\r\n\t\t\treturn function () {\r\n\r\n\t\t\t\tvar buffer = rq.response;\r\n\t\t\t\tvar dds = THREE.ImageUtils.parseDDS( buffer, true );\r\n\r\n\t\t\t\timg.format = dds.format;\r\n\r\n\t\t\t\timg.mipmaps = dds.mipmaps;\r\n\t\t\t\timg.width = dds.width;\r\n\t\t\t\timg.height = dds.height;\r\n\r\n\t\t\t\timages.loadCount += 1;\r\n\r\n\t\t\t\tif ( images.loadCount === 6 ) {\r\n\r\n\t\t\t\t\ttexture.format = dds.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// compressed cubemap textures as 6 separate DDS files\r\n\r\n\t\tif ( array instanceof Array ) {\r\n\r\n\t\t\tfor ( var i = 0, il = array.length; i < il; ++ i ) {\r\n\r\n\t\t\t\tvar cubeImage = {};\r\n\t\t\t\timages[ i ] = cubeImage;\r\n\r\n\t\t\t\tvar request = new XMLHttpRequest();\r\n\r\n\t\t\t\trequest.onload = generateCubeFaceCallback( request, cubeImage );\r\n\t\t\t\trequest.onerror = onError;\r\n\r\n\t\t\t\tvar url = array[ i ];\r\n\r\n\t\t\t\trequest.open( 'GET', url, true );\r\n\t\t\t\trequest.responseType = \"arraybuffer\";\r\n\t\t\t\trequest.send( null );\r\n\r\n\t\t\t}\r\n\r\n\t\t// compressed cubemap texture stored in a single DDS file\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar url = array;\r\n\t\t\tvar request = new XMLHttpRequest();\r\n\r\n\t\t\trequest.onload = function( ) {\r\n\r\n\t\t\t\tvar buffer = request.response;\r\n\t\t\t\tvar dds = THREE.ImageUtils.parseDDS( buffer, true );\r\n\r\n\t\t\t\tif ( dds.isCubemap ) {\r\n\r\n\t\t\t\t\tvar faces = dds.mipmaps.length / dds.mipmapCount;\r\n\r\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\r\n\r\n\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < dds.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( dds.mipmaps[ f * dds.mipmapCount + i ] );\r\n\t\t\t\t\t\t\timages[ f ].format = dds.format;\r\n\t\t\t\t\t\t\timages[ f ].width = dds.width;\r\n\t\t\t\t\t\t\timages[ f ].height = dds.height;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.format = dds.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\trequest.onerror = onError;\r\n\r\n\t\t\trequest.open( 'GET', url, true );\r\n\t\t\trequest.responseType = \"arraybuffer\";\r\n\t\t\trequest.send( null );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tparseDDS: function ( buffer, loadMipmaps ) {\r\n\r\n\t\tvar dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };\r\n\r\n\t\t// Adapted from @toji's DDS utils\r\n\t\t//\thttps://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\r\n\r\n\t\t// All values and structures referenced from:\r\n\t\t// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\r\n\r\n\t\tvar DDS_MAGIC = 0x20534444;\r\n\r\n\t\tvar DDSD_CAPS = 0x1,\r\n\t\t\tDDSD_HEIGHT = 0x2,\r\n\t\t\tDDSD_WIDTH = 0x4,\r\n\t\t\tDDSD_PITCH = 0x8,\r\n\t\t\tDDSD_PIXELFORMAT = 0x1000,\r\n\t\t\tDDSD_MIPMAPCOUNT = 0x20000,\r\n\t\t\tDDSD_LINEARSIZE = 0x80000,\r\n\t\t\tDDSD_DEPTH = 0x800000;\r\n\r\n\t\tvar DDSCAPS_COMPLEX = 0x8,\r\n\t\t\tDDSCAPS_MIPMAP = 0x400000,\r\n\t\t\tDDSCAPS_TEXTURE = 0x1000;\r\n\r\n\t\tvar DDSCAPS2_CUBEMAP = 0x200,\r\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\r\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\r\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\r\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\r\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\r\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,\r\n\t\t\tDDSCAPS2_VOLUME = 0x200000;\r\n\r\n\t\tvar DDPF_ALPHAPIXELS = 0x1,\r\n\t\t\tDDPF_ALPHA = 0x2,\r\n\t\t\tDDPF_FOURCC = 0x4,\r\n\t\t\tDDPF_RGB = 0x40,\r\n\t\t\tDDPF_YUV = 0x200,\r\n\t\t\tDDPF_LUMINANCE = 0x20000;\r\n\r\n\t\tfunction fourCCToInt32( value ) {\r\n\r\n\t\t\treturn value.charCodeAt(0) +\r\n\t\t\t\t(value.charCodeAt(1) << 8) +\r\n\t\t\t\t(value.charCodeAt(2) << 16) +\r\n\t\t\t\t(value.charCodeAt(3) << 24);\r\n\r\n\t\t}\r\n\r\n\t\tfunction int32ToFourCC( value ) {\r\n\r\n\t\t\treturn String.fromCharCode(\r\n\t\t\t\tvalue & 0xff,\r\n\t\t\t\t(value >> 8) & 0xff,\r\n\t\t\t\t(value >> 16) & 0xff,\r\n\t\t\t\t(value >> 24) & 0xff\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tvar FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\r\n\t\tvar FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\r\n\t\tvar FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\r\n\r\n\t\tvar headerLengthInt = 31; // The header length in 32 bit ints\r\n\r\n\t\t// Offsets into the header array\r\n\r\n\t\tvar off_magic = 0;\r\n\r\n\t\tvar off_size = 1;\r\n\t\tvar off_flags = 2;\r\n\t\tvar off_height = 3;\r\n\t\tvar off_width = 4;\r\n\r\n\t\tvar off_mipmapCount = 7;\r\n\r\n\t\tvar off_pfFlags = 20;\r\n\t\tvar off_pfFourCC = 21;\r\n\r\n\t\tvar off_caps = 27;\r\n\t\tvar off_caps2 = 28;\r\n\t\tvar off_caps3 = 29;\r\n\t\tvar off_caps4 = 30;\r\n\r\n\t\t// Parse header\r\n\r\n\t\tvar header = new Int32Array( buffer, 0, headerLengthInt );\r\n\r\n\t\tif ( header[ off_magic ] !== DDS_MAGIC ) {\r\n\r\n\t\t\tconsole.error( \"ImageUtils.parseDDS(): Invalid magic number in DDS header\" );\r\n\t\t\treturn dds;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! header[ off_pfFlags ] & DDPF_FOURCC ) {\r\n\r\n\t\t\tconsole.error( \"ImageUtils.parseDDS(): Unsupported format, must contain a FourCC code\" );\r\n\t\t\treturn dds;\r\n\r\n\t\t}\r\n\r\n\t\tvar blockBytes;\r\n\r\n\t\tvar fourCC = header[ off_pfFourCC ];\r\n\r\n\t\tswitch ( fourCC ) {\r\n\r\n\t\t\tcase FOURCC_DXT1:\r\n\r\n\t\t\t\tblockBytes = 8;\r\n\t\t\t\tdds.format = THREE.RGB_S3TC_DXT1_Format;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase FOURCC_DXT3:\r\n\r\n\t\t\t\tblockBytes = 16;\r\n\t\t\t\tdds.format = THREE.RGBA_S3TC_DXT3_Format;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase FOURCC_DXT5:\r\n\r\n\t\t\t\tblockBytes = 16;\r\n\t\t\t\tdds.format = THREE.RGBA_S3TC_DXT5_Format;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tconsole.error( \"ImageUtils.parseDDS(): Unsupported FourCC code: \", int32ToFourCC( fourCC ) );\r\n\t\t\t\treturn dds;\r\n\r\n\t\t}\r\n\r\n\t\tdds.mipmapCount = 1;\r\n\r\n\t\tif ( header[ off_flags ] & DDSD_MIPMAPCOUNT && loadMipmaps !== false ) {\r\n\r\n\t\t\tdds.mipmapCount = Math.max( 1, header[ off_mipmapCount ] );\r\n\r\n\t\t}\r\n\r\n\t\t//TODO: Verify that all faces of the cubemap are present with DDSCAPS2_CUBEMAP_POSITIVEX, etc.\r\n\r\n\t\tdds.isCubemap = header[ off_caps2 ] & DDSCAPS2_CUBEMAP ? true : false;\r\n\r\n\t\tdds.width = header[ off_width ];\r\n\t\tdds.height = header[ off_height ];\r\n\r\n\t\tvar dataOffset = header[ off_size ] + 4;\r\n\r\n\t\t// Extract mipmaps buffers\r\n\r\n\t\tvar width = dds.width;\r\n\t\tvar height = dds.height;\r\n\r\n\t\tvar faces = dds.isCubemap ? 6 : 1;\r\n\r\n\t\tfor ( var face = 0; face < faces; face ++ ) {\r\n\r\n\t\t\tfor ( var i = 0; i < dds.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\tvar dataLength = Math.max( 4, width ) / 4 * Math.max( 4, height ) / 4 * blockBytes;\r\n\t\t\t\tvar byteArray = new Uint8Array( buffer, dataOffset, dataLength );\r\n\r\n\t\t\t\tvar mipmap = { \"data\": byteArray, \"width\": width, \"height\": height };\r\n\t\t\t\tdds.mipmaps.push( mipmap );\r\n\r\n\t\t\t\tdataOffset += dataLength;\r\n\r\n\t\t\t\twidth = Math.max( width * 0.5, 1 );\r\n\t\t\t\theight = Math.max( height * 0.5, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\twidth = dds.width;\r\n\t\t\theight = dds.height;\r\n\r\n\t\t}\r\n\r\n\t\treturn dds;\r\n\r\n\t},\r\n\r\n\tgetNormalMap: function ( image, depth ) {\r\n\r\n\t\t// Adapted from http://www.paulbrunt.co.uk/lab/heightnormal/\r\n\r\n\t\tvar cross = function ( a, b ) {\r\n\r\n\t\t\treturn [ a[ 1 ] * b[ 2 ] - a[ 2 ] * b[ 1 ], a[ 2 ] * b[ 0 ] - a[ 0 ] * b[ 2 ], a[ 0 ] * b[ 1 ] - a[ 1 ] * b[ 0 ] ];\r\n\r\n\t\t}\r\n\r\n\t\tvar subtract = function ( a, b ) {\r\n\r\n\t\t\treturn [ a[ 0 ] - b[ 0 ], a[ 1 ] - b[ 1 ], a[ 2 ] - b[ 2 ] ];\r\n\r\n\t\t}\r\n\r\n\t\tvar normalize = function ( a ) {\r\n\r\n\t\t\tvar l = Math.sqrt( a[ 0 ] * a[ 0 ] + a[ 1 ] * a[ 1 ] + a[ 2 ] * a[ 2 ] );\r\n\t\t\treturn [ a[ 0 ] / l, a[ 1 ] / l, a[ 2 ] / l ];\r\n\r\n\t\t}\r\n\r\n\t\tdepth = depth | 1;\r\n\r\n\t\tvar width = image.width;\r\n\t\tvar height = image.height;\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\tcanvas.width = width;\r\n\t\tcanvas.height = height;\r\n\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\t\tcontext.drawImage( image, 0, 0 );\r\n\r\n\t\tvar data = context.getImageData( 0, 0, width, height ).data;\r\n\t\tvar imageData = context.createImageData( width, height );\r\n\t\tvar output = imageData.data;\r\n\r\n\t\tfor ( var x = 0; x < width; x ++ ) {\r\n\r\n\t\t\tfor ( var y = 0; y < height; y ++ ) {\r\n\r\n\t\t\t\tvar ly = y - 1 < 0 ? 0 : y - 1;\r\n\t\t\t\tvar uy = y + 1 > height - 1 ? height - 1 : y + 1;\r\n\t\t\t\tvar lx = x - 1 < 0 ? 0 : x - 1;\r\n\t\t\t\tvar ux = x + 1 > width - 1 ? width - 1 : x + 1;\r\n\r\n\t\t\t\tvar points = [];\r\n\t\t\t\tvar origin = [ 0, 0, data[ ( y * width + x ) * 4 ] / 255 * depth ];\r\n\t\t\t\tpoints.push( [ - 1, 0, data[ ( y * width + lx ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ - 1, - 1, data[ ( ly * width + lx ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ 0, - 1, data[ ( ly * width + x ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [  1, - 1, data[ ( ly * width + ux ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ 1, 0, data[ ( y * width + ux ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ 1, 1, data[ ( uy * width + ux ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ 0, 1, data[ ( uy * width + x ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ - 1, 1, data[ ( uy * width + lx ) * 4 ] / 255 * depth ] );\r\n\r\n\t\t\t\tvar normals = [];\r\n\t\t\t\tvar num_points = points.length;\r\n\r\n\t\t\t\tfor ( var i = 0; i < num_points; i ++ ) {\r\n\r\n\t\t\t\t\tvar v1 = points[ i ];\r\n\t\t\t\t\tvar v2 = points[ ( i + 1 ) % num_points ];\r\n\t\t\t\t\tv1 = subtract( v1, origin );\r\n\t\t\t\t\tv2 = subtract( v2, origin );\r\n\t\t\t\t\tnormals.push( normalize( cross( v1, v2 ) ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar normal = [ 0, 0, 0 ];\r\n\r\n\t\t\t\tfor ( var i = 0; i < normals.length; i ++ ) {\r\n\r\n\t\t\t\t\tnormal[ 0 ] += normals[ i ][ 0 ];\r\n\t\t\t\t\tnormal[ 1 ] += normals[ i ][ 1 ];\r\n\t\t\t\t\tnormal[ 2 ] += normals[ i ][ 2 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnormal[ 0 ] /= normals.length;\r\n\t\t\t\tnormal[ 1 ] /= normals.length;\r\n\t\t\t\tnormal[ 2 ] /= normals.length;\r\n\r\n\t\t\t\tvar idx = ( y * width + x ) * 4;\r\n\r\n\t\t\t\toutput[ idx ] = ( ( normal[ 0 ] + 1.0 ) / 2.0 * 255 ) | 0;\r\n\t\t\t\toutput[ idx + 1 ] = ( ( normal[ 1 ] + 1.0 ) / 2.0 * 255 ) | 0;\r\n\t\t\t\toutput[ idx + 2 ] = ( normal[ 2 ] * 255 ) | 0;\r\n\t\t\t\toutput[ idx + 3 ] = 255;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tcontext.putImageData( imageData, 0, 0 );\r\n\r\n\t\treturn canvas;\r\n\r\n\t},\r\n\r\n\tgenerateDataTexture: function ( width, height, color ) {\r\n\r\n\t\tvar size = width * height;\r\n\t\tvar data = new Uint8Array( 3 * size );\r\n\r\n\t\tvar r = Math.floor( color.r * 255 );\r\n\t\tvar g = Math.floor( color.g * 255 );\r\n\t\tvar b = Math.floor( color.b * 255 );\r\n\r\n\t\tfor ( var i = 0; i < size; i ++ ) {\r\n\r\n\t\t\tdata[ i * 3 ] \t  = r;\r\n\t\t\tdata[ i * 3 + 1 ] = g;\r\n\t\t\tdata[ i * 3 + 2 ] = b;\r\n\r\n\t\t}\r\n\r\n\t\tvar texture = new THREE.DataTexture( data, width, height, THREE.RGBFormat );\r\n\t\ttexture.needsUpdate = true;\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SceneUtils = {\r\n\r\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\r\n\r\n\t\tvar group = new THREE.Object3D();\r\n\r\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\r\n\r\n\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn group;\r\n\r\n\t},\r\n\r\n\tdetach : function ( child, parent, scene ) {\r\n\r\n\t\tchild.applyMatrix( parent.matrixWorld );\r\n\t\tparent.remove( child );\r\n\t\tscene.add( child );\r\n\r\n\t},\r\n\r\n\tattach: function ( child, scene, parent ) {\r\n\r\n\t\tvar matrixWorldInverse = new THREE.Matrix4();\r\n\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\r\n\t\tchild.applyMatrix( matrixWorldInverse );\r\n\r\n\t\tscene.remove( child );\r\n\t\tparent.add( child );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * For Text operations in three.js (See TextGeometry)\r\n *\r\n * It uses techniques used in:\r\n *\r\n * \ttypeface.js and canvastext\r\n * \t\tFor converting fonts and rendering with javascript\r\n *\t\thttp://typeface.neocracy.org\r\n *\r\n *\tTriangulation ported from AS3\r\n *\t\tSimple Polygon Triangulation\r\n *\t\thttp://actionsnippet.com/?p=1462\r\n *\r\n * \tA Method to triangulate shapes with holes\r\n *\t\thttp://www.sakri.net/blog/2009/06/12/an-approach-to-triangulating-polygons-with-holes/\r\n *\r\n */\r\n\r\nTHREE.FontUtils = {\r\n\r\n\tfaces : {},\r\n\r\n\t// Just for now. face[weight][style]\r\n\r\n\tface : \"helvetiker\",\r\n\tweight: \"normal\",\r\n\tstyle : \"normal\",\r\n\tsize : 150,\r\n\tdivisions : 10,\r\n\r\n\tgetFace : function() {\r\n\r\n\t\treturn this.faces[ this.face ][ this.weight ][ this.style ];\r\n\r\n\t},\r\n\r\n\tloadFace : function( data ) {\r\n\r\n\t\tvar family = data.familyName.toLowerCase();\r\n\r\n\t\tvar ThreeFont = this;\r\n\r\n\t\tThreeFont.faces[ family ] = ThreeFont.faces[ family ] || {};\r\n\r\n\t\tThreeFont.faces[ family ][ data.cssFontWeight ] = ThreeFont.faces[ family ][ data.cssFontWeight ] || {};\r\n\t\tThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;\r\n\r\n\t\tvar face = ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tdrawText : function( text ) {\r\n\r\n\t\tvar characterPts = [], allPts = [];\r\n\r\n\t\t// RenderText\r\n\r\n\t\tvar i, p,\r\n\t\t\tface = this.getFace(),\r\n\t\t\tscale = this.size / face.resolution,\r\n\t\t\toffset = 0,\r\n\t\t\tchars = String( text ).split( '' ),\r\n\t\t\tlength = chars.length;\r\n\r\n\t\tvar fontPaths = [];\r\n\r\n\t\tfor ( i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tvar path = new THREE.Path();\r\n\r\n\t\t\tvar ret = this.extractGlyphPoints( chars[ i ], face, scale, offset, path );\r\n\t\t\toffset += ret.offset;\r\n\r\n\t\t\tfontPaths.push( ret.path );\r\n\r\n\t\t}\r\n\r\n\t\t// get the width\r\n\r\n\t\tvar width = offset / 2;\r\n\t\t//\r\n\t\t// for ( p = 0; p < allPts.length; p++ ) {\r\n\t\t//\r\n\t\t// \tallPts[ p ].x -= width;\r\n\t\t//\r\n\t\t// }\r\n\r\n\t\t//var extract = this.extractPoints( allPts, characterPts );\r\n\t\t//extract.contour = allPts;\r\n\r\n\t\t//extract.paths = fontPaths;\r\n\t\t//extract.offset = width;\r\n\r\n\t\treturn { paths : fontPaths, offset : width };\r\n\r\n\t},\r\n\r\n\r\n\r\n\r\n\textractGlyphPoints : function( c, face, scale, offset, path ) {\r\n\r\n\t\tvar pts = [];\r\n\r\n\t\tvar i, i2, divisions,\r\n\t\t\toutline, action, length,\r\n\t\t\tscaleX, scaleY,\r\n\t\t\tx, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2,\r\n\t\t\tlaste,\r\n\t\t\tglyph = face.glyphs[ c ] || face.glyphs[ '?' ];\r\n\r\n\t\tif ( !glyph ) return;\r\n\r\n\t\tif ( glyph.o ) {\r\n\r\n\t\t\toutline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\r\n\t\t\tlength = outline.length;\r\n\r\n\t\t\tscaleX = scale;\r\n\t\t\tscaleY = scale;\r\n\r\n\t\t\tfor ( i = 0; i < length; ) {\r\n\r\n\t\t\t\taction = outline[ i ++ ];\r\n\r\n\t\t\t\t//console.log( action );\r\n\r\n\t\t\t\tswitch( action ) {\r\n\r\n\t\t\t\tcase 'm':\r\n\r\n\t\t\t\t\t// Move To\r\n\r\n\t\t\t\t\tx = outline[ i++ ] * scaleX + offset;\r\n\t\t\t\t\ty = outline[ i++ ] * scaleY;\r\n\r\n\t\t\t\t\tpath.moveTo( x, y );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'l':\r\n\r\n\t\t\t\t\t// Line To\r\n\r\n\t\t\t\t\tx = outline[ i++ ] * scaleX + offset;\r\n\t\t\t\t\ty = outline[ i++ ] * scaleY;\r\n\t\t\t\t\tpath.lineTo(x,y);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'q':\r\n\r\n\t\t\t\t\t// QuadraticCurveTo\r\n\r\n\t\t\t\t\tcpx  = outline[ i++ ] * scaleX + offset;\r\n\t\t\t\t\tcpy  = outline[ i++ ] * scaleY;\r\n\t\t\t\t\tcpx1 = outline[ i++ ] * scaleX + offset;\r\n\t\t\t\t\tcpy1 = outline[ i++ ] * scaleY;\r\n\r\n\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\r\n\r\n\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\r\n\t\t\t\t\tif ( laste ) {\r\n\r\n\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t\t\tfor ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\tvar tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );\r\n\t\t\t\t\t\t\tvar ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );\r\n\t\t\t\t\t  }\r\n\r\n\t\t\t\t  }\r\n\r\n\t\t\t\t  break;\r\n\r\n\t\t\t\tcase 'b':\r\n\r\n\t\t\t\t\t// Cubic Bezier Curve\r\n\r\n\t\t\t\t\tcpx  = outline[ i++ ] *  scaleX + offset;\r\n\t\t\t\t\tcpy  = outline[ i++ ] *  scaleY;\r\n\t\t\t\t\tcpx1 = outline[ i++ ] *  scaleX + offset;\r\n\t\t\t\t\tcpy1 = outline[ i++ ] * -scaleY;\r\n\t\t\t\t\tcpx2 = outline[ i++ ] *  scaleX + offset;\r\n\t\t\t\t\tcpy2 = outline[ i++ ] * -scaleY;\r\n\r\n\t\t\t\t\tpath.bezierCurveTo( cpx, cpy, cpx1, cpy1, cpx2, cpy2 );\r\n\r\n\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\r\n\t\t\t\t\tif ( laste ) {\r\n\r\n\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t\t\tfor ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\tvar tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\t\t\t\tvar ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\r\n\t\treturn { offset: glyph.ha*scale, path:path};\r\n\t}\r\n\r\n};\r\n\r\n\r\nTHREE.FontUtils.generateShapes = function( text, parameters ) {\r\n\r\n\t// Parameters \r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar size = parameters.size !== undefined ? parameters.size : 100;\r\n\tvar curveSegments = parameters.curveSegments !== undefined ? parameters.curveSegments: 4;\r\n\r\n\tvar font = parameters.font !== undefined ? parameters.font : \"helvetiker\";\r\n\tvar weight = parameters.weight !== undefined ? parameters.weight : \"normal\";\r\n\tvar style = parameters.style !== undefined ? parameters.style : \"normal\";\r\n\r\n\tTHREE.FontUtils.size = size;\r\n\tTHREE.FontUtils.divisions = curveSegments;\r\n\r\n\tTHREE.FontUtils.face = font;\r\n\tTHREE.FontUtils.weight = weight;\r\n\tTHREE.FontUtils.style = style;\r\n\r\n\t// Get a Font data json object\r\n\r\n\tvar data = THREE.FontUtils.drawText( text );\r\n\r\n\tvar paths = data.paths;\r\n\tvar shapes = [];\r\n\r\n\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\r\n\r\n\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\r\n\r\n\t}\r\n\r\n\treturn shapes;\r\n\r\n};\r\n\r\n\r\n/**\r\n * This code is a quick port of code written in C++ which was submitted to\r\n * flipcode.com by John W. Ratcliff  // July 22, 2000\r\n * See original code and more information here:\r\n * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\r\n *\r\n * ported to actionscript by Zevan Rosser\r\n * www.actionsnippet.com\r\n *\r\n * ported to javascript by Joshua Koo\r\n * http://www.lab4games.net/zz85/blog\r\n *\r\n */\r\n\r\n\r\n( function( namespace ) {\r\n\r\n\tvar EPSILON = 0.0000000001;\r\n\r\n\t// takes in an contour array and returns\r\n\r\n\tvar process = function( contour, indices ) {\r\n\r\n\t\tvar n = contour.length;\r\n\r\n\t\tif ( n < 3 ) return null;\r\n\r\n\t\tvar result = [],\r\n\t\t\tverts = [],\r\n\t\t\tvertIndices = [];\r\n\r\n\t\t/* we want a counter-clockwise polygon in verts */\r\n\r\n\t\tvar u, v, w;\r\n\r\n\t\tif ( area( contour ) > 0.0 ) {\r\n\r\n\t\t\tfor ( v = 0; v < n; v++ ) verts[ v ] = v;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( v = 0; v < n; v++ ) verts[ v ] = ( n - 1 ) - v;\r\n\r\n\t\t}\r\n\r\n\t\tvar nv = n;\r\n\r\n\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\r\n\r\n\t\tvar count = 2 * nv;   /* error detection */\r\n\r\n\t\tfor( v = nv - 1; nv > 2; ) {\r\n\r\n\t\t\t/* if we loop, it is probably a non-simple polygon */\r\n\r\n\t\t\tif ( ( count-- ) <= 0 ) {\r\n\r\n\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\r\n\r\n\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\r\n\t\t\t\t//return null;\r\n\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\r\n\t\t\t\tconsole.log( \"Warning, unable to triangulate polygon!\" );\r\n\r\n\t\t\t\tif ( indices ) return vertIndices;\r\n\t\t\t\treturn result;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\r\n\r\n\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\r\n\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\r\n\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\r\n\r\n\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\r\n\r\n\t\t\t\tvar a, b, c, s, t;\r\n\r\n\t\t\t\t/* true names of the vertices */\r\n\r\n\t\t\t\ta = verts[ u ];\r\n\t\t\t\tb = verts[ v ];\r\n\t\t\t\tc = verts[ w ];\r\n\r\n\t\t\t\t/* output Triangle */\r\n\r\n\t\t\t\tresult.push( [ contour[ a ],\r\n\t\t\t\t\tcontour[ b ],\r\n\t\t\t\t\tcontour[ c ] ] );\r\n\r\n\r\n\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\r\n\r\n\t\t\t\t/* remove v from the remaining polygon */\r\n\r\n\t\t\t\tfor( s = v, t = v + 1; t < nv; s++, t++ ) {\r\n\r\n\t\t\t\t\tverts[ s ] = verts[ t ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnv--;\r\n\r\n\t\t\t\t/* reset error detection counter */\r\n\r\n\t\t\t\tcount = 2 * nv;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( indices ) return vertIndices;\r\n\t\treturn result;\r\n\r\n\t};\r\n\r\n\t// calculate area of the contour polygon\r\n\r\n\tvar area = function ( contour ) {\r\n\r\n\t\tvar n = contour.length;\r\n\t\tvar a = 0.0;\r\n\r\n\t\tfor( var p = n - 1, q = 0; q < n; p = q++ ) {\r\n\r\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\r\n\t\t}\r\n\r\n\t\treturn a * 0.5;\r\n\r\n\t};\r\n\r\n\tvar snip = function ( contour, u, v, w, n, verts ) {\r\n\r\n\t\tvar p;\r\n\t\tvar ax, ay, bx, by;\r\n\t\tvar cx, cy, px, py;\r\n\r\n\t\tax = contour[ verts[ u ] ].x;\r\n\t\tay = contour[ verts[ u ] ].y;\r\n\r\n\t\tbx = contour[ verts[ v ] ].x;\r\n\t\tby = contour[ verts[ v ] ].y;\r\n\r\n\t\tcx = contour[ verts[ w ] ].x;\r\n\t\tcy = contour[ verts[ w ] ].y;\r\n\r\n\t\tif ( EPSILON > (((bx-ax)*(cy-ay)) - ((by-ay)*(cx-ax))) ) return false;\r\n\r\n\t\tvar aX, aY, bX, bY, cX, cY;\r\n\t\tvar apx, apy, bpx, bpy, cpx, cpy;\r\n\t\tvar cCROSSap, bCROSScp, aCROSSbp;\r\n\r\n\t\taX = cx - bx;  aY = cy - by;\r\n\t\tbX = ax - cx;  bY = ay - cy;\r\n\t\tcX = bx - ax;  cY = by - ay;\r\n\r\n\t\tfor ( p = 0; p < n; p++ ) {\r\n\r\n\t\t\tif( (p === u) || (p === v) || (p === w) ) continue;\r\n\r\n\t\t\tpx = contour[ verts[ p ] ].x\r\n\t\t\tpy = contour[ verts[ p ] ].y\r\n\r\n\t\t\tapx = px - ax;  apy = py - ay;\r\n\t\t\tbpx = px - bx;  bpy = py - by;\r\n\t\t\tcpx = px - cx;  cpy = py - cy;\r\n\r\n\t\t\t// see if p is inside triangle abc\r\n\r\n\t\t\taCROSSbp = aX*bpy - aY*bpx;\r\n\t\t\tcCROSSap = cX*apy - cY*apx;\r\n\t\t\tbCROSScp = bX*cpy - bY*cpx;\r\n\r\n\t\t\tif ( (aCROSSbp >= 0.0) && (bCROSScp >= 0.0) && (cCROSSap >= 0.0) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n\r\n\tnamespace.Triangulate = process;\r\n\tnamespace.Triangulate.area = area;\r\n\r\n\treturn namespace;\r\n\r\n})(THREE.FontUtils);\r\n\r\n// To use the typeface.js face files, hook up the API\r\nself._typeface_js = { faces: THREE.FontUtils.faces, loadFace: THREE.FontUtils.loadFace };/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Extensible curve object\r\n *\r\n * Some common of Curve methods\r\n * .getPoint(t), getTangent(t)\r\n * .getPointAt(u), getTagentAt(u)\r\n * .getPoints(), .getSpacedPoints()\r\n * .getLength()\r\n * .updateArcLengths()\r\n *\r\n * This file contains following classes:\r\n *\r\n * -- 2d classes --\r\n * THREE.Curve\r\n * THREE.LineCurve\r\n * THREE.QuadraticBezierCurve\r\n * THREE.CubicBezierCurve\r\n * THREE.SplineCurve\r\n * THREE.ArcCurve\r\n * THREE.EllipseCurve\r\n *\r\n * -- 3d classes --\r\n * THREE.LineCurve3\r\n * THREE.QuadraticBezierCurve3\r\n * THREE.CubicBezierCurve3\r\n * THREE.SplineCurve3\r\n * THREE.ClosedSplineCurve3\r\n *\r\n * A series of curves can be represented as a THREE.CurvePath\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tAbstract Curve base class\r\n **************************************************************/\r\n\r\nTHREE.Curve = function () {\r\n\r\n};\r\n\r\n// Virtual base class method to overwrite and implement in subclasses\r\n//\t- t [0 .. 1]\r\n\r\nTHREE.Curve.prototype.getPoint = function ( t ) {\r\n\r\n\tconsole.log( \"Warning, getPoint() not implemented!\" );\r\n\treturn null;\r\n\r\n};\r\n\r\n// Get point at relative position in curve according to arc length\r\n// - u [0 .. 1]\r\n\r\nTHREE.Curve.prototype.getPointAt = function ( u ) {\r\n\r\n\tvar t = this.getUtoTmapping( u );\r\n\treturn this.getPoint( t );\r\n\r\n};\r\n\r\n// Get sequence of points using getPoint( t )\r\n\r\nTHREE.Curve.prototype.getPoints = function ( divisions ) {\r\n\r\n\tif ( !divisions ) divisions = 5;\r\n\r\n\tvar d, pts = [];\r\n\r\n\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\tpts.push( this.getPoint( d / divisions ) );\r\n\r\n\t}\r\n\r\n\treturn pts;\r\n\r\n};\r\n\r\n// Get sequence of points using getPointAt( u )\r\n\r\nTHREE.Curve.prototype.getSpacedPoints = function ( divisions ) {\r\n\r\n\tif ( !divisions ) divisions = 5;\r\n\r\n\tvar d, pts = [];\r\n\r\n\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\tpts.push( this.getPointAt( d / divisions ) );\r\n\r\n\t}\r\n\r\n\treturn pts;\r\n\r\n};\r\n\r\n// Get total curve arc length\r\n\r\nTHREE.Curve.prototype.getLength = function () {\r\n\r\n\tvar lengths = this.getLengths();\r\n\treturn lengths[ lengths.length - 1 ];\r\n\r\n};\r\n\r\n// Get list of cumulative segment lengths\r\n\r\nTHREE.Curve.prototype.getLengths = function ( divisions ) {\r\n\r\n\tif ( !divisions ) divisions = (this.__arcLengthDivisions) ? (this.__arcLengthDivisions): 200;\r\n\r\n\tif ( this.cacheArcLengths\r\n\t\t&& ( this.cacheArcLengths.length == divisions + 1 )\r\n\t\t&& !this.needsUpdate) {\r\n\r\n\t\t//console.log( \"cached\", this.cacheArcLengths );\r\n\t\treturn this.cacheArcLengths;\r\n\r\n\t}\r\n\r\n\tthis.needsUpdate = false;\r\n\r\n\tvar cache = [];\r\n\tvar current, last = this.getPoint( 0 );\r\n\tvar p, sum = 0;\r\n\r\n\tcache.push( 0 );\r\n\r\n\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\r\n\t\tcurrent = this.getPoint ( p / divisions );\r\n\t\tsum += current.distanceTo( last );\r\n\t\tcache.push( sum );\r\n\t\tlast = current;\r\n\r\n\t}\r\n\r\n\tthis.cacheArcLengths = cache;\r\n\r\n\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\r\n\r\n};\r\n\r\n\r\nTHREE.Curve.prototype.updateArcLengths = function() {\r\n\tthis.needsUpdate = true;\r\n\tthis.getLengths();\r\n};\r\n\r\n// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equi distance\r\n\r\nTHREE.Curve.prototype.getUtoTmapping = function ( u, distance ) {\r\n\r\n\tvar arcLengths = this.getLengths();\r\n\r\n\tvar i = 0, il = arcLengths.length;\r\n\r\n\tvar targetArcLength; // The targeted u distance value to get\r\n\r\n\tif ( distance ) {\r\n\r\n\t\ttargetArcLength = distance;\r\n\r\n\t} else {\r\n\r\n\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\r\n\t}\r\n\r\n\t//var time = Date.now();\r\n\r\n\t// binary search for the index with largest value smaller than target u distance\r\n\r\n\tvar low = 0, high = il - 1, comparison;\r\n\r\n\twhile ( low <= high ) {\r\n\r\n\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\r\n\t\tif ( comparison < 0 ) {\r\n\r\n\t\t\tlow = i + 1;\r\n\t\t\tcontinue;\r\n\r\n\t\t} else if ( comparison > 0 ) {\r\n\r\n\t\t\thigh = i - 1;\r\n\t\t\tcontinue;\r\n\r\n\t\t} else {\r\n\r\n\t\t\thigh = i;\r\n\t\t\tbreak;\r\n\r\n\t\t\t// DONE\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ti = high;\r\n\r\n\t//console.log('b' , i, low, high, Date.now()- time);\r\n\r\n\tif ( arcLengths[ i ] == targetArcLength ) {\r\n\r\n\t\tvar t = i / ( il - 1 );\r\n\t\treturn t;\r\n\r\n\t}\r\n\r\n\t// we could get finer grain at lengths, or use simple interpolatation between two points\r\n\r\n\tvar lengthBefore = arcLengths[ i ];\r\n    var lengthAfter = arcLengths[ i + 1 ];\r\n\r\n    var segmentLength = lengthAfter - lengthBefore;\r\n\r\n    // determine where we are between the 'before' and 'after' points\r\n\r\n    var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\r\n    // add that fractional amount to t\r\n\r\n    var t = ( i + segmentFraction ) / ( il -1 );\r\n\r\n\treturn t;\r\n\r\n};\r\n\r\n// Returns a unit vector tangent at t\r\n// In case any sub curve does not implement its tangent derivation,\r\n// 2 points a small delta apart will be used to find its gradient\r\n// which seems to give a reasonable approximation\r\n\r\nTHREE.Curve.prototype.getTangent = function( t ) {\r\n\r\n\tvar delta = 0.0001;\r\n\tvar t1 = t - delta;\r\n\tvar t2 = t + delta;\r\n\r\n\t// Capping in case of danger\r\n\r\n\tif ( t1 < 0 ) t1 = 0;\r\n\tif ( t2 > 1 ) t2 = 1;\r\n\r\n\tvar pt1 = this.getPoint( t1 );\r\n\tvar pt2 = this.getPoint( t2 );\r\n\r\n\tvar vec = pt2.clone().sub(pt1);\r\n\treturn vec.normalize();\r\n\r\n};\r\n\r\n\r\nTHREE.Curve.prototype.getTangentAt = function ( u ) {\r\n\r\n\tvar t = this.getUtoTmapping( u );\r\n\treturn this.getTangent( t );\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tLine\r\n **************************************************************/\r\n\r\nTHREE.LineCurve = function ( v1, v2 ) {\r\n\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar point = this.v2.clone().sub(this.v1);\r\n\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\n// Line curve is linear, so we can overwrite default getPointAt\r\n\r\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\r\n\r\n\treturn this.getPoint( u );\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangent = this.v2.clone().sub(this.v1);\r\n\r\n\treturn tangent.normalize();\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar tx, ty;\r\n\r\n\ttx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );\r\n\tty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );\r\n\r\n\treturn new THREE.Vector2( tx, ty );\r\n\r\n};\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tx, ty;\r\n\r\n\ttx = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x );\r\n\tty = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y );\r\n\r\n\t// returns unit vector\r\n\r\n\tvar tangent = new THREE.Vector2( tx, ty );\r\n\ttangent.normalize();\r\n\r\n\treturn tangent;\r\n\r\n};\r\n\r\n\r\n/**************************************************************\r\n *\tCubic Bezier curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\tthis.v3 = v3;\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar tx, ty;\r\n\r\n\ttx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\r\n\tty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\r\n\r\n\treturn new THREE.Vector2( tx, ty );\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tx, ty;\r\n\r\n\ttx = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\r\n\tty = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\r\n\r\n\tvar tangent = new THREE.Vector2( tx, ty );\r\n\ttangent.normalize();\r\n\r\n\treturn tangent;\r\n\r\n};\r\n\r\n\r\n/**************************************************************\r\n *\tSpline curve\r\n **************************************************************/\r\n\r\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\r\n\r\n\tthis.points = (points == undefined) ? [] : points;\r\n\r\n};\r\n\r\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar v = new THREE.Vector2();\r\n\tvar c = [];\r\n\tvar points = this.points, point, intPoint, weight;\r\n\tpoint = ( points.length - 1 ) * t;\r\n\r\n\tintPoint = Math.floor( point );\r\n\tweight = point - intPoint;\r\n\r\n\tc[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;\r\n\tc[ 1 ] = intPoint;\r\n\tc[ 2 ] = intPoint  > points.length - 2 ? points.length -1 : intPoint + 1;\r\n\tc[ 3 ] = intPoint  > points.length - 3 ? points.length -1 : intPoint + 2;\r\n\r\n\tv.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );\r\n\tv.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );\r\n\r\n\treturn v;\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tEllipse curve\r\n **************************************************************/\r\n\r\nTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius,\r\n\t\t\t\t\t\t\taStartAngle, aEndAngle,\r\n\t\t\t\t\t\t\taClockwise ) {\r\n\r\n\tthis.aX = aX;\r\n\tthis.aY = aY;\r\n\r\n\tthis.xRadius = xRadius;\r\n\tthis.yRadius = yRadius;\r\n\r\n\tthis.aStartAngle = aStartAngle;\r\n\tthis.aEndAngle = aEndAngle;\r\n\r\n\tthis.aClockwise = aClockwise;\r\n\r\n};\r\n\r\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\r\n\tif ( !this.aClockwise ) {\r\n\r\n\t\tt = 1 - t;\r\n\r\n\t}\r\n\r\n\tvar angle = this.aStartAngle + t * deltaAngle;\r\n\r\n\tvar tx = this.aX + this.xRadius * Math.cos( angle );\r\n\tvar ty = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\treturn new THREE.Vector2( tx, ty );\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tArc curve\r\n **************************************************************/\r\n\r\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n};\r\n\r\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\r\n\r\n\r\n/**************************************************************\r\n *\tUtils\r\n **************************************************************/\r\n\r\nTHREE.Curve.Utils = {\r\n\r\n\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\r\n\r\n\t},\r\n\r\n\t// Puay Bing, thanks for helping with this derivative!\r\n\r\n\ttangentCubicBezier: function (t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn -3 * p0 * (1 - t) * (1 - t)  +\r\n\t\t\t3 * p1 * (1 - t) * (1-t) - 6 *t *p1 * (1-t) +\r\n\t\t\t6 * t *  p2 * (1-t) - 3 * t * t * p2 +\r\n\t\t\t3 * t * t * p3;\r\n\t},\r\n\r\n\r\n\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\t// To check if my formulas are correct\r\n\r\n\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\r\n\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\r\n\t\tvar h01 = -6 * t * t + 6 * t; \t// − 2t3 + 3t2\r\n\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\r\n\r\n\t\treturn h00 + h10 + h01 + h11;\r\n\r\n\t},\r\n\r\n\t// Catmull-Rom\r\n\r\n\tinterpolate: function( p0, p1, p2, p3, t ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t * t2;\r\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// TODO: Transformation for Curves?\r\n\r\n/**************************************************************\r\n *\t3D Curves\r\n **************************************************************/\r\n\r\n// A Factory method for creating new curve subclasses\r\n\r\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\r\n\r\n\tconstructor.prototype = Object.create( THREE.Curve.prototype );\r\n\tconstructor.prototype.getPoint = getPointFunc;\r\n\r\n\treturn constructor;\r\n\r\n};\r\n\r\n\r\n/**************************************************************\r\n *\tLine3D\r\n **************************************************************/\r\n\r\nTHREE.LineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v1, v2 ) {\r\n\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar r = new THREE.Vector3();\r\n\r\n\r\n\t\tr.subVectors( this.v2, this.v1 ); // diff\r\n\t\tr.multiplyScalar( t );\r\n\t\tr.add( this.v1 );\r\n\r\n\t\treturn r;\r\n\r\n\t}\r\n\r\n);\r\n\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar tx, ty, tz;\r\n\r\n\t\ttx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );\r\n\t\tty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );\r\n\t\ttz = THREE.Shape.Utils.b2( t, this.v0.z, this.v1.z, this.v2.z );\r\n\r\n\t\treturn new THREE.Vector3( tx, ty, tz );\r\n\r\n\t}\r\n\r\n);\r\n\r\n\r\n\r\n/**************************************************************\r\n *\tCubic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2, v3 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\tthis.v3 = v3;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar tx, ty, tz;\r\n\r\n\t\ttx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\r\n\t\tty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\r\n\t\ttz = THREE.Shape.Utils.b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z );\r\n\r\n\t\treturn new THREE.Vector3( tx, ty, tz );\r\n\r\n\t}\r\n\r\n);\r\n\r\n\r\n\r\n/**************************************************************\r\n *\tSpline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.SplineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( points /* array of Vector3 */) {\r\n\r\n\t\tthis.points = (points == undefined) ? [] : points;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar v = new THREE.Vector3();\r\n\t\tvar c = [];\r\n\t\tvar points = this.points, point, intPoint, weight;\r\n\t\tpoint = ( points.length - 1 ) * t;\r\n\r\n\t\tintPoint = Math.floor( point );\r\n\t\tweight = point - intPoint;\r\n\r\n\t\tc[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;\r\n\t\tc[ 1 ] = intPoint;\r\n\t\tc[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;\r\n\t\tc[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;\r\n\r\n\t\tvar pt0 = points[ c[0] ],\r\n\t\t\tpt1 = points[ c[1] ],\r\n\t\t\tpt2 = points[ c[2] ],\r\n\t\t\tpt3 = points[ c[3] ];\r\n\r\n\t\tv.x = THREE.Curve.Utils.interpolate(pt0.x, pt1.x, pt2.x, pt3.x, weight);\r\n\t\tv.y = THREE.Curve.Utils.interpolate(pt0.y, pt1.y, pt2.y, pt3.y, weight);\r\n\t\tv.z = THREE.Curve.Utils.interpolate(pt0.z, pt1.z, pt2.z, pt3.z, weight);\r\n\r\n\t\treturn v;\r\n\r\n\t}\r\n\r\n);\r\n\r\n\r\n// THREE.SplineCurve3.prototype.getTangent = function(t) {\r\n// \t\tvar v = new THREE.Vector3();\r\n// \t\tvar c = [];\r\n// \t\tvar points = this.points, point, intPoint, weight;\r\n// \t\tpoint = ( points.length - 1 ) * t;\r\n\r\n// \t\tintPoint = Math.floor( point );\r\n// \t\tweight = point - intPoint;\r\n\r\n// \t\tc[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;\r\n// \t\tc[ 1 ] = intPoint;\r\n// \t\tc[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;\r\n// \t\tc[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;\r\n\r\n// \t\tvar pt0 = points[ c[0] ],\r\n// \t\t\tpt1 = points[ c[1] ],\r\n// \t\t\tpt2 = points[ c[2] ],\r\n// \t\t\tpt3 = points[ c[3] ];\r\n\r\n// \t// t = weight;\r\n// \tv.x = THREE.Curve.Utils.tangentSpline( t, pt0.x, pt1.x, pt2.x, pt3.x );\r\n// \tv.y = THREE.Curve.Utils.tangentSpline( t, pt0.y, pt1.y, pt2.y, pt3.y );\r\n// \tv.z = THREE.Curve.Utils.tangentSpline( t, pt0.z, pt1.z, pt2.z, pt3.z );\r\n\r\n// \treturn v;\r\n\r\n// }\r\n\r\n/**************************************************************\r\n *\tClosed Spline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.ClosedSplineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( points /* array of Vector3 */) {\r\n\r\n\t\tthis.points = (points == undefined) ? [] : points;\r\n\r\n\t},\r\n\r\n    function ( t ) {\r\n\r\n        var v = new THREE.Vector3();\r\n        var c = [];\r\n        var points = this.points, point, intPoint, weight;\r\n        point = ( points.length - 0 ) * t;\r\n            // This needs to be from 0-length +1\r\n\r\n        intPoint = Math.floor( point );\r\n        weight = point - intPoint;\r\n\r\n        intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\r\n        c[ 0 ] = ( intPoint - 1 ) % points.length;\r\n        c[ 1 ] = ( intPoint ) % points.length;\r\n        c[ 2 ] = ( intPoint + 1 ) % points.length;\r\n        c[ 3 ] = ( intPoint + 2 ) % points.length;\r\n\r\n        v.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );\r\n        v.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );\r\n        v.z = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].z, points[ c[ 1 ] ].z, points[ c[ 2 ] ].z, points[ c[ 3 ] ].z, weight );\r\n\r\n        return v;\r\n\r\n    }\r\n\r\n);\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tCurved Path - a curve path is simply a array of connected\r\n *  curves, but retains the api of a curve\r\n **************************************************************/\r\n\r\nTHREE.CurvePath = function () {\r\n\r\n\tthis.curves = [];\r\n\tthis.bends = [];\r\n\t\r\n\tthis.autoClose = false; // Automatically closes the path\r\n};\r\n\r\nTHREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.CurvePath.prototype.add = function ( curve ) {\r\n\r\n\tthis.curves.push( curve );\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.checkConnection = function() {\r\n\t// TODO\r\n\t// If the ending of curve is not connected to the starting\r\n\t// or the next curve, then, this is not a real path\r\n};\r\n\r\nTHREE.CurvePath.prototype.closePath = function() {\r\n\t// TODO Test\r\n\t// and verify for vector3 (needs to implement equals)\r\n\t// Add a line curve if start and end of lines are not connected\r\n\tvar startPoint = this.curves[0].getPoint(0);\r\n\tvar endPoint = this.curves[this.curves.length-1].getPoint(1);\r\n\t\r\n\tif (!startPoint.equals(endPoint)) {\r\n\t\tthis.curves.push( new THREE.LineCurve(endPoint, startPoint) );\r\n\t}\r\n\t\r\n};\r\n\r\n// To get accurate point with reference to\r\n// entire path distance at time t,\r\n// following has to be done:\r\n\r\n// 1. Length of each sub path have to be known\r\n// 2. Locate and identify type of curve\r\n// 3. Get t for the curve\r\n// 4. Return curve.getPointAt(t')\r\n\r\nTHREE.CurvePath.prototype.getPoint = function( t ) {\r\n\r\n\tvar d = t * this.getLength();\r\n\tvar curveLengths = this.getCurveLengths();\r\n\tvar i = 0, diff, curve;\r\n\r\n\t// To think about boundaries points.\r\n\r\n\twhile ( i < curveLengths.length ) {\r\n\r\n\t\tif ( curveLengths[ i ] >= d ) {\r\n\r\n\t\t\tdiff = curveLengths[ i ] - d;\r\n\t\t\tcurve = this.curves[ i ];\r\n\r\n\t\t\tvar u = 1 - diff / curve.getLength();\r\n\r\n\t\t\treturn curve.getPointAt( u );\r\n\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\ti ++;\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n\t// loop where sum != 0, sum > d , sum+1 <d\r\n\r\n};\r\n\r\n/*\r\nTHREE.CurvePath.prototype.getTangent = function( t ) {\r\n};*/\r\n\r\n\r\n// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n// getPoint() depends on getLength\r\n\r\nTHREE.CurvePath.prototype.getLength = function() {\r\n\r\n\tvar lens = this.getCurveLengths();\r\n\treturn lens[ lens.length - 1 ];\r\n\r\n};\r\n\r\n// Compute lengths and cache them\r\n// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\nTHREE.CurvePath.prototype.getCurveLengths = function() {\r\n\r\n\t// We use cache values if curves and cache array are same length\r\n\r\n\tif ( this.cacheLengths && this.cacheLengths.length == this.curves.length ) {\r\n\r\n\t\treturn this.cacheLengths;\r\n\r\n\t};\r\n\r\n\t// Get length of subsurve\r\n\t// Push sums into cached array\r\n\r\n\tvar lengths = [], sums = 0;\r\n\tvar i, il = this.curves.length;\r\n\r\n\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\tsums += this.curves[ i ].getLength();\r\n\t\tlengths.push( sums );\r\n\r\n\t}\r\n\r\n\tthis.cacheLengths = lengths;\r\n\r\n\treturn lengths;\r\n\r\n};\r\n\r\n\r\n\r\n// Returns min and max coordinates, as well as centroid\r\n\r\nTHREE.CurvePath.prototype.getBoundingBox = function () {\r\n\r\n\tvar points = this.getPoints();\r\n\r\n\tvar maxX, maxY, maxZ;\r\n\tvar minX, minY, minZ;\r\n\r\n\tmaxX = maxY = Number.NEGATIVE_INFINITY;\r\n\tminX = minY = Number.POSITIVE_INFINITY;\r\n\r\n\tvar p, i, il, sum;\r\n\r\n\tvar v3 = points[0] instanceof THREE.Vector3;\r\n\r\n\tsum = v3 ? new THREE.Vector3() : new THREE.Vector2();\r\n\r\n\tfor ( i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\tp = points[ i ];\r\n\r\n\t\tif ( p.x > maxX ) maxX = p.x;\r\n\t\telse if ( p.x < minX ) minX = p.x;\r\n\r\n\t\tif ( p.y > maxY ) maxY = p.y;\r\n\t\telse if ( p.y < minY ) minY = p.y;\r\n\r\n\t\tif ( v3 ) {\r\n\r\n\t\t\tif ( p.z > maxZ ) maxZ = p.z;\r\n\t\t\telse if ( p.z < minZ ) minZ = p.z;\r\n\r\n\t\t}\r\n\r\n\t\tsum.add( p );\r\n\r\n\t}\r\n\r\n\tvar ret = {\r\n\r\n\t\tminX: minX,\r\n\t\tminY: minY,\r\n\t\tmaxX: maxX,\r\n\t\tmaxY: maxY,\r\n\t\tcentroid: sum.divideScalar( il )\r\n\r\n\t};\r\n\r\n\tif ( v3 ) {\r\n\r\n\t\tret.maxZ = maxZ;\r\n\t\tret.minZ = minZ;\r\n\r\n\t}\r\n\r\n\treturn ret;\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tCreate Geometries Helpers\r\n **************************************************************/\r\n\r\n/// Generate geometry from path points (for Line or ParticleSystem objects)\r\n\r\nTHREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {\r\n\r\n\tvar pts = this.getPoints( divisions, true );\r\n\treturn this.createGeometry( pts );\r\n\r\n};\r\n\r\n// Generate geometry from equidistance sampling along the path\r\n\r\nTHREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {\r\n\r\n\tvar pts = this.getSpacedPoints( divisions, true );\r\n\treturn this.createGeometry( pts );\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.createGeometry = function( points ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\r\n\tfor ( var i = 0; i < points.length; i ++ ) {\r\n\r\n\t\tgeometry.vertices.push( new THREE.Vector3( points[ i ].x, points[ i ].y, points[ i ].z || 0) );\r\n\r\n\t}\r\n\r\n\treturn geometry;\r\n\r\n};\r\n\r\n\r\n/**************************************************************\r\n *\tBend / Wrap Helper Methods\r\n **************************************************************/\r\n\r\n// Wrap path / Bend modifiers?\r\n\r\nTHREE.CurvePath.prototype.addWrapPath = function ( bendpath ) {\r\n\r\n\tthis.bends.push( bendpath );\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.getTransformedPoints = function( segments, bends ) {\r\n\r\n\tvar oldPts = this.getPoints( segments ); // getPoints getSpacedPoints\r\n\tvar i, il;\r\n\r\n\tif ( !bends ) {\r\n\r\n\t\tbends = this.bends;\r\n\r\n\t}\r\n\r\n\tfor ( i = 0, il = bends.length; i < il; i ++ ) {\r\n\r\n\t\toldPts = this.getWrapPoints( oldPts, bends[ i ] );\r\n\r\n\t}\r\n\r\n\treturn oldPts;\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.getTransformedSpacedPoints = function( segments, bends ) {\r\n\r\n\tvar oldPts = this.getSpacedPoints( segments );\r\n\r\n\tvar i, il;\r\n\r\n\tif ( !bends ) {\r\n\r\n\t\tbends = this.bends;\r\n\r\n\t}\r\n\r\n\tfor ( i = 0, il = bends.length; i < il; i ++ ) {\r\n\r\n\t\toldPts = this.getWrapPoints( oldPts, bends[ i ] );\r\n\r\n\t}\r\n\r\n\treturn oldPts;\r\n\r\n};\r\n\r\n// This returns getPoints() bend/wrapped around the contour of a path.\r\n// Read http://www.planetclegg.com/projects/WarpingTextToSplines.html\r\n\r\nTHREE.CurvePath.prototype.getWrapPoints = function ( oldPts, path ) {\r\n\r\n\tvar bounds = this.getBoundingBox();\r\n\r\n\tvar i, il, p, oldX, oldY, xNorm;\r\n\r\n\tfor ( i = 0, il = oldPts.length; i < il; i ++ ) {\r\n\r\n\t\tp = oldPts[ i ];\r\n\r\n\t\toldX = p.x;\r\n\t\toldY = p.y;\r\n\r\n\t\txNorm = oldX / bounds.maxX;\r\n\r\n\t\t// If using actual distance, for length > path, requires line extrusions\r\n\t\t//xNorm = path.getUtoTmapping(xNorm, oldX); // 3 styles. 1) wrap stretched. 2) wrap stretch by arc length 3) warp by actual distance\r\n\r\n\t\txNorm = path.getUtoTmapping( xNorm, oldX );\r\n\r\n\t\t// check for out of bounds?\r\n\r\n\t\tvar pathPt = path.getPoint( xNorm );\r\n\t\tvar normal = path.getNormalVector( xNorm ).multiplyScalar( oldY );\r\n\r\n\t\tp.x = pathPt.x + normal.x;\r\n\t\tp.y = pathPt.y + normal.y;\r\n\r\n\t}\r\n\r\n\treturn oldPts;\r\n\r\n};\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Gyroscope = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n};\r\n\r\nTHREE.Gyroscope.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Gyroscope.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\tthis.matrixAutoUpdate && this.updateMatrix();\r\n\r\n\t// update matrixWorld\r\n\r\n\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\tif ( this.parent ) {\r\n\r\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\tthis.matrixWorld.decompose( this.translationWorld, this.rotationWorld, this.scaleWorld );\r\n\t\t\tthis.matrix.decompose( this.translationObject, this.rotationObject, this.scaleObject );\r\n\r\n\t\t\tthis.matrixWorld.compose( this.translationWorld, this.rotationObject, this.scaleWorld );\r\n\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tforce = true;\r\n\r\n\t}\r\n\r\n\t// update children\r\n\r\n\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\tthis.children[ i ].updateMatrixWorld( force );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Gyroscope.prototype.translationWorld = new THREE.Vector3();\r\nTHREE.Gyroscope.prototype.translationObject = new THREE.Vector3();\r\nTHREE.Gyroscope.prototype.rotationWorld = new THREE.Quaternion();\r\nTHREE.Gyroscope.prototype.rotationObject = new THREE.Quaternion();\r\nTHREE.Gyroscope.prototype.scaleWorld = new THREE.Vector3();\r\nTHREE.Gyroscope.prototype.scaleObject = new THREE.Vector3();\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Creates free form 2d path using series of points, lines or curves.\r\n *\r\n **/\r\n\r\nTHREE.Path = function ( points ) {\r\n\r\n\tTHREE.CurvePath.call(this);\r\n\r\n\tthis.actions = [];\r\n\r\n\tif ( points ) {\r\n\r\n\t\tthis.fromPoints( points );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Path.prototype = Object.create( THREE.CurvePath.prototype );\r\n\r\nTHREE.PathActions = {\r\n\r\n\tMOVE_TO: 'moveTo',\r\n\tLINE_TO: 'lineTo',\r\n\tQUADRATIC_CURVE_TO: 'quadraticCurveTo', // Bezier quadratic curve\r\n\tBEZIER_CURVE_TO: 'bezierCurveTo', \t\t// Bezier cubic curve\r\n\tCSPLINE_THRU: 'splineThru',\t\t\t\t// Catmull-rom spline\r\n\tARC: 'arc',\t\t\t\t\t\t\t\t// Circle\r\n\tELLIPSE: 'ellipse'\r\n};\r\n\r\n// TODO Clean up PATH API\r\n\r\n// Create path using straight lines to connect all points\r\n// - vectors: array of Vector2\r\n\r\nTHREE.Path.prototype.fromPoints = function ( vectors ) {\r\n\r\n\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\r\n\r\n\tfor ( var v = 1, vlen = vectors.length; v < vlen; v ++ ) {\r\n\r\n\t\tthis.lineTo( vectors[ v ].x, vectors[ v ].y );\r\n\r\n\t};\r\n\r\n};\r\n\r\n// startPath() endPath()?\r\n\r\nTHREE.Path.prototype.moveTo = function ( x, y ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\tthis.actions.push( { action: THREE.PathActions.MOVE_TO, args: args } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.lineTo = function ( x, y ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.LINE_TO, args: args } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.QuadraticBezierCurve( new THREE.Vector2( x0, y0 ),\r\n\t\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aCPx, aCPy ),\r\n\t\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aX, aY ) );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.QUADRATIC_CURVE_TO, args: args } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y,\r\n                                               aCP2x, aCP2y,\r\n                                               aX, aY ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.CubicBezierCurve( new THREE.Vector2( x0, y0 ),\r\n\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\r\n\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\r\n\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aX, aY ) );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.BEZIER_CURVE_TO, args: args } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n//---\r\n\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\r\n\tArray.prototype.push.apply( npts, pts );\r\n\r\n\tvar curve = new THREE.SplineCurve( npts );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.CSPLINE_THRU, args: args } );\r\n\r\n};\r\n\r\n// FUTURE: Change the API or follow canvas API?\r\n\r\nTHREE.Path.prototype.arc = function ( aX, aY, aRadius,\r\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1].args;\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tthis.absarc(aX + x0, aY + y0, aRadius,\r\n\t\taStartAngle, aEndAngle, aClockwise );\r\n\t\r\n };\r\n\r\n THREE.Path.prototype.absarc = function ( aX, aY, aRadius,\r\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\r\n\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\r\n };\r\n \r\nTHREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius,\r\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1].args;\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius,\r\n\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n };\r\n \r\n\r\nTHREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius,\r\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius,\r\n\t\t\t\t\t\t\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\tthis.curves.push( curve );\r\n\r\n\tvar lastPoint = curve.getPoint(aClockwise ? 1 : 0);\r\n\targs.push(lastPoint.x);\r\n\targs.push(lastPoint.y);\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.ELLIPSE, args: args } );\r\n\r\n };\r\n\r\nTHREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {\r\n\r\n\tif ( ! divisions ) divisions = 40;\r\n\r\n\tvar points = [];\r\n\r\n\tfor ( var i = 0; i < divisions; i ++ ) {\r\n\r\n\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\r\n\t\t//if( !this.getPoint( i / divisions ) ) throw \"DIE\";\r\n\r\n\t}\r\n\r\n\t// if ( closedPath ) {\r\n\t//\r\n\t// \tpoints.push( points[ 0 ] );\r\n\t//\r\n\t// }\r\n\r\n\treturn points;\r\n\r\n};\r\n\r\n/* Return an array of vectors based on contour of the path */\r\n\r\nTHREE.Path.prototype.getPoints = function( divisions, closedPath ) {\r\n\r\n\tif (this.useSpacedPoints) {\r\n\t\tconsole.log('tata');\r\n\t\treturn this.getSpacedPoints( divisions, closedPath );\r\n\t}\r\n\r\n\tdivisions = divisions || 12;\r\n\r\n\tvar points = [];\r\n\r\n\tvar i, il, item, action, args;\r\n\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\r\n\t\tlaste, j,\r\n\t\tt, tx, ty;\r\n\r\n\tfor ( i = 0, il = this.actions.length; i < il; i ++ ) {\r\n\r\n\t\titem = this.actions[ i ];\r\n\r\n\t\taction = item.action;\r\n\t\targs = item.args;\r\n\r\n\t\tswitch( action ) {\r\n\r\n\t\tcase THREE.PathActions.MOVE_TO:\r\n\r\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.LINE_TO:\r\n\r\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.QUADRATIC_CURVE_TO:\r\n\r\n\t\t\tcpx  = args[ 2 ];\r\n\t\t\tcpy  = args[ 3 ];\r\n\r\n\t\t\tcpx1 = args[ 0 ];\r\n\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\tt = j / divisions;\r\n\r\n\t\t\t\ttx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );\r\n\t\t\t\tty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t  \t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.BEZIER_CURVE_TO:\r\n\r\n\t\t\tcpx  = args[ 4 ];\r\n\t\t\tcpy  = args[ 5 ];\r\n\r\n\t\t\tcpx1 = args[ 0 ];\r\n\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\tcpx2 = args[ 2 ];\r\n\t\t\tcpy2 = args[ 3 ];\r\n\r\n\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfor ( j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\tt = j / divisions;\r\n\r\n\t\t\t\ttx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\tty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.CSPLINE_THRU:\r\n\r\n\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\r\n\t\t\tvar spts = [ last ];\r\n\r\n\t\t\tvar n = divisions * args[ 0 ].length;\r\n\r\n\t\t\tspts = spts.concat( args[ 0 ] );\r\n\r\n\t\t\tvar spline = new THREE.SplineCurve( spts );\r\n\r\n\t\t\tfor ( j = 1; j <= n; j ++ ) {\r\n\r\n\t\t\t\tpoints.push( spline.getPointAt( j / n ) ) ;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.ARC:\r\n\r\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\taRadius = args[ 2 ],\r\n\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\r\n\t\t\t\taClockwise = !!args[ 5 ];\r\n\r\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\tvar angle;\r\n\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\tfor ( j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\tt = j / tdivisions;\r\n\r\n\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\ttx = aX + aRadius * Math.cos( angle );\r\n\t\t\t\tty = aY + aRadius * Math.sin( angle );\r\n\r\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(points);\r\n\r\n\t\t  break;\r\n\t\t  \r\n\t\tcase THREE.PathActions.ELLIPSE:\r\n\r\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\txRadius = args[ 2 ],\r\n\t\t\t\tyRadius = args[ 3 ],\r\n\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\r\n\t\t\t\taClockwise = !!args[ 6 ];\r\n\r\n\r\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\tvar angle;\r\n\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\tfor ( j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\tt = j / tdivisions;\r\n\r\n\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\ttx = aX + xRadius * Math.cos( angle );\r\n\t\t\t\tty = aY + yRadius * Math.sin( angle );\r\n\r\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(points);\r\n\r\n\t\t  break;\r\n\r\n\t\t} // end switch\r\n\r\n\t}\r\n\r\n\r\n\r\n\t// Normalize to remove the closing point by default.\r\n\tvar lastPoint = points[ points.length - 1];\r\n\tvar EPSILON = 0.0000000001;\r\n\tif ( Math.abs(lastPoint.x - points[ 0 ].x) < EPSILON &&\r\n             Math.abs(lastPoint.y - points[ 0 ].y) < EPSILON)\r\n\t\tpoints.splice( points.length - 1, 1);\r\n\tif ( closedPath ) {\r\n\r\n\t\tpoints.push( points[ 0 ] );\r\n\r\n\t}\r\n\r\n\treturn points;\r\n\r\n};\r\n\r\n// Breaks path into shapes\r\n\r\nTHREE.Path.prototype.toShapes = function() {\r\n\r\n\tvar i, il, item, action, args;\r\n\r\n\tvar subPaths = [], lastPath = new THREE.Path();\r\n\r\n\tfor ( i = 0, il = this.actions.length; i < il; i ++ ) {\r\n\r\n\t\titem = this.actions[ i ];\r\n\r\n\t\targs = item.args;\r\n\t\taction = item.action;\r\n\r\n\t\tif ( action == THREE.PathActions.MOVE_TO ) {\r\n\r\n\t\t\tif ( lastPath.actions.length != 0 ) {\r\n\r\n\t\t\t\tsubPaths.push( lastPath );\r\n\t\t\t\tlastPath = new THREE.Path();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlastPath[ action ].apply( lastPath, args );\r\n\r\n\t}\r\n\r\n\tif ( lastPath.actions.length != 0 ) {\r\n\r\n\t\tsubPaths.push( lastPath );\r\n\r\n\t}\r\n\r\n\t// console.log(subPaths);\r\n\r\n\tif ( subPaths.length == 0 ) return [];\r\n\r\n\tvar tmpPath, tmpShape, shapes = [];\r\n\r\n\tvar holesFirst = !THREE.Shape.Utils.isClockWise( subPaths[ 0 ].getPoints() );\r\n\t// console.log(\"Holes first\", holesFirst);\r\n\r\n\tif ( subPaths.length == 1) {\r\n\t\ttmpPath = subPaths[0];\r\n\t\ttmpShape = new THREE.Shape();\r\n\t\ttmpShape.actions = tmpPath.actions;\r\n\t\ttmpShape.curves = tmpPath.curves;\r\n\t\tshapes.push( tmpShape );\r\n\t\treturn shapes;\r\n\t};\r\n\r\n\tif ( holesFirst ) {\r\n\r\n\t\ttmpShape = new THREE.Shape();\r\n\r\n\t\tfor ( i = 0, il = subPaths.length; i < il; i ++ ) {\r\n\r\n\t\t\ttmpPath = subPaths[ i ];\r\n\r\n\t\t\tif ( THREE.Shape.Utils.isClockWise( tmpPath.getPoints() ) ) {\r\n\r\n\t\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\t\tshapes.push( tmpShape );\r\n\t\t\t\ttmpShape = new THREE.Shape();\r\n\r\n\t\t\t\t//console.log('cw', i);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttmpShape.holes.push( tmpPath );\r\n\r\n\t\t\t\t//console.log('ccw', i);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\t// Shapes first\r\n\r\n\t\tfor ( i = 0, il = subPaths.length; i < il; i ++ ) {\r\n\r\n\t\t\ttmpPath = subPaths[ i ];\r\n\r\n\t\t\tif ( THREE.Shape.Utils.isClockWise( tmpPath.getPoints() ) ) {\r\n\r\n\r\n\t\t\t\tif ( tmpShape ) shapes.push( tmpShape );\r\n\r\n\t\t\t\ttmpShape = new THREE.Shape();\r\n\t\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttmpShape.holes.push( tmpPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tshapes.push( tmpShape );\r\n\r\n\t}\r\n\r\n\t//console.log(\"shape\", shapes);\r\n\r\n\treturn shapes;\r\n\r\n};\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Defines a 2d shape plane using paths.\r\n **/\r\n\r\n// STEP 1 Create a path.\r\n// STEP 2 Turn path into shape.\r\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n// STEP 3a - Extract points from each shape, turn to vertices\r\n// STEP 3b - Triangulate each shape, add faces.\r\n\r\nTHREE.Shape = function ( ) {\r\n\r\n\tTHREE.Path.apply( this, arguments );\r\n\tthis.holes = [];\r\n\r\n};\r\n\r\nTHREE.Shape.prototype = Object.create( THREE.Path.prototype );\r\n\r\n// Convenience method to return ExtrudeGeometry\r\n\r\nTHREE.Shape.prototype.extrude = function ( options ) {\r\n\r\n\tvar extruded = new THREE.ExtrudeGeometry( this, options );\r\n\treturn extruded;\r\n\r\n};\r\n\r\n// Convenience method to return ShapeGeometry\r\n\r\nTHREE.Shape.prototype.makeGeometry = function ( options ) {\r\n\r\n\tvar geometry = new THREE.ShapeGeometry( this, options );\r\n\treturn geometry;\r\n\r\n};\r\n\r\n// Get points of holes\r\n\r\nTHREE.Shape.prototype.getPointsHoles = function ( divisions ) {\r\n\r\n\tvar i, il = this.holes.length, holesPts = [];\r\n\r\n\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\tholesPts[ i ] = this.holes[ i ].getTransformedPoints( divisions, this.bends );\r\n\r\n\t}\r\n\r\n\treturn holesPts;\r\n\r\n};\r\n\r\n// Get points of holes (spaced by regular distance)\r\n\r\nTHREE.Shape.prototype.getSpacedPointsHoles = function ( divisions ) {\r\n\r\n\tvar i, il = this.holes.length, holesPts = [];\r\n\r\n\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\tholesPts[ i ] = this.holes[ i ].getTransformedSpacedPoints( divisions, this.bends );\r\n\r\n\t}\r\n\r\n\treturn holesPts;\r\n\r\n};\r\n\r\n\r\n// Get points of shape and holes (keypoints based on segments parameter)\r\n\r\nTHREE.Shape.prototype.extractAllPoints = function ( divisions ) {\r\n\r\n\treturn {\r\n\r\n\t\tshape: this.getTransformedPoints( divisions ),\r\n\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.Shape.prototype.extractPoints = function ( divisions ) {\r\n\r\n\tif (this.useSpacedPoints) {\r\n\t\treturn this.extractAllSpacedPoints(divisions);\r\n\t}\r\n\r\n\treturn this.extractAllPoints(divisions);\r\n\r\n};\r\n\r\n//\r\n// THREE.Shape.prototype.extractAllPointsWithBend = function ( divisions, bend ) {\r\n//\r\n// \treturn {\r\n//\r\n// \t\tshape: this.transform( bend, divisions ),\r\n// \t\tholes: this.getPointsHoles( divisions, bend )\r\n//\r\n// \t};\r\n//\r\n// };\r\n\r\n// Get points of shape and holes (spaced by regular distance)\r\n\r\nTHREE.Shape.prototype.extractAllSpacedPoints = function ( divisions ) {\r\n\r\n\treturn {\r\n\r\n\t\tshape: this.getTransformedSpacedPoints( divisions ),\r\n\t\tholes: this.getSpacedPointsHoles( divisions )\r\n\r\n\t};\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tUtils\r\n **************************************************************/\r\n\r\nTHREE.Shape.Utils = {\r\n\r\n\t/*\r\n\t\tcontour - array of vector2 for contour\r\n\t\tholes   - array of array of vector2\r\n\t*/\r\n\r\n\tremoveHoles: function ( contour, holes ) {\r\n\r\n\t\tvar shape = contour.concat(); // work on this shape\r\n\t\tvar allpoints = shape.concat();\r\n\r\n\t\t/* For each isolated shape, find the closest points and break to the hole to allow triangulation */\r\n\r\n\r\n\t\tvar prevShapeVert, nextShapeVert,\r\n\t\t\tprevHoleVert, nextHoleVert,\r\n\t\t\tholeIndex, shapeIndex,\r\n\t\t\tshapeId, shapeGroup,\r\n\t\t\th, h2,\r\n\t\t\thole, shortest, d,\r\n\t\t\tp, pts1, pts2,\r\n\t\t\ttmpShape1, tmpShape2,\r\n\t\t\ttmpHole1, tmpHole2,\r\n\t\t\tverts = [];\r\n\r\n\t\tfor ( h = 0; h < holes.length; h ++ ) {\r\n\r\n\t\t\thole = holes[ h ];\r\n\r\n\t\t\t/*\r\n\t\t\tshapeholes[ h ].concat(); // preserves original\r\n\t\t\tholes.push( hole );\r\n\t\t\t*/\r\n\r\n\t\t\tArray.prototype.push.apply( allpoints, hole );\r\n\r\n\t\t\tshortest = Number.POSITIVE_INFINITY;\r\n\r\n\r\n\t\t\t// Find the shortest pair of pts between shape and hole\r\n\r\n\t\t\t// Note: Actually, I'm not sure now if we could optimize this to be faster than O(m*n)\r\n\t\t\t// Using distanceToSquared() intead of distanceTo() should speed a little\r\n\t\t\t// since running square roots operations are reduced.\r\n\r\n\t\t\tfor ( h2 = 0; h2 < hole.length; h2 ++ ) {\r\n\r\n\t\t\t\tpts1 = hole[ h2 ];\r\n\t\t\t\tvar dist = [];\r\n\r\n\t\t\t\tfor ( p = 0; p < shape.length; p++ ) {\r\n\r\n\t\t\t\t\tpts2 = shape[ p ];\r\n\t\t\t\t\td = pts1.distanceToSquared( pts2 );\r\n\t\t\t\t\tdist.push( d );\r\n\r\n\t\t\t\t\tif ( d < shortest ) {\r\n\r\n\t\t\t\t\t\tshortest = d;\r\n\t\t\t\t\t\tholeIndex = h2;\r\n\t\t\t\t\t\tshapeIndex = p;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(\"shortest\", shortest, dist);\r\n\r\n\t\t\tprevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;\r\n\t\t\tprevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;\r\n\r\n\t\t\tvar areaapts = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\tshape[ shapeIndex ],\r\n\t\t\t\tshape[ prevShapeVert ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar areaa = THREE.FontUtils.Triangulate.area( areaapts );\r\n\r\n\t\t\tvar areabpts = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\thole[ prevHoleVert ],\r\n\t\t\t\tshape[ shapeIndex ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar areab = THREE.FontUtils.Triangulate.area( areabpts );\r\n\r\n\t\t\tvar shapeOffset = 1;\r\n\t\t\tvar holeOffset = -1;\r\n\r\n\t\t\tvar oldShapeIndex = shapeIndex, oldHoleIndex = holeIndex;\r\n\t\t\tshapeIndex += shapeOffset;\r\n\t\t\tholeIndex += holeOffset;\r\n\r\n\t\t\tif ( shapeIndex < 0 ) { shapeIndex += shape.length;  }\r\n\t\t\tshapeIndex %= shape.length;\r\n\r\n\t\t\tif ( holeIndex < 0 ) { holeIndex += hole.length;  }\r\n\t\t\tholeIndex %= hole.length;\r\n\r\n\t\t\tprevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;\r\n\t\t\tprevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;\r\n\r\n\t\t\tareaapts = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\tshape[ shapeIndex ],\r\n\t\t\t\tshape[ prevShapeVert ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar areaa2 = THREE.FontUtils.Triangulate.area( areaapts );\r\n\r\n\t\t\tareabpts = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\thole[ prevHoleVert ],\r\n\t\t\t\tshape[ shapeIndex ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar areab2 = THREE.FontUtils.Triangulate.area( areabpts );\r\n\t\t\t//console.log(areaa,areab ,areaa2,areab2, ( areaa + areab ),  ( areaa2 + areab2 ));\r\n\r\n\t\t\tif ( ( areaa + areab ) > ( areaa2 + areab2 ) ) {\r\n\r\n\t\t\t\t// In case areas are not correct.\r\n\t\t\t\t//console.log(\"USE THIS\");\r\n\r\n\t\t\t\tshapeIndex = oldShapeIndex;\r\n\t\t\t\tholeIndex = oldHoleIndex ;\r\n\r\n\t\t\t\tif ( shapeIndex < 0 ) { shapeIndex += shape.length;  }\r\n\t\t\t\tshapeIndex %= shape.length;\r\n\r\n\t\t\t\tif ( holeIndex < 0 ) { holeIndex += hole.length;  }\r\n\t\t\t\tholeIndex %= hole.length;\r\n\r\n\t\t\t\tprevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;\r\n\t\t\t\tprevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t//console.log(\"USE THAT \")\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttmpShape1 = shape.slice( 0, shapeIndex );\r\n\t\t\ttmpShape2 = shape.slice( shapeIndex );\r\n\t\t\ttmpHole1 = hole.slice( holeIndex );\r\n\t\t\ttmpHole2 = hole.slice( 0, holeIndex );\r\n\r\n\t\t\t// Should check orders here again?\r\n\r\n\t\t\tvar trianglea = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\tshape[ shapeIndex ],\r\n\t\t\t\tshape[ prevShapeVert ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar triangleb = [\r\n\r\n\t\t\t\thole[ holeIndex ] ,\r\n\t\t\t\thole[ prevHoleVert ],\r\n\t\t\t\tshape[ shapeIndex ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tverts.push( trianglea );\r\n\t\t\tverts.push( triangleb );\r\n\r\n\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tshape:shape, \t\t/* shape with no holes */\r\n\t\t\tisolatedPts: verts, /* isolated faces */\r\n\t\t\tallpoints: allpoints\r\n\r\n\t\t}\r\n\r\n\r\n\t},\r\n\r\n\ttriangulateShape: function ( contour, holes ) {\r\n\r\n\t\tvar shapeWithoutHoles = THREE.Shape.Utils.removeHoles( contour, holes );\r\n\r\n\t\tvar shape = shapeWithoutHoles.shape,\r\n\t\t\tallpoints = shapeWithoutHoles.allpoints,\r\n\t\t\tisolatedPts = shapeWithoutHoles.isolatedPts;\r\n\r\n\t\tvar triangles = THREE.FontUtils.Triangulate( shape, false ); // True returns indices for points of spooled shape\r\n\r\n\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\r\n\r\n\t\t//console.log( \"triangles\",triangles, triangles.length );\r\n\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\r\n\r\n\t\tvar i, il, f, face,\r\n\t\t\tkey, index,\r\n\t\t\tallPointsMap = {},\r\n\t\t\tisolatedPointsMap = {};\r\n\r\n\t\t// prepare all points map\r\n\r\n\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\r\n\r\n\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\r\n\r\n\t\t\tif ( allPointsMap[ key ] !== undefined ) {\r\n\r\n\t\t\t\tconsole.log( \"Duplicate point\", key );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tallPointsMap[ key ] = i;\r\n\r\n\t\t}\r\n\r\n\t\t// check all face vertices against all points map\r\n\r\n\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = triangles[ i ];\r\n\r\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\r\n\r\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\r\n\r\n\t\t\t\tindex = allPointsMap[ key ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tface[ f ] = index;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check isolated points vertices against all points map\r\n\r\n\t\tfor ( i = 0, il = isolatedPts.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = isolatedPts[ i ];\r\n\r\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\r\n\r\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\r\n\r\n\t\t\t\tindex = allPointsMap[ key ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tface[ f ] = index;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn triangles.concat( isolatedPts );\r\n\r\n\t}, // end triangulate shapes\r\n\r\n\t/*\r\n\ttriangulate2 : function( pts, holes ) {\r\n\r\n\t\t// For use with Poly2Tri.js\r\n\r\n\t\tvar allpts = pts.concat();\r\n\t\tvar shape = [];\r\n\t\tfor (var p in pts) {\r\n\t\t\tshape.push(new js.poly2tri.Point(pts[p].x, pts[p].y));\r\n\t\t}\r\n\r\n\t\tvar swctx = new js.poly2tri.SweepContext(shape);\r\n\r\n\t\tfor (var h in holes) {\r\n\t\t\tvar aHole = holes[h];\r\n\t\t\tvar newHole = []\r\n\t\t\tfor (i in aHole) {\r\n\t\t\t\tnewHole.push(new js.poly2tri.Point(aHole[i].x, aHole[i].y));\r\n\t\t\t\tallpts.push(aHole[i]);\r\n\t\t\t}\r\n\t\t\tswctx.AddHole(newHole);\r\n\t\t}\r\n\r\n\t\tvar find;\r\n\t\tvar findIndexForPt = function (pt) {\r\n\t\t\tfind = new THREE.Vector2(pt.x, pt.y);\r\n\t\t\tvar p;\r\n\t\t\tfor (p=0, pl = allpts.length; p<pl; p++) {\r\n\t\t\t\tif (allpts[p].equals(find)) return p;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\r\n\t\t// triangulate\r\n\t\tjs.poly2tri.sweep.Triangulate(swctx);\r\n\r\n\t\tvar triangles =  swctx.GetTriangles();\r\n\t\tvar tr ;\r\n\t\tvar facesPts = [];\r\n\t\tfor (var t in triangles) {\r\n\t\t\ttr =  triangles[t];\r\n\t\t\tfacesPts.push([\r\n\t\t\t\tfindIndexForPt(tr.GetPoint(0)),\r\n\t\t\t\tfindIndexForPt(tr.GetPoint(1)),\r\n\t\t\t\tfindIndexForPt(tr.GetPoint(2))\r\n\t\t\t\t\t]);\r\n\t\t}\r\n\r\n\r\n\t//\tconsole.log(facesPts);\r\n\t//\tconsole.log(\"triangles\", triangles.length, triangles);\r\n\r\n\t\t// Returns array of faces with 3 element each\r\n\treturn facesPts;\r\n\t},\r\n*/\r\n\r\n\tisClockWise: function ( pts ) {\r\n\r\n\t\treturn THREE.FontUtils.Triangulate.area( pts ) < 0;\r\n\r\n\t},\r\n\r\n\t// Bezier Curves formulas obtained from\r\n\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\r\n\r\n\t// Quad Bezier Functions\r\n\r\n\tb2p0: function ( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * p;\r\n\r\n\t},\r\n\r\n\tb2p1: function ( t, p ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * t * p;\r\n\r\n\t},\r\n\r\n\tb2p2: function ( t, p ) {\r\n\r\n\t\treturn t * t * p;\r\n\r\n\t},\r\n\r\n\tb2: function ( t, p0, p1, p2 ) {\r\n\r\n\t\treturn this.b2p0( t, p0 ) + this.b2p1( t, p1 ) + this.b2p2( t, p2 );\r\n\r\n\t},\r\n\r\n\t// Cubic Bezier Functions\r\n\r\n\tb3p0: function ( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * k * p;\r\n\r\n\t},\r\n\r\n\tb3p1: function ( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn 3 * k * k * t * p;\r\n\r\n\t},\r\n\r\n\tb3p2: function ( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn 3 * k * t * t * p;\r\n\r\n\t},\r\n\r\n\tb3p3: function ( t, p ) {\r\n\r\n\t\treturn t * t * t * p;\r\n\r\n\t},\r\n\r\n\tb3: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn this.b3p0( t, p0 ) + this.b3p1( t, p1 ) + this.b3p2( t, p2 ) +  this.b3p3( t, p3 );\r\n\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n */\r\n\r\nTHREE.AnimationHandler = (function() {\r\n\r\n\tvar playing = [];\r\n\tvar library = {};\r\n\tvar that    = {};\r\n\r\n\r\n\t//--- update ---\r\n\r\n\tthat.update = function( deltaTimeMS ) {\r\n\r\n\t\tfor( var i = 0; i < playing.length; i ++ )\r\n\t\t\tplaying[ i ].update( deltaTimeMS );\r\n\r\n\t};\r\n\r\n\r\n\t//--- add ---\r\n\r\n\tthat.addToUpdate = function( animation ) {\r\n\r\n\t\tif ( playing.indexOf( animation ) === -1 )\r\n\t\t\tplaying.push( animation );\r\n\r\n\t};\r\n\r\n\r\n\t//--- remove ---\r\n\r\n\tthat.removeFromUpdate = function( animation ) {\r\n\r\n\t\tvar index = playing.indexOf( animation );\r\n\r\n\t\tif( index !== -1 )\r\n\t\t\tplaying.splice( index, 1 );\r\n\r\n\t};\r\n\r\n\r\n\t//--- add ---\r\n\r\n\tthat.add = function( data ) {\r\n\r\n\t\tif ( library[ data.name ] !== undefined )\r\n\t\t\tconsole.log( \"THREE.AnimationHandler.add: Warning! \" + data.name + \" already exists in library. Overwriting.\" );\r\n\r\n\t\tlibrary[ data.name ] = data;\r\n\t\tinitData( data );\r\n\r\n\t};\r\n\r\n\r\n\t//--- get ---\r\n\r\n\tthat.get = function( name ) {\r\n\r\n\t\tif ( typeof name === \"string\" ) {\r\n\r\n\t\t\tif ( library[ name ] ) {\r\n\r\n\t\t\t\treturn library[ name ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.log( \"THREE.AnimationHandler.get: Couldn't find animation \" + name );\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// todo: add simple tween library\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//--- parse ---\r\n\r\n\tthat.parse = function( root ) {\r\n\r\n\t\t// setup hierarchy\r\n\r\n\t\tvar hierarchy = [];\r\n\r\n\t\tif ( root instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\tfor( var b = 0; b < root.bones.length; b++ ) {\r\n\r\n\t\t\t\thierarchy.push( root.bones[ b ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tparseRecurseHierarchy( root, hierarchy );\r\n\r\n\t\t}\r\n\r\n\t\treturn hierarchy;\r\n\r\n\t};\r\n\r\n\tvar parseRecurseHierarchy = function( root, hierarchy ) {\r\n\r\n\t\thierarchy.push( root );\r\n\r\n\t\tfor( var c = 0; c < root.children.length; c++ )\r\n\t\t\tparseRecurseHierarchy( root.children[ c ], hierarchy );\r\n\r\n\t}\r\n\r\n\r\n\t//--- init data ---\r\n\r\n\tvar initData = function( data ) {\r\n\r\n\t\tif( data.initialized === true )\r\n\t\t\treturn;\r\n\r\n\r\n\t\t// loop through all keys\r\n\r\n\t\tfor( var h = 0; h < data.hierarchy.length; h ++ ) {\r\n\r\n\t\t\tfor( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\t// remove minus times\r\n\r\n\t\t\t\tif( data.hierarchy[ h ].keys[ k ].time < 0 )\r\n\t\t\t\t\tdata.hierarchy[ h ].keys[ k ].time = 0;\r\n\r\n\r\n\t\t\t\t// create quaternions\r\n\r\n\t\t\t\tif( data.hierarchy[ h ].keys[ k ].rot !== undefined &&\r\n\t\t\t\t !( data.hierarchy[ h ].keys[ k ].rot instanceof THREE.Quaternion ) ) {\r\n\r\n\t\t\t\t\tvar quat = data.hierarchy[ h ].keys[ k ].rot;\r\n\t\t\t\t\tdata.hierarchy[ h ].keys[ k ].rot = new THREE.Quaternion( quat[0], quat[1], quat[2], quat[3] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// prepare morph target keys\r\n\r\n\t\t\tif( data.hierarchy[ h ].keys.length && data.hierarchy[ h ].keys[ 0 ].morphTargets !== undefined ) {\r\n\r\n\t\t\t\t// get all used\r\n\r\n\t\t\t\tvar usedMorphTargets = {};\r\n\r\n\t\t\t\tfor ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\t\tfor ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\tvar morphTargetName = data.hierarchy[ h ].keys[ k ].morphTargets[ m ];\r\n\t\t\t\t\t\tusedMorphTargets[ morphTargetName ] = -1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdata.hierarchy[ h ].usedMorphTargets = usedMorphTargets;\r\n\r\n\r\n\t\t\t\t// set all used on all frames\r\n\r\n\t\t\t\tfor ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\t\tvar influences = {};\r\n\r\n\t\t\t\t\tfor ( var morphTargetName in usedMorphTargets ) {\r\n\r\n\t\t\t\t\t\tfor ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( data.hierarchy[ h ].keys[ k ].morphTargets[ m ] === morphTargetName ) {\r\n\r\n\t\t\t\t\t\t\t\tinfluences[ morphTargetName ] = data.hierarchy[ h ].keys[ k ].morphTargetsInfluences[ m ];\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( m === data.hierarchy[ h ].keys[ k ].morphTargets.length ) {\r\n\r\n\t\t\t\t\t\t\tinfluences[ morphTargetName ] = 0;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdata.hierarchy[ h ].keys[ k ].morphTargetsInfluences = influences;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// remove all keys that are on the same time\r\n\r\n\t\t\tfor ( var k = 1; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\tif ( data.hierarchy[ h ].keys[ k ].time === data.hierarchy[ h ].keys[ k - 1 ].time ) {\r\n\r\n\t\t\t\t\tdata.hierarchy[ h ].keys.splice( k, 1 );\r\n\t\t\t\t\tk --;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// set index\r\n\r\n\t\t\tfor ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\tdata.hierarchy[ h ].keys[ k ].index = k;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// JIT\r\n\r\n\t\tvar lengthInFrames = parseInt( data.length * data.fps, 10 );\r\n\r\n\t\tdata.JIT = {};\r\n\t\tdata.JIT.hierarchy = [];\r\n\r\n\t\tfor( var h = 0; h < data.hierarchy.length; h ++ )\r\n\t\t\tdata.JIT.hierarchy.push( new Array( lengthInFrames ) );\r\n\r\n\r\n\t\t// done\r\n\r\n\t\tdata.initialized = true;\r\n\r\n\t};\r\n\r\n\r\n\t// interpolation types\r\n\r\n\tthat.LINEAR = 0;\r\n\tthat.CATMULLROM = 1;\r\n\tthat.CATMULLROM_FORWARD = 2;\r\n\r\n\treturn that;\r\n\r\n}());\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Animation = function ( root, name, interpolationType ) {\r\n\r\n\tthis.root = root;\r\n\tthis.data = THREE.AnimationHandler.get( name );\r\n\tthis.hierarchy = THREE.AnimationHandler.parse( root );\r\n\r\n\tthis.currentTime = 0;\r\n\tthis.timeScale = 1;\r\n\r\n\tthis.isPlaying = false;\r\n\tthis.isPaused = true;\r\n\tthis.loop = true;\r\n\r\n\tthis.interpolationType = interpolationType !== undefined ? interpolationType : THREE.AnimationHandler.LINEAR;\r\n\r\n\tthis.points = [];\r\n\tthis.target = new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Animation.prototype.play = function ( loop, startTimeMS ) {\r\n\r\n\tif ( this.isPlaying === false ) {\r\n\r\n\t\tthis.isPlaying = true;\r\n\t\tthis.loop = loop !== undefined ? loop : true;\r\n\t\tthis.currentTime = startTimeMS !== undefined ? startTimeMS : 0;\r\n\r\n\t\t// reset key cache\r\n\r\n\t\tvar h, hl = this.hierarchy.length,\r\n\t\t\tobject;\r\n\r\n\t\tfor ( h = 0; h < hl; h ++ ) {\r\n\r\n\t\t\tobject = this.hierarchy[ h ];\r\n\r\n\t\t\tif ( this.interpolationType !== THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\t\t\tobject.useQuaternion = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.matrixAutoUpdate = true;\r\n\r\n\t\t\tif ( object.animationCache === undefined ) {\r\n\r\n\t\t\t\tobject.animationCache = {};\r\n\t\t\t\tobject.animationCache.prevKey = { pos: 0, rot: 0, scl: 0 };\r\n\t\t\t\tobject.animationCache.nextKey = { pos: 0, rot: 0, scl: 0 };\r\n\t\t\t\tobject.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar prevKey = object.animationCache.prevKey;\r\n\t\t\tvar nextKey = object.animationCache.nextKey;\r\n\r\n\t\t\tprevKey.pos = this.data.hierarchy[ h ].keys[ 0 ];\r\n\t\t\tprevKey.rot = this.data.hierarchy[ h ].keys[ 0 ];\r\n\t\t\tprevKey.scl = this.data.hierarchy[ h ].keys[ 0 ];\r\n\r\n\t\t\tnextKey.pos = this.getNextKeyWith( \"pos\", h, 1 );\r\n\t\t\tnextKey.rot = this.getNextKeyWith( \"rot\", h, 1 );\r\n\t\t\tnextKey.scl = this.getNextKeyWith( \"scl\", h, 1 );\r\n\r\n\t\t}\r\n\r\n\t\tthis.update( 0 );\r\n\r\n\t}\r\n\r\n\tthis.isPaused = false;\r\n\r\n\tTHREE.AnimationHandler.addToUpdate( this );\r\n\r\n};\r\n\r\n\r\nTHREE.Animation.prototype.pause = function() {\r\n\r\n\tif ( this.isPaused === true ) {\r\n\r\n\t\tTHREE.AnimationHandler.addToUpdate( this );\r\n\r\n\t} else {\r\n\r\n\t\tTHREE.AnimationHandler.removeFromUpdate( this );\r\n\r\n\t}\r\n\r\n\tthis.isPaused = !this.isPaused;\r\n\r\n};\r\n\r\n\r\nTHREE.Animation.prototype.stop = function() {\r\n\r\n\tthis.isPlaying = false;\r\n\tthis.isPaused  = false;\r\n\tTHREE.AnimationHandler.removeFromUpdate( this );\r\n\r\n};\r\n\r\n\r\nTHREE.Animation.prototype.update = function ( deltaTimeMS ) {\r\n\r\n\t// early out\r\n\r\n\tif ( this.isPlaying === false ) return;\r\n\r\n\r\n\t// vars\r\n\r\n\tvar types = [ \"pos\", \"rot\", \"scl\" ];\r\n\tvar type;\r\n\tvar scale;\r\n\tvar vector;\r\n\tvar prevXYZ, nextXYZ;\r\n\tvar prevKey, nextKey;\r\n\tvar object;\r\n\tvar animationCache;\r\n\tvar frame;\r\n\tvar JIThierarchy = this.data.JIT.hierarchy;\r\n\tvar currentTime, unloopedCurrentTime;\r\n\tvar currentPoint, forwardPoint, angle;\r\n\r\n\r\n\tthis.currentTime += deltaTimeMS * this.timeScale;\r\n\r\n\tunloopedCurrentTime = this.currentTime;\r\n\tcurrentTime = this.currentTime = this.currentTime % this.data.length;\r\n\tframe = parseInt( Math.min( currentTime * this.data.fps, this.data.length * this.data.fps ), 10 );\r\n\r\n\r\n\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {\r\n\r\n\t\tobject = this.hierarchy[ h ];\r\n\t\tanimationCache = object.animationCache;\r\n\r\n\t\t// loop through pos/rot/scl\r\n\r\n\t\tfor ( var t = 0; t < 3; t ++ ) {\r\n\r\n\t\t\t// get keys\r\n\r\n\t\t\ttype    = types[ t ];\r\n\t\t\tprevKey = animationCache.prevKey[ type ];\r\n\t\t\tnextKey = animationCache.nextKey[ type ];\r\n\r\n\t\t\t// switch keys?\r\n\r\n\t\t\tif ( nextKey.time <= unloopedCurrentTime ) {\r\n\r\n\t\t\t\t// did we loop?\r\n\r\n\t\t\t\tif ( currentTime < unloopedCurrentTime ) {\r\n\r\n\t\t\t\t\tif ( this.loop ) {\r\n\r\n\t\t\t\t\t\tprevKey = this.data.hierarchy[ h ].keys[ 0 ];\r\n\t\t\t\t\t\tnextKey = this.getNextKeyWith( type, h, 1 );\r\n\r\n\t\t\t\t\t\twhile( nextKey.time < currentTime ) {\r\n\r\n\t\t\t\t\t\t\tprevKey = nextKey;\r\n\t\t\t\t\t\t\tnextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis.stop();\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdo {\r\n\r\n\t\t\t\t\t\tprevKey = nextKey;\r\n\t\t\t\t\t\tnextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );\r\n\r\n\t\t\t\t\t} while( nextKey.time < currentTime )\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tanimationCache.prevKey[ type ] = prevKey;\r\n\t\t\t\tanimationCache.nextKey[ type ] = nextKey;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tobject.matrixAutoUpdate = true;\r\n\t\t\tobject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\tscale = ( currentTime - prevKey.time ) / ( nextKey.time - prevKey.time );\r\n\t\t\tprevXYZ = prevKey[ type ];\r\n\t\t\tnextXYZ = nextKey[ type ];\r\n\r\n\r\n\t\t\t// check scale error\r\n\r\n\t\t\tif ( scale < 0 || scale > 1 ) {\r\n\r\n\t\t\t\tconsole.log( \"THREE.Animation.update: Warning! Scale out of bounds:\" + scale + \" on bone \" + h );\r\n\t\t\t\tscale = scale < 0 ? 0 : 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// interpolate\r\n\r\n\t\t\tif ( type === \"pos\" ) {\r\n\r\n\t\t\t\tvector = object.position;\r\n\r\n\t\t\t\tif ( this.interpolationType === THREE.AnimationHandler.LINEAR ) {\r\n\r\n\t\t\t\t\tvector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;\r\n\t\t\t\t\tvector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;\r\n\t\t\t\t\tvector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;\r\n\r\n\t\t\t\t} else if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\r\n\t\t\t\t\t\t    this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\t\t\t\tthis.points[ 0 ] = this.getPrevKeyWith( \"pos\", h, prevKey.index - 1 )[ \"pos\" ];\r\n\t\t\t\t\tthis.points[ 1 ] = prevXYZ;\r\n\t\t\t\t\tthis.points[ 2 ] = nextXYZ;\r\n\t\t\t\t\tthis.points[ 3 ] = this.getNextKeyWith( \"pos\", h, nextKey.index + 1 )[ \"pos\" ];\r\n\r\n\t\t\t\t\tscale = scale * 0.33 + 0.33;\r\n\r\n\t\t\t\t\tcurrentPoint = this.interpolateCatmullRom( this.points, scale );\r\n\r\n\t\t\t\t\tvector.x = currentPoint[ 0 ];\r\n\t\t\t\t\tvector.y = currentPoint[ 1 ];\r\n\t\t\t\t\tvector.z = currentPoint[ 2 ];\r\n\r\n\t\t\t\t\tif ( this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\t\t\t\t\tforwardPoint = this.interpolateCatmullRom( this.points, scale * 1.01 );\r\n\r\n\t\t\t\t\t\tthis.target.set( forwardPoint[ 0 ], forwardPoint[ 1 ], forwardPoint[ 2 ] );\r\n\t\t\t\t\t\tthis.target.sub( vector );\r\n\t\t\t\t\t\tthis.target.y = 0;\r\n\t\t\t\t\t\tthis.target.normalize();\r\n\r\n\t\t\t\t\t\tangle = Math.atan2( this.target.x, this.target.z );\r\n\t\t\t\t\t\tobject.rotation.set( 0, angle, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( type === \"rot\" ) {\r\n\r\n\t\t\t\tTHREE.Quaternion.slerp( prevXYZ, nextXYZ, object.quaternion, scale );\r\n\r\n\t\t\t} else if ( type === \"scl\" ) {\r\n\r\n\t\t\t\tvector = object.scale;\r\n\r\n\t\t\t\tvector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;\r\n\t\t\t\tvector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;\r\n\t\t\t\tvector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Catmull-Rom spline\r\n\r\nTHREE.Animation.prototype.interpolateCatmullRom = function ( points, scale ) {\r\n\r\n\tvar c = [], v3 = [],\r\n\tpoint, intPoint, weight, w2, w3,\r\n\tpa, pb, pc, pd;\r\n\r\n\tpoint = ( points.length - 1 ) * scale;\r\n\tintPoint = Math.floor( point );\r\n\tweight = point - intPoint;\r\n\r\n\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\r\n\tc[ 1 ] = intPoint;\r\n\tc[ 2 ] = intPoint > points.length - 2 ? intPoint : intPoint + 1;\r\n\tc[ 3 ] = intPoint > points.length - 3 ? intPoint : intPoint + 2;\r\n\r\n\tpa = points[ c[ 0 ] ];\r\n\tpb = points[ c[ 1 ] ];\r\n\tpc = points[ c[ 2 ] ];\r\n\tpd = points[ c[ 3 ] ];\r\n\r\n\tw2 = weight * weight;\r\n\tw3 = weight * w2;\r\n\r\n\tv3[ 0 ] = this.interpolate( pa[ 0 ], pb[ 0 ], pc[ 0 ], pd[ 0 ], weight, w2, w3 );\r\n\tv3[ 1 ] = this.interpolate( pa[ 1 ], pb[ 1 ], pc[ 1 ], pd[ 1 ], weight, w2, w3 );\r\n\tv3[ 2 ] = this.interpolate( pa[ 2 ], pb[ 2 ], pc[ 2 ], pd[ 2 ], weight, w2, w3 );\r\n\r\n\treturn v3;\r\n\r\n};\r\n\r\nTHREE.Animation.prototype.interpolate = function ( p0, p1, p2, p3, t, t2, t3 ) {\r\n\r\n\tvar v0 = ( p2 - p0 ) * 0.5,\r\n\t\tv1 = ( p3 - p1 ) * 0.5;\r\n\r\n\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n};\r\n\r\n\r\n\r\n// Get next key with\r\n\r\nTHREE.Animation.prototype.getNextKeyWith = function ( type, h, key ) {\r\n\r\n\tvar keys = this.data.hierarchy[ h ].keys;\r\n\r\n\tif ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\r\n\t\t this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\tkey = key < keys.length - 1 ? key : keys.length - 1;\r\n\r\n\t} else {\r\n\r\n\t\tkey = key % keys.length;\r\n\r\n\t}\r\n\r\n\tfor ( ; key < keys.length; key++ ) {\r\n\r\n\t\tif ( keys[ key ][ type ] !== undefined ) {\r\n\r\n\t\t\treturn keys[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn this.data.hierarchy[ h ].keys[ 0 ];\r\n\r\n};\r\n\r\n// Get previous key with\r\n\r\nTHREE.Animation.prototype.getPrevKeyWith = function ( type, h, key ) {\r\n\r\n\tvar keys = this.data.hierarchy[ h ].keys;\r\n\r\n\tif ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\r\n\t\t this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\tkey = key > 0 ? key : 0;\r\n\r\n\t} else {\r\n\r\n\t\tkey = key >= 0 ? key : key + keys.length;\r\n\r\n\t}\r\n\r\n\r\n\tfor ( ; key >= 0; key -- ) {\r\n\r\n\t\tif ( keys[ key ][ type ] !== undefined ) {\r\n\r\n\t\t\treturn keys[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn this.data.hierarchy[ h ].keys[ keys.length - 1 ];\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author khang duong\r\n * @author erik kitson\r\n */\r\n\r\nTHREE.KeyFrameAnimation = function( root, data, JITCompile ) {\r\n\r\n\tthis.root = root;\r\n\tthis.data = THREE.AnimationHandler.get( data );\r\n\tthis.hierarchy = THREE.AnimationHandler.parse( root );\r\n\tthis.currentTime = 0;\r\n\tthis.timeScale = 0.001;\r\n\tthis.isPlaying = false;\r\n\tthis.isPaused = true;\r\n\tthis.loop = true;\r\n\tthis.JITCompile = JITCompile !== undefined ? JITCompile : true;\r\n\r\n\t// initialize to first keyframes\r\n\r\n\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {\r\n\r\n\t\tvar keys = this.data.hierarchy[h].keys,\r\n\t\t\tsids = this.data.hierarchy[h].sids,\r\n\t\t\tobj = this.hierarchy[h];\r\n\r\n\t\tif ( keys.length && sids ) {\r\n\r\n\t\t\tfor ( var s = 0; s < sids.length; s++ ) {\r\n\r\n\t\t\t\tvar sid = sids[ s ],\r\n\t\t\t\t\tnext = this.getNextKeyWith( sid, h, 0 );\r\n\r\n\t\t\t\tif ( next ) {\r\n\r\n\t\t\t\t\tnext.apply( sid );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobj.matrixAutoUpdate = false;\r\n\t\t\tthis.data.hierarchy[h].node.updateMatrix();\r\n\t\t\tobj.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Play\r\n\r\nTHREE.KeyFrameAnimation.prototype.play = function( loop, startTimeMS ) {\r\n\r\n\tif( !this.isPlaying ) {\r\n\r\n\t\tthis.isPlaying = true;\r\n\t\tthis.loop = loop !== undefined ? loop : true;\r\n\t\tthis.currentTime = startTimeMS !== undefined ? startTimeMS : 0;\r\n\t\tthis.startTimeMs = startTimeMS;\r\n\t\tthis.startTime = 10000000;\r\n\t\tthis.endTime = -this.startTime;\r\n\r\n\r\n\t\t// reset key cache\r\n\r\n\t\tvar h, hl = this.hierarchy.length,\r\n\t\t\tobject,\r\n\t\t\tnode;\r\n\r\n\t\tfor ( h = 0; h < hl; h++ ) {\r\n\r\n\t\t\tobject = this.hierarchy[ h ];\r\n\t\t\tnode = this.data.hierarchy[ h ];\r\n\t\t\tobject.useQuaternion = true;\r\n\r\n\t\t\tif ( node.animationCache === undefined ) {\r\n\r\n\t\t\t\tnode.animationCache = {};\r\n\t\t\t\tnode.animationCache.prevKey = null;\r\n\t\t\t\tnode.animationCache.nextKey = null;\r\n\t\t\t\tnode.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar keys = this.data.hierarchy[h].keys;\r\n\r\n\t\t\tif (keys.length) {\r\n\r\n\t\t\t\tnode.animationCache.prevKey = keys[ 0 ];\r\n\t\t\t\tnode.animationCache.nextKey = keys[ 1 ];\r\n\r\n\t\t\t\tthis.startTime = Math.min( keys[0].time, this.startTime );\r\n\t\t\t\tthis.endTime = Math.max( keys[keys.length - 1].time, this.endTime );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.update( 0 );\r\n\r\n\t}\r\n\r\n\tthis.isPaused = false;\r\n\r\n\tTHREE.AnimationHandler.addToUpdate( this );\r\n\r\n};\r\n\r\n\r\n\r\n// Pause\r\n\r\nTHREE.KeyFrameAnimation.prototype.pause = function() {\r\n\r\n\tif( this.isPaused ) {\r\n\r\n\t\tTHREE.AnimationHandler.addToUpdate( this );\r\n\r\n\t} else {\r\n\r\n\t\tTHREE.AnimationHandler.removeFromUpdate( this );\r\n\r\n\t}\r\n\r\n\tthis.isPaused = !this.isPaused;\r\n\r\n};\r\n\r\n\r\n// Stop\r\n\r\nTHREE.KeyFrameAnimation.prototype.stop = function() {\r\n\r\n\tthis.isPlaying = false;\r\n\tthis.isPaused  = false;\r\n\tTHREE.AnimationHandler.removeFromUpdate( this );\r\n\r\n\r\n\t// reset JIT matrix and remove cache\r\n\r\n\tfor ( var h = 0; h < this.data.hierarchy.length; h++ ) {\r\n        \r\n        var obj = this.hierarchy[ h ];\r\n\t\tvar node = this.data.hierarchy[ h ];\r\n\r\n\t\tif ( node.animationCache !== undefined ) {\r\n\r\n\t\t\tvar original = node.animationCache.originalMatrix;\r\n\r\n\t\t\tif( obj instanceof THREE.Bone ) {\r\n\r\n\t\t\t\toriginal.copy( obj.skinMatrix );\r\n\t\t\t\tobj.skinMatrix = original;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\toriginal.copy( obj.matrix );\r\n\t\t\t\tobj.matrix = original;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdelete node.animationCache;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// Update\r\n\r\nTHREE.KeyFrameAnimation.prototype.update = function( deltaTimeMS ) {\r\n\r\n\t// early out\r\n\r\n\tif( !this.isPlaying ) return;\r\n\r\n\r\n\t// vars\r\n\r\n\tvar prevKey, nextKey;\r\n\tvar object;\r\n\tvar node;\r\n\tvar frame;\r\n\tvar JIThierarchy = this.data.JIT.hierarchy;\r\n\tvar currentTime, unloopedCurrentTime;\r\n\tvar looped;\r\n\r\n\r\n\t// update\r\n\r\n\tthis.currentTime += deltaTimeMS * this.timeScale;\r\n\r\n\tunloopedCurrentTime = this.currentTime;\r\n\tcurrentTime         = this.currentTime = this.currentTime % this.data.length;\r\n\r\n\t// if looped around, the current time should be based on the startTime\r\n\tif ( currentTime < this.startTimeMs ) {\r\n\r\n\t\tcurrentTime = this.currentTime = this.startTimeMs + currentTime;\r\n\r\n\t}\r\n\r\n\tframe               = parseInt( Math.min( currentTime * this.data.fps, this.data.length * this.data.fps ), 10 );\r\n\tlooped \t\t\t\t= currentTime < unloopedCurrentTime;\r\n\r\n\tif ( looped && !this.loop ) {\r\n\r\n\t\t// Set the animation to the last keyframes and stop\r\n\t\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {\r\n\r\n\t\t\tvar keys = this.data.hierarchy[h].keys,\r\n\t\t\t\tsids = this.data.hierarchy[h].sids,\r\n\t\t\t\tend = keys.length-1,\r\n\t\t\t\tobj = this.hierarchy[h];\r\n\r\n\t\t\tif ( keys.length ) {\r\n\r\n\t\t\t\tfor ( var s = 0; s < sids.length; s++ ) {\r\n\r\n\t\t\t\t\tvar sid = sids[ s ],\r\n\t\t\t\t\t\tprev = this.getPrevKeyWith( sid, h, end );\r\n\r\n\t\t\t\t\tif ( prev ) {\r\n\t\t\t\t\t\tprev.apply( sid );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.data.hierarchy[h].node.updateMatrix();\r\n\t\t\t\tobj.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.stop();\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\t// check pre-infinity\r\n\tif ( currentTime < this.startTime ) {\r\n\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\t// update\r\n\r\n\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {\r\n\r\n\t\tobject = this.hierarchy[ h ];\r\n\t\tnode = this.data.hierarchy[ h ];\r\n\r\n\t\tvar keys = node.keys,\r\n\t\t\tanimationCache = node.animationCache;\r\n\r\n\t\t// use JIT?\r\n\r\n\t\tif ( this.JITCompile && JIThierarchy[ h ][ frame ] !== undefined ) {\r\n\r\n\t\t\tif( object instanceof THREE.Bone ) {\r\n\r\n\t\t\t\tobject.skinMatrix = JIThierarchy[ h ][ frame ];\r\n\t\t\t\tobject.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tobject.matrix = JIThierarchy[ h ][ frame ];\r\n\t\t\t\tobject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t// use interpolation\r\n\r\n\t\t} else if ( keys.length ) {\r\n\r\n\t\t\t// make sure so original matrix and not JIT matrix is set\r\n\r\n\t\t\tif ( this.JITCompile && animationCache ) {\r\n\r\n\t\t\t\tif( object instanceof THREE.Bone ) {\r\n\r\n\t\t\t\t\tobject.skinMatrix = animationCache.originalMatrix;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tobject.matrix = animationCache.originalMatrix;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprevKey = animationCache.prevKey;\r\n\t\t\tnextKey = animationCache.nextKey;\r\n\r\n\t\t\tif ( prevKey && nextKey ) {\r\n\r\n\t\t\t\t// switch keys?\r\n\r\n\t\t\t\tif ( nextKey.time <= unloopedCurrentTime ) {\r\n\r\n\t\t\t\t\t// did we loop?\r\n\r\n\t\t\t\t\tif ( looped && this.loop ) {\r\n\r\n\t\t\t\t\t\tprevKey = keys[ 0 ];\r\n\t\t\t\t\t\tnextKey = keys[ 1 ];\r\n\r\n\t\t\t\t\t\twhile ( nextKey.time < currentTime ) {\r\n\r\n\t\t\t\t\t\t\tprevKey = nextKey;\r\n\t\t\t\t\t\t\tnextKey = keys[ prevKey.index + 1 ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( !looped ) {\r\n\r\n\t\t\t\t\t\tvar lastIndex = keys.length - 1;\r\n\r\n\t\t\t\t\t\twhile ( nextKey.time < currentTime && nextKey.index !== lastIndex ) {\r\n\r\n\t\t\t\t\t\t\tprevKey = nextKey;\r\n\t\t\t\t\t\t\tnextKey = keys[ prevKey.index + 1 ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tanimationCache.prevKey = prevKey;\r\n\t\t\t\t\tanimationCache.nextKey = nextKey;\r\n\r\n\t\t\t\t}\r\n                if(nextKey.time >= currentTime)\r\n                    prevKey.interpolate( nextKey, currentTime );\r\n                else\r\n                    prevKey.interpolate( nextKey, nextKey.time);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.data.hierarchy[h].node.updateMatrix();\r\n\t\t\tobject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// update JIT?\r\n\r\n\tif ( this.JITCompile ) {\r\n\r\n\t\tif ( JIThierarchy[ 0 ][ frame ] === undefined ) {\r\n\r\n\t\t\tthis.hierarchy[ 0 ].updateMatrixWorld( true );\r\n\r\n\t\t\tfor ( var h = 0; h < this.hierarchy.length; h++ ) {\r\n\r\n\t\t\t\tif( this.hierarchy[ h ] instanceof THREE.Bone ) {\r\n\r\n\t\t\t\t\tJIThierarchy[ h ][ frame ] = this.hierarchy[ h ].skinMatrix.clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tJIThierarchy[ h ][ frame ] = this.hierarchy[ h ].matrix.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Get next key with\r\n\r\nTHREE.KeyFrameAnimation.prototype.getNextKeyWith = function( sid, h, key ) {\r\n\r\n\tvar keys = this.data.hierarchy[ h ].keys;\r\n\tkey = key % keys.length;\r\n\r\n\tfor ( ; key < keys.length; key++ ) {\r\n\r\n\t\tif ( keys[ key ].hasTarget( sid ) ) {\r\n\r\n\t\t\treturn keys[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn keys[ 0 ];\r\n\r\n};\r\n\r\n// Get previous key with\r\n\r\nTHREE.KeyFrameAnimation.prototype.getPrevKeyWith = function( sid, h, key ) {\r\n\r\n\tvar keys = this.data.hierarchy[ h ].keys;\r\n\tkey = key >= 0 ? key : key + keys.length;\r\n\r\n\tfor ( ; key >= 0; key-- ) {\r\n\r\n\t\tif ( keys[ key ].hasTarget( sid ) ) {\r\n\r\n\t\t\treturn keys[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn keys[ keys.length - 1 ];\r\n\r\n};\r\n/**\r\n * Camera for rendering cube maps\r\n *\t- renders scene into axis-aligned cube\r\n *\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tvar fov = 90, aspect = 1;\r\n\r\n\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPX.up.set( 0, -1, 0 );\r\n\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\r\n\tthis.add( cameraPX );\r\n\r\n\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNX.up.set( 0, -1, 0 );\r\n\tcameraNX.lookAt( new THREE.Vector3( -1, 0, 0 ) );\r\n\tthis.add( cameraNX );\r\n\r\n\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPY.up.set( 0, 0, 1 );\r\n\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\r\n\tthis.add( cameraPY );\r\n\r\n\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNY.up.set( 0, 0, -1 );\r\n\tcameraNY.lookAt( new THREE.Vector3( 0, -1, 0 ) );\r\n\tthis.add( cameraNY );\r\n\r\n\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPZ.up.set( 0, -1, 0 );\r\n\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\r\n\tthis.add( cameraPZ );\r\n\r\n\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNZ.up.set( 0, -1, 0 );\r\n\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, -1 ) );\r\n\tthis.add( cameraNZ );\r\n\r\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );\r\n\r\n\tthis.updateCubeMap = function ( renderer, scene ) {\r\n\r\n\t\tvar renderTarget = this.renderTarget;\r\n\t\tvar generateMipmaps = renderTarget.generateMipmaps;\r\n\r\n\t\trenderTarget.generateMipmaps = false;\r\n\r\n\t\trenderTarget.activeCubeFace = 0;\r\n\t\trenderer.render( scene, cameraPX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 1;\r\n\t\trenderer.render( scene, cameraNX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 2;\r\n\t\trenderer.render( scene, cameraPY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 3;\r\n\t\trenderer.render( scene, cameraNY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 4;\r\n\t\trenderer.render( scene, cameraPZ, renderTarget );\r\n\r\n\t\trenderTarget.generateMipmaps = generateMipmaps;\r\n\r\n\t\trenderTarget.activeCubeFace = 5;\r\n\t\trenderer.render( scene, cameraNZ, renderTarget );\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\r\n/*\r\n *\t@author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog\r\n *\r\n *\tA general perpose camera, for setting FOV, Lens Focal Length,\r\n *\t\tand switching between perspective and orthographic views easily.\r\n *\t\tUse this only if you do not wish to manage\r\n *\t\tboth a Orthographic and Perspective Camera\r\n *\r\n */\r\n\r\n\r\nTHREE.CombinedCamera = function ( width, height, fov, near, far, orthoNear, orthoFar ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.fov = fov;\r\n\r\n\tthis.left = -width / 2;\r\n\tthis.right = width / 2\r\n\tthis.top = height / 2;\r\n\tthis.bottom = -height / 2;\r\n\r\n\t// We could also handle the projectionMatrix internally, but just wanted to test nested camera objects\r\n\r\n\tthis.cameraO = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, \torthoNear, orthoFar );\r\n\tthis.cameraP = new THREE.PerspectiveCamera( fov, width / height, near, far );\r\n\r\n\tthis.zoom = 1;\r\n\r\n\tthis.toPerspective();\r\n\r\n\tvar aspect = width/height;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype = Object.create( THREE.Camera.prototype );\r\n\r\nTHREE.CombinedCamera.prototype.toPerspective = function () {\r\n\r\n\t// Switches to the Perspective Camera\r\n\r\n\tthis.near = this.cameraP.near;\r\n\tthis.far = this.cameraP.far;\r\n\r\n\tthis.cameraP.fov =  this.fov / this.zoom ;\r\n\r\n\tthis.cameraP.updateProjectionMatrix();\r\n\r\n\tthis.projectionMatrix = this.cameraP.projectionMatrix;\r\n\r\n\tthis.inPerspectiveMode = true;\r\n\tthis.inOrthographicMode = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toOrthographic = function () {\r\n\r\n\t// Switches to the Orthographic camera estimating viewport from Perspective\r\n\r\n\tvar fov = this.fov;\r\n\tvar aspect = this.cameraP.aspect;\r\n\tvar near = this.cameraP.near;\r\n\tvar far = this.cameraP.far;\r\n\r\n\t// The size that we set is the mid plane of the viewing frustum\r\n\r\n\tvar hyperfocus = ( near + far ) / 2;\r\n\r\n\tvar halfHeight = Math.tan( fov / 2 ) * hyperfocus;\r\n\tvar planeHeight = 2 * halfHeight;\r\n\tvar planeWidth = planeHeight * aspect;\r\n\tvar halfWidth = planeWidth / 2;\r\n\r\n\thalfHeight /= this.zoom;\r\n\thalfWidth /= this.zoom;\r\n\r\n\tthis.cameraO.left = -halfWidth;\r\n\tthis.cameraO.right = halfWidth;\r\n\tthis.cameraO.top = halfHeight;\r\n\tthis.cameraO.bottom = -halfHeight;\r\n\r\n\t// this.cameraO.left = -farHalfWidth;\r\n\t// this.cameraO.right = farHalfWidth;\r\n\t// this.cameraO.top = farHalfHeight;\r\n\t// this.cameraO.bottom = -farHalfHeight;\r\n\r\n\t// this.cameraO.left = this.left / this.zoom;\r\n\t// this.cameraO.right = this.right / this.zoom;\r\n\t// this.cameraO.top = this.top / this.zoom;\r\n\t// this.cameraO.bottom = this.bottom / this.zoom;\r\n\r\n\tthis.cameraO.updateProjectionMatrix();\r\n\r\n\tthis.near = this.cameraO.near;\r\n\tthis.far = this.cameraO.far;\r\n\tthis.projectionMatrix = this.cameraO.projectionMatrix;\r\n\r\n\tthis.inPerspectiveMode = false;\r\n\tthis.inOrthographicMode = true;\r\n\r\n};\r\n\r\n\r\nTHREE.CombinedCamera.prototype.setSize = function( width, height ) {\r\n\r\n\tthis.cameraP.aspect = width / height;\r\n\tthis.left = -width / 2;\r\n\tthis.right = width / 2\r\n\tthis.top = height / 2;\r\n\tthis.bottom = -height / 2;\r\n\r\n};\r\n\r\n\r\nTHREE.CombinedCamera.prototype.setFov = function( fov ) {\r\n\r\n\tthis.fov = fov;\r\n\r\n\tif ( this.inPerspectiveMode ) {\r\n\r\n\t\tthis.toPerspective();\r\n\r\n\t} else {\r\n\r\n\t\tthis.toOrthographic();\r\n\r\n\t}\r\n\r\n};\r\n\r\n// For mantaining similar API with PerspectiveCamera\r\n\r\nTHREE.CombinedCamera.prototype.updateProjectionMatrix = function() {\r\n\r\n\tif ( this.inPerspectiveMode ) {\r\n\r\n\t\tthis.toPerspective();\r\n\r\n\t} else {\r\n\r\n\t\tthis.toPerspective();\r\n\t\tthis.toOrthographic();\r\n\r\n\t}\r\n\r\n};\r\n\r\n/*\r\n* Uses Focal Length (in mm) to estimate and set FOV\r\n* 35mm (fullframe) camera is used if frame size is not specified;\r\n* Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\r\n*/\r\nTHREE.CombinedCamera.prototype.setLens = function ( focalLength, frameHeight ) {\r\n\r\n\tif ( frameHeight === undefined ) frameHeight = 24;\r\n\r\n\tvar fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\r\n\r\n\tthis.setFov( fov );\r\n\r\n\treturn fov;\r\n};\r\n\r\n\r\nTHREE.CombinedCamera.prototype.setZoom = function( zoom ) {\r\n\r\n\tthis.zoom = zoom;\r\n\r\n\tif ( this.inPerspectiveMode ) {\r\n\r\n\t\tthis.toPerspective();\r\n\r\n\t} else {\r\n\r\n\t\tthis.toOrthographic();\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toFrontView = function() {\r\n\r\n\tthis.rotation.x = 0;\r\n\tthis.rotation.y = 0;\r\n\tthis.rotation.z = 0;\r\n\r\n\t// should we be modifing the matrix instead?\r\n\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toBackView = function() {\r\n\r\n\tthis.rotation.x = 0;\r\n\tthis.rotation.y = Math.PI;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toLeftView = function() {\r\n\r\n\tthis.rotation.x = 0;\r\n\tthis.rotation.y = - Math.PI / 2;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toRightView = function() {\r\n\r\n\tthis.rotation.x = 0;\r\n\tthis.rotation.y = Math.PI / 2;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toTopView = function() {\r\n\r\n\tthis.rotation.x = - Math.PI / 2;\r\n\tthis.rotation.y = 0;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toBottomView = function() {\r\n\r\n\tthis.rotation.x = Math.PI / 2;\r\n\tthis.rotation.y = 0;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- 3d asterisk shape (for line pieces THREE.Line)\r\n */\r\n\r\nTHREE.AsteriskGeometry = function ( innerRadius, outerRadius ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar sd = innerRadius;\r\n\tvar ed = outerRadius;\r\n\r\n\tvar sd2 = 0.707 * sd;\r\n\tvar ed2 = 0.707 * ed;\r\n\r\n\tvar rays = [ [ sd, 0, 0 ], [ ed, 0, 0 ], [ -sd, 0, 0 ], [ -ed, 0, 0 ],\r\n\t\t\t\t [ 0, sd, 0 ], [ 0, ed, 0 ], [ 0, -sd, 0 ], [ 0, -ed, 0 ],\r\n\t\t\t\t [ 0, 0, sd ], [ 0, 0, ed ], [ 0, 0, -sd ], [ 0, 0, -ed ],\r\n\t\t\t\t [ sd2, sd2, 0 ], [ ed2, ed2, 0 ], [ -sd2, -sd2, 0 ], [ -ed2, -ed2, 0 ],\r\n\t\t\t\t [ sd2, -sd2, 0 ], [ ed2, -ed2, 0 ], [ -sd2, sd2, 0 ], [ -ed2, ed2, 0 ],\r\n\t\t\t\t [ sd2, 0, sd2 ], [ ed2, 0, ed2 ], [ -sd2, 0, -sd2 ], [ -ed2, 0, -ed2 ],\r\n\t\t\t\t [ sd2, 0, -sd2 ], [ ed2, 0, -ed2 ], [ -sd2, 0, sd2 ], [ -ed2, 0, ed2 ],\r\n\t\t\t\t [ 0, sd2, sd2 ], [ 0, ed2, ed2 ], [ 0, -sd2, -sd2 ], [ 0, -ed2, -ed2 ],\r\n\t\t\t\t [ 0, sd2, -sd2 ], [ 0, ed2, -ed2 ], [ 0, -sd2, sd2 ], [ 0, -ed2, ed2 ]\r\n\t];\r\n\r\n\tfor ( var i = 0, il = rays.length; i < il; i ++ ) {\r\n\r\n\t\tvar x = rays[ i ][ 0 ];\r\n\t\tvar y = rays[ i ][ 1 ];\r\n\t\tvar z = rays[ i ][ 2 ];\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( x, y, z ) );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.AsteriskGeometry.prototype = Object.create( THREE.Geometry.prototype );/**\r\n * @author hughes\r\n */\r\n\r\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\r\n    THREE.Geometry.call( this );\r\n\r\n    radius = radius || 50;\r\n\r\n    thetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n    segments = segments !== undefined ? Math.max( 3, segments ) : 8;\r\n\r\n    var i, uvs = [],\r\n    center = new THREE.Vector3(), centerUV = new THREE.Vector2( 0.5, 0.5 );\r\n\r\n    this.vertices.push(center);\r\n    uvs.push( centerUV );\r\n\r\n    for ( i = 0; i <= segments; i ++ ) {\r\n\r\n        var vertex = new THREE.Vector3();\r\n\r\n        vertex.x = radius * Math.cos( thetaStart + i / segments * thetaLength );\r\n        vertex.y = radius * Math.sin( thetaStart + i / segments * thetaLength );\r\n\r\n        this.vertices.push( vertex );\r\n        uvs.push( new THREE.Vector2( ( vertex.x / radius + 1 ) / 2, - ( vertex.y / radius + 1 ) / 2 + 1 ) );\r\n\r\n    }\r\n\r\n    var n = new THREE.Vector3( 0, 0, -1 );\r\n\r\n    for ( i = 1; i <= segments; i ++ ) {\r\n\r\n        var v1 = i;\r\n        var v2 = i + 1 ;\r\n        var v3 = 0;\r\n\r\n        this.faces.push( new THREE.Face3( v1, v2, v3, [ n, n, n ] ) );\r\n        this.faceVertexUvs[ 0 ].push( [ uvs[ i ], uvs[ i + 1 ], centerUV ] );\r\n\r\n    }\r\n\r\n    this.computeCentroids();\r\n    this.computeFaceNormals();\r\n\r\n    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\r\n */\r\n\r\nTHREE.CubeGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\tthis.depth = depth;\r\n\r\n\tthis.widthSegments = widthSegments || 1;\r\n\tthis.heightSegments = heightSegments || 1;\r\n\tthis.depthSegments = depthSegments || 1;\r\n\r\n\tvar width_half = this.width / 2;\r\n\tvar height_half = this.height / 2;\r\n\tvar depth_half = this.depth / 2;\r\n\r\n\tbuildPlane( 'z', 'y', - 1, - 1, this.depth, this.height, width_half, 0 ); // px\r\n\tbuildPlane( 'z', 'y',   1, - 1, this.depth, this.height, - width_half, 1 ); // nx\r\n\tbuildPlane( 'x', 'z',   1,   1, this.width, this.depth, height_half, 2 ); // py\r\n\tbuildPlane( 'x', 'z',   1, - 1, this.width, this.depth, - height_half, 3 ); // ny\r\n\tbuildPlane( 'x', 'y',   1, - 1, this.width, this.height, depth_half, 4 ); // pz\r\n\tbuildPlane( 'x', 'y', - 1, - 1, this.width, this.height, - depth_half, 5 ); // nz\r\n\r\n\tfunction buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {\r\n\r\n\t\tvar w, ix, iy,\r\n\t\tgridX = scope.widthSegments,\r\n\t\tgridY = scope.heightSegments,\r\n\t\twidth_half = width / 2,\r\n\t\theight_half = height / 2,\r\n\t\toffset = scope.vertices.length;\r\n\r\n\t\tif ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {\r\n\r\n\t\t\tw = 'z';\r\n\r\n\t\t} else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {\r\n\r\n\t\t\tw = 'y';\r\n\t\t\tgridY = scope.depthSegments;\r\n\r\n\t\t} else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {\r\n\r\n\t\t\tw = 'x';\r\n\t\t\tgridX = scope.depthSegments;\r\n\r\n\t\t}\r\n\r\n\t\tvar gridX1 = gridX + 1,\r\n\t\tgridY1 = gridY + 1,\r\n\t\tsegment_width = width / gridX,\r\n\t\tsegment_height = height / gridY,\r\n\t\tnormal = new THREE.Vector3();\r\n\r\n\t\tnormal[ w ] = depth > 0 ? 1 : - 1;\r\n\r\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\tvar vector = new THREE.Vector3();\r\n\t\t\t\tvector[ u ] = ( ix * segment_width - width_half ) * udir;\r\n\t\t\t\tvector[ v ] = ( iy * segment_height - height_half ) * vdir;\r\n\t\t\t\tvector[ w ] = depth;\r\n\r\n\t\t\t\tscope.vertices.push( vector );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( iy = 0; iy < gridY; iy++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX; ix++ ) {\r\n\r\n\t\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\tvar face = new THREE.Face4( a + offset, b + offset, c + offset, d + offset );\r\n\t\t\t\tface.normal.copy( normal );\r\n\t\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone(), normal.clone() );\r\n\t\t\t\tface.materialIndex = materialIndex;\r\n\r\n\t\t\t\tscope.faces.push( face );\r\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\t\t\t\tnew THREE.Vector2( ix / gridX, 1 - iy / gridY ),\r\n\t\t\t\t\t\t\tnew THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY ),\r\n\t\t\t\t\t\t\tnew THREE.Vector2( ( ix + 1 ) / gridX, 1- ( iy + 1 ) / gridY ),\r\n\t\t\t\t\t\t\tnew THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY )\r\n\t\t\t\t\t\t] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.CubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\r\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\r\n\theight = height !== undefined ? height : 100;\r\n\r\n\tvar heightHalf = height / 2;\r\n\tvar segmentsX = radiusSegments || 8;\r\n\tvar segmentsY = heightSegments || 1;\r\n\r\n\tvar x, y, vertices = [], uvs = [];\r\n\r\n\tfor ( y = 0; y <= segmentsY; y ++ ) {\r\n\r\n\t\tvar verticesRow = [];\r\n\t\tvar uvsRow = [];\r\n\r\n\t\tvar v = y / segmentsY;\r\n\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\r\n\t\tfor ( x = 0; x <= segmentsX; x ++ ) {\r\n\r\n\t\t\tvar u = x / segmentsX;\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\tvertex.x = radius * Math.sin( u * Math.PI * 2 );\r\n\t\t\tvertex.y = - v * height + heightHalf;\r\n\t\t\tvertex.z = radius * Math.cos( u * Math.PI * 2 );\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t\tverticesRow.push( this.vertices.length - 1 );\r\n\t\t\tuvsRow.push( new THREE.Vector2( u, 1 - v ) );\r\n\r\n\t\t}\r\n\r\n\t\tvertices.push( verticesRow );\r\n\t\tuvs.push( uvsRow );\r\n\r\n\t}\r\n\r\n\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\r\n\tvar na, nb;\r\n\r\n\tfor ( x = 0; x < segmentsX; x ++ ) {\r\n\r\n\t\tif ( radiusTop !== 0 ) {\r\n\r\n\t\t\tna = this.vertices[ vertices[ 0 ][ x ] ].clone();\r\n\t\t\tnb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tna = this.vertices[ vertices[ 1 ][ x ] ].clone();\r\n\t\t\tnb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();\r\n\r\n\t\t}\r\n\r\n\t\tna.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();\r\n\t\tnb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();\r\n\r\n\t\tfor ( y = 0; y < segmentsY; y ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x ];\r\n\t\t\tvar v2 = vertices[ y + 1 ][ x ];\r\n\t\t\tvar v3 = vertices[ y + 1 ][ x + 1 ];\r\n\t\t\tvar v4 = vertices[ y ][ x + 1 ];\r\n\r\n\t\t\tvar n1 = na.clone();\r\n\t\t\tvar n2 = na.clone();\r\n\t\t\tvar n3 = nb.clone();\r\n\t\t\tvar n4 = nb.clone();\r\n\r\n\t\t\tvar uv1 = uvs[ y ][ x ].clone();\r\n\t\t\tvar uv2 = uvs[ y + 1 ][ x ].clone();\r\n\t\t\tvar uv3 = uvs[ y + 1 ][ x + 1 ].clone();\r\n\t\t\tvar uv4 = uvs[ y ][ x + 1 ].clone();\r\n\r\n\t\t\tthis.faces.push( new THREE.Face4( v1, v2, v3, v4, [ n1, n2, n3, n4 ] ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3, uv4 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// top cap\r\n\r\n\tif ( !openEnded && radiusTop > 0 ) {\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );\r\n\r\n\t\tfor ( x = 0; x < segmentsX; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ 0 ][ x ];\r\n\t\t\tvar v2 = vertices[ 0 ][ x + 1 ];\r\n\t\t\tvar v3 = this.vertices.length - 1;\r\n\r\n\t\t\tvar n1 = new THREE.Vector3( 0, 1, 0 );\r\n\t\t\tvar n2 = new THREE.Vector3( 0, 1, 0 );\r\n\t\t\tvar n3 = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\t\t\tvar uv1 = uvs[ 0 ][ x ].clone();\r\n\t\t\tvar uv2 = uvs[ 0 ][ x + 1 ].clone();\r\n\t\t\tvar uv3 = new THREE.Vector2( uv2.u, 0 );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// bottom cap\r\n\r\n\tif ( !openEnded && radiusBottom > 0 ) {\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );\r\n\r\n\t\tfor ( x = 0; x < segmentsX; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\r\n\t\t\tvar v2 = vertices[ y ][ x ];\r\n\t\t\tvar v3 = this.vertices.length - 1;\r\n\r\n\t\t\tvar n1 = new THREE.Vector3( 0, - 1, 0 );\r\n\t\t\tvar n2 = new THREE.Vector3( 0, - 1, 0 );\r\n\t\t\tvar n3 = new THREE.Vector3( 0, - 1, 0 );\r\n\r\n\t\t\tvar uv1 = uvs[ y ][ x + 1 ].clone();\r\n\t\t\tvar uv2 = uvs[ y ][ x ].clone();\r\n\t\t\tvar uv3 = new THREE.Vector2( uv2.u, 1 );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\r\n}\r\n\r\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n * Creates extruded geometry from a path shape.\r\n *\r\n * parameters = {\r\n *\r\n *  size: <float>, // size of the text\r\n *  height: <float>, // thickness to extrude text\r\n *  curveSegments: <int>, // number of points on the curves\r\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segements of extrude spline too\r\n *  amount: <int>, // Amount\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into text bevel goes\r\n *  bevelSize: <float>, // how far from text outline is bevel\r\n *  bevelSegments: <int>, // number of bevel layers\r\n *\r\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\r\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\r\n *\r\n *  material: <int> // material index for front and back faces\r\n *  extrudeMaterial: <int> // material index for extrusion and beveled faces\r\n *  uvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\r\n\r\n\tif ( typeof( shapes ) === \"undefined\" ) {\r\n\t\tshapes = [];\r\n\t\treturn;\r\n\t}\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tshapes = shapes instanceof Array ? shapes : [ shapes ];\r\n\r\n\tthis.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\r\n\t// can't really use automatic vertex normals\r\n\t// as then front and back sides get smoothed too\r\n\t// should do separate smoothing just for sides\r\n\r\n\t//this.computeVertexNormals();\r\n\r\n\t//console.log( \"took\", ( Date.now() - startTime ) );\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\tvar sl = shapes.length;\r\n\r\n\tfor ( var s = 0; s < sl; s ++ ) {\r\n\t\tvar shape = shapes[ s ];\r\n\t\tthis.addShape( shape, options );\r\n\t}\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tvar amount = options.amount !== undefined ? options.amount : 100;\r\n\r\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\r\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\r\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\r\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\r\n\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\r\n\tvar extrudePath = options.extrudePath;\r\n\tvar extrudePts, extrudeByPath = false;\r\n\r\n\tvar material = options.material;\r\n\tvar extrudeMaterial = options.extrudeMaterial;\r\n\r\n\t// Use default WorldUVGenerator if no UV generators are specified.\r\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\r\n\r\n\tvar shapebb = this.shapebb;\r\n\t//shapebb = shape.getBoundingBox();\r\n\r\n\r\n\r\n\tvar splineTube, binormal, normal, position2;\r\n\tif ( extrudePath ) {\r\n\r\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\r\n\t\textrudeByPath = true;\r\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\r\n\t\t// SETUP TNB variables\r\n\r\n\t\t// Reuse TNB from TubeGeomtry for now.\r\n\t\t// TODO1 - have a .isClosed in spline?\r\n\r\n\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames(extrudePath, steps, false);\r\n\r\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n\t\tbinormal = new THREE.Vector3();\r\n\t\tnormal = new THREE.Vector3();\r\n\t\tposition2 = new THREE.Vector3();\r\n\r\n\t}\r\n\r\n\t// Safeguards if bevels are not enabled\r\n\r\n\tif ( ! bevelEnabled ) {\r\n\r\n\t\tbevelSegments = 0;\r\n\t\tbevelThickness = 0;\r\n\t\tbevelSize = 0;\r\n\r\n\t}\r\n\r\n\t// Variables initalization\r\n\r\n\tvar ahole, h, hl; // looping of holes\r\n\tvar scope = this;\r\n\tvar bevelPoints = [];\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = !THREE.Shape.Utils.isClockWise( vertices ) ;\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\r\n\t\t\tif ( THREE.Shape.Utils.isClockWise( ahole ) ) {\r\n\r\n\t\t\t\tholes[ h ] = ahole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\r\n\r\n\t}\r\n\r\n\r\n\tvar faces = THREE.Shape.Utils.triangulateShape ( vertices, holes );\r\n\r\n\t/* Vertices */\r\n\r\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n\tfor ( h = 0, hl = holes.length;  h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\tvertices = vertices.concat( ahole );\r\n\r\n\t}\r\n\r\n\r\n\tfunction scalePt2 ( pt, vec, size ) {\r\n\r\n\t\tif ( !vec ) console.log( \"die\" );\r\n\r\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\r\n\t}\r\n\r\n\tvar b, bs, t, z,\r\n\t\tvert, vlen = vertices.length,\r\n\t\tface, flen = faces.length,\r\n\t\tcont, clen = contour.length;\r\n\r\n\r\n\t// Find directions for point movement\r\n\r\n\tvar RAD_TO_DEGREES = 180 / Math.PI;\r\n\r\n\r\n\tfunction getBevelVec( pt_i, pt_j, pt_k ) {\r\n\r\n\t\t// Algorithm 2\r\n\r\n\t\treturn getBevelVec2( pt_i, pt_j, pt_k );\r\n\r\n\t}\r\n\r\n\tfunction getBevelVec1( pt_i, pt_j, pt_k ) {\r\n\r\n\t\tvar anglea = Math.atan2( pt_j.y - pt_i.y, pt_j.x - pt_i.x );\r\n\t\tvar angleb = Math.atan2( pt_k.y - pt_i.y, pt_k.x - pt_i.x );\r\n\r\n\t\tif ( anglea > angleb ) {\r\n\r\n\t\t\tangleb += Math.PI * 2;\r\n\r\n\t\t}\r\n\r\n\t\tvar anglec = ( anglea + angleb ) / 2;\r\n\r\n\r\n\t\t//console.log('angle1', anglea * RAD_TO_DEGREES,'angle2', angleb * RAD_TO_DEGREES, 'anglec', anglec *RAD_TO_DEGREES);\r\n\r\n\t\tvar x = - Math.cos( anglec );\r\n\t\tvar y = - Math.sin( anglec );\r\n\r\n\t\tvar vec = new THREE.Vector2( x, y ); //.normalize();\r\n\r\n\t\treturn vec;\r\n\r\n\t}\r\n\r\n\tfunction getBevelVec2( pt_i, pt_j, pt_k ) {\r\n\r\n\t\tvar a = THREE.ExtrudeGeometry.__v1,\r\n\t\t\tb = THREE.ExtrudeGeometry.__v2,\r\n\t\t\tv_hat = THREE.ExtrudeGeometry.__v3,\r\n\t\t\tw_hat = THREE.ExtrudeGeometry.__v4,\r\n\t\t\tp = THREE.ExtrudeGeometry.__v5,\r\n\t\t\tq = THREE.ExtrudeGeometry.__v6,\r\n\t\t\tv, w,\r\n\t\t\tv_dot_w_hat, q_sub_p_dot_w_hat,\r\n\t\t\ts, intersection;\r\n\r\n\t\t// good reading for line-line intersection\r\n\t\t// http://sputsoft.com/blog/2010/03/line-line-intersection.html\r\n\r\n\t\t// define a as vector j->i\r\n\t\t// define b as vectot k->i\r\n\r\n\t\ta.set( pt_i.x - pt_j.x, pt_i.y - pt_j.y );\r\n\t\tb.set( pt_i.x - pt_k.x, pt_i.y - pt_k.y );\r\n\r\n\t\t// get unit vectors\r\n\r\n\t\tv = a.normalize();\r\n\t\tw = b.normalize();\r\n\r\n\t\t// normals from pt i\r\n\r\n\t\tv_hat.set( -v.y, v.x );\r\n\t\tw_hat.set( w.y, -w.x );\r\n\r\n\t\t// pts from i\r\n\r\n\t\tp.copy( pt_i ).add( v_hat );\r\n\t\tq.copy( pt_i ).add( w_hat );\r\n\r\n\t\tif ( p.equals( q ) ) {\r\n\r\n\t\t\t//console.log(\"Warning: lines are straight\");\r\n\t\t\treturn w_hat.clone();\r\n\r\n\t\t}\r\n\r\n\t\t// Points from j, k. helps prevents points cross overover most of the time\r\n\r\n\t\tp.copy( pt_j ).add( v_hat );\r\n\t\tq.copy( pt_k ).add( w_hat );\r\n\r\n\t\tv_dot_w_hat = v.dot( w_hat );\r\n\t\tq_sub_p_dot_w_hat = q.sub( p ).dot( w_hat );\r\n\r\n\t\t// We should not reach these conditions\r\n\r\n\t\tif ( v_dot_w_hat === 0 ) {\r\n\r\n\t\t\tconsole.log( \"Either infinite or no solutions!\" );\r\n\r\n\t\t\tif ( q_sub_p_dot_w_hat === 0 ) {\r\n\r\n\t\t\t\tconsole.log( \"Its finite solutions.\" );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.log( \"Too bad, no solutions.\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\ts = q_sub_p_dot_w_hat / v_dot_w_hat;\r\n\r\n\t\tif ( s < 0 ) {\r\n\r\n\t\t\t// in case of emergecy, revert to algorithm 1.\r\n\r\n\t\t\treturn getBevelVec1( pt_i, pt_j, pt_k );\r\n\r\n\t\t}\r\n\r\n\t\tintersection = v.multiplyScalar( s ).add( p );\r\n\r\n\t\treturn intersection.sub( pt_i ).clone(); // Don't normalize!, otherwise sharp corners become ugly\r\n\r\n\t}\r\n\r\n\tvar contourMovements = [];\r\n\r\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\tif ( j === il ) j = 0;\r\n\t\tif ( k === il ) k = 0;\r\n\r\n\t\t//  (j)---(i)---(k)\r\n\t\t// console.log('i,j,k', i, j , k)\r\n\r\n\t\tvar pt_i = contour[ i ];\r\n\t\tvar pt_j = contour[ j ];\r\n\t\tvar pt_k = contour[ k ];\r\n\r\n\t\tcontourMovements[ i ]= getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\r\n\t}\r\n\r\n\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\r\n\r\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\toneHoleMovements = [];\r\n\r\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\tif ( j === il ) j = 0;\r\n\t\t\tif ( k === il ) k = 0;\r\n\r\n\t\t\t//  (j)---(i)---(k)\r\n\t\t\toneHoleMovements[ i ]= getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\r\n\t\t}\r\n\r\n\t\tholesMovements.push( oneHoleMovements );\r\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\r\n\t}\r\n\r\n\r\n\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\r\n\t\t//z = bevelThickness * t;\r\n\t\tbs = bevelSize * ( Math.sin ( t * Math.PI/2 ) ) ; // curved\r\n\t\t//bs = bevelSize * t ; // linear\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\t//vert = scalePt( contour[ i ], contourCentroid, bs, false );\r\n\t\t\tv( vert.x, vert.y,  - z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\t\t\t\t//vert = scalePt( ahole[ i ], holesCentroids[ h ], bs, true );\r\n\r\n\t\t\t\tv( vert.x, vert.y,  -z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tbs = bevelSize;\r\n\r\n\t// Back facing vertices\r\n\r\n\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\tif ( !extrudeByPath ) {\r\n\r\n\t\t\tv( vert.x, vert.y, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\r\n\t\t\tnormal.copy( splineTube.normals[0] ).multiplyScalar(vert.x);\r\n\t\t\tbinormal.copy( splineTube.binormals[0] ).multiplyScalar(vert.y);\r\n\r\n\t\t\tposition2.copy( extrudePts[0] ).add(normal).add(binormal);\r\n\r\n\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Add stepped vertices...\r\n\t// Including front facing vertices\r\n\r\n\tvar s;\r\n\r\n\tfor ( s = 1; s <= steps; s ++ ) {\r\n\r\n\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\tif ( !extrudeByPath ) {\r\n\r\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\r\n\t\t\t\tnormal.copy( splineTube.normals[s] ).multiplyScalar( vert.x );\r\n\t\t\t\tbinormal.copy( splineTube.binormals[s] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\tposition2.copy( extrudePts[s] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Add bevel segments planes\r\n\r\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\r\n\t\tbs = bevelSize * Math.sin ( t * Math.PI/2 ) ;\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\tif ( !extrudeByPath ) {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* Faces */\r\n\r\n\t// Top and bottom faces\r\n\r\n\tbuildLidFaces();\r\n\r\n\t// Sides faces\r\n\r\n\tbuildSideFaces();\r\n\r\n\r\n\t/////  Internal functions\r\n\r\n\tfunction buildLidFaces() {\r\n\r\n\t\tif ( bevelEnabled ) {\r\n\r\n\t\t\tvar layer = 0 ; // steps + 1\r\n\t\t\tvar offset = vlen * layer;\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ]+ offset, face[ 1 ]+ offset, face[ 0 ] + offset, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\toffset = vlen * layer;\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset, false );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ], true );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps, false );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Create faces for the z-sides of the shape\r\n\r\n\tfunction buildSideFaces() {\r\n\r\n\t\tvar layeroffset = 0;\r\n\t\tsidewalls( contour, layeroffset );\r\n\t\tlayeroffset += contour.length;\r\n\r\n\t\tfor ( h = 0, hl = holes.length;  h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\tsidewalls( ahole, layeroffset );\r\n\r\n\t\t\t//, true\r\n\t\t\tlayeroffset += ahole.length;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction sidewalls( contour, layeroffset ) {\r\n\r\n\t\tvar j, k;\r\n\t\ti = contour.length;\r\n\r\n\t\twhile ( --i >= 0 ) {\r\n\r\n\t\t\tj = i;\r\n\t\t\tk = i - 1;\r\n\t\t\tif ( k < 0 ) k = contour.length - 1;\r\n\r\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\r\n\r\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\r\n\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\r\n\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\td = layeroffset + j + slen2;\r\n\r\n\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tfunction v( x, y, z ) {\r\n\r\n\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\r\n\r\n\t}\r\n\r\n\tfunction f3( a, b, c, isBottom ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\r\n\t\t// normal, color, material\r\n\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\r\n\r\n\t\tvar uvs = isBottom ? uvgen.generateBottomUV( scope, shape, options, a, b, c ) : uvgen.generateTopUV( scope, shape, options, a, b, c );\r\n\r\n \t\tscope.faceVertexUvs[ 0 ].push( uvs );\r\n\r\n\t}\r\n\r\n\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\t\td += shapesOffset;\r\n\r\n \t\tscope.faces.push( new THREE.Face4( a, b, c, d, null, null, extrudeMaterial ) );\r\n\r\n \t\tvar uvs = uvgen.generateSideWallUV( scope, shape, wallContour, options, a, b, c, d,\r\n \t\t                                    stepIndex, stepsLength, contourIndex1, contourIndex2 );\r\n \t\tscope.faceVertexUvs[ 0 ].push( uvs );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\r\n\r\n\tgenerateTopUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {\r\n\t\tvar ax = geometry.vertices[ indexA ].x,\r\n\t\t\tay = geometry.vertices[ indexA ].y,\r\n\r\n\t\t\tbx = geometry.vertices[ indexB ].x,\r\n\t\t\tby = geometry.vertices[ indexB ].y,\r\n\r\n\t\t\tcx = geometry.vertices[ indexC ].x,\r\n\t\t\tcy = geometry.vertices[ indexC ].y;\r\n\r\n\t\treturn [\r\n\t\t\tnew THREE.Vector2( ax, ay ),\r\n\t\t\tnew THREE.Vector2( bx, by ),\r\n\t\t\tnew THREE.Vector2( cx, cy )\r\n\t\t];\r\n\r\n\t},\r\n\r\n\tgenerateBottomUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {\r\n\r\n\t\treturn this.generateTopUV( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC );\r\n\r\n\t},\r\n\r\n\tgenerateSideWallUV: function( geometry, extrudedShape, wallContour, extrudeOptions,\r\n\t                              indexA, indexB, indexC, indexD, stepIndex, stepsLength,\r\n\t                              contourIndex1, contourIndex2 ) {\r\n\r\n\t\tvar ax = geometry.vertices[ indexA ].x,\r\n\t\t\tay = geometry.vertices[ indexA ].y,\r\n\t\t\taz = geometry.vertices[ indexA ].z,\r\n\r\n\t\t\tbx = geometry.vertices[ indexB ].x,\r\n\t\t\tby = geometry.vertices[ indexB ].y,\r\n\t\t\tbz = geometry.vertices[ indexB ].z,\r\n\r\n\t\t\tcx = geometry.vertices[ indexC ].x,\r\n\t\t\tcy = geometry.vertices[ indexC ].y,\r\n\t\t\tcz = geometry.vertices[ indexC ].z,\r\n\r\n\t\t\tdx = geometry.vertices[ indexD ].x,\r\n\t\t\tdy = geometry.vertices[ indexD ].y,\r\n\t\t\tdz = geometry.vertices[ indexD ].z;\r\n\r\n\t\tif ( Math.abs( ay - by ) < 0.01 ) {\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( ax, 1 - az ),\r\n\t\t\t\tnew THREE.Vector2( bx, 1 - bz ),\r\n\t\t\t\tnew THREE.Vector2( cx, 1 - cz ),\r\n\t\t\t\tnew THREE.Vector2( dx, 1 - dz )\r\n\t\t\t];\r\n\t\t} else {\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( ay, 1 - az ),\r\n\t\t\t\tnew THREE.Vector2( by, 1 - bz ),\r\n\t\t\t\tnew THREE.Vector2( cy, 1 - cz ),\r\n\t\t\t\tnew THREE.Vector2( dy, 1 - dz )\r\n\t\t\t];\r\n\t\t}\r\n\t}\r\n};\r\n\r\nTHREE.ExtrudeGeometry.__v1 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v2 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v3 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v4 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v5 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v6 = new THREE.Vector2();\r\n/**\r\n * @author jonobr1 / http://jonobr1.com\r\n *\r\n * Creates a one-sided polygonal geometry from a path shape. Similar to\r\n * ExtrudeGeometry.\r\n *\r\n * parameters = {\r\n *\r\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\r\n *\r\n *\tmaterial: <int> // material index for front and back faces\r\n *\tuvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ShapeGeometry = function ( shapes, options ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tif ( shapes instanceof Array === false ) shapes = [ shapes ];\r\n\r\n\tthis.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\r\n};\r\n\r\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\r\n/**\r\n * Add an array of shapes to THREE.ShapeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\r\n\tfor ( var i = 0, l = shapes.length; i < l; i++ ) {\r\n\r\n\t\tthis.addShape( shapes[ i ], options );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n/**\r\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tif ( options === undefined ) options = {};\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar material = options.material;\r\n\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\r\n\r\n\tvar shapebb = this.shapebb;\r\n\r\n\t//\r\n\r\n\tvar i, l, hole, s;\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = !THREE.Shape.Utils.isClockWise( vertices );\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\r\n\r\n\t\tfor ( i = 0, l = holes.length; i < l; i++ ) {\r\n\r\n\t\t\thole = holes[ i ];\r\n\r\n\t\t\tif ( THREE.Shape.Utils.isClockWise( hole ) ) {\r\n\r\n\t\t\t\tholes[ i ] = hole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false;\r\n\r\n\t}\r\n\r\n\tvar faces = THREE.Shape.Utils.triangulateShape( vertices, holes );\r\n\r\n\t// Vertices\r\n\r\n\tvar contour = vertices;\r\n\r\n\tfor ( i = 0, l = holes.length; i < l; i++ ) {\r\n\r\n\t\thole = holes[ i ];\r\n\t\tvertices = vertices.concat( hole );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar vert, vlen = vertices.length;\r\n\tvar face, flen = faces.length;\r\n\tvar cont, clen = contour.length;\r\n\r\n\tfor ( i = 0; i < vlen; i++ ) {\r\n\r\n\t\tvert = vertices[ i ];\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\r\n\r\n\t}\r\n\r\n\tfor ( i = 0; i < flen; i++ ) {\r\n\r\n\t\tface = faces[ i ];\r\n\r\n\t\tvar a = face[ 0 ] + shapesOffset;\r\n\t\tvar b = face[ 1 ] + shapesOffset;\r\n\t\tvar c = face[ 2 ] + shapesOffset;\r\n\r\n\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\r\n\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateBottomUV( this, shape, options, a, b, c ) );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author astrodud / http://astrodud.isgreat.org/\r\n * @author zz85 / https://github.com/zz85\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\n// points - to create a closed torus, one must use a set of points \r\n//    like so: [ a, b, c, d, a ], see first is the same as last.\r\n// segments - the number of circumference segments to create\r\n// phiStart - the starting radian\r\n// phiLength - the radian (0 to 2*PI) range of the lathed section\r\n//    2*pi is a closed lathe, less than 2PI is a portion.\r\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tsegments = segments || 12;\r\n\tphiStart = phiStart || 0;\r\n\tphiLength = phiLength || 2 * Math.PI;\r\n\r\n\tvar inversePointLength = 1.0 / ( points.length - 1 );\r\n\tvar inverseSegments = 1.0 / segments;\r\n\r\n\tfor ( var i = 0, il = segments; i <= il; i ++ ) {\r\n\r\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\r\n\r\n\t\tvar c = Math.cos( phi ),\r\n\t\t\ts = Math.sin( phi );\r\n\r\n\t\tfor ( var j = 0, jl = points.length; j < jl; j ++ ) {\r\n\r\n\t\t\tvar pt = points[ j ];\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\r\n\t\t\tvertex.x = c * pt.x - s * pt.y;\r\n\t\t\tvertex.y = s * pt.x + c * pt.y;\r\n\t\t\tvertex.z = pt.z;\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar np = points.length;\r\n\r\n\tfor ( var i = 0, il = segments; i < il; i ++ ) {\r\n\r\n\t\tfor ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {\r\n\r\n\t\t\tvar base = j + np * i;\r\n\t\t\tvar a = base;\r\n\t\t\tvar b = base + np;\r\n\t\t\tvar c = base + 1 + np;\r\n\t\t\tvar d = base + 1;\r\n\r\n\t\t\tthis.faces.push( new THREE.Face4( a, b, c, d ) );\r\n\r\n\t\t\tvar u0 = i * inverseSegments;\r\n\t\t\tvar v0 = j * inversePointLength;\r\n\t\t\tvar u1 = u0 + inverseSegments;\r\n\t\t\tvar v1 = v0 + inversePointLength;\r\n\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [\r\n\r\n\t\t\t\tnew THREE.Vector2( u0, v0 ), \r\n\t\t\t\tnew THREE.Vector2( u1, v0 ),\r\n\t\t\t\tnew THREE.Vector2( u1, v1 ),\r\n\t\t\t\tnew THREE.Vector2( u0, v1 )\r\n\r\n\t\t\t] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.mergeVertices();\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n */\r\n\r\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\tthis.widthSegments = widthSegments || 1;\r\n\tthis.heightSegments = heightSegments || 1;\r\n\r\n\tvar ix, iz;\r\n\tvar width_half = width / 2;\r\n\tvar height_half = height / 2;\r\n\r\n\tvar gridX = this.widthSegments;\r\n\tvar gridZ = this.heightSegments;\r\n\r\n\tvar gridX1 = gridX + 1;\r\n\tvar gridZ1 = gridZ + 1;\r\n\r\n\tvar segment_width = this.width / gridX;\r\n\tvar segment_height = this.height / gridZ;\r\n\r\n\tvar normal = new THREE.Vector3( 0, 0, 1 );\r\n\r\n\tfor ( iz = 0; iz < gridZ1; iz ++ ) {\r\n\r\n\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\tvar x = ix * segment_width - width_half;\r\n\t\t\tvar y = iz * segment_height - height_half;\r\n\r\n\t\t\tthis.vertices.push( new THREE.Vector3( x, - y, 0 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( iz = 0; iz < gridZ; iz ++ ) {\r\n\r\n\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\tvar a = ix + gridX1 * iz;\r\n\t\t\tvar b = ix + gridX1 * ( iz + 1 );\r\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iz + 1 );\r\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iz;\r\n\r\n\t\t\tvar face = new THREE.Face4( a, b, c, d );\r\n\t\t\tface.normal.copy( normal );\r\n\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone(), normal.clone() );\r\n\r\n\t\t\tthis.faces.push( face );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\tnew THREE.Vector2( ix / gridX, 1 - iz / gridZ ),\r\n\t\t\t\tnew THREE.Vector2( ix / gridX, 1 - ( iz + 1 ) / gridZ ),\r\n\t\t\t\tnew THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iz + 1 ) / gridZ ),\r\n\t\t\t\tnew THREE.Vector2( ( ix + 1 ) / gridX, 1 - iz / gridZ )\r\n\t\t\t] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\r\n};\r\n\r\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.radius = radius || 50;\r\n\r\n\tthis.widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n\tthis.heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\r\n\tphiStart = phiStart !== undefined ? phiStart : 0;\r\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\r\n\tvar x, y, vertices = [], uvs = [];\r\n\r\n\tfor ( y = 0; y <= this.heightSegments; y ++ ) {\r\n\r\n\t\tvar verticesRow = [];\r\n\t\tvar uvsRow = [];\r\n\r\n\t\tfor ( x = 0; x <= this.widthSegments; x ++ ) {\r\n\r\n\t\t\tvar u = x / this.widthSegments;\r\n\t\t\tvar v = y / this.heightSegments;\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\tvertex.x = - this.radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\tvertex.y = this.radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\tvertex.z = this.radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t\tverticesRow.push( this.vertices.length - 1 );\r\n\t\t\tuvsRow.push( new THREE.Vector2( u, 1 - v ) );\r\n\r\n\t\t}\r\n\r\n\t\tvertices.push( verticesRow );\r\n\t\tuvs.push( uvsRow );\r\n\r\n\t}\r\n\r\n\tfor ( y = 0; y < this.heightSegments; y ++ ) {\r\n\r\n\t\tfor ( x = 0; x < this.widthSegments; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\r\n\t\t\tvar v2 = vertices[ y ][ x ];\r\n\t\t\tvar v3 = vertices[ y + 1 ][ x ];\r\n\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\r\n\r\n\t\t\tvar n1 = this.vertices[ v1 ].clone().normalize();\r\n\t\t\tvar n2 = this.vertices[ v2 ].clone().normalize();\r\n\t\t\tvar n3 = this.vertices[ v3 ].clone().normalize();\r\n\t\t\tvar n4 = this.vertices[ v4 ].clone().normalize();\r\n\r\n\t\t\tvar uv1 = uvs[ y ][ x + 1 ].clone();\r\n\t\t\tvar uv2 = uvs[ y ][ x ].clone();\r\n\t\t\tvar uv3 = uvs[ y + 1 ][ x ].clone();\r\n\t\t\tvar uv4 = uvs[ y + 1 ][ x + 1 ].clone();\r\n\r\n\t\t\tif ( Math.abs( this.vertices[ v1 ].y ) === this.radius ) {\r\n\r\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v3, v4, [ n1, n3, n4 ] ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv3, uv4 ] );\r\n\r\n\t\t\t} else if ( Math.abs( this.vertices[ v3 ].y ) === this.radius ) {\r\n\r\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.faces.push( new THREE.Face4( v1, v2, v3, v4, [ n1, n2, n3, n4 ] ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3, uv4 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\r\n    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * For creating 3D text geometry in three.js\r\n *\r\n * Text = 3D Text\r\n *\r\n * parameters = {\r\n *  size: \t\t\t<float>, \t// size of the text\r\n *  height: \t\t<float>, \t// thickness to extrude text\r\n *  curveSegments: \t<int>,\t\t// number of points on the curves\r\n *\r\n *  font: \t\t\t<string>,\t\t// font name\r\n *  weight: \t\t<string>,\t\t// font weight (normal, bold)\r\n *  style: \t\t\t<string>,\t\t// font style  (normal, italics)\r\n *\r\n *  bevelEnabled:\t<bool>,\t\t\t// turn on bevel\r\n *  bevelThickness: <float>, \t\t// how deep into text bevel goes\r\n *  bevelSize:\t\t<float>, \t\t// how far from text outline is bevel\r\n *  }\r\n *\r\n */\r\n\r\n/*\tUsage Examples\r\n\r\n\t// TextGeometry wrapper\r\n\r\n\tvar text3d = new TextGeometry( text, options );\r\n\r\n\t// Complete manner\r\n\r\n\tvar textShapes = THREE.FontUtils.generateShapes( text, options );\r\n\tvar text3d = new ExtrudeGeometry( textShapes, options );\r\n\r\n*/\r\n\r\n\r\nTHREE.TextGeometry = function ( text, parameters ) {\r\n\r\n\tvar textShapes = THREE.FontUtils.generateShapes( text, parameters );\r\n\r\n\t// translate parameters to ExtrudeGeometry API\r\n\r\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\r\n\r\n\t// defaults\r\n\r\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\r\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\r\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\r\n\r\n\tTHREE.ExtrudeGeometry.call( this, textShapes, parameters );\r\n\r\n};\r\n\r\nTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\r\n/**\r\n * @author oosmoxiecode\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\r\n */\r\n\r\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.radius = radius || 100;\r\n\tthis.tube = tube || 40;\r\n\tthis.radialSegments = radialSegments || 8;\r\n\tthis.tubularSegments = tubularSegments || 6;\r\n\tthis.arc = arc || Math.PI * 2;\r\n\r\n\tvar center = new THREE.Vector3(), uvs = [], normals = [];\r\n\r\n\tfor ( var j = 0; j <= this.radialSegments; j ++ ) {\r\n\r\n\t\tfor ( var i = 0; i <= this.tubularSegments; i ++ ) {\r\n\r\n\t\t\tvar u = i / this.tubularSegments * this.arc;\r\n\t\t\tvar v = j / this.radialSegments * Math.PI * 2;\r\n\r\n\t\t\tcenter.x = this.radius * Math.cos( u );\r\n\t\t\tcenter.y = this.radius * Math.sin( u );\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\tvertex.x = ( this.radius + this.tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\tvertex.y = ( this.radius + this.tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\tvertex.z = this.tube * Math.sin( v );\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t\tuvs.push( new THREE.Vector2( i / this.tubularSegments, j / this.radialSegments ) );\r\n\t\t\tnormals.push( vertex.clone().sub( center ).normalize() );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfor ( var j = 1; j <= this.radialSegments; j ++ ) {\r\n\r\n\t\tfor ( var i = 1; i <= this.tubularSegments; i ++ ) {\r\n\r\n\t\t\tvar a = ( this.tubularSegments + 1 ) * j + i - 1;\r\n\t\t\tvar b = ( this.tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\tvar c = ( this.tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\tvar d = ( this.tubularSegments + 1 ) * j + i;\r\n\r\n\t\t\tvar face = new THREE.Face4( a, b, c, d, [ normals[ a ], normals[ b ], normals[ c ], normals[ d ] ] );\r\n\t\t\tface.normal.add( normals[ a ] );\r\n\t\t\tface.normal.add( normals[ b ] );\r\n\t\t\tface.normal.add( normals[ c ] );\r\n\t\t\tface.normal.add( normals[ d ] );\r\n\t\t\tface.normal.normalize();\r\n\r\n\t\t\tthis.faces.push( face );\r\n\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\r\n};\r\n\r\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author oosmoxiecode\r\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\r\n */\r\n\r\nTHREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.radius = radius || 100;\r\n\tthis.tube = tube || 40;\r\n\tthis.radialSegments = radialSegments || 64;\r\n\tthis.tubularSegments = tubularSegments || 8;\r\n\tthis.p = p || 2;\r\n\tthis.q = q || 3;\r\n\tthis.heightScale = heightScale || 1;\r\n\tthis.grid = new Array( this.radialSegments );\r\n\r\n\tvar tang = new THREE.Vector3();\r\n\tvar n = new THREE.Vector3();\r\n\tvar bitan = new THREE.Vector3();\r\n\r\n\tfor ( var i = 0; i < this.radialSegments; ++ i ) {\r\n\r\n\t\tthis.grid[ i ] = new Array( this.tubularSegments );\r\n\r\n\t\tfor ( var j = 0; j < this.tubularSegments; ++ j ) {\r\n\r\n\t\t\tvar u = i / this.radialSegments * 2 * this.p * Math.PI;\r\n\t\t\tvar v = j / this.tubularSegments * 2 * Math.PI;\r\n\t\t\tvar p1 = getPos( u, v, this.q, this.p, this.radius, this.heightScale );\r\n\t\t\tvar p2 = getPos( u + 0.01, v, this.q, this.p, this.radius, this.heightScale );\r\n\t\t\tvar cx, cy;\r\n\r\n\t\t\ttang.subVectors( p2, p1 );\r\n\t\t\tn.addVectors( p2, p1 );\r\n\r\n\t\t\tbitan.crossVectors( tang, n );\r\n\t\t\tn.crossVectors( bitan, tang );\r\n\t\t\tbitan.normalize();\r\n\t\t\tn.normalize();\r\n\r\n\t\t\tcx = - this.tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\tcy = this.tube * Math.sin( v );\r\n\r\n\t\t\tp1.x += cx * n.x + cy * bitan.x;\r\n\t\t\tp1.y += cx * n.y + cy * bitan.y;\r\n\t\t\tp1.z += cx * n.z + cy * bitan.z;\r\n\r\n\t\t\tthis.grid[ i ][ j ] = vert( p1.x, p1.y, p1.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var i = 0; i < this.radialSegments; ++ i ) {\r\n\r\n\t\tfor ( var j = 0; j < this.tubularSegments; ++ j ) {\r\n\r\n\t\t\tvar ip = ( i + 1 ) % this.radialSegments;\r\n\t\t\tvar jp = ( j + 1 ) % this.tubularSegments;\r\n\r\n\t\t\tvar a = this.grid[ i ][ j ];\r\n\t\t\tvar b = this.grid[ ip ][ j ];\r\n\t\t\tvar c = this.grid[ ip ][ jp ];\r\n\t\t\tvar d = this.grid[ i ][ jp ];\r\n\r\n\t\t\tvar uva = new THREE.Vector2( i / this.radialSegments, j / this.tubularSegments );\r\n\t\t\tvar uvb = new THREE.Vector2( ( i + 1 ) / this.radialSegments, j / this.tubularSegments );\r\n\t\t\tvar uvc = new THREE.Vector2( ( i + 1 ) / this.radialSegments, ( j + 1 ) / this.tubularSegments );\r\n\t\t\tvar uvd = new THREE.Vector2( i / this.radialSegments, ( j + 1 ) / this.tubularSegments );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face4( a, b, c, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva,uvb,uvc, uvd ] );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n\tfunction vert( x, y, z ) {\r\n\r\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\r\n\r\n\t}\r\n\r\n\tfunction getPos( u, v, in_q, in_p, radius, heightScale ) {\r\n\r\n\t\tvar cu = Math.cos( u );\r\n\t\tvar cv = Math.cos( v );\r\n\t\tvar su = Math.sin( u );\r\n\t\tvar quOverP = in_q / in_p * u;\r\n\t\tvar cs = Math.cos( quOverP );\r\n\r\n\t\tvar tx = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\tvar ty = radius * ( 2 + cs ) * su * 0.5;\r\n\t\tvar tz = heightScale * radius * Math.sin( quOverP ) * 0.5;\r\n\r\n\t\treturn new THREE.Vector3( tx, ty, tz );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author WestLangley / https://github.com/WestLangley\r\n * @author zz85 / https://github.com/zz85\r\n * @author miningold / https://github.com/miningold\r\n *\r\n * Modified from the TorusKnotGeometry by @oosmoxiecode\r\n *\r\n * Creates a tube which extrudes along a 3d spline\r\n *\r\n * Uses parallel transport frames as described in\r\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n */\r\n\r\nTHREE.TubeGeometry = function( path, segments, radius, radiusSegments, closed, debug ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.path = path;\r\n\tthis.segments = segments || 64;\r\n\tthis.radius = radius || 1;\r\n\tthis.radiusSegments = radiusSegments || 8;\r\n\tthis.closed = closed || false;\r\n\r\n\tif ( debug ) this.debug = new THREE.Object3D();\r\n\r\n\tthis.grid = [];\r\n\r\n\tvar scope = this,\r\n\r\n\t\ttangent,\r\n\t\tnormal,\r\n\t\tbinormal,\r\n\r\n\t\tnumpoints = this.segments + 1,\r\n\r\n\t\tx, y, z,\r\n\t\ttx, ty, tz,\r\n\t\tu, v,\r\n\r\n\t\tcx, cy,\r\n\t\tpos, pos2 = new THREE.Vector3(),\r\n\t\ti, j,\r\n\t\tip, jp,\r\n\t\ta, b, c, d,\r\n\t\tuva, uvb, uvc, uvd;\r\n\r\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( this.path, this.segments, this.closed ),\r\n\t\ttangents = frames.tangents,\r\n\t\tnormals = frames.normals,\r\n\t\tbinormals = frames.binormals;\r\n\r\n\t// proxy internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\tfunction vert( x, y, z ) {\r\n\r\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\r\n\r\n\t}\r\n\r\n\r\n\t// consruct the grid\r\n\r\n\tfor ( i = 0; i < numpoints; i++ ) {\r\n\r\n\t\tthis.grid[ i ] = [];\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\tpos = path.getPointAt( u );\r\n\r\n\t\ttangent = tangents[ i ];\r\n\t\tnormal = normals[ i ];\r\n\t\tbinormal = binormals[ i ];\r\n\r\n\t\tif ( this.debug ) {\r\n\r\n\t\t\tthis.debug.add( new THREE.ArrowHelper(tangent, pos, radius, 0x0000ff ) );\r\n\t\t\tthis.debug.add( new THREE.ArrowHelper(normal, pos, radius, 0xff0000 ) );\r\n\t\t\tthis.debug.add( new THREE.ArrowHelper(binormal, pos, radius, 0x00ff00 ) );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( j = 0; j < this.radiusSegments; j++ ) {\r\n\r\n\t\t\tv = j / this.radiusSegments * 2 * Math.PI;\r\n\r\n\t\t\tcx = -this.radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\tcy = this.radius * Math.sin( v );\r\n\r\n\t\t\tpos2.copy( pos );\r\n\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\r\n\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\r\n\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\r\n\r\n\t\t\tthis.grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// construct the mesh\r\n\r\n\tfor ( i = 0; i < this.segments; i++ ) {\r\n\r\n\t\tfor ( j = 0; j < this.radiusSegments; j++ ) {\r\n\r\n\t\t\tip = ( this.closed ) ? (i + 1) % this.segments : i + 1;\r\n\t\t\tjp = (j + 1) % this.radiusSegments;\r\n\r\n\t\t\ta = this.grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\r\n\t\t\tb = this.grid[ ip ][ j ];\r\n\t\t\tc = this.grid[ ip ][ jp ];\r\n\t\t\td = this.grid[ i ][ jp ];\r\n\r\n\t\t\tuva = new THREE.Vector2( i / this.segments, j / this.radiusSegments );\r\n\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / this.segments, j / this.radiusSegments );\r\n\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / this.segments, ( j + 1 ) / this.radiusSegments );\r\n\t\t\tuvd = new THREE.Vector2( i / this.segments, ( j + 1 ) / this.radiusSegments );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face4( a, b, c, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvc, uvd ] );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\r\n\r\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\r\nTHREE.TubeGeometry.FrenetFrames = function(path, segments, closed) {\r\n\r\n\tvar\ttangent = new THREE.Vector3(),\r\n\t\tnormal = new THREE.Vector3(),\r\n\t\tbinormal = new THREE.Vector3(),\r\n\r\n\t\ttangents = [],\r\n\t\tnormals = [],\r\n\t\tbinormals = [],\r\n\r\n\t\tvec = new THREE.Vector3(),\r\n\t\tmat = new THREE.Matrix4(),\r\n\r\n\t\tnumpoints = segments + 1,\r\n\t\ttheta,\r\n\t\tepsilon = 0.0001,\r\n\t\tsmallest,\r\n\r\n\t\ttx, ty, tz,\r\n\t\ti, u, v;\r\n\r\n\r\n\t// expose internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\t// compute the tangent vectors for each segment on the path\r\n\r\n\tfor ( i = 0; i < numpoints; i++ ) {\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\ttangents[ i ] = path.getTangentAt( u );\r\n\t\ttangents[ i ].normalize();\r\n\r\n\t}\r\n\r\n\tinitialNormal3();\r\n\r\n\tfunction initialNormal1(lastBinormal) {\r\n\t\t// fixed start binormal. Has dangers of 0 vectors\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\r\n\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\t}\r\n\r\n\tfunction initialNormal2() {\r\n\r\n\t\t// This uses the Frenet-Serret formula for deriving binormal\r\n\t\tvar t2 = path.getTangentAt( epsilon );\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\r\n\t}\r\n\r\n\tfunction initialNormal3() {\r\n\t\t// select an initial normal vector perpenicular to the first tangent vector,\r\n\t\t// and in the direction of the smallest tangent xyz component\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tsmallest = Number.MAX_VALUE;\r\n\t\ttx = Math.abs( tangents[ 0 ].x );\r\n\t\tty = Math.abs( tangents[ 0 ].y );\r\n\t\ttz = Math.abs( tangents[ 0 ].z );\r\n\r\n\t\tif ( tx <= smallest ) {\r\n\t\t\tsmallest = tx;\r\n\t\t\tnormal.set( 1, 0, 0 );\r\n\t\t}\r\n\r\n\t\tif ( ty <= smallest ) {\r\n\t\t\tsmallest = ty;\r\n\t\t\tnormal.set( 0, 1, 0 );\r\n\t\t}\r\n\r\n\t\tif ( tz <= smallest ) {\r\n\t\t\tnormal.set( 0, 0, 1 );\r\n\t\t}\r\n\r\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\r\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\t}\r\n\r\n\r\n\t// compute the slowly-varying normal and binormal vectors for each segment on the path\r\n\r\n\tfor ( i = 1; i < numpoints; i++ ) {\r\n\r\n\t\tnormals[ i ] = normals[ i-1 ].clone();\r\n\r\n\t\tbinormals[ i ] = binormals[ i-1 ].clone();\r\n\r\n\t\tvec.crossVectors( tangents[ i-1 ], tangents[ i ] );\r\n\r\n\t\tif ( vec.length() > epsilon ) {\r\n\r\n\t\t\tvec.normalize();\r\n\r\n\t\t\ttheta = Math.acos( tangents[ i-1 ].dot( tangents[ i ] ) );\r\n\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\r\n\t\t}\r\n\r\n\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t}\r\n\r\n\r\n\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n\tif ( closed ) {\r\n\r\n\t\ttheta = Math.acos( normals[ 0 ].dot( normals[ numpoints-1 ] ) );\r\n\t\ttheta /= ( numpoints - 1 );\r\n\r\n\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints-1 ] ) ) > 0 ) {\r\n\r\n\t\t\ttheta = -theta;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 1; i < numpoints; i++ ) {\r\n\r\n\t\t\t// twist a little...\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n};\r\n/**\r\n * @author clockworkgeek / https://github.com/clockworkgeek\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.PolyhedronGeometry = function ( vertices, faces, radius, detail ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tradius = radius || 1;\r\n\tdetail = detail || 0;\r\n\r\n\tvar that = this;\r\n\r\n\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\tprepare( new THREE.Vector3( vertices[ i ][ 0 ], vertices[ i ][ 1 ], vertices[ i ][ 2 ] ) );\r\n\r\n\t}\r\n\r\n\tvar midpoints = [], p = this.vertices;\r\n\r\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\tmake( p[ faces[ i ][ 0 ] ], p[ faces[ i ][ 1 ] ], p[ faces[ i ][ 2 ] ], detail );\r\n\r\n\t}\r\n\r\n\tthis.mergeVertices();\r\n\r\n\t// Apply radius\r\n\r\n\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n\t\tthis.vertices[ i ].multiplyScalar( radius );\r\n\r\n\t}\r\n\r\n\r\n\t// Project vector onto sphere's surface\r\n\r\n\tfunction prepare( vector ) {\r\n\r\n\t\tvar vertex = vector.normalize().clone();\r\n\t\tvertex.index = that.vertices.push( vertex ) - 1;\r\n\r\n\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\r\n\r\n\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\r\n\t\tvar v = inclination( vector ) / Math.PI + 0.5;\r\n\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\r\n\r\n\t\treturn vertex;\r\n\r\n\t}\r\n\r\n\r\n\t// Approximate a curved face with recursively sub-divided triangles.\r\n\r\n\tfunction make( v1, v2, v3, detail ) {\r\n\r\n\t\tif ( detail < 1 ) {\r\n\r\n\t\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\r\n\t\t\tface.centroid.add( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\r\n\t\t\tface.normal = face.centroid.clone().normalize();\r\n\t\t\tthat.faces.push( face );\r\n\r\n\t\t\tvar azi = azimuth( face.centroid );\r\n\t\t\tthat.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\tcorrectUV( v1.uv, v1, azi ),\r\n\t\t\t\tcorrectUV( v2.uv, v2, azi ),\r\n\t\t\t\tcorrectUV( v3.uv, v3, azi )\r\n\t\t\t] );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdetail -= 1;\r\n\r\n\t\t\t// split triangle into 4 smaller triangles\r\n\r\n\t\t\tmake( v1, midpoint( v1, v2 ), midpoint( v1, v3 ), detail ); // top quadrant\r\n\t\t\tmake( midpoint( v1, v2 ), v2, midpoint( v2, v3 ), detail ); // left quadrant\r\n\t\t\tmake( midpoint( v1, v3 ), midpoint( v2, v3 ), v3, detail ); // right quadrant\r\n\t\t\tmake( midpoint( v1, v2 ), midpoint( v2, v3 ), midpoint( v1, v3 ), detail ); // center quadrant\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction midpoint( v1, v2 ) {\r\n\r\n\t\tif ( !midpoints[ v1.index ] ) midpoints[ v1.index ] = [];\r\n\t\tif ( !midpoints[ v2.index ] ) midpoints[ v2.index ] = [];\r\n\r\n\t\tvar mid = midpoints[ v1.index ][ v2.index ];\r\n\r\n\t\tif ( mid === undefined ) {\r\n\r\n\t\t\t// generate mean point and project to surface with prepare()\r\n\r\n\t\t\tmidpoints[ v1.index ][ v2.index ] = midpoints[ v2.index ][ v1.index ] = mid = prepare(\r\n\t\t\t\tnew THREE.Vector3().addVectors( v1, v2 ).divideScalar( 2 )\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn mid;\r\n\r\n\t}\r\n\r\n\r\n\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n\tfunction azimuth( vector ) {\r\n\r\n\t\treturn Math.atan2( vector.z, -vector.x );\r\n\r\n\t}\r\n\r\n\r\n\t// Angle above the XZ plane.\r\n\r\n\tfunction inclination( vector ) {\r\n\r\n\t\treturn Math.atan2( -vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\r\n\t}\r\n\r\n\r\n\t// Texture fixing helper. Spheres have some odd behaviours.\r\n\r\n\tfunction correctUV( uv, vector, azimuth ) {\r\n\r\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\r\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\r\n\t\treturn uv;\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\r\n    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\r\n\tvar vertices = [\r\n\t\t[ -1,  t,  0 ], [  1, t, 0 ], [ -1, -t,  0 ], [  1, -t,  0 ],\r\n\t\t[  0, -1,  t ], [  0, 1, t ], [  0, -1, -t ], [  0,  1, -t ],\r\n\t\t[  t,  0, -1 ], [  t, 0, 1 ], [ -t,  0, -1 ], [ -t,  0,  1 ]\r\n\t];\r\n\r\n\tvar faces = [\r\n\t\t[ 0, 11,  5 ], [ 0,  5,  1 ], [  0,  1,  7 ], [  0,  7, 10 ], [  0, 10, 11 ],\r\n\t\t[ 1,  5,  9 ], [ 5, 11,  4 ], [ 11, 10,  2 ], [ 10,  7,  6 ], [  7,  1,  8 ],\r\n\t\t[ 3,  9,  4 ], [ 3,  4,  2 ], [  3,  2,  6 ], [  3,  6,  8 ], [  3,  8,  9 ],\r\n\t\t[ 4,  9,  5 ], [ 2,  4, 11 ], [  6,  2, 10 ], [  8,  6,  7 ], [  9,  8,  1 ]\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );\r\n\r\n};\r\n\r\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.OctahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t[ 1, 0, 0 ], [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ], [ 0, 0, -1 ]\r\n\t];\r\n\r\n\tvar faces = [\r\n\t\t[ 0, 2, 4 ], [ 0, 4, 3 ], [ 0, 3, 5 ], [ 0, 5, 2 ], [ 1, 2, 5 ], [ 1, 5, 3 ], [ 1, 3, 4 ], [ 1, 4, 2 ]\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );\r\n};\r\n\r\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t[ 1,  1,  1 ], [ -1, -1, 1 ], [ -1, 1, -1 ], [ 1, -1, -1 ]\r\n\t];\r\n\r\n\tvar faces = [\r\n\t\t[ 2, 1, 0 ], [ 0, 3, 2 ], [ 1, 3, 0 ], [ 2, 3, 1 ]\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );\r\n\r\n};\r\n\r\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author zz85 / https://github.com/zz85\r\n * Parametric Surfaces Geometry\r\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n *\r\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements, useTris );\r\n *\r\n */\r\n\r\nTHREE.ParametricGeometry = function ( func, slices, stacks, useTris ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar verts = this.vertices;\r\n\tvar faces = this.faces;\r\n\tvar uvs = this.faceVertexUvs[ 0 ];\r\n\r\n\tuseTris = (useTris === undefined) ? false : useTris;\r\n\r\n\tvar i, il, j, p;\r\n\tvar u, v;\r\n\r\n\tvar stackCount = stacks + 1;\r\n\tvar sliceCount = slices + 1;\r\n\r\n\tfor ( i = 0; i <= stacks; i ++ ) {\r\n\r\n\t\tv = i / stacks;\r\n\r\n\t\tfor ( j = 0; j <= slices; j ++ ) {\r\n\r\n\t\t\tu = j / slices;\r\n\r\n\t\t\tp = func( u, v );\r\n\t\t\tverts.push( p );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tvar a, b, c, d;\r\n\tvar uva, uvb, uvc, uvd;\r\n\r\n\tfor ( i = 0; i < stacks; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < slices; j ++ ) {\r\n\r\n\t\t\ta = i * sliceCount + j;\r\n\t\t\tb = i * sliceCount + j + 1;\r\n\t\t\tc = (i + 1) * sliceCount + j;\r\n\t\t\td = (i + 1) * sliceCount + j + 1;\r\n\r\n\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\r\n\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\r\n\t\t\tuvc = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\r\n\t\t\tuvd = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\r\n\r\n\t\t\tif ( useTris ) {\r\n\r\n\t\t\t\tfaces.push( new THREE.Face3( a, b, c ) );\r\n\t\t\t\tfaces.push( new THREE.Face3( b, d, c ) );\r\n\r\n\t\t\t\tuvs.push( [ uva, uvb, uvc ] );\r\n\t\t\t\tuvs.push( [ uvb, uvd, uvc ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfaces.push( new THREE.Face4( a, b, d, c ) );\r\n\t\t\t\tuvs.push( [ uva, uvb, uvd, uvc ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// console.log(this);\r\n\r\n\t// magic bullet\r\n\t// var diff = this.mergeVertices();\r\n\t// console.log('removed ', diff, ' vertices by merging');\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author qiao / https://github.com/qiao\r\n * @fileoverview This is a convex hull generator using the incremental method. \r\n * The complexity is O(n^2) where n is the number of vertices.\r\n * O(nlogn) algorithms do exist, but they are much more complicated.\r\n *\r\n * Benchmark: \r\n *\r\n *  Platform: CPU: P7350 @2.00GHz Engine: V8\r\n *\r\n *  Num Vertices\tTime(ms)\r\n *\r\n *     10           1\r\n *     20           3\r\n *     30           19\r\n *     40           48\r\n *     50           107\r\n */\r\n\r\nTHREE.ConvexGeometry = function( vertices ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar faces = [ [ 0, 1, 2 ], [ 0, 2, 1 ] ]; \r\n\r\n\tfor ( var i = 3; i < vertices.length; i++ ) {\r\n\r\n\t\taddPoint( i );\r\n\r\n\t}\r\n\r\n\r\n\tfunction addPoint( vertexId ) {\r\n\r\n\t\tvar vertex = vertices[ vertexId ].clone();\r\n\r\n\t\tvar mag = vertex.length();\r\n\t\tvertex.x += mag * randomOffset();\r\n\t\tvertex.y += mag * randomOffset();\r\n\t\tvertex.z += mag * randomOffset();\r\n\r\n\t\tvar hole = [];\r\n\r\n\t\tfor ( var f = 0; f < faces.length; ) {\r\n\r\n\t\t\tvar face = faces[ f ];\r\n\r\n\t\t\t// for each face, if the vertex can see it,\r\n\t\t\t// then we try to add the face's edges into the hole.\r\n\t\t\tif ( visible( face, vertex ) ) {\r\n\r\n\t\t\t\tfor ( var e = 0; e < 3; e++ ) {\r\n\r\n\t\t\t\t\tvar edge = [ face[ e ], face[ ( e + 1 ) % 3 ] ];\r\n\t\t\t\t\tvar boundary = true;\r\n\r\n\t\t\t\t\t// remove duplicated edges.\r\n\t\t\t\t\tfor ( var h = 0; h < hole.length; h++ ) {\r\n\r\n\t\t\t\t\t\tif ( equalEdge( hole[ h ], edge ) ) {\r\n\r\n\t\t\t\t\t\t\thole[ h ] = hole[ hole.length - 1 ];\r\n\t\t\t\t\t\t\thole.pop();\r\n\t\t\t\t\t\t\tboundary = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( boundary ) {\r\n\r\n\t\t\t\t\t\thole.push( edge );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// remove faces[ f ]\r\n\t\t\t\tfaces[ f ] = faces[ faces.length - 1 ];\r\n\t\t\t\tfaces.pop();\r\n\r\n\t\t\t} else { // not visible\r\n\r\n\t\t\t\tf++;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// construct the new faces formed by the edges of the hole and the vertex\r\n\t\tfor ( var h = 0; h < hole.length; h++ ) {\r\n\r\n\t\t\tfaces.push( [ \r\n\t\t\t\thole[ h ][ 0 ],\r\n\t\t\t\thole[ h ][ 1 ],\r\n\t\t\t\tvertexId\r\n\t\t\t] );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Whether the face is visible from the vertex\r\n\t */\r\n\tfunction visible( face, vertex ) {\r\n\r\n\t\tvar va = vertices[ face[ 0 ] ];\r\n\t\tvar vb = vertices[ face[ 1 ] ];\r\n\t\tvar vc = vertices[ face[ 2 ] ];\r\n\r\n\t\tvar n = normal( va, vb, vc );\r\n\r\n\t\t// distance from face to origin\r\n\t\tvar dist = n.dot( va );\r\n\r\n\t\treturn n.dot( vertex ) >= dist; \r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Face normal\r\n\t */\r\n\tfunction normal( va, vb, vc ) {\r\n\r\n\t\tvar cb = new THREE.Vector3();\r\n\t\tvar ab = new THREE.Vector3();\r\n\r\n\t\tcb.subVectors( vc, vb );\r\n\t\tab.subVectors( va, vb );\r\n\t\tcb.cross( ab );\r\n\r\n\t\tcb.normalize();\r\n\r\n\t\treturn cb;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Detect whether two edges are equal.\r\n\t * Note that when constructing the convex hull, two same edges can only\r\n\t * be of the negative direction.\r\n\t */\r\n\tfunction equalEdge( ea, eb ) {\r\n\r\n\t\treturn ea[ 0 ] === eb[ 1 ] && ea[ 1 ] === eb[ 0 ]; \r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Create a random offset between -1e-6 and 1e-6.\r\n\t */\r\n\tfunction randomOffset() {\r\n\r\n\t\treturn ( Math.random() - 0.5 ) * 2 * 1e-6;\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * XXX: Not sure if this is the correct approach. Need someone to review.\r\n\t */\r\n\tfunction vertexUv( vertex ) {\r\n\r\n\t\tvar mag = vertex.length();\r\n\t\treturn new THREE.Vector2( vertex.x / mag, vertex.y / mag );\r\n\r\n\t}\r\n\r\n\t// Push vertices into `this.vertices`, skipping those inside the hull\r\n\tvar id = 0;\r\n\tvar newId = new Array( vertices.length ); // map from old vertex id to new id\r\n\r\n\tfor ( var i = 0; i < faces.length; i++ ) {\r\n\r\n\t\t var face = faces[ i ];\r\n\r\n\t\t for ( var j = 0; j < 3; j++ ) {\r\n\r\n\t\t\t\tif ( newId[ face[ j ] ] === undefined ) {\r\n\r\n\t\t\t\t\t\tnewId[ face[ j ] ] = id++;\r\n\t\t\t\t\t\tthis.vertices.push( vertices[ face[ j ] ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tface[ j ] = newId[ face[ j ] ];\r\n\r\n\t\t }\r\n\r\n\t}\r\n\r\n\t// Convert faces into instances of THREE.Face3\r\n\tfor ( var i = 0; i < faces.length; i++ ) {\r\n\r\n\t\tthis.faces.push( new THREE.Face3( \r\n\t\t\t\tfaces[ i ][ 0 ],\r\n\t\t\t\tfaces[ i ][ 1 ],\r\n\t\t\t\tfaces[ i ][ 2 ]\r\n\t\t) );\r\n\r\n\t}\r\n\r\n\t// Compute UVs\r\n\tfor ( var i = 0; i < this.faces.length; i++ ) {\r\n\r\n\t\tvar face = this.faces[ i ];\r\n\r\n\t\tthis.faceVertexUvs[ 0 ].push( [\r\n\t\t\tvertexUv( this.vertices[ face.a ] ),\r\n\t\t\tvertexUv( this.vertices[ face.b ] ),\r\n\t\t\tvertexUv( this.vertices[ face.c ])\r\n\t\t] );\r\n\r\n\t}\r\n\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.ConvexGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author sroucheray / http://sroucheray.org/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AxisHelper = function ( size ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\r\n\tgeometry.vertices.push(\r\n\t\tnew THREE.Vector3(), new THREE.Vector3( size || 1, 0, 0 ),\r\n\t\tnew THREE.Vector3(), new THREE.Vector3( 0, size || 1, 0 ),\r\n\t\tnew THREE.Vector3(), new THREE.Vector3( 0, 0, size || 1 )\r\n\t);\r\n\r\n\tgeometry.colors.push(\r\n\t\tnew THREE.Color( 0xff0000 ), new THREE.Color( 0xffaa00 ),\r\n\t\tnew THREE.Color( 0x00ff00 ), new THREE.Color( 0xaaff00 ),\r\n\t\tnew THREE.Color( 0x0000ff ), new THREE.Color( 0x00aaff )\r\n\t);\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\r\n\tTHREE.Line.call( this, geometry, material, THREE.LinePieces );\r\n\r\n};\r\n\r\nTHREE.AxisHelper.prototype = Object.create( THREE.Line.prototype );\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author zz85 / https://github.com/zz85\r\n * @author bhouston / https://exocortex.com\r\n *\r\n * Creates an arrow for visualizing directions\r\n *\r\n * Parameters:\r\n *  dir - Vector3\r\n *  origin - Vector3\r\n *  length - Number\r\n *  hex - color in hex value\r\n */\r\n\r\nTHREE.ArrowHelper = function ( dir, origin, length, hex ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tif ( length === undefined ) length = 20;\r\n\tif ( hex === undefined ) hex = 0xffff00;\r\n\r\n\tvar lineGeometry = new THREE.Geometry();\r\n\tlineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) );\r\n\tlineGeometry.vertices.push( new THREE.Vector3( 0, 1, 0 ) );\r\n\r\n\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: hex } ) );\r\n\tthis.add( this.line );\r\n\r\n\tvar coneGeometry = new THREE.CylinderGeometry( 0, 0.05, 0.25, 5, 1 );\r\n\r\n\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: hex } ) );\r\n\tthis.cone.position.set( 0, 1, 0 );\r\n\tthis.add( this.cone );\r\n\r\n\tif ( origin instanceof THREE.Vector3 ) this.position = origin;\r\n\r\n\tthis.setDirection( dir );\r\n\tthis.setLength( length );\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.ArrowHelper.prototype.setDirection = function ( dir ) {\r\n\r\n    var d = THREE.ArrowHelper.__v1.copy( dir ).normalize();\r\n\r\n    if ( d.y > 0.999 ) {\r\n\r\n        this.rotation.set( 0, 0, 0 );\r\n \r\n    } else if ( d.y < - 0.999 ) {\r\n\r\n        this.rotation.set( Math.PI, 0, 0 );\r\n\r\n    } else {\r\n\r\n\t    var axis = THREE.ArrowHelper.__v2.set( d.z, 0, - d.x ).normalize();\r\n\t    var radians = Math.acos( d.y );\r\n\t    var quaternion = THREE.ArrowHelper.__q1.setFromAxisAngle( axis, radians );\r\n\r\n\t    this.rotation.setEulerFromQuaternion( quaternion, this.eulerOrder );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.prototype.setLength = function ( length ) {\r\n\r\n\tthis.scale.set( length, length, length );\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.prototype.setColor = function ( hex ) {\r\n\r\n\tthis.line.material.color.setHex( hex );\r\n\tthis.cone.material.color.setHex( hex );\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.__v1 = new THREE.Vector3();\r\nTHREE.ArrowHelper.__v2 = new THREE.Vector3();\r\nTHREE.ArrowHelper.__q1 = new THREE.Quaternion();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows frustum, line of sight and up of the camera\r\n *\t- suitable for fast updates\r\n * \t- based on frustum visualization in lightgl.js shadowmap example\r\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n */\r\n\r\nTHREE.CameraHelper = function ( camera ) {\r\n\r\n\tTHREE.Line.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.geometry = new THREE.Geometry();\r\n\tthis.material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\r\n\tthis.type = THREE.LinePieces;\r\n\r\n\tthis.matrixWorld = camera.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.pointMap = {};\r\n\r\n\t// colors\r\n\r\n\tvar hexFrustum = 0xffaa00;\r\n\tvar hexCone = 0xff0000;\r\n\tvar hexUp = 0x00aaff;\r\n\tvar hexTarget = 0xffffff;\r\n\tvar hexCross = 0x333333;\r\n\r\n\t// near\r\n\r\n\taddLine( \"n1\", \"n2\", hexFrustum );\r\n\taddLine( \"n2\", \"n4\", hexFrustum );\r\n\taddLine( \"n4\", \"n3\", hexFrustum );\r\n\taddLine( \"n3\", \"n1\", hexFrustum );\r\n\r\n\t// far\r\n\r\n\taddLine( \"f1\", \"f2\", hexFrustum );\r\n\taddLine( \"f2\", \"f4\", hexFrustum );\r\n\taddLine( \"f4\", \"f3\", hexFrustum );\r\n\taddLine( \"f3\", \"f1\", hexFrustum );\r\n\r\n\t// sides\r\n\r\n\taddLine( \"n1\", \"f1\", hexFrustum );\r\n\taddLine( \"n2\", \"f2\", hexFrustum );\r\n\taddLine( \"n3\", \"f3\", hexFrustum );\r\n\taddLine( \"n4\", \"f4\", hexFrustum );\r\n\r\n\t// cone\r\n\r\n\taddLine( \"p\", \"n1\", hexCone );\r\n\taddLine( \"p\", \"n2\", hexCone );\r\n\taddLine( \"p\", \"n3\", hexCone );\r\n\taddLine( \"p\", \"n4\", hexCone );\r\n\r\n\t// up\r\n\r\n\taddLine( \"u1\", \"u2\", hexUp );\r\n\taddLine( \"u2\", \"u3\", hexUp );\r\n\taddLine( \"u3\", \"u1\", hexUp );\r\n\r\n\t// target\r\n\r\n\taddLine( \"c\", \"t\", hexTarget );\r\n\taddLine( \"p\", \"c\", hexCross );\r\n\r\n\t// cross\r\n\r\n\taddLine( \"cn1\", \"cn2\", hexCross );\r\n\taddLine( \"cn3\", \"cn4\", hexCross );\r\n\r\n\taddLine( \"cf1\", \"cf2\", hexCross );\r\n\taddLine( \"cf3\", \"cf4\", hexCross );\r\n\r\n\tthis.camera = camera;\r\n\r\n\tfunction addLine( a, b, hex ) {\r\n\r\n\t\taddPoint( a, hex );\r\n\t\taddPoint( b, hex );\r\n\r\n\t}\r\n\r\n\tfunction addPoint( id, hex ) {\r\n\r\n\t\tscope.geometry.vertices.push( new THREE.Vector3() );\r\n\t\tscope.geometry.colors.push( new THREE.Color( hex ) );\r\n\r\n\t\tif ( scope.pointMap[ id ] === undefined ) scope.pointMap[ id ] = [];\r\n\r\n\t\tscope.pointMap[ id ].push( scope.geometry.vertices.length - 1 );\r\n\r\n\t}\r\n\r\n\tthis.update( camera );\r\n\r\n};\r\n\r\nTHREE.CameraHelper.prototype = Object.create( THREE.Line.prototype );\r\n\r\nTHREE.CameraHelper.prototype.update = function () {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar w = 1, h = 1;\r\n\r\n\t// we need just camera projection matrix\r\n\t// world matrix must be identity\r\n\r\n\tTHREE.CameraHelper.__c.projectionMatrix.copy( this.camera.projectionMatrix );\r\n\r\n\t// center / target\r\n\r\n\tsetPoint( \"c\", 0, 0, -1 );\r\n\tsetPoint( \"t\", 0, 0,  1 );\r\n\r\n\t// near\r\n\r\n\tsetPoint( \"n1\", -w, -h, -1 );\r\n\tsetPoint( \"n2\",  w, -h, -1 );\r\n\tsetPoint( \"n3\", -w,  h, -1 );\r\n\tsetPoint( \"n4\",  w,  h, -1 );\r\n\r\n\t// far\r\n\r\n\tsetPoint( \"f1\", -w, -h, 1 );\r\n\tsetPoint( \"f2\",  w, -h, 1 );\r\n\tsetPoint( \"f3\", -w,  h, 1 );\r\n\tsetPoint( \"f4\",  w,  h, 1 );\r\n\r\n\t// up\r\n\r\n\tsetPoint( \"u1\",  w * 0.7, h * 1.1, -1 );\r\n\tsetPoint( \"u2\", -w * 0.7, h * 1.1, -1 );\r\n\tsetPoint( \"u3\",        0, h * 2,   -1 );\r\n\r\n\t// cross\r\n\r\n\tsetPoint( \"cf1\", -w,  0, 1 );\r\n\tsetPoint( \"cf2\",  w,  0, 1 );\r\n\tsetPoint( \"cf3\",  0, -h, 1 );\r\n\tsetPoint( \"cf4\",  0,  h, 1 );\r\n\r\n\tsetPoint( \"cn1\", -w,  0, -1 );\r\n\tsetPoint( \"cn2\",  w,  0, -1 );\r\n\tsetPoint( \"cn3\",  0, -h, -1 );\r\n\tsetPoint( \"cn4\",  0,  h, -1 );\r\n\r\n\tfunction setPoint( point, x, y, z ) {\r\n\r\n\t\tTHREE.CameraHelper.__v.set( x, y, z );\r\n\t\tTHREE.CameraHelper.__projector.unprojectVector( THREE.CameraHelper.__v, THREE.CameraHelper.__c );\r\n\r\n\t\tvar points = scope.pointMap[ point ];\r\n\r\n\t\tif ( points !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tscope.geometry.vertices[ points[ i ] ].copy( THREE.CameraHelper.__v );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.geometry.verticesNeedUpdate = true;\r\n\r\n};\r\n\r\nTHREE.CameraHelper.__projector = new THREE.Projector();\r\nTHREE.CameraHelper.__v = new THREE.Vector3();\r\nTHREE.CameraHelper.__c = new THREE.Camera();\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows directional light color, intensity, position, orientation and target\r\n */\r\n\r\nTHREE.DirectionalLightHelper = function ( light, sphereSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\r\n\t// position\r\n\r\n\tthis.position = light.position;\r\n\r\n\t// direction\r\n\r\n\tthis.direction = new THREE.Vector3();\r\n\tthis.direction.subVectors( light.target.position, light.position );\r\n\r\n\t// color\r\n\r\n\tvar intensity = THREE.Math.clamp( light.intensity, 0, 1 );\r\n\r\n\tthis.color = light.color.clone();\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tvar hexColor = this.color.getHex();\r\n\r\n\t// light helper\r\n\r\n\tvar bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8 );\r\n\tvar raysGeometry = new THREE.AsteriskGeometry( sphereSize * 1.25, sphereSize * 2.25 );\r\n\r\n\tvar bulbMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar raysMaterial = new THREE.LineBasicMaterial( { color: hexColor, fog: false } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\r\n\tthis.lightRays = new THREE.Line( raysGeometry, raysMaterial, THREE.LinePieces );\r\n\r\n\tthis.add( this.lightSphere );\r\n\tthis.add( this.lightRays );\r\n\r\n\tthis.lightSphere.properties.isGizmo = true;\r\n\tthis.lightSphere.properties.gizmoSubject = light;\r\n\tthis.lightSphere.properties.gizmoRoot = this;\r\n\r\n\t// light target helper\r\n\r\n\tthis.targetSphere = null;\r\n\r\n\tif ( light.target.properties.targetInverse !== undefined ) {\r\n\r\n\t\tvar targetGeo = new THREE.SphereGeometry( sphereSize, 8, 4 );\r\n\t\tvar targetMaterial = new THREE.MeshBasicMaterial( { color: hexColor, wireframe: true, fog: false } );\r\n\r\n\t\tthis.targetSphere = new THREE.Mesh( targetGeo, targetMaterial );\r\n\t\tthis.targetSphere.position = light.target.position;\r\n\r\n\t\tthis.targetSphere.properties.isGizmo = true;\r\n\t\tthis.targetSphere.properties.gizmoSubject = light.target;\r\n\t\tthis.targetSphere.properties.gizmoRoot = this.targetSphere;\r\n\r\n\t\tvar lineMaterial = new THREE.LineDashedMaterial( { color: hexColor, dashSize: 4, gapSize: 4, opacity: 0.75, transparent: true, fog: false } );\r\n\t\tvar lineGeometry = new THREE.Geometry();\r\n\t\tlineGeometry.vertices.push( this.position.clone() );\r\n\t\tlineGeometry.vertices.push( this.targetSphere.position.clone() );\r\n\t\tlineGeometry.computeLineDistances();\r\n\r\n\t\tthis.targetLine = new THREE.Line( lineGeometry, lineMaterial );\r\n\t\tthis.targetLine.properties.isGizmo = true;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tthis.properties.isGizmo = true;\r\n\r\n}\r\n\r\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.DirectionalLightHelper.prototype.update = function () {\r\n\r\n\t// update arrow orientation\r\n\t// pointing from light to target\r\n\r\n\tthis.direction.subVectors( this.light.target.position, this.light.position );\r\n\r\n\t// update arrow, spheres, rays and line colors to light color * light intensity\r\n\r\n\tvar intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );\r\n\r\n\tthis.color.copy( this.light.color );\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tthis.lightSphere.material.color.copy( this.color );\r\n\tthis.lightRays.material.color.copy( this.color );\r\n\r\n\t// Only update targetSphere and targetLine if available\r\n\tif ( this.targetSphere !== null ) {\r\n\r\n\t\tthis.targetSphere.material.color.copy( this.color );\r\n\t\tthis.targetLine.material.color.copy( this.color );\r\n\r\n\t\t// update target line vertices\r\n\r\n\t\tthis.targetLine.geometry.vertices[ 0 ].copy( this.light.position );\r\n\t\tthis.targetLine.geometry.vertices[ 1 ].copy( this.light.target.position );\r\n\r\n\t\tthis.targetLine.geometry.computeLineDistances();\r\n\t\tthis.targetLine.geometry.verticesNeedUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows hemisphere light intensity, sky and ground colors and directions\r\n */\r\n\r\nTHREE.HemisphereLightHelper = function ( light, sphereSize, arrowLength, domeSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\r\n\t// position\r\n\r\n\tthis.position = light.position;\r\n\r\n\t//\r\n\r\n\tvar intensity = THREE.Math.clamp( light.intensity, 0, 1 );\r\n\r\n\t// sky color\r\n\r\n\tthis.color = light.color.clone();\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tvar hexColor = this.color.getHex();\r\n\r\n\t// ground color\r\n\r\n\tthis.groundColor = light.groundColor.clone();\r\n\tthis.groundColor.multiplyScalar( intensity );\r\n\r\n\tvar hexColorGround = this.groundColor.getHex();\r\n\r\n\t// double colored light bulb\r\n\r\n\tvar bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8, 0, Math.PI * 2, 0, Math.PI * 0.5 );\r\n\tvar bulbGroundGeometry = new THREE.SphereGeometry( sphereSize, 16, 8, 0, Math.PI * 2, Math.PI * 0.5, Math.PI );\r\n\r\n\tvar bulbSkyMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar bulbGroundMaterial = new THREE.MeshBasicMaterial( { color: hexColorGround, fog: false } );\r\n\r\n\tfor ( var i = 0, il = bulbGeometry.faces.length; i < il; i ++ ) {\r\n\r\n\t\tbulbGeometry.faces[ i ].materialIndex = 0;\r\n\r\n\t}\r\n\r\n\tfor ( var i = 0, il = bulbGroundGeometry.faces.length; i < il; i ++ ) {\r\n\r\n\t\tbulbGroundGeometry.faces[ i ].materialIndex = 1;\r\n\r\n\t}\r\n\r\n\tTHREE.GeometryUtils.merge( bulbGeometry, bulbGroundGeometry );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, new THREE.MeshFaceMaterial( [ bulbSkyMaterial, bulbGroundMaterial ] ) );\r\n\r\n\t// arrows for sky and ground light directions\r\n\r\n\tthis.lightArrow = new THREE.ArrowHelper( new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, ( sphereSize + arrowLength ) * 1.1, 0 ), arrowLength, hexColor );\r\n\tthis.lightArrow.rotation.x = Math.PI;\r\n\r\n\tthis.lightArrowGround = new THREE.ArrowHelper( new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, ( sphereSize + arrowLength ) * -1.1, 0 ), arrowLength, hexColorGround );\r\n\r\n\tvar joint = new THREE.Object3D();\r\n\tjoint.rotation.x = -Math.PI * 0.5;\r\n\r\n\tjoint.add( this.lightSphere );\r\n\tjoint.add( this.lightArrow );\r\n\tjoint.add( this.lightArrowGround );\r\n\r\n\tthis.add( joint );\r\n\r\n\t//\r\n\r\n\tthis.lightSphere.properties.isGizmo = true;\r\n\tthis.lightSphere.properties.gizmoSubject = light;\r\n\tthis.lightSphere.properties.gizmoRoot = this;\r\n\r\n\t//\r\n\r\n\tthis.properties.isGizmo = true;\r\n\r\n\t//\r\n\r\n\tthis.target = new THREE.Vector3();\r\n\tthis.lookAt( this.target );\r\n\r\n}\r\n\r\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.HemisphereLightHelper.prototype.update = function () {\r\n\r\n\t// update sphere sky and ground colors to light color * light intensity\r\n\r\n\tvar intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );\r\n\r\n\tthis.color.copy( this.light.color );\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tthis.groundColor.copy( this.light.groundColor );\r\n\tthis.groundColor.multiplyScalar( intensity );\r\n\r\n\tthis.lightSphere.material.materials[ 0 ].color.copy( this.color );\r\n\tthis.lightSphere.material.materials[ 1 ].color.copy( this.groundColor );\r\n\r\n\tthis.lightArrow.setColor( this.color.getHex() );\r\n\tthis.lightArrowGround.setColor( this.groundColor.getHex() );\r\n\r\n\tthis.lookAt( this.target );\r\n\r\n}\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows point light color, intensity, position and distance\r\n */\r\n\r\nTHREE.PointLightHelper = function ( light, sphereSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\r\n\t// position\r\n\r\n\tthis.position = light.position;\r\n\r\n\t// color\r\n\r\n\tvar intensity = THREE.Math.clamp( light.intensity, 0, 1 );\r\n\r\n\tthis.color = light.color.clone();\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tvar hexColor = this.color.getHex();\r\n\r\n\t// light helper\r\n\r\n\tvar bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8 );\r\n\tvar raysGeometry = new THREE.AsteriskGeometry( sphereSize * 1.25, sphereSize * 2.25 );\r\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\r\n\r\n\tvar bulbMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar raysMaterial = new THREE.LineBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\tthis.lightRays = new THREE.Line( raysGeometry, raysMaterial, THREE.LinePieces );\r\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\r\n\tvar d = light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\r\n\tthis.add( this.lightSphere );\r\n\tthis.add( this.lightRays );\r\n\tthis.add( this.lightDistance );\r\n\r\n\t//\r\n\r\n\tthis.lightSphere.properties.isGizmo = true;\r\n\tthis.lightSphere.properties.gizmoSubject = light;\r\n\tthis.lightSphere.properties.gizmoRoot = this;\r\n\r\n\t//\r\n\r\n\tthis.properties.isGizmo = true;\r\n\r\n}\r\n\r\nTHREE.PointLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.PointLightHelper.prototype.update = function () {\r\n\r\n\t// update sphere and rays colors to light color * light intensity\r\n\r\n\tvar intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );\r\n\r\n\tthis.color.copy( this.light.color );\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tthis.lightSphere.material.color.copy( this.color );\r\n\tthis.lightRays.material.color.copy( this.color );\r\n\tthis.lightDistance.material.color.copy( this.color );\r\n\r\n\t//\r\n\r\n\tvar d = this.light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.visible = true;\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows spot light color, intensity, position, orientation, light cone and target\r\n */\r\n\r\nTHREE.SpotLightHelper = function ( light, sphereSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\r\n\t// position\r\n\r\n\tthis.position = light.position;\r\n\r\n\t// direction\r\n\r\n\tthis.direction = new THREE.Vector3();\r\n\tthis.direction.subVectors( light.target.position, light.position );\r\n\r\n\t// color\r\n\r\n\tvar intensity = THREE.Math.clamp( light.intensity, 0, 1 );\r\n\r\n\tthis.color = light.color.clone();\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tvar hexColor = this.color.getHex();\r\n\r\n\t// light helper\r\n\r\n\tvar bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8 );\r\n\tvar raysGeometry = new THREE.AsteriskGeometry( sphereSize * 1.25, sphereSize * 2.25 );\r\n\tvar coneGeometry = new THREE.CylinderGeometry( 0.0001, 1, 1, 8, 1, true );\r\n\r\n\tvar coneMatrix = new THREE.Matrix4();\r\n\tconeMatrix.rotateX( -Math.PI/2 );\r\n\tconeMatrix.translate( new THREE.Vector3( 0, -0.5, 0 ) );\r\n\tconeGeometry.applyMatrix( coneMatrix );\r\n\r\n\tvar bulbMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar raysMaterial = new THREE.LineBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar coneMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.3, transparent: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\tthis.lightCone = new THREE.Mesh( coneGeometry, coneMaterial );\r\n\r\n\tvar coneLength = light.distance ? light.distance : 10000;\r\n\tvar coneWidth = coneLength * Math.tan( light.angle * 0.5 ) * 2;\r\n\tthis.lightCone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\tthis.lightRays = new THREE.Line( raysGeometry, raysMaterial, THREE.LinePieces );\r\n\r\n\tthis.gyroscope = new THREE.Gyroscope();\r\n\r\n\tthis.gyroscope.add( this.lightSphere );\r\n\tthis.gyroscope.add( this.lightRays );\r\n\r\n\tthis.add( this.gyroscope );\r\n\tthis.add( this.lightCone );\r\n\r\n\tthis.lookAt( light.target.position );\r\n\r\n\tthis.lightSphere.properties.isGizmo = true;\r\n\tthis.lightSphere.properties.gizmoSubject = light;\r\n\tthis.lightSphere.properties.gizmoRoot = this;\r\n\r\n\t// light target helper\r\n\r\n\tthis.targetSphere = null;\r\n\r\n\tif ( light.target.properties.targetInverse !== undefined ) {\r\n\r\n\t\tvar targetGeo = new THREE.SphereGeometry( sphereSize, 8, 4 );\r\n\t\tvar targetMaterial = new THREE.MeshBasicMaterial( { color: hexColor, wireframe: true, fog: false } );\r\n\r\n\t\tthis.targetSphere = new THREE.Mesh( targetGeo, targetMaterial );\r\n\t\tthis.targetSphere.position = light.target.position;\r\n\r\n\t\tthis.targetSphere.properties.isGizmo = true;\r\n\t\tthis.targetSphere.properties.gizmoSubject = light.target;\r\n\t\tthis.targetSphere.properties.gizmoRoot = this.targetSphere;\r\n\r\n\t\tvar lineMaterial = new THREE.LineDashedMaterial( { color: hexColor, dashSize: 4, gapSize: 4, opacity: 0.75, transparent: true, fog: false } );\r\n\t\tvar lineGeometry = new THREE.Geometry();\r\n\t\tlineGeometry.vertices.push( this.position.clone() );\r\n\t\tlineGeometry.vertices.push( this.targetSphere.position.clone() );\r\n\t\tlineGeometry.computeLineDistances();\r\n\r\n\t\tthis.targetLine = new THREE.Line( lineGeometry, lineMaterial );\r\n\t\tthis.targetLine.properties.isGizmo = true;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tthis.properties.isGizmo = true;\r\n\r\n}\r\n\r\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.SpotLightHelper.prototype.update = function () {\r\n\r\n\t// update arrow orientation\r\n\t// pointing from light to target\r\n\r\n\tthis.direction.subVectors( this.light.target.position, this.light.position );\r\n\r\n\t// update light cone orientation and size\r\n\r\n\tthis.lookAt( this.light.target.position );\r\n\r\n\tvar coneLength = this.light.distance ? this.light.distance : 10000;\r\n\tvar coneWidth = coneLength * Math.tan( this.light.angle * 0.5 ) * 2;\r\n\tthis.lightCone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\t// update arrow, spheres, rays and line colors to light color * light intensity\r\n\r\n\tvar intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );\r\n\r\n\tthis.color.copy( this.light.color );\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tthis.lightSphere.material.color.copy( this.color );\r\n\tthis.lightRays.material.color.copy( this.color );\r\n\tthis.lightCone.material.color.copy( this.color );\r\n\r\n\t// Only update targetSphere and targetLine if available\r\n\tif ( this.targetSphere !== null ) {\r\n\r\n\t\tthis.targetSphere.material.color.copy( this.color );\r\n\t\tthis.targetLine.material.color.copy( this.color );\r\n\r\n\t\t// update target line vertices\r\n\r\n\t\tthis.targetLine.geometry.vertices[ 0 ].copy( this.light.position );\r\n\t\tthis.targetLine.geometry.vertices[ 1 ].copy( this.light.target.position );\r\n\r\n\t\tthis.targetLine.geometry.computeLineDistances();\r\n\t\tthis.targetLine.geometry.verticesNeedUpdate = true;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ImmediateRenderObject = function ( ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.render = function ( renderCallback ) { };\r\n\r\n};\r\n\r\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.lensFlares = [];\r\n\r\n\tthis.positionScreen = new THREE.Vector3();\r\n\tthis.customUpdateCallback = undefined;\r\n\r\n\tif( texture !== undefined ) {\r\n\r\n\t\tthis.add( texture, size, distance, blending, color );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\n\r\n/*\r\n * Add: adds another flare\r\n */\r\n\r\nTHREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {\r\n\r\n\tif( size === undefined ) size = -1;\r\n\tif( distance === undefined ) distance = 0;\r\n\tif( opacity === undefined ) opacity = 1;\r\n\tif( color === undefined ) color = new THREE.Color( 0xffffff );\r\n\tif( blending === undefined ) blending = THREE.NormalBlending;\r\n\r\n\tdistance = Math.min( distance, Math.max( 0, distance ) );\r\n\r\n\tthis.lensFlares.push( { texture: texture, \t\t\t// THREE.Texture\r\n\t\t                    size: size, \t\t\t\t// size in pixels (-1 = use texture.width)\r\n\t\t                    distance: distance, \t\t// distance (0-1) from light source (0=at light source)\r\n\t\t                    x: 0, y: 0, z: 0,\t\t\t// screen position (-1 => 1) z = 0 is ontop z = 1 is back\r\n\t\t                    scale: 1, \t\t\t\t\t// scale\r\n\t\t                    rotation: 1, \t\t\t\t// rotation\r\n\t\t                    opacity: opacity,\t\t\t// opacity\r\n\t\t\t\t\t\t\tcolor: color,\t\t\t\t// color\r\n\t\t                    blending: blending } );\t\t// blending\r\n\r\n};\r\n\r\n\r\n/*\r\n * Update lens flares update positions on all flares based on the screen position\r\n * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\r\n */\r\n\r\nTHREE.LensFlare.prototype.updateLensFlares = function () {\r\n\r\n\tvar f, fl = this.lensFlares.length;\r\n\tvar flare;\r\n\tvar vecX = -this.positionScreen.x * 2;\r\n\tvar vecY = -this.positionScreen.y * 2;\r\n\r\n\tfor( f = 0; f < fl; f ++ ) {\r\n\r\n\t\tflare = this.lensFlares[ f ];\r\n\r\n\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\r\n\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\r\n\r\n\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\r\n\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MorphBlendMesh = function( geometry, material ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.animationsMap = {};\r\n\tthis.animationsList = [];\r\n\r\n\t// prepare default animation\r\n\t// (all frames played together in 1 second)\r\n\r\n\tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n\tvar name = \"__default\";\r\n\r\n\tvar startFrame = 0;\r\n\tvar endFrame = numFrames - 1;\r\n\r\n\tvar fps = numFrames / 1;\r\n\r\n\tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\tthis.setAnimationWeight( name, 1 );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\r\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n\tvar animation = {\r\n\r\n\t\tstartFrame: start,\r\n\t\tendFrame: end,\r\n\r\n\t\tlength: end - start + 1,\r\n\r\n\t\tfps: fps,\r\n\t\tduration: ( end - start ) / fps,\r\n\r\n\t\tlastFrame: 0,\r\n\t\tcurrentFrame: 0,\r\n\r\n\t\tactive: false,\r\n\r\n\t\ttime: 0,\r\n\t\tdirection: 1,\r\n\t\tweight: 1,\r\n\r\n\t\tdirectionBackwards: false,\r\n\t\tmirroredLoop: false\r\n\r\n\t};\r\n\r\n\tthis.animationsMap[ name ] = animation;\r\n\tthis.animationsList.push( animation );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n\tvar pattern = /([a-z]+)(\\d+)/;\r\n\r\n\tvar firstAnimation, frameRanges = {};\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\tvar chunks = morph.name.match( pattern );\r\n\r\n\t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n\t\t\tvar name = chunks[ 1 ];\r\n\t\t\tvar num = chunks[ 2 ];\r\n\r\n\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: -Infinity };\r\n\r\n\t\t\tvar range = frameRanges[ name ];\r\n\r\n\t\t\tif ( i < range.start ) range.start = i;\r\n\t\t\tif ( i > range.end ) range.end = i;\r\n\r\n\t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var name in frameRanges ) {\r\n\r\n\t\tvar range = frameRanges[ name ];\r\n\t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n\t}\r\n\r\n\tthis.firstAnimation = firstAnimation;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = 1;\r\n\t\tanimation.directionBackwards = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = -1;\r\n\t\tanimation.directionBackwards = true;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.fps = fps;\r\n\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.duration = duration;\r\n\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.weight = weight;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = time;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n\tvar time = 0;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\ttime = animation.time;\r\n\r\n\t}\r\n\r\n\treturn time;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n\tvar duration = -1;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tduration = animation.duration;\r\n\r\n\t}\r\n\r\n\treturn duration;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = 0;\r\n\t\tanimation.active = true;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( \"animation[\" + name + \"] undefined\" );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.active = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n\t\tvar animation = this.animationsList[ i ];\r\n\r\n\t\tif ( ! animation.active ) continue;\r\n\r\n\t\tvar frameTime = animation.duration / animation.length;\r\n\r\n\t\tanimation.time += animation.direction * delta;\r\n\r\n\t\tif ( animation.mirroredLoop ) {\r\n\r\n\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n\t\t\t\tanimation.direction *= -1;\r\n\r\n\t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n\t\t\t\t\tanimation.time = animation.duration;\r\n\t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( animation.time < 0 ) {\r\n\r\n\t\t\t\t\tanimation.time = 0;\r\n\t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n\t\t}\r\n\r\n\t\tvar keyframe = animation.startFrame + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t\tvar weight = animation.weight;\r\n\r\n\t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n\t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t\t\tanimation.currentFrame = keyframe;\r\n\r\n\t\t}\r\n\r\n\t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n\t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlarePlugin = function ( ) {\r\n\r\n\tvar _gl, _renderer, _precision, _lensFlare = {};\r\n\r\n\tthis.init = function ( renderer ) {\r\n\r\n\t\t_gl = renderer.context;\r\n\t\t_renderer = renderer;\r\n\r\n\t\t_precision = renderer.getPrecision();\r\n\r\n\t\t_lensFlare.vertices = new Float32Array( 8 + 8 );\r\n\t\t_lensFlare.faces = new Uint16Array( 6 );\r\n\r\n\t\tvar i = 0;\r\n\t\t_lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = -1;\t// vertex\r\n\t\t_lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 0;\t// uv... etc.\r\n\r\n\t\t_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = -1;\r\n\t\t_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 0;\r\n\r\n\t\t_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;\r\n\t\t_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;\r\n\r\n\t\t_lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = 1;\r\n\t\t_lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 1;\r\n\r\n\t\ti = 0;\r\n\t\t_lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 1; _lensFlare.faces[ i++ ] = 2;\r\n\t\t_lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 2; _lensFlare.faces[ i++ ] = 3;\r\n\r\n\t\t// buffers\r\n\r\n\t\t_lensFlare.vertexBuffer     = _gl.createBuffer();\r\n\t\t_lensFlare.elementBuffer    = _gl.createBuffer();\r\n\r\n\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );\r\n\t\t_gl.bufferData( _gl.ARRAY_BUFFER, _lensFlare.vertices, _gl.STATIC_DRAW );\r\n\r\n\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );\r\n\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.faces, _gl.STATIC_DRAW );\r\n\r\n\t\t// textures\r\n\r\n\t\t_lensFlare.tempTexture      = _gl.createTexture();\r\n\t\t_lensFlare.occlusionTexture = _gl.createTexture();\r\n\r\n\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );\r\n\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, 16, 16, 0, _gl.RGB, _gl.UNSIGNED_BYTE, null );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );\r\n\r\n\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );\r\n\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, 16, 16, 0, _gl.RGBA, _gl.UNSIGNED_BYTE, null );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );\r\n\r\n\t\tif ( _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) <= 0 ) {\r\n\r\n\t\t\t_lensFlare.hasVertexTexture = false;\r\n\t\t\t_lensFlare.program = createProgram( THREE.ShaderFlares[ \"lensFlare\" ], _precision );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_lensFlare.hasVertexTexture = true;\r\n\t\t\t_lensFlare.program = createProgram( THREE.ShaderFlares[ \"lensFlareVertexTexture\" ], _precision );\r\n\r\n\t\t}\r\n\r\n\t\t_lensFlare.attributes = {};\r\n\t\t_lensFlare.uniforms = {};\r\n\r\n\t\t_lensFlare.attributes.vertex       = _gl.getAttribLocation ( _lensFlare.program, \"position\" );\r\n\t\t_lensFlare.attributes.uv           = _gl.getAttribLocation ( _lensFlare.program, \"uv\" );\r\n\r\n\t\t_lensFlare.uniforms.renderType     = _gl.getUniformLocation( _lensFlare.program, \"renderType\" );\r\n\t\t_lensFlare.uniforms.map            = _gl.getUniformLocation( _lensFlare.program, \"map\" );\r\n\t\t_lensFlare.uniforms.occlusionMap   = _gl.getUniformLocation( _lensFlare.program, \"occlusionMap\" );\r\n\t\t_lensFlare.uniforms.opacity        = _gl.getUniformLocation( _lensFlare.program, \"opacity\" );\r\n\t\t_lensFlare.uniforms.color          = _gl.getUniformLocation( _lensFlare.program, \"color\" );\r\n\t\t_lensFlare.uniforms.scale          = _gl.getUniformLocation( _lensFlare.program, \"scale\" );\r\n\t\t_lensFlare.uniforms.rotation       = _gl.getUniformLocation( _lensFlare.program, \"rotation\" );\r\n\t\t_lensFlare.uniforms.screenPosition = _gl.getUniformLocation( _lensFlare.program, \"screenPosition\" );\r\n\r\n\t};\r\n\r\n\r\n\t/*\r\n\t * Render lens flares\r\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\r\n\t *         reads these back and calculates occlusion.\r\n\t *         Then _lensFlare.update_lensFlares() is called to re-position and\r\n\t *         update transparency of flares. Then they are rendered.\r\n\t *\r\n\t */\r\n\r\n\tthis.render = function ( scene, camera, viewportWidth, viewportHeight ) {\r\n\r\n\t\tvar flares = scene.__webglFlares,\r\n\t\t\tnFlares = flares.length;\r\n\r\n\t\tif ( ! nFlares ) return;\r\n\r\n\t\tvar tempPosition = new THREE.Vector3();\r\n\r\n\t\tvar invAspect = viewportHeight / viewportWidth,\r\n\t\t\thalfViewportWidth = viewportWidth * 0.5,\r\n\t\t\thalfViewportHeight = viewportHeight * 0.5;\r\n\r\n\t\tvar size = 16 / viewportHeight,\r\n\t\t\tscale = new THREE.Vector2( size * invAspect, size );\r\n\r\n\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\r\n\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\r\n\r\n\t\tvar uniforms = _lensFlare.uniforms,\r\n\t\t\tattributes = _lensFlare.attributes;\r\n\r\n\t\t// set _lensFlare program and reset blending\r\n\r\n\t\t_gl.useProgram( _lensFlare.program );\r\n\r\n\t\t_gl.enableVertexAttribArray( _lensFlare.attributes.vertex );\r\n\t\t_gl.enableVertexAttribArray( _lensFlare.attributes.uv );\r\n\r\n\t\t// loop through all lens flares to update their occlusion and positions\r\n\t\t// setup gl and common used attribs/unforms\r\n\r\n\t\t_gl.uniform1i( uniforms.occlusionMap, 0 );\r\n\t\t_gl.uniform1i( uniforms.map, 1 );\r\n\r\n\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );\r\n\t\t_gl.vertexAttribPointer( attributes.vertex, 2, _gl.FLOAT, false, 2 * 8, 0 );\r\n\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );\r\n\r\n\t\t_gl.disable( _gl.CULL_FACE );\r\n\t\t_gl.depthMask( false );\r\n\r\n\t\tvar i, j, jl, flare, sprite;\r\n\r\n\t\tfor ( i = 0; i < nFlares; i ++ ) {\r\n\r\n\t\t\tsize = 16 / viewportHeight;\r\n\t\t\tscale.set( size * invAspect, size );\r\n\r\n\t\t\t// calc object screen position\r\n\r\n\t\t\tflare = flares[ i ];\r\n\r\n\t\t\ttempPosition.set( flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14] );\r\n\r\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\r\n\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\r\n\r\n\t\t\t// setup arrays for gl programs\r\n\r\n\t\t\tscreenPosition.copy( tempPosition )\r\n\r\n\t\t\tscreenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;\r\n\t\t\tscreenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;\r\n\r\n\t\t\t// screen cull\r\n\r\n\t\t\tif ( _lensFlare.hasVertexTexture || (\r\n\t\t\t\tscreenPositionPixels.x > 0 &&\r\n\t\t\t\tscreenPositionPixels.x < viewportWidth &&\r\n\t\t\t\tscreenPositionPixels.y > 0 &&\r\n\t\t\t\tscreenPositionPixels.y < viewportHeight ) ) {\r\n\r\n\t\t\t\t// save current RGB to temp texture\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE1 );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );\r\n\t\t\t\t_gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// render pink quad\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.renderType, 0 );\r\n\t\t\t\t_gl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t_gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\r\n\t\t\t\t_gl.disable( _gl.BLEND );\r\n\t\t\t\t_gl.enable( _gl.DEPTH_TEST );\r\n\r\n\t\t\t\t_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// copy result to occlusionMap\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE0 );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );\r\n\t\t\t\t_gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// restore graphics\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.renderType, 1 );\r\n\t\t\t\t_gl.disable( _gl.DEPTH_TEST );\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE1 );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );\r\n\t\t\t\t_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// update object positions\r\n\r\n\t\t\t\tflare.positionScreen.copy( screenPosition )\r\n\r\n\t\t\t\tif ( flare.customUpdateCallback ) {\r\n\r\n\t\t\t\t\tflare.customUpdateCallback( flare );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tflare.updateLensFlares();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render flares\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.renderType, 2 );\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t\t\t\tfor ( j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tsprite = flare.lensFlares[ j ];\r\n\r\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\r\n\r\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\r\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\r\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\r\n\r\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewportHeight;\r\n\r\n\t\t\t\t\t\tscale.x = size * invAspect;\r\n\t\t\t\t\t\tscale.y = size;\r\n\r\n\t\t\t\t\t\t_gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\t\t\t\t\t\t_gl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t\t\t_gl.uniform1f( uniforms.rotation, sprite.rotation );\r\n\r\n\t\t\t\t\t\t_gl.uniform1f( uniforms.opacity, sprite.opacity );\r\n\t\t\t\t\t\t_gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\r\n\r\n\t\t\t\t\t\t_renderer.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\r\n\t\t\t\t\t\t_renderer.setTexture( sprite.texture, 1 );\r\n\r\n\t\t\t\t\t\t_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\t_gl.enable( _gl.CULL_FACE );\r\n\t\t_gl.enable( _gl.DEPTH_TEST );\r\n\t\t_gl.depthMask( true );\r\n\r\n\t};\r\n\r\n\tfunction createProgram ( shader, precision ) {\r\n\r\n\t\tvar program = _gl.createProgram();\r\n\r\n\t\tvar fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );\r\n\t\tvar vertexShader = _gl.createShader( _gl.VERTEX_SHADER );\r\n\r\n\t\tvar prefix = \"precision \" + precision + \" float;\\n\";\r\n\r\n\t\t_gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\r\n\t\t_gl.shaderSource( vertexShader, prefix + shader.vertexShader );\r\n\r\n\t\t_gl.compileShader( fragmentShader );\r\n\t\t_gl.compileShader( vertexShader );\r\n\r\n\t\t_gl.attachShader( program, fragmentShader );\r\n\t\t_gl.attachShader( program, vertexShader );\r\n\r\n\t\t_gl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ShadowMapPlugin = function ( ) {\r\n\r\n\tvar _gl,\r\n\t_renderer,\r\n\t_depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\r\n\t_min = new THREE.Vector3(),\r\n\t_max = new THREE.Vector3();\r\n\r\n\tthis.init = function ( renderer ) {\r\n\r\n\t\t_gl = renderer.context;\r\n\t\t_renderer = renderer;\r\n\r\n\t\tvar depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\r\n\t\tvar depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\r\n\r\n\t\t_depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );\r\n\t\t_depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );\r\n\t\t_depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );\r\n\t\t_depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );\r\n\r\n\t\t_depthMaterial._shadowPass = true;\r\n\t\t_depthMaterialMorph._shadowPass = true;\r\n\t\t_depthMaterialSkin._shadowPass = true;\r\n\t\t_depthMaterialMorphSkin._shadowPass = true;\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( ! ( _renderer.shadowMapEnabled && _renderer.shadowMapAutoUpdate ) ) return;\r\n\r\n\t\tthis.update( scene, camera );\r\n\r\n\t};\r\n\r\n\tthis.update = function ( scene, camera ) {\r\n\r\n\t\tvar i, il, j, jl, n,\r\n\r\n\t\tshadowMap, shadowMatrix, shadowCamera,\r\n\t\tprogram, buffer, material,\r\n\t\twebglObject, object, light,\r\n\t\trenderList,\r\n\r\n\t\tlights = [],\r\n\t\tk = 0,\r\n\r\n\t\tfog = null;\r\n\r\n\t\t// set GL state for depth map\r\n\r\n\t\t_gl.clearColor( 1, 1, 1, 1 );\r\n\t\t_gl.disable( _gl.BLEND );\r\n\r\n\t\t_gl.enable( _gl.CULL_FACE );\r\n\t\t_gl.frontFace( _gl.CCW );\r\n\r\n\t\tif ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t_gl.cullFace( _gl.FRONT );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.cullFace( _gl.BACK );\r\n\r\n\t\t}\r\n\r\n\t\t_renderer.setDepthTest( true );\r\n\r\n\t\t// preprocess lights\r\n\t\t// \t- skip lights that are not casting shadows\r\n\t\t//\t- create virtual lights for cascaded shadow maps\r\n\r\n\t\tfor ( i = 0, il = scene.__lights.length; i < il; i ++ ) {\r\n\r\n\t\t\tlight = scene.__lights[ i ];\r\n\r\n\t\t\tif ( ! light.castShadow ) continue;\r\n\r\n\t\t\tif ( ( light instanceof THREE.DirectionalLight ) && light.shadowCascade ) {\r\n\r\n\t\t\t\tfor ( n = 0; n < light.shadowCascadeCount; n ++ ) {\r\n\r\n\t\t\t\t\tvar virtualLight;\r\n\r\n\t\t\t\t\tif ( ! light.shadowCascadeArray[ n ] ) {\r\n\r\n\t\t\t\t\t\tvirtualLight = createVirtualLight( light, n );\r\n\t\t\t\t\t\tvirtualLight.originalCamera = camera;\r\n\r\n\t\t\t\t\t\tvar gyro = new THREE.Gyroscope();\r\n\t\t\t\t\t\tgyro.position = light.shadowCascadeOffset;\r\n\r\n\t\t\t\t\t\tgyro.add( virtualLight );\r\n\t\t\t\t\t\tgyro.add( virtualLight.target );\r\n\r\n\t\t\t\t\t\tcamera.add( gyro );\r\n\r\n\t\t\t\t\t\tlight.shadowCascadeArray[ n ] = virtualLight;\r\n\r\n\t\t\t\t\t\tconsole.log( \"Created virtualLight\", virtualLight );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvirtualLight = light.shadowCascadeArray[ n ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tupdateVirtualLight( light, n );\r\n\r\n\t\t\t\t\tlights[ k ] = virtualLight;\r\n\t\t\t\t\tk ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlights[ k ] = light;\r\n\t\t\t\tk ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// render depth map\r\n\r\n\t\tfor ( i = 0, il = lights.length; i < il; i ++ ) {\r\n\r\n\t\t\tlight = lights[ i ];\r\n\r\n\t\t\tif ( ! light.shadowMap ) {\r\n\r\n\t\t\t\tvar shadowFilter = THREE.LinearFilter;\r\n\r\n\t\t\t\tif ( _renderer.shadowMapType === THREE.PCFSoftShadowMap ) {\r\n\r\n\t\t\t\t\tshadowFilter = THREE.NearestFilter;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };\r\n\r\n\t\t\t\tlight.shadowMap = new THREE.WebGLRenderTarget( light.shadowMapWidth, light.shadowMapHeight, pars );\r\n\t\t\t\tlight.shadowMapSize = new THREE.Vector2( light.shadowMapWidth, light.shadowMapHeight );\r\n\r\n\t\t\t\tlight.shadowMatrix = new THREE.Matrix4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! light.shadowCamera ) {\r\n\r\n\t\t\t\tif ( light instanceof THREE.SpotLight ) {\r\n\r\n\t\t\t\t\tlight.shadowCamera = new THREE.PerspectiveCamera( light.shadowCameraFov, light.shadowMapWidth / light.shadowMapHeight, light.shadowCameraNear, light.shadowCameraFar );\r\n\r\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\t\tlight.shadowCamera = new THREE.OrthographicCamera( light.shadowCameraLeft, light.shadowCameraRight, light.shadowCameraTop, light.shadowCameraBottom, light.shadowCameraNear, light.shadowCameraFar );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( \"Unsupported light type for shadow\" );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscene.add( light.shadowCamera );\r\n\r\n\t\t\t\tif ( _renderer.autoUpdateScene ) scene.updateMatrixWorld();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( light.shadowCameraVisible && ! light.cameraHelper ) {\r\n\r\n\t\t\t\tlight.cameraHelper = new THREE.CameraHelper( light.shadowCamera );\r\n\t\t\t\tlight.shadowCamera.add( light.cameraHelper );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( light.isVirtual && virtualLight.originalCamera == camera ) {\r\n\r\n\t\t\t\tupdateShadowCamera( camera, light );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tshadowMap = light.shadowMap;\r\n\t\t\tshadowMatrix = light.shadowMatrix;\r\n\t\t\tshadowCamera = light.shadowCamera;\r\n\r\n\t\t\tshadowCamera.position.copy( light.matrixWorld.getPosition() );\r\n\t\t\tshadowCamera.lookAt( light.target.matrixWorld.getPosition() );\r\n\t\t\tshadowCamera.updateMatrixWorld();\r\n\r\n\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\r\n\r\n\t\t\tif ( light.cameraHelper ) light.cameraHelper.visible = light.shadowCameraVisible;\r\n\t\t\tif ( light.shadowCameraVisible ) light.cameraHelper.update();\r\n\r\n\t\t\t// compute shadow matrix\r\n\r\n\t\t\tshadowMatrix.set( 0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t\t\t\t  0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t\t\t\t  0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t\t\t\t  0.0, 0.0, 0.0, 1.0 );\r\n\r\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\r\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t\t// update camera matrices and frustum\r\n\r\n\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t\t// render shadow map\r\n\r\n\t\t\t_renderer.setRenderTarget( shadowMap );\r\n\t\t\t_renderer.clear();\r\n\r\n\t\t\t// set object matrices & frustum culling\r\n\r\n\t\t\trenderList = scene.__webglObjects;\r\n\r\n\t\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\twebglObject = renderList[ j ];\r\n\t\t\t\tobject = webglObject.object;\r\n\r\n\t\t\t\twebglObject.render = false;\r\n\r\n\t\t\t\tif ( object.visible && object.castShadow ) {\r\n\r\n\t\t\t\t\tif ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\t\tobject._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t\t\twebglObject.render = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// render regular objects\r\n\r\n\t\t\tvar objectMaterial, useMorphing, useSkinning;\r\n\r\n\t\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\twebglObject = renderList[ j ];\r\n\r\n\t\t\t\tif ( webglObject.render ) {\r\n\r\n\t\t\t\t\tobject = webglObject.object;\r\n\t\t\t\t\tbuffer = webglObject.buffer;\r\n\r\n\t\t\t\t\t// culling is overriden globally for all objects\r\n\t\t\t\t\t// while rendering depth map\r\n\r\n\t\t\t\t\t// need to deal with MeshFaceMaterial somehow\r\n\t\t\t\t\t// in that case just use the first of material.materials for now\r\n\t\t\t\t\t// (proper solution would require to break objects by materials\r\n\t\t\t\t\t//  similarly to regular rendering and then set corresponding\r\n\t\t\t\t\t//  depth materials per each chunk instead of just once per object)\r\n\r\n\t\t\t\t\tobjectMaterial = getObjectMaterial( object );\r\n\r\n\t\t\t\t\tuseMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;\r\n\t\t\t\t\tuseSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;\r\n\r\n\t\t\t\t\tif ( object.customDepthMaterial ) {\r\n\r\n\t\t\t\t\t\tmaterial = object.customDepthMaterial;\r\n\r\n\t\t\t\t\t} else if ( useSkinning ) {\r\n\r\n\t\t\t\t\t\tmaterial = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;\r\n\r\n\t\t\t\t\t} else if ( useMorphing ) {\r\n\r\n\t\t\t\t\t\tmaterial = _depthMaterialMorph;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tmaterial = _depthMaterial;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( buffer instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, scene.__lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_renderer.renderBuffer( shadowCamera, scene.__lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// set matrices and render immediate objects\r\n\r\n\t\t\trenderList = scene.__webglObjectsImmediate;\r\n\r\n\t\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\twebglObject = renderList[ j ];\r\n\t\t\t\tobject = webglObject.object;\r\n\r\n\t\t\t\tif ( object.visible && object.castShadow ) {\r\n\r\n\t\t\t\t\tobject._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t\t_renderer.renderImmediateObject( shadowCamera, scene.__lights, fog, _depthMaterial, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore GL state\r\n\r\n\t\tvar clearColor = _renderer.getClearColor(),\r\n\t\tclearAlpha = _renderer.getClearAlpha();\r\n\r\n\t\t_gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );\r\n\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t\tif ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t_gl.cullFace( _gl.BACK );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction createVirtualLight( light, cascade ) {\r\n\r\n\t\tvar virtualLight = new THREE.DirectionalLight();\r\n\r\n\t\tvirtualLight.isVirtual = true;\r\n\r\n\t\tvirtualLight.onlyShadow = true;\r\n\t\tvirtualLight.castShadow = true;\r\n\r\n\t\tvirtualLight.shadowCameraNear = light.shadowCameraNear;\r\n\t\tvirtualLight.shadowCameraFar = light.shadowCameraFar;\r\n\r\n\t\tvirtualLight.shadowCameraLeft = light.shadowCameraLeft;\r\n\t\tvirtualLight.shadowCameraRight = light.shadowCameraRight;\r\n\t\tvirtualLight.shadowCameraBottom = light.shadowCameraBottom;\r\n\t\tvirtualLight.shadowCameraTop = light.shadowCameraTop;\r\n\r\n\t\tvirtualLight.shadowCameraVisible = light.shadowCameraVisible;\r\n\r\n\t\tvirtualLight.shadowDarkness = light.shadowDarkness;\r\n\r\n\t\tvirtualLight.shadowBias = light.shadowCascadeBias[ cascade ];\r\n\t\tvirtualLight.shadowMapWidth = light.shadowCascadeWidth[ cascade ];\r\n\t\tvirtualLight.shadowMapHeight = light.shadowCascadeHeight[ cascade ];\r\n\r\n\t\tvirtualLight.pointsWorld = [];\r\n\t\tvirtualLight.pointsFrustum = [];\r\n\r\n\t\tvar pointsWorld = virtualLight.pointsWorld,\r\n\t\t\tpointsFrustum = virtualLight.pointsFrustum;\r\n\r\n\t\tfor ( var i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\tpointsWorld[ i ] = new THREE.Vector3();\r\n\t\t\tpointsFrustum[ i ] = new THREE.Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tvar nearZ = light.shadowCascadeNearZ[ cascade ];\r\n\t\tvar farZ = light.shadowCascadeFarZ[ cascade ];\r\n\r\n\t\tpointsFrustum[ 0 ].set( -1, -1, nearZ );\r\n\t\tpointsFrustum[ 1 ].set(  1, -1, nearZ );\r\n\t\tpointsFrustum[ 2 ].set( -1,  1, nearZ );\r\n\t\tpointsFrustum[ 3 ].set(  1,  1, nearZ );\r\n\r\n\t\tpointsFrustum[ 4 ].set( -1, -1, farZ );\r\n\t\tpointsFrustum[ 5 ].set(  1, -1, farZ );\r\n\t\tpointsFrustum[ 6 ].set( -1,  1, farZ );\r\n\t\tpointsFrustum[ 7 ].set(  1,  1, farZ );\r\n\r\n\t\treturn virtualLight;\r\n\r\n\t}\r\n\r\n\t// Synchronize virtual light with the original light\r\n\r\n\tfunction updateVirtualLight( light, cascade ) {\r\n\r\n\t\tvar virtualLight = light.shadowCascadeArray[ cascade ];\r\n\r\n\t\tvirtualLight.position.copy( light.position );\r\n\t\tvirtualLight.target.position.copy( light.target.position );\r\n\t\tvirtualLight.lookAt( virtualLight.target );\r\n\r\n\t\tvirtualLight.shadowCameraVisible = light.shadowCameraVisible;\r\n\t\tvirtualLight.shadowDarkness = light.shadowDarkness;\r\n\r\n\t\tvirtualLight.shadowBias = light.shadowCascadeBias[ cascade ];\r\n\r\n\t\tvar nearZ = light.shadowCascadeNearZ[ cascade ];\r\n\t\tvar farZ = light.shadowCascadeFarZ[ cascade ];\r\n\r\n\t\tvar pointsFrustum = virtualLight.pointsFrustum;\r\n\r\n\t\tpointsFrustum[ 0 ].z = nearZ;\r\n\t\tpointsFrustum[ 1 ].z = nearZ;\r\n\t\tpointsFrustum[ 2 ].z = nearZ;\r\n\t\tpointsFrustum[ 3 ].z = nearZ;\r\n\r\n\t\tpointsFrustum[ 4 ].z = farZ;\r\n\t\tpointsFrustum[ 5 ].z = farZ;\r\n\t\tpointsFrustum[ 6 ].z = farZ;\r\n\t\tpointsFrustum[ 7 ].z = farZ;\r\n\r\n\t}\r\n\r\n\t// Fit shadow camera's ortho frustum to camera frustum\r\n\r\n\tfunction updateShadowCamera( camera, light ) {\r\n\r\n\t\tvar shadowCamera = light.shadowCamera,\r\n\t\t\tpointsFrustum = light.pointsFrustum,\r\n\t\t\tpointsWorld = light.pointsWorld;\r\n\r\n\t\t_min.set( Infinity, Infinity, Infinity );\r\n\t\t_max.set( -Infinity, -Infinity, -Infinity );\r\n\r\n\t\tfor ( var i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\tvar p = pointsWorld[ i ];\r\n\r\n\t\t\tp.copy( pointsFrustum[ i ] );\r\n\t\t\tTHREE.ShadowMapPlugin.__projector.unprojectVector( p, camera );\r\n\r\n\t\t\tp.applyMatrix4( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t\tif ( p.x < _min.x ) _min.x = p.x;\r\n\t\t\tif ( p.x > _max.x ) _max.x = p.x;\r\n\r\n\t\t\tif ( p.y < _min.y ) _min.y = p.y;\r\n\t\t\tif ( p.y > _max.y ) _max.y = p.y;\r\n\r\n\t\t\tif ( p.z < _min.z ) _min.z = p.z;\r\n\t\t\tif ( p.z > _max.z ) _max.z = p.z;\r\n\r\n\t\t}\r\n\r\n\t\tshadowCamera.left = _min.x;\r\n\t\tshadowCamera.right = _max.x;\r\n\t\tshadowCamera.top = _max.y;\r\n\t\tshadowCamera.bottom = _min.y;\r\n\r\n\t\t// can't really fit near/far\r\n\t\t//shadowCamera.near = _min.z;\r\n\t\t//shadowCamera.far = _max.z;\r\n\r\n\t\tshadowCamera.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\t// For the moment just ignore objects that have multiple materials with different animation methods\r\n\t// Only the first material will be taken into account for deciding which depth material to use for shadow maps\r\n\r\n\tfunction getObjectMaterial( object ) {\r\n\r\n\t\treturn object.material instanceof THREE.MeshFaceMaterial\r\n\t\t\t? object.material.materials[ 0 ]\r\n\t\t\t: object.material;\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.ShadowMapPlugin.__projector = new THREE.Projector();\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpritePlugin = function ( ) {\r\n\r\n\tvar _gl, _renderer, _precision, _sprite = {};\r\n\r\n\tthis.init = function ( renderer ) {\r\n\r\n\t\t_gl = renderer.context;\r\n\t\t_renderer = renderer;\r\n\r\n\t\t_precision = renderer.getPrecision();\r\n\r\n\t\t_sprite.vertices = new Float32Array( 8 + 8 );\r\n\t\t_sprite.faces    = new Uint16Array( 6 );\r\n\r\n\t\tvar i = 0;\r\n\r\n\t\t_sprite.vertices[ i++ ] = -1; _sprite.vertices[ i++ ] = -1;\t// vertex 0\r\n\t\t_sprite.vertices[ i++ ] = 0;  _sprite.vertices[ i++ ] = 0;\t// uv 0\r\n\r\n\t\t_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = -1;\t// vertex 1\r\n\t\t_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 0;\t// uv 1\r\n\r\n\t\t_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 1;\t// vertex 2\r\n\t\t_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 1;\t// uv 2\r\n\r\n\t\t_sprite.vertices[ i++ ] = -1; _sprite.vertices[ i++ ] = 1;\t// vertex 3\r\n\t\t_sprite.vertices[ i++ ] = 0;  _sprite.vertices[ i++ ] = 1;\t// uv 3\r\n\r\n\t\ti = 0;\r\n\r\n\t\t_sprite.faces[ i++ ] = 0; _sprite.faces[ i++ ] = 1; _sprite.faces[ i++ ] = 2;\r\n\t\t_sprite.faces[ i++ ] = 0; _sprite.faces[ i++ ] = 2; _sprite.faces[ i++ ] = 3;\r\n\r\n\t\t_sprite.vertexBuffer  = _gl.createBuffer();\r\n\t\t_sprite.elementBuffer = _gl.createBuffer();\r\n\r\n\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, _sprite.vertexBuffer );\r\n\t\t_gl.bufferData( _gl.ARRAY_BUFFER, _sprite.vertices, _gl.STATIC_DRAW );\r\n\r\n\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _sprite.elementBuffer );\r\n\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, _sprite.faces, _gl.STATIC_DRAW );\r\n\r\n\t\t_sprite.program = createProgram( THREE.ShaderSprite[ \"sprite\" ], _precision );\r\n\r\n\t\t_sprite.attributes = {};\r\n\t\t_sprite.uniforms = {};\r\n\r\n\t\t_sprite.attributes.position           = _gl.getAttribLocation ( _sprite.program, \"position\" );\r\n\t\t_sprite.attributes.uv                 = _gl.getAttribLocation ( _sprite.program, \"uv\" );\r\n\r\n\t\t_sprite.uniforms.uvOffset             = _gl.getUniformLocation( _sprite.program, \"uvOffset\" );\r\n\t\t_sprite.uniforms.uvScale              = _gl.getUniformLocation( _sprite.program, \"uvScale\" );\r\n\r\n\t\t_sprite.uniforms.rotation             = _gl.getUniformLocation( _sprite.program, \"rotation\" );\r\n\t\t_sprite.uniforms.scale                = _gl.getUniformLocation( _sprite.program, \"scale\" );\r\n\t\t_sprite.uniforms.alignment            = _gl.getUniformLocation( _sprite.program, \"alignment\" );\r\n\r\n\t\t_sprite.uniforms.color                = _gl.getUniformLocation( _sprite.program, \"color\" );\r\n\t\t_sprite.uniforms.map                  = _gl.getUniformLocation( _sprite.program, \"map\" );\r\n\t\t_sprite.uniforms.opacity              = _gl.getUniformLocation( _sprite.program, \"opacity\" );\r\n\r\n\t\t_sprite.uniforms.useScreenCoordinates = _gl.getUniformLocation( _sprite.program, \"useScreenCoordinates\" );\r\n\t\t_sprite.uniforms.sizeAttenuation   \t  = _gl.getUniformLocation( _sprite.program, \"sizeAttenuation\" );\r\n\t\t_sprite.uniforms.screenPosition    \t  = _gl.getUniformLocation( _sprite.program, \"screenPosition\" );\r\n\t\t_sprite.uniforms.modelViewMatrix      = _gl.getUniformLocation( _sprite.program, \"modelViewMatrix\" );\r\n\t\t_sprite.uniforms.projectionMatrix     = _gl.getUniformLocation( _sprite.program, \"projectionMatrix\" );\r\n\r\n\t\t_sprite.uniforms.fogType \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogType\" );\r\n\t\t_sprite.uniforms.fogDensity \t\t  = _gl.getUniformLocation( _sprite.program, \"fogDensity\" );\r\n\t\t_sprite.uniforms.fogNear \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogNear\" );\r\n\t\t_sprite.uniforms.fogFar \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogFar\" );\r\n\t\t_sprite.uniforms.fogColor \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogColor\" );\r\n\r\n\t\t_sprite.uniforms.alphaTest \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"alphaTest\" );\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera, viewportWidth, viewportHeight ) {\r\n\r\n\t\tvar sprites = scene.__webglSprites,\r\n\t\t\tnSprites = sprites.length;\r\n\r\n\t\tif ( ! nSprites ) return;\r\n\r\n\t\tvar attributes = _sprite.attributes,\r\n\t\t\tuniforms = _sprite.uniforms;\r\n\r\n\t\tvar invAspect = viewportHeight / viewportWidth;\r\n\r\n\t\tvar halfViewportWidth = viewportWidth * 0.5,\r\n\t\t\thalfViewportHeight = viewportHeight * 0.5;\r\n\r\n\t\t// setup gl\r\n\r\n\t\t_gl.useProgram( _sprite.program );\r\n\r\n\t\t_gl.enableVertexAttribArray( attributes.position );\r\n\t\t_gl.enableVertexAttribArray( attributes.uv );\r\n\r\n\t\t_gl.disable( _gl.CULL_FACE );\r\n\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, _sprite.vertexBuffer );\r\n\t\t_gl.vertexAttribPointer( attributes.position, 2, _gl.FLOAT, false, 2 * 8, 0 );\r\n\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _sprite.elementBuffer );\r\n\r\n\t\t_gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\r\n\t\t_gl.activeTexture( _gl.TEXTURE0 );\r\n\t\t_gl.uniform1i( uniforms.map, 0 );\r\n\r\n\t\tvar oldFogType = 0;\r\n\t\tvar sceneFogType = 0;\r\n\t\tvar fog = scene.fog;\r\n\r\n\t\tif ( fog ) {\r\n\r\n\t\t\t_gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\r\n\r\n\t\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.fogNear, fog.near );\r\n\t\t\t\t_gl.uniform1f( uniforms.fogFar, fog.far );\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.fogType, 1 );\r\n\t\t\t\toldFogType = 1;\r\n\t\t\t\tsceneFogType = 1;\r\n\r\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.fogDensity, fog.density );\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.fogType, 2 );\r\n\t\t\t\toldFogType = 2;\r\n\t\t\t\tsceneFogType = 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.uniform1i( uniforms.fogType, 0 );\r\n\t\t\toldFogType = 0;\r\n\t\t\tsceneFogType = 0;\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// update positions and sort\r\n\r\n\t\tvar i, sprite, material, screenPosition, size, fogType, scale = [];\r\n\r\n\t\tfor( i = 0; i < nSprites; i ++ ) {\r\n\r\n\t\t\tsprite = sprites[ i ];\r\n\t\t\tmaterial = sprite.material;\r\n\r\n\t\t\tif ( ! sprite.visible || material.opacity === 0 ) continue;\r\n\r\n\t\t\tif ( ! material.useScreenCoordinates ) {\r\n\r\n\t\t\t\tsprite._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\r\n\t\t\t\tsprite.z = - sprite._modelViewMatrix.elements[ 14 ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsprite.z = - sprite.position.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsprites.sort( painterSortStable );\r\n\r\n\t\t// render all sprites\r\n\r\n\t\tfor( i = 0; i < nSprites; i ++ ) {\r\n\r\n\t\t\tsprite = sprites[ i ];\r\n\t\t\tmaterial = sprite.material;\r\n\r\n\t\t\tif ( ! sprite.visible || material.opacity === 0 ) continue;\r\n\r\n\t\t\tif ( material.map && material.map.image && material.map.image.width ) {\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.alphaTest, material.alphaTest );\r\n\r\n\t\t\t\tif ( material.useScreenCoordinates === true ) {\r\n\r\n\t\t\t\t\t_gl.uniform1i( uniforms.useScreenCoordinates, 1 );\r\n\t\t\t\t\t_gl.uniform3f(\r\n\t\t\t\t\t\tuniforms.screenPosition,\r\n\t\t\t\t\t\t( ( sprite.position.x * _renderer.devicePixelRatio ) - halfViewportWidth  ) / halfViewportWidth,\r\n\t\t\t\t\t\t( halfViewportHeight - ( sprite.position.y * _renderer.devicePixelRatio ) ) / halfViewportHeight,\r\n\t\t\t\t\t\tMath.max( 0, Math.min( 1, sprite.position.z ) )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tscale[ 0 ] = _renderer.devicePixelRatio;\r\n\t\t\t\t\tscale[ 1 ] = _renderer.devicePixelRatio;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.uniform1i( uniforms.useScreenCoordinates, 0 );\r\n\t\t\t\t\t_gl.uniform1i( uniforms.sizeAttenuation, material.sizeAttenuation ? 1 : 0 );\r\n\t\t\t\t\t_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite._modelViewMatrix.elements );\r\n\r\n\t\t\t\t\tscale[ 0 ] = 1;\r\n\t\t\t\t\tscale[ 1 ] = 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( scene.fog && material.fog ) {\r\n\r\n\t\t\t\t\tfogType = sceneFogType;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfogType = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( oldFogType !== fogType ) {\r\n\r\n\t\t\t\t\t_gl.uniform1i( uniforms.fogType, fogType );\r\n\t\t\t\t\toldFogType = fogType;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsize = 1 / ( material.scaleByViewport ? viewportHeight : 1 );\r\n\r\n\t\t\t\tscale[ 0 ] *= size * invAspect * sprite.scale.x\r\n\t\t\t\tscale[ 1 ] *= size * sprite.scale.y;\r\n\r\n\t\t\t\t_gl.uniform2f( uniforms.uvScale, material.uvScale.x, material.uvScale.y );\r\n\t\t\t\t_gl.uniform2f( uniforms.uvOffset, material.uvOffset.x, material.uvOffset.y );\r\n\t\t\t\t_gl.uniform2f( uniforms.alignment, material.alignment.x, material.alignment.y );\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.opacity, material.opacity );\r\n\t\t\t\t_gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.rotation, sprite.rotation );\r\n\t\t\t\t_gl.uniform2fv( uniforms.scale, scale );\r\n\r\n\t\t\t\t_renderer.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\t\t\t\t_renderer.setDepthTest( material.depthTest );\r\n\t\t\t\t_renderer.setDepthWrite( material.depthWrite );\r\n\t\t\t\t_renderer.setTexture( material.map, 0 );\r\n\r\n\t\t\t\t_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\t_gl.enable( _gl.CULL_FACE );\r\n\r\n\t};\r\n\r\n\tfunction createProgram ( shader, precision ) {\r\n\r\n\t\tvar program = _gl.createProgram();\r\n\r\n\t\tvar fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );\r\n\t\tvar vertexShader = _gl.createShader( _gl.VERTEX_SHADER );\r\n\r\n\t\tvar prefix = \"precision \" + precision + \" float;\\n\";\r\n\r\n\t\t_gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\r\n\t\t_gl.shaderSource( vertexShader, prefix + shader.vertexShader );\r\n\r\n\t\t_gl.compileShader( fragmentShader );\r\n\t\t_gl.compileShader( vertexShader );\r\n\r\n\t\t_gl.attachShader( program, fragmentShader );\r\n\t\t_gl.attachShader( program, vertexShader );\r\n\r\n\t\t_gl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn b.id - a.id;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DepthPassPlugin = function ( ) {\r\n\r\n\tthis.enabled = false;\r\n\tthis.renderTarget = null;\r\n\r\n\tvar _gl,\r\n\t_renderer,\r\n\t_depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\t_projScreenMatrix = new THREE.Matrix4();\r\n\r\n\tthis.init = function ( renderer ) {\r\n\r\n\t\t_gl = renderer.context;\r\n\t\t_renderer = renderer;\r\n\r\n\t\tvar depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\r\n\t\tvar depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\r\n\r\n\t\t_depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );\r\n\t\t_depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );\r\n\t\t_depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );\r\n\t\t_depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );\r\n\r\n\t\t_depthMaterial._shadowPass = true;\r\n\t\t_depthMaterialMorph._shadowPass = true;\r\n\t\t_depthMaterialSkin._shadowPass = true;\r\n\t\t_depthMaterialMorphSkin._shadowPass = true;\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( ! this.enabled ) return;\r\n\r\n\t\tthis.update( scene, camera );\r\n\r\n\t};\r\n\r\n\tthis.update = function ( scene, camera ) {\r\n\r\n\t\tvar i, il, j, jl, n,\r\n\r\n\t\tprogram, buffer, material,\r\n\t\twebglObject, object, light,\r\n\t\trenderList,\r\n\r\n\t\tfog = null;\r\n\r\n\t\t// set GL state for depth map\r\n\r\n\t\t_gl.clearColor( 1, 1, 1, 1 );\r\n\t\t_gl.disable( _gl.BLEND );\r\n\r\n\t\t_renderer.setDepthTest( true );\r\n\r\n\t\t// update scene\r\n\r\n\t\tif ( _renderer.autoUpdateScene ) scene.updateMatrixWorld();\r\n\r\n\t\t// update camera matrices and frustum\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t// render depth map\r\n\r\n\t\t_renderer.setRenderTarget( this.renderTarget );\r\n\t\t_renderer.clear();\r\n\r\n\t\t// set object matrices & frustum culling\r\n\r\n\t\trenderList = scene.__webglObjects;\r\n\r\n\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ j ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\twebglObject.render = false;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tif ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\tobject._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t\twebglObject.render = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// render regular objects\r\n\r\n\t\tvar objectMaterial, useMorphing, useSkinning;\r\n\r\n\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ j ];\r\n\r\n\t\t\tif ( webglObject.render ) {\r\n\r\n\t\t\t\tobject = webglObject.object;\r\n\t\t\t\tbuffer = webglObject.buffer;\r\n\r\n\t\t\t\t// todo: create proper depth material for particles\r\n\r\n\t\t\t\tif ( object instanceof THREE.ParticleSystem && !object.customDepthMaterial ) continue;\r\n\r\n\t\t\t\tobjectMaterial = getObjectMaterial( object );\r\n\r\n\t\t\t\tif ( objectMaterial ) _renderer.setMaterialFaces( object.material );\r\n\r\n\t\t\t\tuseMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;\r\n\t\t\t\tuseSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;\r\n\r\n\t\t\t\tif ( object.customDepthMaterial ) {\r\n\r\n\t\t\t\t\tmaterial = object.customDepthMaterial;\r\n\r\n\t\t\t\t} else if ( useSkinning ) {\r\n\r\n\t\t\t\t\tmaterial = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;\r\n\r\n\t\t\t\t} else if ( useMorphing ) {\r\n\r\n\t\t\t\t\tmaterial = _depthMaterialMorph;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterial = _depthMaterial;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( buffer instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t_renderer.renderBufferDirect( camera, scene.__lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_renderer.renderBuffer( camera, scene.__lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// set matrices and render immediate objects\r\n\r\n\t\trenderList = scene.__webglObjectsImmediate;\r\n\r\n\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ j ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tobject._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t_renderer.renderImmediateObject( camera, scene.__lights, fog, _depthMaterial, object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore GL state\r\n\r\n\t\tvar clearColor = _renderer.getClearColor(),\r\n\t\tclearAlpha = _renderer.getClearAlpha();\r\n\r\n\t\t_gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );\r\n\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t};\r\n\r\n\t// For the moment just ignore objects that have multiple materials with different animation methods\r\n\t// Only the first material will be taken into account for deciding which depth material to use\r\n\r\n\tfunction getObjectMaterial( object ) {\r\n\r\n\t\treturn object.material instanceof THREE.MeshFaceMaterial\r\n\t\t\t? object.material.materials[ 0 ]\r\n\t\t\t: object.material;\r\n\r\n\t};\r\n\r\n};\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n *\r\n */\r\n\r\nTHREE.ShaderFlares = {\r\n\r\n\t'lensFlareVertexTexture': {\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\"uniform float rotation;\",\r\n\r\n\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\r\n\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vUV = uv;\",\r\n\r\n\t\t\t\t\"vec2 pos = position;\",\r\n\r\n\t\t\t\t\"if( renderType == 2 ) {\",\r\n\r\n\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\r\n\r\n\t\t\t\t\t\"vVisibility = (       visibility.r / 9.0 ) *\",\r\n\t\t\t\t\t\t\t\t  \"( 1.0 - visibility.g / 9.0 ) *\",\r\n\t\t\t\t\t\t\t\t  \"(       visibility.b / 9.0 ) *\",\r\n\t\t\t\t\t\t\t\t  \"( 1.0 - visibility.a / 9.0 );\",\r\n\r\n\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\t\t\t\"uniform vec3 color;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t// pink square\r\n\r\n\t\t\t\t\"if( renderType == 0 ) {\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\r\n\r\n\t\t\t\t// restore\r\n\r\n\t\t\t\t\"} else if( renderType == 1 ) {\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t// flare\r\n\r\n\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\r\n\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\"\r\n\t\t].join( \"\\n\" )\r\n\r\n\t},\r\n\r\n\r\n\t'lensFlare': {\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\"uniform float rotation;\",\r\n\r\n\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vUV = uv;\",\r\n\r\n\t\t\t\t\"vec2 pos = position;\",\r\n\r\n\t\t\t\t\"if( renderType == 2 ) {\",\r\n\r\n\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"precision mediump float;\",\r\n\r\n\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\t\t\t\"uniform vec3 color;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t// pink square\r\n\r\n\t\t\t\t\"if( renderType == 0 ) {\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\",\r\n\r\n\t\t\t\t// restore\r\n\r\n\t\t\t\t\"} else if( renderType == 1 ) {\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t// flare\r\n\r\n\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\",\r\n\t\t\t\t\t\t\t\t\t   \"texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\",\r\n\t\t\t\t\t\t\t\t\t   \"texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\",\r\n\t\t\t\t\t\t\t\t\t   \"texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\",\r\n\r\n\t\t\t\t\t\"visibility = ( 1.0 - visibility / 4.0 );\",\r\n\r\n\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\"texture.a *= opacity * visibility;\",\r\n\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n */\r\n\r\nTHREE.ShaderSprite = {\r\n\r\n\t'sprite': {\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform int useScreenCoordinates;\",\r\n\t\t\t\"uniform int sizeAttenuation;\",\r\n\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\"uniform mat4 modelViewMatrix;\",\r\n\t\t\t\"uniform mat4 projectionMatrix;\",\r\n\t\t\t\"uniform float rotation;\",\r\n\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\"uniform vec2 alignment;\",\r\n\t\t\t\"uniform vec2 uvOffset;\",\r\n\t\t\t\"uniform vec2 uvScale;\",\r\n\r\n\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vUV = uvOffset + uv * uvScale;\",\r\n\r\n\t\t\t\t\"vec2 alignedPosition = position + alignment;\",\r\n\r\n\t\t\t\t\"vec2 rotatedPosition;\",\r\n\t\t\t\t\"rotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\",\r\n\t\t\t\t\"rotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\",\r\n\r\n\t\t\t\t\"vec4 finalPosition;\",\r\n\r\n\t\t\t\t\"if( useScreenCoordinates != 0 ) {\",\r\n\r\n\t\t\t\t\t\"finalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\"finalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\",\r\n\t\t\t\t\t\"finalPosition.xy += rotatedPosition * ( sizeAttenuation == 1 ? 1.0 : finalPosition.z );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"gl_Position = finalPosition;\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 color;\",\r\n\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"uniform int fogType;\",\r\n\t\t\t\"uniform vec3 fogColor;\",\r\n\t\t\t\"uniform float fogDensity;\",\r\n\t\t\t\"uniform float fogNear;\",\r\n\t\t\t\"uniform float fogFar;\",\r\n\t\t\t\"uniform float alphaTest;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t\"if ( texture.a < alphaTest ) discard;\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\",\r\n\r\n\t\t\t\t\"if ( fogType > 0 ) {\",\r\n\r\n\t\t\t\t\t\"float depth = gl_FragCoord.z / gl_FragCoord.w;\",\r\n\t\t\t\t\t\"float fogFactor = 0.0;\",\r\n\r\n\t\t\t\t\t\"if ( fogType == 1 ) {\",\r\n\r\n\t\t\t\t\t\t\"fogFactor = smoothstep( fogNear, fogFar, depth );\",\r\n\r\n\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\"const float LOG2 = 1.442695;\",\r\n\t\t\t\t\t\t\"float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\",\r\n\t\t\t\t\t\t\"fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Export the THREE object for **Node.js**, with\r\n// backwards-compatibility for the old `require()` API. If we're in\r\n// the browser, add `_` as a global object via a string identifier,\r\n// for Closure Compiler \"advanced\" mode.\r\nif (typeof exports !== 'undefined') {\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    exports = module.exports = THREE;\r\n  }\r\n  exports.THREE = THREE;\r\n} else {\r\n  this['THREE'] = THREE;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/three55/three.js\n// module id = CMVF\n// module chunks = 1","/* eslint-disable */\nlet SEPARATION = 100,\n    AMOUNTX = 50,\n    AMOUNTY = 50\nlet container   //渲染容器，一般是自己设定的具有特定id或class的html元素\nlet camera, scene, renderer   //相机，场景，渲染 三要素一般不可缺少\nlet particles,\n    particle,\n    count = 0\nlet mouseX = 50,  //用于鼠标指针跟随的变量，影响渲染对象的观察视角，这里保留用于调整视角\n    mouseY = -200\n// var windowHalfX = window.innerWidth / 2;\n// var windowHalfY = window.innerHeight / 2;\n\nimport * as THREE from 'three55'   //npm install three 后，将three引用进js（注意版本，three.js版本跨度大，很多方法可能不兼容，需要留意，后续会提到）\n\nfunction initWave(id) {\n    //初始化相机，用于观察场景，可设置视角的远近，长宽比，方向等\n    camera = new THREE.PerspectiveCamera(\n        100,\n        window.innerWidth / window.innerHeight,\n        20,\n        2000\n    )\n    camera.position.z = 500\n    //初始化场景，后续会在此场景中添加元素\n    scene = new THREE.Scene()\n\n    //设置材质，注意这里只是属性，不属于实体元素\n    let PI2 = Math.PI * 2\n    particles = new Array()\n    let material = new THREE.ParticleCanvasMaterial({\n        color: 0x75767F,\n        program: function (context) {\n            context.beginPath()\n            context.arc(0, 0, 1, 0, PI2, true)\n            context.fill()\n        }\n    })\n    let i = 0\n    for (let ix = 0; ix < AMOUNTX; ix++) {\n        for (let iy = 0; iy < AMOUNTY; iy++) {\n            //初始化实体元素，并添加材质属性。这里的材质是颗粒\n            particle = particles[i++] = new THREE.Particle(material)\n            particle.position.x = ix * SEPARATION - (AMOUNTX * SEPARATION) / 2\n            particle.position.z = iy * SEPARATION - (AMOUNTY * SEPARATION) / 2\n            //将实体元素放入到场景\n            scene.add(particle)\n        }\n    }\n\n    //初始化渲染器，这部分是操作GPU的，可根据不同用途来决定用什么渲染器。具体，参考官方文档\n    renderer = new THREE.CanvasRenderer()\n    renderer.setSize(window.innerWidth, window.innerHeight)\n\n    //获取并将渲染器绑定到容器\n    container = document.getElementById(id)\n    container.appendChild(renderer.domElement)\n\n    //以上只是初始化作用，实际并没有实现动态的逻辑\n    // document.addEventListener( 'mousemove', onDocumentMouseMove, false );\n    // document.addEventListener( 'touchstart', onDocumentTouchStart, false );\n    // document.addEventListener( 'touchmove', onDocumentTouchMove, false );\n    // window.addEventListener( 'resize', onWindowResize, false );\n\n}\n\nfunction onWindowResize() {\n    // windowHalfX = window.innerWidth / 2;// windowHalfY = window.innerHeight / 2;\n    camera.aspect = window.innerWidth / window.innerHeight\n    camera.updateProjectionMatrix()\n    renderer.setSize(window.innerWidth, window.innerHeight)\n}\n\n/* 用于鼠标指针跟随，此项目禁用\nfunction onDocumentMouseMove( event ) {\n    mouseX = event.clientX - windowHalfX;\n    mouseY = event.clientY - windowHalfY;\n\n}\n\nfunction onDocumentTouchStart( event ) {\n    if ( event.touches.length === 1 ) {\n        event.preventDefault();\n        mouseX = event.touches[ 0 ].pageX - windowHalfX;\n        mouseY = event.touches[ 0 ].pageY - windowHalfY;\n    }\n}\n\nfunction onDocumentTouchMove( event ) {\n    if ( event.touches.length === 1 ) {\n        event.preventDefault();\n        mouseX = event.touches[ 0 ].pageX - windowHalfX;\n        mouseY = event.touches[ 0 ].pageY - windowHalfY;\n    }\n}*/\n\n// 特定写法，直接抄就好了\nfunction animate() {\n    requestAnimationFrame(animate)\n    render()\n}\n// 动态的逻辑\nfunction render() {\n    camera.position.x += (mouseX - camera.position.x) * 0.05\n    camera.position.y += (-mouseY - camera.position.y) * 0.05\n    camera.lookAt(scene.position)\n    let i = 0\n    for (let ix = 0; ix < AMOUNTX; ix++) {\n        for (let iy = 0; iy < AMOUNTY; iy++) {\n            particle = particles[i++]\n            particle.position.y =\n                Math.sin((ix + count) * 0.3) * 50 + Math.sin((iy + count) * 0.5) * 50\n            particle.scale.x = particle.scale.y =\n                (Math.sin((ix + count) * 0.3) + 1) * 2 +\n                (Math.sin((iy + count) * 0.5) + 1) * 2\n        }\n    }\n    renderer.render(scene, camera)\n    count += 0.06\n}\n// 导出方法\nexport default {\n    initWave,\n    animate,\n    onWindowResize\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/assets/js/wave.js","/**\n * @license\n * Copyright 2010-2022 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nconst REVISION = '139';\nconst MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\nconst TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\nconst CullFaceNone = 0;\nconst CullFaceBack = 1;\nconst CullFaceFront = 2;\nconst CullFaceFrontBack = 3;\nconst BasicShadowMap = 0;\nconst PCFShadowMap = 1;\nconst PCFSoftShadowMap = 2;\nconst VSMShadowMap = 3;\nconst FrontSide = 0;\nconst BackSide = 1;\nconst DoubleSide = 2;\nconst FlatShading = 1;\nconst SmoothShading = 2;\nconst NoBlending = 0;\nconst NormalBlending = 1;\nconst AdditiveBlending = 2;\nconst SubtractiveBlending = 3;\nconst MultiplyBlending = 4;\nconst CustomBlending = 5;\nconst AddEquation = 100;\nconst SubtractEquation = 101;\nconst ReverseSubtractEquation = 102;\nconst MinEquation = 103;\nconst MaxEquation = 104;\nconst ZeroFactor = 200;\nconst OneFactor = 201;\nconst SrcColorFactor = 202;\nconst OneMinusSrcColorFactor = 203;\nconst SrcAlphaFactor = 204;\nconst OneMinusSrcAlphaFactor = 205;\nconst DstAlphaFactor = 206;\nconst OneMinusDstAlphaFactor = 207;\nconst DstColorFactor = 208;\nconst OneMinusDstColorFactor = 209;\nconst SrcAlphaSaturateFactor = 210;\nconst NeverDepth = 0;\nconst AlwaysDepth = 1;\nconst LessDepth = 2;\nconst LessEqualDepth = 3;\nconst EqualDepth = 4;\nconst GreaterEqualDepth = 5;\nconst GreaterDepth = 6;\nconst NotEqualDepth = 7;\nconst MultiplyOperation = 0;\nconst MixOperation = 1;\nconst AddOperation = 2;\nconst NoToneMapping = 0;\nconst LinearToneMapping = 1;\nconst ReinhardToneMapping = 2;\nconst CineonToneMapping = 3;\nconst ACESFilmicToneMapping = 4;\nconst CustomToneMapping = 5;\n\nconst UVMapping = 300;\nconst CubeReflectionMapping = 301;\nconst CubeRefractionMapping = 302;\nconst EquirectangularReflectionMapping = 303;\nconst EquirectangularRefractionMapping = 304;\nconst CubeUVReflectionMapping = 306;\nconst RepeatWrapping = 1000;\nconst ClampToEdgeWrapping = 1001;\nconst MirroredRepeatWrapping = 1002;\nconst NearestFilter = 1003;\nconst NearestMipmapNearestFilter = 1004;\nconst NearestMipMapNearestFilter = 1004;\nconst NearestMipmapLinearFilter = 1005;\nconst NearestMipMapLinearFilter = 1005;\nconst LinearFilter = 1006;\nconst LinearMipmapNearestFilter = 1007;\nconst LinearMipMapNearestFilter = 1007;\nconst LinearMipmapLinearFilter = 1008;\nconst LinearMipMapLinearFilter = 1008;\nconst UnsignedByteType = 1009;\nconst ByteType = 1010;\nconst ShortType = 1011;\nconst UnsignedShortType = 1012;\nconst IntType = 1013;\nconst UnsignedIntType = 1014;\nconst FloatType = 1015;\nconst HalfFloatType = 1016;\nconst UnsignedShort4444Type = 1017;\nconst UnsignedShort5551Type = 1018;\nconst UnsignedInt248Type = 1020;\nconst AlphaFormat = 1021;\nconst RGBFormat = 1022;\nconst RGBAFormat = 1023;\nconst LuminanceFormat = 1024;\nconst LuminanceAlphaFormat = 1025;\nconst DepthFormat = 1026;\nconst DepthStencilFormat = 1027;\nconst RedFormat = 1028;\nconst RedIntegerFormat = 1029;\nconst RGFormat = 1030;\nconst RGIntegerFormat = 1031;\nconst RGBAIntegerFormat = 1033;\n\nconst RGB_S3TC_DXT1_Format = 33776;\nconst RGBA_S3TC_DXT1_Format = 33777;\nconst RGBA_S3TC_DXT3_Format = 33778;\nconst RGBA_S3TC_DXT5_Format = 33779;\nconst RGB_PVRTC_4BPPV1_Format = 35840;\nconst RGB_PVRTC_2BPPV1_Format = 35841;\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\nconst RGB_ETC1_Format = 36196;\nconst RGB_ETC2_Format = 37492;\nconst RGBA_ETC2_EAC_Format = 37496;\nconst RGBA_ASTC_4x4_Format = 37808;\nconst RGBA_ASTC_5x4_Format = 37809;\nconst RGBA_ASTC_5x5_Format = 37810;\nconst RGBA_ASTC_6x5_Format = 37811;\nconst RGBA_ASTC_6x6_Format = 37812;\nconst RGBA_ASTC_8x5_Format = 37813;\nconst RGBA_ASTC_8x6_Format = 37814;\nconst RGBA_ASTC_8x8_Format = 37815;\nconst RGBA_ASTC_10x5_Format = 37816;\nconst RGBA_ASTC_10x6_Format = 37817;\nconst RGBA_ASTC_10x8_Format = 37818;\nconst RGBA_ASTC_10x10_Format = 37819;\nconst RGBA_ASTC_12x10_Format = 37820;\nconst RGBA_ASTC_12x12_Format = 37821;\nconst RGBA_BPTC_Format = 36492;\nconst LoopOnce = 2200;\nconst LoopRepeat = 2201;\nconst LoopPingPong = 2202;\nconst InterpolateDiscrete = 2300;\nconst InterpolateLinear = 2301;\nconst InterpolateSmooth = 2302;\nconst ZeroCurvatureEnding = 2400;\nconst ZeroSlopeEnding = 2401;\nconst WrapAroundEnding = 2402;\nconst NormalAnimationBlendMode = 2500;\nconst AdditiveAnimationBlendMode = 2501;\nconst TrianglesDrawMode = 0;\nconst TriangleStripDrawMode = 1;\nconst TriangleFanDrawMode = 2;\nconst LinearEncoding = 3000;\nconst sRGBEncoding = 3001;\nconst BasicDepthPacking = 3200;\nconst RGBADepthPacking = 3201;\nconst TangentSpaceNormalMap = 0;\nconst ObjectSpaceNormalMap = 1;\n\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\nconst NoColorSpace = '';\nconst SRGBColorSpace = 'srgb';\nconst LinearSRGBColorSpace = 'srgb-linear';\n\nconst ZeroStencilOp = 0;\nconst KeepStencilOp = 7680;\nconst ReplaceStencilOp = 7681;\nconst IncrementStencilOp = 7682;\nconst DecrementStencilOp = 7683;\nconst IncrementWrapStencilOp = 34055;\nconst DecrementWrapStencilOp = 34056;\nconst InvertStencilOp = 5386;\n\nconst NeverStencilFunc = 512;\nconst LessStencilFunc = 513;\nconst EqualStencilFunc = 514;\nconst LessEqualStencilFunc = 515;\nconst GreaterStencilFunc = 516;\nconst NotEqualStencilFunc = 517;\nconst GreaterEqualStencilFunc = 518;\nconst AlwaysStencilFunc = 519;\n\nconst StaticDrawUsage = 35044;\nconst DynamicDrawUsage = 35048;\nconst StreamDrawUsage = 35040;\nconst StaticReadUsage = 35045;\nconst DynamicReadUsage = 35049;\nconst StreamReadUsage = 35041;\nconst StaticCopyUsage = 35046;\nconst DynamicCopyUsage = 35050;\nconst StreamCopyUsage = 35042;\n\nconst GLSL1 = '100';\nconst GLSL3 = '300 es';\n\nconst _SRGBAFormat = 1035; // fallback for WebGL 1\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nclass EventDispatcher {\n\n\taddEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t}\n\n\thasEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tconst listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t}\n\n\tremoveEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tconst index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice( 0 );\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t\tevent.target = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst _lut = [];\n\nfor ( let i = 0; i < 256; i ++ ) {\n\n\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n}\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\nfunction generateUUID() {\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toLowerCase();\n\n}\n\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n// compute euclidean modulo of m % n\n// https://en.wikipedia.org/wiki/Modulo_operation\nfunction euclideanModulo( n, m ) {\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n// Linear mapping from range <a1, a2> to range <b1, b2>\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\nfunction inverseLerp( x, y, value ) {\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n// https://en.wikipedia.org/wiki/Linear_interpolation\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n// https://www.desmos.com/calculator/vcsjnyz7x4\nfunction pingpong( x, length = 1 ) {\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n// http://en.wikipedia.org/wiki/Smoothstep\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n// Random integer from <low, high> interval\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n// Random float from <low, high> interval\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n// Random float from <-range/2, range/2> interval\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s;\n\n\t// Mulberry32 generator\n\n\tlet t = _seed += 0x6D2B79F5;\n\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\n\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\n\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\n\n}\n\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t// rotations are applied to the axes in the order specified by 'order'\n\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t// angles are in radians\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\nfunction denormalize$1( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn value / 65535.0;\n\n\t\tcase Uint8Array:\n\n\t\t\treturn value / 255.0;\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.max( value / 32767.0, - 1.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.max( value / 127.0, - 1.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\nfunction normalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn Math.round( value * 65535.0 );\n\n\t\tcase Uint8Array:\n\n\t\t\treturn Math.round( value * 255.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.round( value * 32767.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.round( value * 127.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\nvar MathUtils = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tDEG2RAD: DEG2RAD,\n\tRAD2DEG: RAD2DEG,\n\tgenerateUUID: generateUUID,\n\tclamp: clamp,\n\teuclideanModulo: euclideanModulo,\n\tmapLinear: mapLinear,\n\tinverseLerp: inverseLerp,\n\tlerp: lerp,\n\tdamp: damp,\n\tpingpong: pingpong,\n\tsmoothstep: smoothstep,\n\tsmootherstep: smootherstep,\n\trandInt: randInt,\n\trandFloat: randFloat,\n\trandFloatSpread: randFloatSpread,\n\tseededRandom: seededRandom,\n\tdegToRad: degToRad,\n\tradToDeg: radToDeg,\n\tisPowerOfTwo: isPowerOfTwo,\n\tceilPowerOfTwo: ceilPowerOfTwo,\n\tfloorPowerOfTwo: floorPowerOfTwo,\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler,\n\tnormalize: normalize,\n\tdenormalize: denormalize$1\n});\n\nclass Vector2 {\n\n\tconstructor( x = 0, y = 0 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.x;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.y;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t}\n\n\tset( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tangle() {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t}\n\n\trotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\n\t}\n\n}\n\nVector2.prototype.isVector2 = true;\n\nclass Matrix3 {\n\n\tconstructor() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix4( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t}\n\n\tinvert() {\n\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\ttranspose() {\n\n\t\tlet tmp;\n\t\tconst m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tgetNormalMatrix( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\n\n\t}\n\n\ttransposeIntoArray( r ) {\n\n\t\tconst m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tconst c = Math.cos( rotation );\n\t\tconst s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tscale( sx, sy ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\treturn this;\n\n\t}\n\n\trotate( theta ) {\n\n\t\tconst c = Math.cos( theta );\n\t\tconst s = Math.sin( theta );\n\n\t\tconst te = this.elements;\n\n\t\tconst a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\tconst a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\tte[ 0 ] = c * a11 + s * a21;\n\t\tte[ 3 ] = c * a12 + s * a22;\n\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( tx, ty ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t}\n\n}\n\nMatrix3.prototype.isMatrix3 = true;\n\nfunction arrayNeedsUint32( array ) {\n\n\t// assumes larger values usually on last\n\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\n\n\t\tif ( array[ i ] > 65535 ) return true;\n\n\t}\n\n\treturn false;\n\n}\n\nconst TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\tUint8ClampedArray: Uint8ClampedArray,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\nfunction getTypedArray( type, buffer ) {\n\n\treturn new TYPED_ARRAYS[ type ]( buffer );\n\n}\n\nfunction createElementNS( name ) {\n\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\n\n}\n\nfunction SRGBToLinear( c ) {\n\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n}\n\nfunction LinearToSRGB( c ) {\n\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n}\n\n// JavaScript RGB-to-RGB transforms, defined as\n// FN[InputColorSpace][OutputColorSpace] callback functions.\nconst FN = {\n\t[ SRGBColorSpace ]: { [ LinearSRGBColorSpace ]: SRGBToLinear },\n\t[ LinearSRGBColorSpace ]: { [ SRGBColorSpace ]: LinearToSRGB },\n};\n\nconst ColorManagement = {\n\n\tlegacyMode: true,\n\n\tget workingColorSpace() {\n\n\t\treturn LinearSRGBColorSpace;\n\n\t},\n\n\tset workingColorSpace( colorSpace ) {\n\n\t\tconsole.warn( 'THREE.ColorManagement: .workingColorSpace is readonly.' );\n\n\t},\n\n\tconvert: function ( color, sourceColorSpace, targetColorSpace ) {\n\n\t\tif ( this.legacyMode || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {\n\n\t\t\treturn color;\n\n\t\t}\n\n\t\tif ( FN[ sourceColorSpace ] && FN[ sourceColorSpace ][ targetColorSpace ] !== undefined ) {\n\n\t\t\tconst fn = FN[ sourceColorSpace ][ targetColorSpace ];\n\n\t\t\tcolor.r = fn( color.r );\n\t\t\tcolor.g = fn( color.g );\n\t\t\tcolor.b = fn( color.b );\n\n\t\t\treturn color;\n\n\t\t}\n\n\t\tthrow new Error( 'Unsupported color space conversion.' );\n\n\t},\n\n\tfromWorkingColorSpace: function ( color, targetColorSpace ) {\n\n\t\treturn this.convert( color, this.workingColorSpace, targetColorSpace );\n\n\t},\n\n\ttoWorkingColorSpace: function ( color, sourceColorSpace ) {\n\n\t\treturn this.convert( color, sourceColorSpace, this.workingColorSpace );\n\n\t},\n\n};\n\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nconst _rgb = { r: 0, g: 0, b: 0 };\nconst _hslA = { h: 0, s: 0, l: 0 };\nconst _hslB = { h: 0, s: 0, l: 0 };\n\nfunction hue2rgb( p, q, t ) {\n\n\tif ( t < 0 ) t += 1;\n\tif ( t > 1 ) t -= 1;\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\tif ( t < 1 / 2 ) return q;\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\treturn p;\n\n}\n\nfunction toComponents( source, target ) {\n\n\ttarget.r = source.r;\n\ttarget.g = source.g;\n\ttarget.b = source.b;\n\n\treturn target;\n\n}\n\nclass Color {\n\n\tconstructor( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tset( value ) {\n\n\t\tif ( value && value.isColor ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetHex( hex, colorSpace = SRGBColorSpace ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetRGB( r, g, b, colorSpace = LinearSRGBColorSpace ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetHSL( h, s, l, colorSpace = LinearSRGBColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = euclideanModulo( h, 1 );\n\t\ts = clamp( s, 0, 1 );\n\t\tl = clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tconst q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetStyle( style, colorSpace = SRGBColorSpace ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tlet m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tlet color;\n\t\t\tconst name = m[ 1 ];\n\t\t\tconst components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tconst h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tconst s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tconst l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l, colorSpace );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tconst hex = m[ 1 ];\n\t\t\tconst size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\treturn this.setColorName( style, colorSpace );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetColorName( style, colorSpace = SRGBColorSpace ) {\n\n\t\t// color keywords\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\n\n\t\tif ( hex !== undefined ) {\n\n\t\t\t// red\n\t\t\tthis.setHex( hex, colorSpace );\n\n\t\t} else {\n\n\t\t\t// unknown color\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t}\n\n\tcopy( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t}\n\n\tcopySRGBToLinear( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tcopyLinearToSRGB( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tconvertSRGBToLinear() {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t}\n\n\tconvertLinearToSRGB() {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t}\n\n\tgetHex( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );\n\n\t\treturn clamp( _rgb.r * 255, 0, 255 ) << 16 ^ clamp( _rgb.g * 255, 0, 255 ) << 8 ^ clamp( _rgb.b * 255, 0, 255 ) << 0;\n\n\t}\n\n\tgetHexString( colorSpace = SRGBColorSpace ) {\n\n\t\treturn ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );\n\n\t}\n\n\tgetHSL( target, colorSpace = LinearSRGBColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );\n\n\t\tconst r = _rgb.r, g = _rgb.g, b = _rgb.b;\n\n\t\tconst max = Math.max( r, g, b );\n\t\tconst min = Math.min( r, g, b );\n\n\t\tlet hue, saturation;\n\t\tconst lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tconst delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t}\n\n\tgetRGB( target, colorSpace = LinearSRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );\n\n\t\ttarget.r = _rgb.r;\n\t\ttarget.g = _rgb.g;\n\t\ttarget.b = _rgb.b;\n\n\t\treturn target;\n\n\t}\n\n\tgetStyle( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );\n\n\t\tif ( colorSpace !== SRGBColorSpace ) {\n\n\t\t\t// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\n\t\t\treturn `color(${ colorSpace } ${ _rgb.r } ${ _rgb.g } ${ _rgb.b })`;\n\n\t\t}\n\n\t\treturn `rgb(${( _rgb.r * 255 ) | 0},${( _rgb.g * 255 ) | 0},${( _rgb.b * 255 ) | 0})`;\n\n\t}\n\n\toffsetHSL( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\treturn this;\n\n\t}\n\n\tadd( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t}\n\n\taddColors( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t}\n\n\tlerp( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpColors( color1, color2, alpha ) {\n\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpHSL( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t}\n\n\tequals( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.r = attribute.getX( index );\n\t\tthis.g = attribute.getY( index );\n\t\tthis.b = attribute.getZ( index );\n\n\t\tif ( attribute.normalized === true ) {\n\n\t\t\t// assuming Uint8Array\n\n\t\t\tthis.r /= 255;\n\t\t\tthis.g /= 255;\n\t\t\tthis.b /= 255;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.getHex();\n\n\t}\n\n}\n\nColor.NAMES = _colorKeywords;\n\nColor.prototype.isColor = true;\nColor.prototype.r = 1;\nColor.prototype.g = 1;\nColor.prototype.b = 1;\n\nlet _canvas;\n\nclass ImageUtils {\n\n\tstatic getDataURL( image ) {\n\n\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tlet canvas;\n\n\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\tcanvas = image;\n\n\t\t} else {\n\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\n\n\t\t\t_canvas.width = image.width;\n\t\t\t_canvas.height = image.height;\n\n\t\t\tconst context = _canvas.getContext( '2d' );\n\n\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tcanvas = _canvas;\n\n\t\t}\n\n\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );\n\n\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t} else {\n\n\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t}\n\n\t}\n\n\tstatic sRGBToLinear( image ) {\n\n\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\tconst canvas = createElementNS( 'canvas' );\n\n\t\t\tcanvas.width = image.width;\n\t\t\tcanvas.height = image.height;\n\n\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\tconst imageData = context.getImageData( 0, 0, image.width, image.height );\n\t\t\tconst data = imageData.data;\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;\n\n\t\t\t}\n\n\t\t\tcontext.putImageData( imageData, 0, 0 );\n\n\t\t\treturn canvas;\n\n\t\t} else if ( image.data ) {\n\n\t\t\tconst data = image.data.slice( 0 );\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tif ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {\n\n\t\t\t\t\tdata[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assuming float\n\n\t\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdata: data,\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );\n\t\t\treturn image;\n\n\t\t}\n\n\t}\n\n}\n\nclass Source {\n\n\tconstructor( data = null ) {\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.data = data;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.images[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\t\t\tuuid: this.uuid,\n\t\t\turl: ''\n\t\t};\n\n\t\tconst data = this.data;\n\n\t\tif ( data !== null ) {\n\n\t\t\tlet url;\n\n\t\t\tif ( Array.isArray( data ) ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\turl = [];\n\n\t\t\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( data[ i ].isDataTexture ) {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ].image ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// texture\n\n\t\t\t\turl = serializeImage( data );\n\n\t\t\t}\n\n\t\t\toutput.url = url;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.images[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nfunction serializeImage( image ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t// default images\n\n\t\treturn ImageUtils.getDataURL( image );\n\n\t} else {\n\n\t\tif ( image.data ) {\n\n\t\t\t// images of DataTexture\n\n\t\t\treturn {\n\t\t\t\tdata: Array.prototype.slice.call( image.data ),\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\ttype: image.data.constructor.name\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\n\t\t\treturn {};\n\n\t\t}\n\n\t}\n\n}\n\nSource.prototype.isSource = true;\n\nlet textureId = 0;\n\nclass Texture extends EventDispatcher {\n\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding ) {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.source = new Source( image );\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping;\n\n\t\tthis.wrapS = wrapS;\n\t\tthis.wrapT = wrapT;\n\n\t\tthis.magFilter = magFilter;\n\t\tthis.minFilter = minFilter;\n\n\t\tthis.anisotropy = anisotropy;\n\n\t\tthis.format = format;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t\tthis.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not\n\t\tthis.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)\n\n\t}\n\n\tget image() {\n\n\t\treturn this.source.data;\n\n\t}\n\n\tset image( value ) {\n\n\t\tthis.source.data = value;\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.source = source.source;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.internalFormat = source.internalFormat;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tthis.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\timage: this.source.toJSON( meta ).uuid,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\ttype: this.type,\n\t\t\tencoding: this.encoding,\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY,\n\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t};\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) output.userData = this.userData;\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\ttransformUv( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return uv;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t\treturn uv;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.version ++;\n\t\t\tthis.source.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\nTexture.DEFAULT_IMAGE = null;\nTexture.DEFAULT_MAPPING = UVMapping;\n\nTexture.prototype.isTexture = true;\n\nclass Vector4 {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.z;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.z = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.w;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.w = value;\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\t\tthis.w *= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tsetAxisAngleFromQuaternion( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetAxisAngleFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tlet angle, x, y, z; // variables for result\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tconst xx = ( m11 + 1 ) / 2;\n\t\t\tconst yy = ( m22 + 1 ) / 2;\n\t\t\tconst zz = ( m33 + 1 ) / 2;\n\t\t\tconst xy = ( m12 + m21 ) / 4;\n\t\t\tconst xz = ( m13 + m31 ) / 4;\n\t\t\tconst yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\t\tyield this.w;\n\n\t}\n\n}\n\nVector4.prototype.isVector4 = true;\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nclass WebGLRenderTarget extends EventDispatcher {\n\n\tconstructor( width, height, options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.depth = 1;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\tconst image = { width: width, height: height, depth: 1 };\n\n\t\tthis.texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.flipY = false;\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t\tthis.samples = options.samples !== undefined ? options.samples : 0;\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\t\t\tthis.texture.image.depth = depth;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\t// ensure image object is not shared, see #20328\n\n\t\tthis.texture.image = Object.assign( {}, source.texture.image );\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\n\n\t\tthis.samples = source.samples;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nWebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\nclass DataArrayTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( null );\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nDataArrayTexture.prototype.isDataArrayTexture = true;\n\nclass WebGLArrayRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width, height, depth ) {\n\n\t\tsuper( width, height );\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new DataArrayTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\nWebGLArrayRenderTarget.prototype.isWebGLArrayRenderTarget = true;\n\nclass Data3DTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tsuper( null );\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nData3DTexture.prototype.isData3DTexture = true;\n\nclass WebGL3DRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width, height, depth ) {\n\n\t\tsuper( width, height );\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new Data3DTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\nWebGL3DRenderTarget.prototype.isWebGL3DRenderTarget = true;\n\nclass WebGLMultipleRenderTargets extends WebGLRenderTarget {\n\n\tconstructor( width, height, count, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tconst texture = this.texture;\n\n\t\tthis.texture = [];\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.texture[ i ] = texture.clone();\n\t\t\tthis.texture[ i ].isRenderTargetTexture = true;\n\n\t\t}\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tfor ( let i = 0, il = this.texture.length; i < il; i ++ ) {\n\n\t\t\t\tthis.texture[ i ].image.width = width;\n\t\t\t\tthis.texture[ i ].image.height = height;\n\t\t\t\tthis.texture[ i ].image.depth = depth;\n\n\t\t\t}\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.dispose();\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.viewport.set( 0, 0, this.width, this.height );\n\t\tthis.scissor.set( 0, 0, this.width, this.height );\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\tthis.texture.length = 0;\n\n\t\tfor ( let i = 0, il = source.texture.length; i < il; i ++ ) {\n\n\t\t\tthis.texture[ i ] = source.texture[ i ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nWebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;\n\nclass Quaternion {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tstatic slerp( qa, qb, qm, t ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.' );\n\t\treturn qm.slerpQuaternions( qa, qb, t );\n\n\t}\n\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromEuler( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t}\n\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\tinvert() {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t}\n\n\tconjugate() {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\treturn this.copy( qa ).slerp( qb, t );\n\n\t}\n\n\trandom() {\n\n\t\t// Derived from http://planning.cs.uiuc.edu/node198.html\n\t\t// Note, this source uses w, x, y, z ordering,\n\t\t// so we swap the order below.\n\n\t\tconst u1 = Math.random();\n\t\tconst sqrt1u1 = Math.sqrt( 1 - u1 );\n\t\tconst sqrtu1 = Math.sqrt( u1 );\n\n\t\tconst u2 = 2 * Math.PI * Math.random();\n\n\t\tconst u3 = 2 * Math.PI * Math.random();\n\n\t\treturn this.set(\n\t\t\tsqrt1u1 * Math.cos( u2 ),\n\t\t\tsqrtu1 * Math.sin( u3 ),\n\t\t\tsqrtu1 * Math.cos( u3 ),\n\t\t\tsqrt1u1 * Math.sin( u2 ),\n\t\t);\n\n\t}\n\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n}\n\nQuaternion.prototype.isQuaternion = true;\n\nclass Vector3 {\n\n\tconstructor( x = 0, y = 0, z = 0 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t}\n\n\tset( x, y, z ) {\n\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyVectors( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyEuler( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );\n\n\t}\n\n\tapplyAxisAngle( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tconst ix = qw * x + qy * z - qz * y;\n\t\tconst iy = qw * y + qz * x - qx * z;\n\t\tconst iz = qw * z + qx * y - qy * x;\n\t\tconst iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t}\n\n\tproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t}\n\n\tunproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t}\n\n\t// TODO lengthSquared?\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tcross( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\treturn this.crossVectors( this, v );\n\n\t}\n\n\tcrossVectors( a, b ) {\n\n\t\tconst ax = a.x, ay = a.y, az = a.z;\n\t\tconst bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t}\n\n\tprojectOnVector( v ) {\n\n\t\tconst denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\n\n\t\tconst scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t}\n\n\tprojectOnPlane( planeNormal ) {\n\n\t\t_vector$c.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector$c );\n\n\t}\n\n\treflect( normal ) {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\treturn this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t}\n\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t}\n\n\tsetFromSpherical( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t}\n\n\tsetFromSphericalCoords( radius, phi, theta ) {\n\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCylindrical( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t}\n\n\tsetFromCylindricalCoords( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixScale( m ) {\n\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixColumn( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t}\n\n\tsetFromMatrix3Column( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t}\n\n\tsetFromEuler( e ) {\n\n\t\tthis.x = e._x;\n\t\tthis.y = e._y;\n\t\tthis.z = e._z;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\trandomDirection() {\n\n\t\t// Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n\n\t\tconst u = ( Math.random() - 0.5 ) * 2;\n\t\tconst t = Math.random() * Math.PI * 2;\n\t\tconst f = Math.sqrt( 1 - u ** 2 );\n\n\t\tthis.x = f * Math.cos( t );\n\t\tthis.y = f * Math.sin( t );\n\t\tthis.z = u;\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\n\t}\n\n}\n\nVector3.prototype.isVector3 = true;\n\nconst _vector$c = /*@__PURE__*/ new Vector3();\nconst _quaternion$4 = /*@__PURE__*/ new Quaternion();\n\nclass Box3 {\n\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst x = array[ i ];\n\t\t\tconst y = array[ i + 1 ];\n\t\t\tconst z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tconst x = attribute.getX( i );\n\t\t\tconst y = attribute.getY( i );\n\t\t\tconst z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object, precise = false ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object, precise );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object, precise = false ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tif ( precise && geometry.attributes != undefined && geometry.attributes.position !== undefined ) {\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tfor ( let i = 0, l = position.count; i < l; i ++ ) {\n\n\t\t\t\t\t_vector$b.fromBufferAttribute( position, i ).applyMatrix4( object.matrixWorld );\n\t\t\t\t\tthis.expandByPoint( _vector$b );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box$3.copy( geometry.boundingBox );\n\t\t\t\t_box$3.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box$3 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ], precise );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector$b );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0$2.subVectors( triangle.a, _center );\n\t\t_v1$7.subVectors( triangle.b, _center );\n\t\t_v2$3.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1$7, _v0$2 );\n\t\t_f1.subVectors( _v2$3, _v1$7 );\n\t\t_f2.subVectors( _v0$2, _v2$3 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector$b.copy( point ).clamp( this.min, this.max );\n\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tthis.getCenter( target.center );\n\n\t\ttarget.radius = this.getSize( _vector$b ).length() * 0.5;\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nBox3.prototype.isBox3 = true;\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector$b = /*@__PURE__*/ new Vector3();\n\nconst _box$3 = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0$2 = /*@__PURE__*/ new Vector3();\nconst _v1$7 = /*@__PURE__*/ new Vector3();\nconst _v2$3 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the separating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the separating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is separating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nconst _box$2 = /*@__PURE__*/ new Box3();\nconst _v1$6 = /*@__PURE__*/ new Vector3();\nconst _toFarthestPoint = /*@__PURE__*/ new Vector3();\nconst _toPoint = /*@__PURE__*/ new Vector3();\n\nclass Sphere {\n\n\tconstructor( center = new Vector3(), radius = - 1 ) {\n\n\t\tthis.center = center;\n\t\tthis.radius = radius;\n\n\t}\n\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box$2.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = - 1;\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\n\t\t_toPoint.subVectors( point, this.center );\n\n\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\t\t\tconst missingRadiusHalf = ( length - this.radius ) * 0.5;\n\n\t\t\t// Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\tthis.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );\n\t\t\tthis.radius += missingRadiusHalf;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tunion( sphere ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\n\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\n\t\t if ( this.center.equals( sphere.center ) === true ) {\n\n\t\t\t _toFarthestPoint.set( 0, 0, 1 ).multiplyScalar( sphere.radius );\n\n\n\t\t} else {\n\n\t\t\t_toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );\n\n\t\t}\n\n\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).add( _toFarthestPoint ) );\n\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).sub( _toFarthestPoint ) );\n\n\t\treturn this;\n\n\t}\n\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$a = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal$1 = /*@__PURE__*/ new Vector3();\n\nclass Ray {\n\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\n\n\t\tthis.origin = origin;\n\t\tthis.direction = direction;\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t}\n\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector$a ) );\n\n\t\treturn this;\n\n\t}\n\n\tclosestPointToPoint( point, target ) {\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector$a.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\treturn _vector$a.distanceToSquared( point );\n\n\t}\n\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector$a.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector$a.dot( this.direction );\n\t\tconst d2 = _vector$a.dot( _vector$a ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector$a ) !== null;\n\n\t}\n\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal$1.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal$1 );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = - 1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal$1 );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass Matrix4 {\n\n\tconstructor() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\tcopyPosition( m ) {\n\n\t\tconst te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix3( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmakeBasis( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractRotation( m ) {\n\n\t\t// this method does not support reflection matrices\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();\n\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();\n\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromEuler( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tconst te = this.elements;\n\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromQuaternion( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t}\n\n\tlookAt( eye, target, up ) {\n\n\t\tconst te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t}\n\n\ttranspose() {\n\n\t\tconst te = this.elements;\n\t\tlet tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tsetPosition( x, y, z ) {\n\n\t\tconst te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tinvert() {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\tscale( v ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxScaleOnAxis() {\n\n\t\tconst te = this.elements;\n\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t}\n\n\tmakeTranslation( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationX( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationY( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationZ( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationAxis( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tconst c = Math.cos( angle );\n\t\tconst s = Math.sin( angle );\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeScale( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\n\n\t\tthis.set(\n\n\t\t\t1, yx, zx, 0,\n\t\t\txy, 1, zy, 0,\n\t\t\txz, yz, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tdecompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tlet sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tconst sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tconst sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = this.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1$2.copy( this );\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1$2.elements[ 0 ] *= invSX;\n\t\t_m1$2.elements[ 1 ] *= invSX;\n\t\t_m1$2.elements[ 2 ] *= invSX;\n\n\t\t_m1$2.elements[ 4 ] *= invSY;\n\t\t_m1$2.elements[ 5 ] *= invSY;\n\t\t_m1$2.elements[ 6 ] *= invSY;\n\n\t\t_m1$2.elements[ 8 ] *= invSZ;\n\t\t_m1$2.elements[ 9 ] *= invSZ;\n\t\t_m1$2.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1$2 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tmakePerspective( left, right, top, bottom, near, far ) {\n\n\t\tif ( far === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t}\n\n\t\tconst te = this.elements;\n\t\tconst x = 2 * near / ( right - left );\n\t\tconst y = 2 * near / ( top - bottom );\n\n\t\tconst a = ( right + left ) / ( right - left );\n\t\tconst b = ( top + bottom ) / ( top - bottom );\n\t\tconst c = - ( far + near ) / ( far - near );\n\t\tconst d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t}\n\n\tmakeOrthographic( left, right, top, bottom, near, far ) {\n\n\t\tconst te = this.elements;\n\t\tconst w = 1.0 / ( right - left );\n\t\tconst h = 1.0 / ( top - bottom );\n\t\tconst p = 1.0 / ( far - near );\n\n\t\tconst x = ( right + left ) * w;\n\t\tconst y = ( top + bottom ) * h;\n\t\tconst z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n}\n\nMatrix4.prototype.isMatrix4 = true;\n\nconst _v1$5 = /*@__PURE__*/ new Vector3();\nconst _m1$2 = /*@__PURE__*/ new Matrix4();\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\nconst _x = /*@__PURE__*/ new Vector3();\nconst _y = /*@__PURE__*/ new Vector3();\nconst _z = /*@__PURE__*/ new Vector3();\n\nconst _matrix$1 = /*@__PURE__*/ new Matrix4();\nconst _quaternion$3 = /*@__PURE__*/ new Quaternion();\n\nclass Euler {\n\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DefaultOrder ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget order() {\n\n\t\treturn this._order;\n\n\t}\n\n\tset order( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, order = this._order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t}\n\n\tcopy( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements;\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromQuaternion( q, order, update ) {\n\n\t\t_matrix$1.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix$1, order, update );\n\n\t}\n\n\tsetFromVector3( v, order = this._order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order );\n\n\t}\n\n\treorder( newOrder ) {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t_quaternion$3.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion$3, newOrder );\n\n\t}\n\n\tequals( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t}\n\n\tfromArray( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n}\n\nEuler.prototype.isEuler = true;\n\nEuler.DefaultOrder = 'XYZ';\nEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nclass Layers {\n\n\tconstructor() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tset( channel ) {\n\n\t\tthis.mask = ( 1 << channel | 0 ) >>> 0;\n\n\t}\n\n\tenable( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t}\n\n\tenableAll() {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t}\n\n\ttoggle( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t}\n\n\tdisable( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t}\n\n\tdisableAll() {\n\n\t\tthis.mask = 0;\n\n\t}\n\n\ttest( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n\tisEnabled( channel ) {\n\n\t\treturn ( this.mask & ( 1 << channel | 0 ) ) !== 0;\n\n\t}\n\n}\n\nlet _object3DId = 0;\n\nconst _v1$4 = /*@__PURE__*/ new Vector3();\nconst _q1 = /*@__PURE__*/ new Quaternion();\nconst _m1$1 = /*@__PURE__*/ new Matrix4();\nconst _target = /*@__PURE__*/ new Vector3();\n\nconst _position$3 = /*@__PURE__*/ new Vector3();\nconst _scale$2 = /*@__PURE__*/ new Vector3();\nconst _quaternion$2 = /*@__PURE__*/ new Quaternion();\n\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n\nconst _addedEvent = { type: 'added' };\nconst _removedEvent = { type: 'removed' };\n\nclass Object3D extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.animations = [];\n\n\t\tthis.userData = {};\n\n\t}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t}\n\n\tsetRotationFromAxisAngle( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t}\n\n\tsetRotationFromEuler( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t}\n\n\tsetRotationFromMatrix( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t}\n\n\tsetRotationFromQuaternion( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t}\n\n\trotateOnAxis( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateOnWorldAxis( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t}\n\n\trotateY( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t}\n\n\ttranslateOnAxis( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1$4.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1$4.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t}\n\n\ttranslateX( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t}\n\n\ttranslateY( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t}\n\n\ttranslateZ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t}\n\n\tlocalToWorld( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t}\n\n\tworldToLocal( vector ) {\n\n\t\treturn vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );\n\n\t}\n\n\tlookAt( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tconst parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position$3.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1$1.lookAt( _position$3, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1$1.lookAt( _target, _position$3, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\n\n\t\t}\n\n\t}\n\n\tadd( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object && object.isObject3D ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremoveFromParent() {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tparent.remove( this );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclear() {\n\n\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\tconst object = this.children[ i ];\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\tthis.children.length = 0;\n\n\t\treturn this;\n\n\n\t}\n\n\tattach( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1$1.copy( this.matrixWorld ).invert();\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix4( _m1$1 );\n\n\t\tthis.add( object );\n\n\t\tobject.updateWorldMatrix( false, true );\n\n\t\treturn this;\n\n\t}\n\n\tgetObjectById( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t}\n\n\tgetObjectByName( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t}\n\n\tgetObjectByProperty( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = this.children[ i ];\n\t\t\tconst object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tgetWorldPosition( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t}\n\n\tgetWorldQuaternion( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, target, _scale$2 );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldScale( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, _quaternion$2, target );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t}\n\n\traycast( /* raycaster, intersects */ ) {}\n\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseVisible( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseAncestors( callback ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.parent === null ) {\n\n\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t} else {\n\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t}\n\n\t\t// update children\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {},\n\t\t\t\tskeletons: {},\n\t\t\t\tanimations: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tconst object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isInstancedMesh ) {\n\n\t\t\tobject.type = 'InstancedMesh';\n\t\t\tobject.count = this.count;\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n\n\t\t}\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isScene ) {\n\n\t\t\tif ( this.background ) {\n\n\t\t\t\tif ( this.background.isColor ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON();\n\n\t\t\t\t} else if ( this.background.isTexture ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.environment && this.environment.isTexture ) {\n\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tobject.bindMode = this.bindMode;\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\tif ( this.skeleton !== undefined ) {\n\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\n\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tconst uuids = [];\n\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.animations.length > 0 ) {\n\n\t\t\tobject.animations = [];\n\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\t\tconst animation = this.animations[ i ];\n\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst geometries = extractFromCache( meta.geometries );\n\t\t\tconst materials = extractFromCache( meta.materials );\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst shapes = extractFromCache( meta.shapes );\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\n\t\t\tconst animations = extractFromCache( meta.animations );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t}\n\n\tclone( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t}\n\n\tcopy( source, recursive = true ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.rotation.order = source.rotation.order;\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tconst child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nObject3D.DefaultUp = new Vector3( 0, 1, 0 );\nObject3D.DefaultMatrixAutoUpdate = true;\n\nObject3D.prototype.isObject3D = true;\n\nconst _v0$1 = /*@__PURE__*/ new Vector3();\nconst _v1$3 = /*@__PURE__*/ new Vector3();\nconst _v2$2 = /*@__PURE__*/ new Vector3();\nconst _v3$1 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nclass Triangle {\n\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t}\n\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0$1.subVectors( a, b );\n\t\ttarget.cross( _v0$1 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t_v0$1.subVectors( c, a );\n\t\t_v1$3.subVectors( b, a );\n\t\t_v2$2.subVectors( point, a );\n\n\t\tconst dot00 = _v0$1.dot( _v0$1 );\n\t\tconst dot01 = _v0$1.dot( _v1$3 );\n\t\tconst dot02 = _v0$1.dot( _v2$2 );\n\t\tconst dot11 = _v1$3.dot( _v1$3 );\n\t\tconst dot12 = _v1$3.dot( _v2$2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\tthis.getBarycoord( point, a, b, c, _v3$1 );\n\n\t\treturn ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );\n\n\t}\n\n\tstatic getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3$1 );\n\n\t\ttarget.set( 0, 0 );\n\t\ttarget.addScaledVector( uv1, _v3$1.x );\n\t\ttarget.addScaledVector( uv2, _v3$1.y );\n\t\ttarget.addScaledVector( uv3, _v3$1.z );\n\n\t\treturn target;\n\n\t}\n\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0$1.subVectors( c, b );\n\t\t_v1$3.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\tgetArea() {\n\n\t\t_v0$1.subVectors( this.c, this.b );\n\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t}\n\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\tgetUV( point, uv1, uv2, uv3, target ) {\n\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nlet materialId = 0;\n\nclass Material extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaToCoverage = false;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\tonBuild( /* shaderobject, renderer */ ) {}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// for backward compatibility if shading is set in the constructor\n\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRootObject ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\t\tdata.colorWrite = this.colorWrite;\n\n\t\tdata.stencilWrite = this.stencilWrite;\n\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\tdata.stencilFunc = this.stencilFunc;\n\t\tdata.stencilRef = this.stencilRef;\n\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\tdata.stencilFail = this.stencilFail;\n\t\tdata.stencilZFail = this.stencilZFail;\n\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.fog = source.fog;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nMaterial.prototype.isMaterial = true;\n\nMaterial.fromType = function ( /*type*/ ) {\n\n\t// TODO: Behavior added in Materials.js\n\n\treturn null;\n\n};\n\nclass MeshBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\nconst _vector$9 = /*@__PURE__*/ new Vector3();\nconst _vector2$1 = /*@__PURE__*/ new Vector2();\n\nclass BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyArray( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t}\n\n\tcopyColorsArray( colors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\tlet color = colors[ i ];\n\n\t\t\tif ( color === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\tcolor = new Color();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = color.r;\n\t\t\tarray[ offset ++ ] = color.g;\n\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyVector2sArray( vectors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tlet vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector2();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyVector3sArray( vectors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tlet vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector3();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyVector4sArray( vectors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tlet vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector4();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tif ( this.itemSize === 2 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t}\n\n\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$9.fromBufferAttribute( this, i );\n\t\t\t\t_vector$9.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\treturn this.array[ index * this.itemSize ];\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\titemSize: this.itemSize,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\tnormalized: this.normalized\n\t\t};\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\n\t\tif ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;\n\n\t\treturn data;\n\n\t}\n\n}\n\nBufferAttribute.prototype.isBufferAttribute = true;\n\n//\n\nclass Int8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\nclass Float32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float64BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nlet _id$1 = 0;\n\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _obj = /*@__PURE__*/ new Object3D();\nconst _offset = /*@__PURE__*/ new Vector3();\nconst _box$1 = /*@__PURE__*/ new Box3();\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\nconst _vector$8 = /*@__PURE__*/ new Vector3();\n\nclass BufferGeometry extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: _id$1 ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tgetIndex() {\n\n\t\treturn this.index;\n\n\t}\n\n\tsetIndex( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetAttribute( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t}\n\n\tsetAttribute( name, attribute ) {\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t}\n\n\tdeleteAttribute( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t}\n\n\thasAttribute( name ) {\n\n\t\treturn this.attributes[ name ] !== undefined;\n\n\t}\n\n\taddGroup( start, count, materialIndex = 0 ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex\n\n\t\t} );\n\n\t}\n\n\tclearGroups() {\n\n\t\tthis.groups = [];\n\n\t}\n\n\tsetDrawRange( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tconst normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tconst tangent = this.attributes.tangent;\n\n\t\tif ( tangent !== undefined ) {\n\n\t\t\ttangent.transformDirection( matrix );\n\n\t\t\ttangent.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\t_m1.makeRotationFromQuaternion( q );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1.makeRotationX( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateY( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1.makeRotationY( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1.makeRotationZ( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tscale( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1.makeScale( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tlookAt( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\treturn this;\n\n\t}\n\n\tcenter() {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tconst position = [];\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst point = points[ i ];\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\treturn this;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingBox.set(\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\n\t\t\t);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_box$1.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.min, _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.max, _box$1.max );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position ) {\n\n\t\t\t// first, find the center of the bounding sphere\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t_box$1.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$1.min, _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$1.max, _boxMorphTargets.max );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_box$1.getCenter( center );\n\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$8.fromBufferAttribute( position, i );\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t}\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t_vector$8.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t_vector$8.add( _offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeTangents() {\n\n\t\tconst index = this.index;\n\t\tconst attributes = this.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst indices = index.array;\n\t\tconst positions = attributes.position.array;\n\t\tconst normals = attributes.normal.array;\n\t\tconst uvs = attributes.uv.array;\n\n\t\tconst nVertices = positions.length / 3;\n\n\t\tif ( this.hasAttribute( 'tangent' ) === false ) {\n\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tconst tangents = this.getAttribute( 'tangent' ).array;\n\n\t\tconst tan1 = [], tan2 = [];\n\n\t\tfor ( let i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tconst vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tlet groups = this.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\n\t\tconst n = new Vector3(), n2 = new Vector3();\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tconst t = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\n\t\t\tconst w = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeVertexNormals() {\n\n\t\tconst index = this.index;\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\tconst vA = index.getX( i + 0 );\n\t\t\t\t\tconst vB = index.getX( i + 1 );\n\t\t\t\t\tconst vC = index.getX( i + 2 );\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\tnA.add( cb );\n\t\t\t\t\tnB.add( cb );\n\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tmerge( geometry, offset ) {\n\n\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( offset === undefined ) {\n\n\t\t\toffset = 0;\n\n\t\t\tconsole.warn(\n\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t);\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\tconst attribute1 = attributes[ key ];\n\t\t\tconst attributeArray1 = attribute1.array;\n\n\t\t\tconst attribute2 = geometry.attributes[ key ];\n\t\t\tconst attributeArray2 = attribute2.array;\n\n\t\t\tconst attributeOffset = attribute2.itemSize * offset;\n\t\t\tconst length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\tfor ( let i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tnormalizeNormals() {\n\n\t\tconst normals = this.attributes.normal;\n\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( normals, i );\n\n\t\t\t_vector$8.normalize();\n\n\t\t\tnormals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t}\n\n\ttoNonIndexed() {\n\n\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\t\t\tconst normalized = attribute.normalized;\n\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tlet index = 0, index2 = 0;\n\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tconst indices = this.index.array;\n\t\tconst attributes = this.attributes;\n\n\t\t// attributes\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = this.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst morphArray = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = morphAttribute[ i ];\n\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t}\n\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = this.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tconst parameters = this.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\t\tdata.data = { attributes: {} };\n\n\t\tconst index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t};\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\n\n\t\t}\n\n\t\tconst morphAttributes = {};\n\t\tlet hasMorphAttributes = false;\n\n\t\tfor ( const key in this.morphAttributes ) {\n\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = attributeArray[ i ];\n\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\thasMorphAttributes = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( hasMorphAttributes ) {\n\n\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t}\n\n\t\tconst groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\t return new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// used for storing cloned, shared data\n\n\t\tconst data = {};\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tconst index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone( data ) );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tconst attributes = source.attributes;\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = source.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = source.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tconst boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tconst boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t// user data\n\n\t\tthis.userData = source.userData;\n\n\t\t// geometry generator parameters\n\n\t\tif ( source.parameters !== undefined ) this.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nBufferGeometry.prototype.isBufferGeometry = true;\n\nconst _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();\nconst _ray$2 = /*@__PURE__*/ new Ray();\nconst _sphere$3 = /*@__PURE__*/ new Sphere();\n\nconst _vA$1 = /*@__PURE__*/ new Vector3();\nconst _vB$1 = /*@__PURE__*/ new Vector3();\nconst _vC$1 = /*@__PURE__*/ new Vector3();\n\nconst _tempA = /*@__PURE__*/ new Vector3();\nconst _tempB = /*@__PURE__*/ new Vector3();\nconst _tempC = /*@__PURE__*/ new Vector3();\n\nconst _morphA = /*@__PURE__*/ new Vector3();\nconst _morphB = /*@__PURE__*/ new Vector3();\nconst _morphC = /*@__PURE__*/ new Vector3();\n\nconst _uvA$1 = /*@__PURE__*/ new Vector2();\nconst _uvB$1 = /*@__PURE__*/ new Vector2();\nconst _uvC$1 = /*@__PURE__*/ new Vector2();\n\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n\nclass Mesh extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\tconst keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t_sphere$3.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$2.copy( matrixWorld ).invert();\n\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t// Check boundingBox before continuing\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray$2.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\tlet intersection;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst position = geometry.attributes.position;\n\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\tconst uv = geometry.attributes.uv;\n\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\tconst groups = geometry.groups;\n\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t// indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t}\n\n}\n\nMesh.prototype.isMesh = true;\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t_vA$1.fromBufferAttribute( position, a );\n\t_vB$1.fromBufferAttribute( position, b );\n\t_vC$1.fromBufferAttribute( position, c );\n\n\tconst morphInfluences = object.morphTargetInfluences;\n\n\tif ( morphPosition && morphInfluences ) {\n\n\t\t_morphA.set( 0, 0, 0 );\n\t\t_morphB.set( 0, 0, 0 );\n\t\t_morphC.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\tconst influence = morphInfluences[ i ];\n\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t} else {\n\n\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA$1 ), influence );\n\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB$1 ), influence );\n\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC$1 ), influence );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_vA$1.add( _morphA );\n\t\t_vB$1.add( _morphB );\n\t\t_vC$1.add( _morphC );\n\n\t}\n\n\tif ( object.isSkinnedMesh ) {\n\n\t\tobject.boneTransform( a, _vA$1 );\n\t\tobject.boneTransform( b, _vB$1 );\n\t\tobject.boneTransform( c, _vC$1 );\n\n\t}\n\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv2 ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv2, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv2, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv2, c );\n\n\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );\n\n\t\tintersection.face = face;\n\n\t}\n\n\treturn intersection;\n\n}\n\nclass BoxGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tconst scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet numberOfVertices = 0;\n\t\tlet groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tconst segmentWidth = width / gridX;\n\t\t\tconst segmentHeight = height / gridY;\n\n\t\t\tconst widthHalf = width / 2;\n\t\t\tconst heightHalf = height / 2;\n\t\t\tconst depthHalf = depth / 2;\n\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\n\t\t\tlet vertexCounter = 0;\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n\n\t}\n\n}\n\n/**\n * Uniform Utilities\n */\n\nfunction cloneUniforms( src ) {\n\n\tconst dst = {};\n\n\tfor ( const u in src ) {\n\n\t\tdst[ u ] = {};\n\n\t\tfor ( const p in src[ u ] ) {\n\n\t\t\tconst property = src[ u ][ p ];\n\n\t\t\tif ( property && ( property.isColor ||\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t} else {\n\n\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction mergeUniforms( uniforms ) {\n\n\tconst merged = {};\n\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\n\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\n\n\t\tfor ( const p in tmp ) {\n\n\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t}\n\n\t}\n\n\treturn merged;\n\n}\n\n// Legacy\n\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\nclass ShaderMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( const name in this.uniforms ) {\n\n\t\t\tconst uniform = this.uniforms[ name ];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tconst extensions = {};\n\n\t\tfor ( const key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\t\treturn data;\n\n\t}\n\n}\n\nShaderMaterial.prototype.isShaderMaterial = true;\n\nclass Camera extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\treturn this;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nCamera.prototype.isCamera = true;\n\nclass PerspectiveCamera extends Camera {\n\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength( focalLength ) {\n\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength() {\n\n\t\tconst vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t}\n\n\tgetEffectiveFOV() {\n\n\t\treturn RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t}\n\n\tgetFilmWidth() {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t}\n\n\tgetFilmHeight() {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   const w = 1920;\n\t *   const h = 1080;\n\t *   const fullWidth = w * 3;\n\t *   const fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst near = this.near;\n\t\tlet top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;\n\t\tlet height = 2 * top;\n\t\tlet width = this.aspect * height;\n\t\tlet left = - 0.5 * width;\n\t\tconst view = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n}\n\nPerspectiveCamera.prototype.isPerspectiveCamera = true;\n\nconst fov = 90, aspect = 1;\n\nclass CubeCamera extends Object3D {\n\n\tconstructor( near, far, renderTarget ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget !== true ) {\n\n\t\t\tconsole.error( 'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tconst cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tconst cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tconst cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tconst cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tconst cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tconst cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t}\n\n\tupdate( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tconst renderTarget = this.renderTarget;\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tconst currentOutputEncoding = renderer.outputEncoding;\n\t\tconst currentToneMapping = renderer.toneMapping;\n\t\tconst currentXrEnabled = renderer.xr.enabled;\n\n\t\trenderer.outputEncoding = LinearEncoding;\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.xr.enabled = false;\n\n\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\trenderer.render( scene, cameraPX );\n\n\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\trenderer.render( scene, cameraNX );\n\n\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\trenderer.render( scene, cameraPY );\n\n\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\trenderer.render( scene, cameraNY );\n\n\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\trenderer.render( scene, cameraPZ );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\trenderer.render( scene, cameraNZ );\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\trenderer.outputEncoding = currentOutputEncoding;\n\t\trenderer.toneMapping = currentToneMapping;\n\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t\trenderTarget.texture.needsPMREMUpdate = true;\n\n\t}\n\n}\n\nclass CubeTexture extends Texture {\n\n\tconstructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tget images() {\n\n\t\treturn this.image;\n\n\t}\n\n\tset images( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n}\n\nCubeTexture.prototype.isCubeTexture = true;\n\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( size, options = {} ) {\n\n\t\tsuper( size, size, options );\n\n\t\tconst image = { width: size, height: size, depth: 1 };\n\t\tconst images = [ image, image, image, image, image, image ];\n\n\t\tthis.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t}\n\n\tfromEquirectangularTexture( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tconst shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t};\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst currentMinFilter = texture.minFilter;\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, mesh );\n\n\t\ttexture.minFilter = currentMinFilter;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n\tclear( renderer, color, depth, stencil ) {\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\trenderer.setRenderTarget( this, i );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n}\n\nWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector3();\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\n\nclass Plane {\n\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = normal;\n\t\tthis.constant = constant;\n\n\t}\n\n\tset( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponents( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCoplanarPoints( a, b, c ) {\n\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t}\n\n\tnormalize() {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t}\n\n\tdistanceToSphere( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t}\n\n\tprojectPoint( point, target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t}\n\n\tintersectLine( line, target ) {\n\n\t\tconst direction = line.delta( _vector1 );\n\n\t\tconst denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t}\n\n\tintersectsLine( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tconst startSign = this.distanceToPoint( line.start );\n\t\tconst endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t}\n\n\tcoplanarPoint( target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t}\n\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tequals( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nPlane.prototype.isPlane = true;\n\nconst _sphere$2 = /*@__PURE__*/ new Sphere();\nconst _vector$7 = /*@__PURE__*/ new Vector3();\n\nclass Frustum {\n\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromProjectionMatrix( m ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\tintersectsObject( object ) {\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$2.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$2 );\n\n\t}\n\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere$2.center.set( 0, 0, 0 );\n\t\t_sphere$2.radius = 0.7071067811865476;\n\t\t_sphere$2.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$2 );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector$7 ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nfunction WebGLAnimation() {\n\n\tlet context = null;\n\tlet isAnimating = false;\n\tlet animationLoop = null;\n\tlet requestId = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tanimationLoop( time, frame );\n\n\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t}\n\n\treturn {\n\n\t\tstart: function () {\n\n\t\t\tif ( isAnimating === true ) return;\n\t\t\tif ( animationLoop === null ) return;\n\n\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t\tisAnimating = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tcontext.cancelAnimationFrame( requestId );\n\n\t\t\tisAnimating = false;\n\n\t\t},\n\n\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\tanimationLoop = callback;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLAttributes( gl, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tconst buffers = new WeakMap();\n\n\tfunction createBuffer( attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst usage = attribute.usage;\n\n\t\tconst buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\t\tgl.bufferData( bufferType, array, usage );\n\n\t\tattribute.onUploadCallback();\n\n\t\tlet type;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = 5126;\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\tif ( attribute.isFloat16BufferAttribute ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\ttype = 5131;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t}\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = 5122;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = 5125;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = 5124;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = 5120;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = 5121;\n\n\t\t} else if ( array instanceof Uint8ClampedArray ) {\n\n\t\t\ttype = 5121;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );\n\n\t\t}\n\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\ttype: type,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version\n\t\t};\n\n\t}\n\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst updateRange = attribute.updateRange;\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else {\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t}\n\n\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction get( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn buffers.get( attribute );\n\n\t}\n\n\tfunction remove( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data ) {\n\n\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\tbuffers.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction update( attribute, bufferType ) {\n\n\t\tif ( attribute.isGLBufferAttribute ) {\n\n\t\t\tconst cached = buffers.get( attribute );\n\n\t\t\tif ( ! cached || cached.version < attribute.version ) {\n\n\t\t\t\tbuffers.set( attribute, {\n\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\tversion: attribute.version\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update\n\n\t};\n\n}\n\nclass PlaneGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\n\n\t\tsuper();\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tconst width_half = width / 2;\n\t\tconst height_half = height / 2;\n\n\t\tconst gridX = Math.floor( widthSegments );\n\t\tconst gridY = Math.floor( heightSegments );\n\n\t\tconst gridX1 = gridX + 1;\n\t\tconst gridY1 = gridY + 1;\n\n\t\tconst segment_width = width / gridX;\n\t\tconst segment_height = height / gridY;\n\n\t\t//\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tconst x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\n\n\t}\n\n}\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n#endif\";\n\nvar alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\nvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\nvar bsdfs = \"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( V * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float dotNH ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tfloat invAlpha = 1.0 / alpha;\\n\\tfloat cos2h = dotNH * dotNH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float dotNV, float dotNL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\\n}\\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat D = D_Charlie( sheenRoughness, dotNH );\\n\\tfloat V = V_Neubelt( dotNV, dotNL );\\n\\treturn sheenColor * ( D * V );\\n}\\n#endif\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\nvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\\n\\t\\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\\n\\t\\tuv.x *= CUBEUV_TEXEL_WIDTH;\\n\\t\\tuv.y *= CUBEUV_TEXEL_HEIGHT;\\n\\t\\t#ifdef texture2DGradEXT\\n\\t\\t\\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( envMap, uv ).rgb;\\n\\t\\t#endif\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\nvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\nvar encodings_pars_fragment = \"vec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\nvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\nvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\nvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn vec3( texture2D( gradientMap, coord ).r );\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\\n\\treflectedLight.indirectDiffuse += lightMapIrradiance;\\n#endif\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\nvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\\n\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t}\\n\\t\\treturn distanceFalloff;\\n\\t#else\\n\\t\\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\t\\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t#endif\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\\n\\t\\tfloat dotNL = dot( normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\nvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\tvec3 getIBLIrradiance( const in vec3 normal ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 reflectVec = reflect( - viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\nvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\t#ifdef SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularColorFactor = specularColor;\\n\\t\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\t\\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularColorFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheenColor;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\\n\\t#endif\\n\\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\\n\\t#endif\\n#endif\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenColor;\\n\\t\\tfloat sheenRoughness;\\n\\t#endif\\n};\\nvec3 clearcoatSpecular = vec3( 0.0 );\\nvec3 sheenSpecular = vec3( 0.0 );\\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat r2 = roughness * roughness;\\n\\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\\n\\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\\n\\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\\n\\treturn saturate( DG * RECIPROCAL_PI );\\n}\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\\n\\t#endif\\n\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\nvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef USE_CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\nvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometry.normal );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\n\nvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 sampledDiffuseColor = texture2D( map, vUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE\\n\\t\\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\\n\\t#endif\\n\\tdiffuseColor *= sampledDiffuseColor;\\n#endif\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\nvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tdiffuseColor *= texture2D( map, uv );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\nvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphcolor_vertex = \"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\\n\\tvColor *= morphTargetBaseInfluence;\\n\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t#if defined( USE_COLOR_ALPHA )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t#elif defined( USE_COLOR )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\t\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\t\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\t\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n\\t#endif\\n#endif\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\t\\tuniform sampler2DArray morphTargetsTexture;\\n\\t\\tuniform ivec2 morphTargetsTextureSize;\\n\\t\\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\\n\\t\\t\\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\\n\\t\\t\\tint y = texelIndex / morphTargetsTextureSize.x;\\n\\t\\t\\tint x = texelIndex - y * morphTargetsTextureSize.x;\\n\\t\\t\\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\\n\\t\\t\\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\\n\\t\\t}\\n\\t#else\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t\\t#else\\n\\t\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\t\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\t\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\t\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\nvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\nvar normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\nvar clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\nvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\nvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\nvar output_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= transmissionAlpha + 0.1;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\nvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\nvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\nvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\nvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\nvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tfloat transmissionAlpha = 1.0;\\n\\tfloat transmissionFactor = transmission;\\n\\tfloat thicknessFactor = thickness;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmission = getIBLVolumeRefraction(\\n\\t\\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationColor, attenuationDistance );\\n\\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\\n\\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\\n#endif\";\n\nvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\\n\\t\\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\t#ifdef texture2DLodEXT\\n\\t\\t\\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tif ( attenuationDistance == 0.0 ) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\\n\\t\\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\\n\\t\\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\\n\\t\\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\\n\\t}\\n#endif\";\n\nvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\nvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\nvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\nvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\nconst vertex$g = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\nconst fragment$g = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tgl_FragColor = texture2D( t2D, vUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE\\n\\t\\tgl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );\\n\\t#endif\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$f = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nconst fragment$f = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$e = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\nconst fragment$e = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\nconst vertex$d = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\nconst fragment$d = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\nconst vertex$c = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\nconst fragment$c = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$b = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$b = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$a = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$a = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$9 = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$9 = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$8 = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\nconst fragment$8 = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$7 = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$7 = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n\\t#ifdef OPAQUE\\n\\t\\tgl_FragColor.a = 1.0;\\n\\t#endif\\n}\";\n\nconst vertex$6 = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$6 = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$5 = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$5 = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularColor;\\n\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\tuniform sampler2D specularColorMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenColor;\\n\\tuniform float sheenRoughness;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tuniform sampler2D sheenColorMap;\\n\\t#endif\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tuniform sampler2D sheenRoughnessMap;\\n\\t#endif\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_SHEEN\\n\\t\\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\\n\\t\\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\\n\\t#endif\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$4 = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$4 = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$3 = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$3 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$2 = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$2 = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst vertex$1 = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$1 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst ShaderChunk = {\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\talphatest_pars_fragment: alphatest_pars_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tencodings_fragment: encodings_fragment,\n\tencodings_pars_fragment: encodings_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_vertex: lights_lambert_vertex,\n\tlights_pars_begin: lights_pars_begin,\n\tlights_toon_fragment: lights_toon_fragment,\n\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_fragment_begin: lights_fragment_begin,\n\tlights_fragment_maps: lights_fragment_maps,\n\tlights_fragment_end: lights_fragment_end,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphcolor_vertex: morphcolor_vertex,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment_begin: normal_fragment_begin,\n\tnormal_fragment_maps: normal_fragment_maps,\n\tnormal_pars_fragment: normal_pars_fragment,\n\tnormal_pars_vertex: normal_pars_vertex,\n\tnormal_vertex: normal_vertex,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\toutput_fragment: output_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\ttransmission_fragment: transmission_fragment,\n\ttransmission_pars_fragment: transmission_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tuv2_pars_fragment: uv2_pars_fragment,\n\tuv2_pars_vertex: uv2_pars_vertex,\n\tuv2_vertex: uv2_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tbackground_vert: vertex$g,\n\tbackground_frag: fragment$g,\n\tcube_vert: vertex$f,\n\tcube_frag: fragment$f,\n\tdepth_vert: vertex$e,\n\tdepth_frag: fragment$e,\n\tdistanceRGBA_vert: vertex$d,\n\tdistanceRGBA_frag: fragment$d,\n\tequirect_vert: vertex$c,\n\tequirect_frag: fragment$c,\n\tlinedashed_vert: vertex$b,\n\tlinedashed_frag: fragment$b,\n\tmeshbasic_vert: vertex$a,\n\tmeshbasic_frag: fragment$a,\n\tmeshlambert_vert: vertex$9,\n\tmeshlambert_frag: fragment$9,\n\tmeshmatcap_vert: vertex$8,\n\tmeshmatcap_frag: fragment$8,\n\tmeshnormal_vert: vertex$7,\n\tmeshnormal_frag: fragment$7,\n\tmeshphong_vert: vertex$6,\n\tmeshphong_frag: fragment$6,\n\tmeshphysical_vert: vertex$5,\n\tmeshphysical_frag: fragment$5,\n\tmeshtoon_vert: vertex$4,\n\tmeshtoon_frag: fragment$4,\n\tpoints_vert: vertex$3,\n\tpoints_frag: fragment$3,\n\tshadow_vert: vertex$2,\n\tshadow_frag: fragment$2,\n\tsprite_vert: vertex$1,\n\tsprite_frag: fragment$1\n};\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nconst UniformsLib = {\n\n\tcommon: {\n\n\t\tdiffuse: { value: new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\n\t\tmap: { value: null },\n\t\tuvTransform: { value: new Matrix3() },\n\t\tuv2Transform: { value: new Matrix3() },\n\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 }\n\n\t},\n\n\tspecularmap: {\n\n\t\tspecularMap: { value: null },\n\n\t},\n\n\tenvmap: {\n\n\t\tenvMap: { value: null },\n\t\tflipEnvMap: { value: - 1 },\n\t\treflectivity: { value: 1.0 }, // basic, lambert, phong\n\t\tior: { value: 1.5 }, // physical\n\t\trefractionRatio: { value: 0.98 } // basic, lambert, phong\n\n\t},\n\n\taomap: {\n\n\t\taoMap: { value: null },\n\t\taoMapIntensity: { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\tlightMap: { value: null },\n\t\tlightMapIntensity: { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\temissiveMap: { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\tbumpMap: { value: null },\n\t\tbumpScale: { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\tnormalMap: { value: null },\n\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\tdisplacementMap: { value: null },\n\t\tdisplacementScale: { value: 1 },\n\t\tdisplacementBias: { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\troughnessMap: { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\tmetalnessMap: { value: null }\n\n\t},\n\n\tgradientmap: {\n\n\t\tgradientMap: { value: null }\n\n\t},\n\n\tfog: {\n\n\t\tfogDensity: { value: 0.00025 },\n\t\tfogNear: { value: 1 },\n\t\tfogFar: { value: 2000 },\n\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\tambientLightColor: { value: [] },\n\n\t\tlightProbe: { value: [] },\n\n\t\tdirectionalLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tcolor: {}\n\t\t} },\n\n\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tdirectionalShadowMap: { value: [] },\n\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\tspotLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdirection: {},\n\t\t\tdistance: {},\n\t\t\tconeCos: {},\n\t\t\tpenumbraCos: {},\n\t\t\tdecay: {}\n\t\t} },\n\n\t\tspotLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tspotShadowMap: { value: [] },\n\t\tspotShadowMatrix: { value: [] },\n\n\t\tpointLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdecay: {},\n\t\t\tdistance: {}\n\t\t} },\n\n\t\tpointLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {},\n\t\t\tshadowCameraNear: {},\n\t\t\tshadowCameraFar: {}\n\t\t} },\n\n\t\tpointShadowMap: { value: [] },\n\t\tpointShadowMatrix: { value: [] },\n\n\t\themisphereLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tskyColor: {},\n\t\t\tgroundColor: {}\n\t\t} },\n\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\trectAreaLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\twidth: {},\n\t\t\theight: {}\n\t\t} },\n\n\t\tltc_1: { value: null },\n\t\tltc_2: { value: null }\n\n\t},\n\n\tpoints: {\n\n\t\tdiffuse: { value: new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tsize: { value: 1.0 },\n\t\tscale: { value: 1.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: new Matrix3() }\n\n\t},\n\n\tsprite: {\n\n\t\tdiffuse: { value: new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\trotation: { value: 0.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: new Matrix3() }\n\n\t}\n\n};\n\nconst ShaderLib = {\n\n\tbasic: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t},\n\n\tlambert: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t},\n\n\tphong: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\tshininess: { value: 30 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t},\n\n\tstandard: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.roughnessmap,\n\t\t\tUniformsLib.metalnessmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\troughness: { value: 1.0 },\n\t\t\t\tmetalness: { value: 0.0 },\n\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t},\n\n\ttoon: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.gradientmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t},\n\n\tmatcap: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tmatcap: { value: null }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t},\n\n\tpoints: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.points,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.points_vert,\n\t\tfragmentShader: ShaderChunk.points_frag\n\n\t},\n\n\tdashed: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tscale: { value: 1 },\n\t\t\t\tdashSize: { value: 1 },\n\t\t\t\ttotalSize: { value: 2 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t},\n\n\tdepth: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.depth_vert,\n\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t},\n\n\tnormal: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshnormal_vert,\n\t\tfragmentShader: ShaderChunk.meshnormal_frag\n\n\t},\n\n\tsprite: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.sprite,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t},\n\n\tbackground: {\n\n\t\tuniforms: {\n\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\tt2D: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.background_vert,\n\t\tfragmentShader: ShaderChunk.background_frag\n\n\t},\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\tcube: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.envmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.cube_vert,\n\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t},\n\n\tequirect: {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t},\n\n\tdistanceRGBA: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t},\n\n\tshadow: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.lights,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t}\n\n};\n\nShaderLib.physical = {\n\n\tuniforms: mergeUniforms( [\n\t\tShaderLib.standard.uniforms,\n\t\t{\n\t\t\tclearcoat: { value: 0 },\n\t\t\tclearcoatMap: { value: null },\n\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\tclearcoatNormalMap: { value: null },\n\t\t\tsheen: { value: 0 },\n\t\t\tsheenColor: { value: new Color( 0x000000 ) },\n\t\t\tsheenColorMap: { value: null },\n\t\t\tsheenRoughness: { value: 1 },\n\t\t\tsheenRoughnessMap: { value: null },\n\t\t\ttransmission: { value: 0 },\n\t\t\ttransmissionMap: { value: null },\n\t\t\ttransmissionSamplerSize: { value: new Vector2() },\n\t\t\ttransmissionSamplerMap: { value: null },\n\t\t\tthickness: { value: 0 },\n\t\t\tthicknessMap: { value: null },\n\t\t\tattenuationDistance: { value: 0 },\n\t\t\tattenuationColor: { value: new Color( 0x000000 ) },\n\t\t\tspecularIntensity: { value: 1 },\n\t\t\tspecularIntensityMap: { value: null },\n\t\t\tspecularColor: { value: new Color( 1, 1, 1 ) },\n\t\t\tspecularColorMap: { value: null },\n\t\t}\n\t] ),\n\n\tvertexShader: ShaderChunk.meshphysical_vert,\n\tfragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\nfunction WebGLBackground( renderer, cubemaps, state, objects, alpha, premultipliedAlpha ) {\n\n\tconst clearColor = new Color( 0x000000 );\n\tlet clearAlpha = alpha === true ? 0 : 1;\n\n\tlet planeMesh;\n\tlet boxMesh;\n\n\tlet currentBackground = null;\n\tlet currentBackgroundVersion = 0;\n\tlet currentTonemapping = null;\n\n\tfunction render( renderList, scene ) {\n\n\t\tlet forceClear = false;\n\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\tif ( background && background.isTexture ) {\n\n\t\t\tbackground = cubemaps.get( background );\n\n\t\t}\n\n\t\t// Ignore background in AR\n\t\t// TODO: Reconsider this.\n\n\t\tconst xr = renderer.xr;\n\t\tconst session = xr.getSession && xr.getSession();\n\n\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\tbackground = null;\n\n\t\t}\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t}\n\n\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\tboxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneGeometry( 2, 2 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\tbackground.updateMatrix();\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha = 1 ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\nfunction WebGLBindingStates( gl, extensions, attributes, capabilities ) {\n\n\tconst maxVertexAttributes = gl.getParameter( 34921 );\n\n\tconst extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );\n\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\n\tconst bindingStates = {};\n\n\tconst defaultState = createBindingState( null );\n\tlet currentState = defaultState;\n\tlet forceUpdate = false;\n\n\tfunction setup( object, material, program, geometry, index ) {\n\n\t\tlet updateBuffers = false;\n\n\t\tif ( vaoAvailable ) {\n\n\t\t\tconst state = getBindingState( geometry, program, material );\n\n\t\t\tif ( currentState !== state ) {\n\n\t\t\t\tcurrentState = state;\n\t\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t\t}\n\n\t\t\tupdateBuffers = needsUpdate( geometry, index );\n\n\t\t\tif ( updateBuffers ) saveCache( geometry, index );\n\n\t\t} else {\n\n\t\t\tconst wireframe = ( material.wireframe === true );\n\n\t\t\tif ( currentState.geometry !== geometry.id ||\n\t\t\t\tcurrentState.program !== program.id ||\n\t\t\t\tcurrentState.wireframe !== wireframe ) {\n\n\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\tcurrentState.program = program.id;\n\t\t\t\tcurrentState.wireframe = wireframe;\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh === true ) {\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\tif ( index !== null ) {\n\n\t\t\tattributes.update( index, 34963 );\n\n\t\t}\n\n\t\tif ( updateBuffers || forceUpdate ) {\n\n\t\t\tforceUpdate = false;\n\n\t\t\tsetupVertexAttributes( object, material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tgl.bindBuffer( 34963, attributes.get( index ).buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createVertexArrayObject() {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.createVertexArray();\n\n\t\treturn extension.createVertexArrayOES();\n\n\t}\n\n\tfunction bindVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );\n\n\t\treturn extension.bindVertexArrayOES( vao );\n\n\t}\n\n\tfunction deleteVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );\n\n\t\treturn extension.deleteVertexArrayOES( vao );\n\n\t}\n\n\tfunction getBindingState( geometry, program, material ) {\n\n\t\tconst wireframe = ( material.wireframe === true );\n\n\t\tlet programMap = bindingStates[ geometry.id ];\n\n\t\tif ( programMap === undefined ) {\n\n\t\t\tprogramMap = {};\n\t\t\tbindingStates[ geometry.id ] = programMap;\n\n\t\t}\n\n\t\tlet stateMap = programMap[ program.id ];\n\n\t\tif ( stateMap === undefined ) {\n\n\t\t\tstateMap = {};\n\t\t\tprogramMap[ program.id ] = stateMap;\n\n\t\t}\n\n\t\tlet state = stateMap[ wireframe ];\n\n\t\tif ( state === undefined ) {\n\n\t\t\tstate = createBindingState( createVertexArrayObject() );\n\t\t\tstateMap[ wireframe ] = state;\n\n\t\t}\n\n\t\treturn state;\n\n\t}\n\n\tfunction createBindingState( vao ) {\n\n\t\tconst newAttributes = [];\n\t\tconst enabledAttributes = [];\n\t\tconst attributeDivisors = [];\n\n\t\tfor ( let i = 0; i < maxVertexAttributes; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\t\t\tenabledAttributes[ i ] = 0;\n\t\t\tattributeDivisors[ i ] = 0;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\tgeometry: null,\n\t\t\tprogram: null,\n\t\t\twireframe: false,\n\n\t\t\tnewAttributes: newAttributes,\n\t\t\tenabledAttributes: enabledAttributes,\n\t\t\tattributeDivisors: attributeDivisors,\n\t\t\tobject: vao,\n\t\t\tattributes: {},\n\t\t\tindex: null\n\n\t\t};\n\n\t}\n\n\tfunction needsUpdate( geometry, index ) {\n\n\t\tconst cachedAttributes = currentState.attributes;\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tlet attributesNum = 0;\n\n\t\tfor ( const key in geometryAttributes ) {\n\n\t\t\tconst cachedAttribute = cachedAttributes[ key ];\n\t\t\tconst geometryAttribute = geometryAttributes[ key ];\n\n\t\t\tif ( cachedAttribute === undefined ) return true;\n\n\t\t\tif ( cachedAttribute.attribute !== geometryAttribute ) return true;\n\n\t\t\tif ( cachedAttribute.data !== geometryAttribute.data ) return true;\n\n\t\t\tattributesNum ++;\n\n\t\t}\n\n\t\tif ( currentState.attributesNum !== attributesNum ) return true;\n\n\t\tif ( currentState.index !== index ) return true;\n\n\t\treturn false;\n\n\t}\n\n\tfunction saveCache( geometry, index ) {\n\n\t\tconst cache = {};\n\t\tconst attributes = geometry.attributes;\n\t\tlet attributesNum = 0;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tconst data = {};\n\t\t\tdata.attribute = attribute;\n\n\t\t\tif ( attribute.data ) {\n\n\t\t\t\tdata.data = attribute.data;\n\n\t\t\t}\n\n\t\t\tcache[ key ] = data;\n\n\t\t\tattributesNum ++;\n\n\t\t}\n\n\t\tcurrentState.attributes = cache;\n\t\tcurrentState.attributesNum = attributesNum;\n\n\t\tcurrentState.index = index;\n\n\t}\n\n\tfunction initAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\n\t\tfor ( let i = 0, il = newAttributes.length; i < il; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\tconst attributeDivisors = currentState.attributeDivisors;\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\tfor ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction vertexAttribPointer( index, size, type, normalized, stride, offset ) {\n\n\t\tif ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {\n\n\t\t\tgl.vertexAttribIPointer( index, size, type, stride, offset );\n\n\t\t} else {\n\n\t\t\tgl.vertexAttribPointer( index, size, type, normalized, stride, offset );\n\n\t\t}\n\n\t}\n\n\tfunction setupVertexAttributes( object, material, program, geometry ) {\n\n\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;\n\n\t\t}\n\n\t\tinitAttributes();\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\n\t\t\t\t\tconst attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tstride * bytesPerElement,\n\t\t\t\t\t\t\t\t( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tsize * bytesPerElement,\n\t\t\t\t\t\t\t\t( size / programAttribute.locationSize ) * i * bytesPerElement\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tconst value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\tgl.vertexAttrib2fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tgl.vertexAttrib3fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\tgl.vertexAttrib4fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tgl.vertexAttrib1fv( programAttribute.location, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tdisableUnusedAttributes();\n\n\t}\n\n\tfunction dispose() {\n\n\t\treset();\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tfor ( const programId in programMap ) {\n\n\t\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t}\n\n\t\t\tdelete bindingStates[ geometryId ];\n\n\t\t}\n\n\t}\n\n\tfunction releaseStatesOfGeometry( geometry ) {\n\n\t\tif ( bindingStates[ geometry.id ] === undefined ) return;\n\n\t\tconst programMap = bindingStates[ geometry.id ];\n\n\t\tfor ( const programId in programMap ) {\n\n\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ programId ];\n\n\t\t}\n\n\t\tdelete bindingStates[ geometry.id ];\n\n\t}\n\n\tfunction releaseStatesOfProgram( program ) {\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tif ( programMap[ program.id ] === undefined ) continue;\n\n\t\t\tconst stateMap = programMap[ program.id ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ program.id ];\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\tresetDefaultState();\n\t\tforceUpdate = true;\n\n\t\tif ( currentState === defaultState ) return;\n\n\t\tcurrentState = defaultState;\n\t\tbindVertexArrayObject( currentState.object );\n\n\t}\n\n\t// for backward-compatibility\n\n\tfunction resetDefaultState() {\n\n\t\tdefaultState.geometry = null;\n\t\tdefaultState.program = null;\n\t\tdefaultState.wireframe = false;\n\n\t}\n\n\treturn {\n\n\t\tsetup: setup,\n\t\treset: reset,\n\t\tresetDefaultState: resetDefaultState,\n\t\tdispose: dispose,\n\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tdisableUnusedAttributes: disableUnusedAttributes\n\n\t};\n\n}\n\nfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\tlet maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tconst isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\n\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tconst maxPrecision = getMaxPrecision( precision );\n\n\tif ( maxPrecision !== precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\tprecision = maxPrecision;\n\n\t}\n\n\tconst drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\tconst maxTextures = gl.getParameter( 34930 );\n\tconst maxVertexTextures = gl.getParameter( 35660 );\n\tconst maxTextureSize = gl.getParameter( 3379 );\n\tconst maxCubemapSize = gl.getParameter( 34076 );\n\n\tconst maxAttributes = gl.getParameter( 34921 );\n\tconst maxVertexUniforms = gl.getParameter( 36347 );\n\tconst maxVaryings = gl.getParameter( 36348 );\n\tconst maxFragmentUniforms = gl.getParameter( 36349 );\n\n\tconst vertexTextures = maxVertexTextures > 0;\n\tconst floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\tconst maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\treturn {\n\n\t\tisWebGL2: isWebGL2,\n\n\t\tdrawBuffers: drawBuffers,\n\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\tprecision: precision,\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\tmaxTextures: maxTextures,\n\t\tmaxVertexTextures: maxVertexTextures,\n\t\tmaxTextureSize: maxTextureSize,\n\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\tmaxAttributes: maxAttributes,\n\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\tmaxVaryings: maxVaryings,\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\tvertexTextures: vertexTextures,\n\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\tmaxSamples: maxSamples\n\n\t};\n\n}\n\nfunction WebGLClipping( properties ) {\n\n\tconst scope = this;\n\n\tlet globalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false;\n\n\tconst plane = new Plane(),\n\t\tviewNormalMatrix = new Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\tthis.numIntersection = 0;\n\n\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\tconst enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function () {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function () {\n\n\t\trenderingShadows = false;\n\t\tresetGlobalState();\n\n\t};\n\n\tthis.setState = function ( material, camera, useCache ) {\n\n\t\tconst planes = material.clippingPlanes,\n\t\t\tclipIntersection = material.clipIntersection,\n\t\t\tclipShadows = material.clipShadows;\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4;\n\n\t\t\tlet dstArray = materialProperties.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, useCache );\n\n\t\t\tfor ( let i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\t\tscope.numIntersection = 0;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\tlet dstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\t\tscope.numIntersection = 0;\n\n\t\treturn dstArray;\n\n\t}\n\n}\n\nfunction WebGLCubeMaps( renderer ) {\n\n\tlet cubemaps = new WeakMap();\n\n\tfunction mapTextureMapping( texture, mapping ) {\n\n\t\tif ( mapping === EquirectangularReflectionMapping ) {\n\n\t\t\ttexture.mapping = CubeReflectionMapping;\n\n\t\t} else if ( mapping === EquirectangularRefractionMapping ) {\n\n\t\t\ttexture.mapping = CubeRefractionMapping;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\tif ( cubemaps.has( texture ) ) {\n\n\t\t\t\t\tconst cubemap = cubemaps.get( texture ).texture;\n\t\t\t\t\treturn mapTextureMapping( cubemap, texture.mapping );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\tif ( image && image.height > 0 ) {\n\n\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget( image.height / 2 );\n\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\n\t\t\t\t\t\tcubemaps.set( texture, renderTarget );\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\treturn mapTextureMapping( renderTarget.texture, texture.mapping );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemap = cubemaps.get( texture );\n\n\t\tif ( cubemap !== undefined ) {\n\n\t\t\tcubemaps.delete( texture );\n\t\t\tcubemap.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubemaps = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nclass OrthographicCamera extends Camera {\n\n\tconstructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t}\n\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tconst cx = ( this.right + this.left ) / 2;\n\t\tconst cy = ( this.top + this.bottom ) / 2;\n\n\t\tlet left = cx - dx;\n\t\tlet right = cx + dx;\n\t\tlet top = cy + dy;\n\t\tlet bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\tright = left + scaleW * this.view.width;\n\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n}\n\nOrthographicCamera.prototype.isOrthographicCamera = true;\n\nconst LOD_MIN = 4;\n\n// The standard deviations (radians) associated with the extra mips. These are\n// chosen to approximate a Trowbridge-Reitz distribution function times the\n// geometric shadowing function. These sigma values squared must match the\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\n\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera();\nconst _clearColor = /*@__PURE__*/ new Color();\nlet _oldTarget = null;\n\n// Golden Ratio\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\nconst INV_PHI = 1 / PHI;\n\n// Vertices of a dodecahedron (except the opposites, which represent the\n// same axis), used as axis directions evenly spread on a sphere.\nconst _axisDirections = [\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n * (PMREM) from a cubeMap environment texture. This allows different levels of\n * blur to be quickly accessed based on material roughness. It is packed into a\n * special CubeUV format that allows us to perform custom interpolation so that\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n * higher roughness levels. In this way we maintain resolution to smoothly\n * interpolate diffuse lighting while limiting sampling computation.\n *\n * Paper: Fast, Accurate Image-Based Lighting\n * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n*/\n\nclass PMREMGenerator {\n\n\tconstructor( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._lodMax = 0;\n\t\tthis._cubeSize = 0;\n\t\tthis._lodPlanes = [];\n\t\tthis._sizeLods = [];\n\t\tthis._sigmas = [];\n\n\t\tthis._blurMaterial = null;\n\t\tthis._cubemapMaterial = null;\n\t\tthis._equirectMaterial = null;\n\n\t\tthis._compileMaterial( this._blurMaterial );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t * is placed at the origin).\n\t */\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100 ) {\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\tthis._setSize( 256 );\n\n\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\t\tcubeUVRenderTarget.depthBuffer = true;\n\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\n\t\tif ( sigma > 0 ) {\n\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t}\n\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromEquirectangular( equirectangular, renderTarget = null ) {\n\n\t\treturn this._fromTexture( equirectangular, renderTarget );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t * or HDR. The ideal input cube size is 256 x 256,\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromCubemap( cubemap, renderTarget = null ) {\n\n\t\treturn this._fromTexture( cubemap, renderTarget );\n\n\t}\n\n\t/**\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileCubemapShader() {\n\n\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\t\t\tthis._compileMaterial( this._cubemapMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileEquirectangularShader() {\n\n\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\t\t\tthis._compileMaterial( this._equirectMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t * one of them will cause any others to also become unusable.\n\t */\n\tdispose() {\n\n\t\tthis._dispose();\n\n\t\tif ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();\n\t\tif ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();\n\n\t}\n\n\t// private interface\n\n\t_setSize( cubeSize ) {\n\n\t\tthis._lodMax = Math.floor( Math.log2( cubeSize ) );\n\t\tthis._cubeSize = Math.pow( 2, this._lodMax );\n\n\t}\n\n\t_dispose() {\n\n\t\tif ( this._blurMaterial !== null ) this._blurMaterial.dispose();\n\n\t\tif ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();\n\n\t\tfor ( let i = 0; i < this._lodPlanes.length; i ++ ) {\n\n\t\t\tthis._lodPlanes[ i ].dispose();\n\n\t\t}\n\n\t}\n\n\t_cleanup( outputTarget ) {\n\n\t\tthis._renderer.setRenderTarget( _oldTarget );\n\t\toutputTarget.scissorTest = false;\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t}\n\n\t_fromTexture( texture, renderTarget ) {\n\n\t\tif ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {\n\n\t\t\tthis._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );\n\n\t\t} else { // Equirectangular\n\n\t\t\tthis._setSize( texture.image.width / 4 );\n\n\t\t}\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_allocateTargets() {\n\n\t\tconst width = 3 * Math.max( this._cubeSize, 16 * 7 );\n\t\tconst height = 4 * this._cubeSize - 32;\n\n\t\tconst params = {\n\t\t\tmagFilter: LinearFilter,\n\t\t\tminFilter: LinearFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: HalfFloatType,\n\t\t\tformat: RGBAFormat,\n\t\t\tencoding: LinearEncoding,\n\t\t\tdepthBuffer: false\n\t\t};\n\n\t\tconst cubeUVRenderTarget = _createRenderTarget( width, height, params );\n\n\t\tif ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width ) {\n\n\t\t\tif ( this._pingPongRenderTarget !== null ) {\n\n\t\t\t\tthis._dispose();\n\n\t\t\t}\n\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( width, height, params );\n\n\t\t\tconst { _lodMax } = this;\n\t\t\t( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );\n\n\t\t\tthis._blurMaterial = _getBlurShader( _lodMax, width, height );\n\n\t\t}\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_compileMaterial( material ) {\n\n\t\tconst tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );\n\t\tthis._renderer.compile( tmpMesh, _flatCamera );\n\n\t}\n\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tconst fov = 90;\n\t\tconst aspect = 1;\n\t\tconst cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tconst upSign = [ 1, - 1, 1, 1, 1, 1 ];\n\t\tconst forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\n\t\tconst renderer = this._renderer;\n\n\t\tconst originalAutoClear = renderer.autoClear;\n\t\tconst toneMapping = renderer.toneMapping;\n\t\trenderer.getClearColor( _clearColor );\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.autoClear = false;\n\n\t\tconst backgroundMaterial = new MeshBasicMaterial( {\n\t\t\tname: 'PMREM.Background',\n\t\t\tside: BackSide,\n\t\t\tdepthWrite: false,\n\t\t\tdepthTest: false,\n\t\t} );\n\n\t\tconst backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\n\n\t\tlet useSolidColor = false;\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( background.isColor ) {\n\n\t\t\t\tbackgroundMaterial.color.copy( background );\n\t\t\t\tscene.background = null;\n\t\t\t\tuseSolidColor = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbackgroundMaterial.color.copy( _clearColor );\n\t\t\tuseSolidColor = true;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst col = i % 3;\n\n\t\t\tif ( col === 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col === 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\n\t\t\tconst size = this._cubeSize;\n\n\t\t\t_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );\n\n\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\n\t\t\tif ( useSolidColor ) {\n\n\t\t\t\trenderer.render( backgroundBox, cubeCamera );\n\n\t\t\t}\n\n\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\tbackgroundBox.geometry.dispose();\n\t\tbackgroundBox.material.dispose();\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.autoClear = originalAutoClear;\n\t\tscene.background = background;\n\n\t}\n\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\n\n\t\tif ( isCubeTexture ) {\n\n\t\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\n\t\t\t}\n\n\t\t\tthis._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t} else {\n\n\t\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\n\t\tconst mesh = new Mesh( this._lodPlanes[ 0 ], material );\n\n\t\tconst uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\n\t\tconst size = this._cubeSize;\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\trenderer.render( mesh, _flatCamera );\n\n\t}\n\n\t_applyPMREM( cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tfor ( let i = 1; i < this._lodPlanes.length; i ++ ) {\n\n\t\t\tconst sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );\n\n\t\t\tconst poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\tthis._halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\tpingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\tthis._halfBlur(\n\t\t\tpingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst blurMaterial = this._blurMaterial;\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tconst STANDARD_DEVIATIONS = 3;\n\n\t\tconst blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );\n\t\tconst blurUniforms = blurMaterial.uniforms;\n\n\t\tconst pixels = this._sizeLods[ lodIn ] - 1;\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( `sigmaRadians, ${\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\n\n\t\t}\n\n\t\tconst weights = [];\n\t\tlet sum = 0;\n\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tconst x = i / sigmaPixels;\n\t\t\tconst weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\n\t\tconst { _lodMax } = this;\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = _lodMax - lodIn;\n\n\t\tconst outputSize = this._sizeLods[ lodOut ];\n\t\tconst x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );\n\t\tconst y = 4 * ( this._cubeSize - outputSize );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\trenderer.setRenderTarget( targetOut );\n\t\trenderer.render( blurMesh, _flatCamera );\n\n\t}\n\n}\n\n\n\nfunction _createPlanes( lodMax ) {\n\n\tconst lodPlanes = [];\n\tconst sizeLods = [];\n\tconst sigmas = [];\n\n\tlet lod = lodMax;\n\n\tconst totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n\tfor ( let i = 0; i < totalLods; i ++ ) {\n\n\t\tconst sizeLod = Math.pow( 2, lod );\n\t\tsizeLods.push( sizeLod );\n\t\tlet sigma = 1.0 / sizeLod;\n\n\t\tif ( i > lodMax - LOD_MIN ) {\n\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];\n\n\t\t} else if ( i === 0 ) {\n\n\t\t\tsigma = 0;\n\n\t\t}\n\n\t\tsigmas.push( sigma );\n\n\t\tconst texelSize = 1.0 / ( sizeLod - 1 );\n\t\tconst min = - texelSize / 2;\n\t\tconst max = 1 + texelSize / 2;\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\tconst cubeFaces = 6;\n\t\tconst vertices = 6;\n\t\tconst positionSize = 3;\n\t\tconst uvSize = 2;\n\t\tconst faceIndexSize = 1;\n\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\tconst y = face > 2 ? 0 : - 1;\n\t\t\tconst coordinates = [\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y + 1, 0\n\t\t\t];\n\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\tconst fill = [ face, face, face, face, face, face ];\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t}\n\n\t\tconst planes = new BufferGeometry();\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\tlodPlanes.push( planes );\n\n\t\tif ( lod > LOD_MIN ) {\n\n\t\t\tlod --;\n\n\t\t}\n\n\t}\n\n\treturn { lodPlanes, sizeLods, sigmas };\n\n}\n\nfunction _createRenderTarget( width, height, params ) {\n\n\tconst cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\tcubeUVRenderTarget.scissorTest = true;\n\treturn cubeUVRenderTarget;\n\n}\n\nfunction _setViewport( target, x, y, width, height ) {\n\n\ttarget.viewport.set( x, y, width, height );\n\ttarget.scissor.set( x, y, width, height );\n\n}\n\nfunction _getBlurShader( lodMax, width, height ) {\n\n\tconst weights = new Float32Array( MAX_SAMPLES );\n\tconst poleAxis = new Vector3( 0, 1, 0 );\n\tconst shaderMaterial = new ShaderMaterial( {\n\n\t\tname: 'SphericalGaussianBlur',\n\n\t\tdefines: {\n\t\t\t'n': MAX_SAMPLES,\n\t\t\t'CUBEUV_TEXEL_WIDTH': 1.0 / width,\n\t\t\t'CUBEUV_TEXEL_HEIGHT': 1.0 / height,\n\t\t\t'CUBEUV_MAX_MIP': `${lodMax}.0`,\n\t\t},\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'samples': { value: 1 },\n\t\t\t'weights': { value: weights },\n\t\t\t'latitudinal': { value: false },\n\t\t\t'dTheta': { value: 0 },\n\t\t\t'mipInt': { value: 0 },\n\t\t\t'poleAxis': { value: poleAxis }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getEquirectMaterial() {\n\n\treturn new ShaderMaterial( {\n\n\t\tname: 'EquirectangularToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n}\n\nfunction _getCubemapMaterial() {\n\n\treturn new ShaderMaterial( {\n\n\t\tname: 'CubemapToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'flipEnvMap': { value: - 1 }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n}\n\nfunction _getCommonVertexShader() {\n\n\treturn /* glsl */`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`;\n\n}\n\nfunction WebGLCubeUVMaps( renderer ) {\n\n\tlet cubeUVmaps = new WeakMap();\n\n\tlet pmremGenerator = null;\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tconst isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );\n\t\t\tconst isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t\t\t// equirect/cube map to cubeUV conversion\n\n\t\t\tif ( isEquirectMap || isCubeMap ) {\n\n\t\t\t\tif ( texture.isRenderTargetTexture && texture.needsPMREMUpdate === true ) {\n\n\t\t\t\t\ttexture.needsPMREMUpdate = false;\n\n\t\t\t\t\tlet renderTarget = cubeUVmaps.get( texture );\n\n\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\trenderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );\n\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( cubeUVmaps.has( texture ) ) {\n\n\t\t\t\t\t\treturn cubeUVmaps.get( texture ).texture;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {\n\n\t\t\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\t\t\tconst renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );\n\t\t\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction isCubeTextureComplete( image ) {\n\n\t\tlet count = 0;\n\t\tconst length = 6;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tif ( image[ i ] !== undefined ) count ++;\n\n\t\t}\n\n\t\treturn count === length;\n\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemapUV = cubeUVmaps.get( texture );\n\n\t\tif ( cubemapUV !== undefined ) {\n\n\t\t\tcubeUVmaps.delete( texture );\n\t\t\tcubemapUV.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubeUVmaps = new WeakMap();\n\n\t\tif ( pmremGenerator !== null ) {\n\n\t\t\tpmremGenerator.dispose();\n\t\t\tpmremGenerator = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLExtensions( gl ) {\n\n\tconst extensions = {};\n\n\tfunction getExtension( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tlet extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t}\n\n\treturn {\n\n\t\thas: function ( name ) {\n\n\t\t\treturn getExtension( name ) !== null;\n\n\t\t},\n\n\t\tinit: function ( capabilities ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tgetExtension( 'EXT_color_buffer_float' );\n\n\t\t\t} else {\n\n\t\t\t\tgetExtension( 'WEBGL_depth_texture' );\n\t\t\t\tgetExtension( 'OES_texture_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float_linear' );\n\t\t\t\tgetExtension( 'OES_standard_derivatives' );\n\t\t\t\tgetExtension( 'OES_element_index_uint' );\n\t\t\t\tgetExtension( 'OES_vertex_array_object' );\n\t\t\t\tgetExtension( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\tgetExtension( 'OES_texture_float_linear' );\n\t\t\tgetExtension( 'EXT_color_buffer_half_float' );\n\t\t\tgetExtension( 'WEBGL_multisampled_render_to_texture' );\n\n\t\t},\n\n\t\tget: function ( name ) {\n\n\t\t\tconst extension = getExtension( name );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\treturn extension;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\n\n\tconst geometries = {};\n\tconst wireframeAttributes = new WeakMap();\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tconst geometry = event.target;\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\tattributes.remove( geometry.index );\n\n\t\t}\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tattributes.remove( geometry.attributes[ name ] );\n\n\t\t}\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\tconst attribute = wireframeAttributes.get( geometry );\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\twireframeAttributes.delete( geometry );\n\n\t\t}\n\n\t\tbindingStates.releaseStatesOfGeometry( geometry );\n\n\t\tif ( geometry.isInstancedBufferGeometry === true ) {\n\n\t\t\tdelete geometry._maxInstanceCount;\n\n\t\t}\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction get( object, geometry ) {\n\n\t\tif ( geometries[ geometry.id ] === true ) return geometry;\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tgeometries[ geometry.id ] = true;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction update( geometry ) {\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\tfor ( const name in geometryAttributes ) {\n\n\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = morphAttributes[ name ];\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateWireframeAttribute( geometry ) {\n\n\t\tconst indices = [];\n\n\t\tconst geometryIndex = geometry.index;\n\t\tconst geometryPosition = geometry.attributes.position;\n\t\tlet version = 0;\n\n\t\tif ( geometryIndex !== null ) {\n\n\t\t\tconst array = geometryIndex.array;\n\t\t\tversion = geometryIndex.version;\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tconst a = array[ i + 0 ];\n\t\t\t\tconst b = array[ i + 1 ];\n\t\t\t\tconst c = array[ i + 2 ];\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst array = geometryPosition.array;\n\t\t\tversion = geometryPosition.version;\n\n\t\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tconst a = i + 0;\n\t\t\t\tconst b = i + 1;\n\t\t\t\tconst c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\tattribute.version = version;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates\n\n\t\t//\n\n\t\tconst previousAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( previousAttribute ) attributes.remove( previousAttribute );\n\n\t\t//\n\n\t\twireframeAttributes.set( geometry, attribute );\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tconst currentAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( currentAttribute ) {\n\n\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t}\n\n\t\treturn wireframeAttributes.get( geometry );\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tupdate: update,\n\n\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t};\n\n}\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tlet type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLInfo( gl ) {\n\n\tconst memory = {\n\t\tgeometries: 0,\n\t\ttextures: 0\n\t};\n\n\tconst render = {\n\t\tframe: 0,\n\t\tcalls: 0,\n\t\ttriangles: 0,\n\t\tpoints: 0,\n\t\tlines: 0\n\t};\n\n\tfunction update( count, mode, instanceCount ) {\n\n\t\trender.calls ++;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase 4:\n\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tcase 0:\n\t\t\t\trender.points += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\trender.frame ++;\n\t\trender.calls = 0;\n\t\trender.triangles = 0;\n\t\trender.points = 0;\n\t\trender.lines = 0;\n\n\t}\n\n\treturn {\n\t\tmemory: memory,\n\t\trender: render,\n\t\tprograms: null,\n\t\tautoReset: true,\n\t\treset: reset,\n\t\tupdate: update\n\t};\n\n}\n\nfunction numericalSort( a, b ) {\n\n\treturn a[ 0 ] - b[ 0 ];\n\n}\n\nfunction absNumericalSort( a, b ) {\n\n\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n}\n\nfunction denormalize( morph, attribute ) {\n\n\tlet denominator = 1;\n\tconst array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;\n\n\tif ( array instanceof Int8Array ) denominator = 127;\n\telse if ( array instanceof Int16Array ) denominator = 32767;\n\telse if ( array instanceof Int32Array ) denominator = 2147483647;\n\telse console.error( 'THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array );\n\n\tmorph.divideScalar( denominator );\n\n}\n\nfunction WebGLMorphtargets( gl, capabilities, textures ) {\n\n\tconst influencesList = {};\n\tconst morphInfluences = new Float32Array( 8 );\n\tconst morphTextures = new WeakMap();\n\tconst morph = new Vector4();\n\n\tconst workInfluences = [];\n\n\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\tworkInfluences[ i ] = [ i, 0 ];\n\n\t}\n\n\tfunction update( object, geometry, material, program ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tif ( capabilities.isWebGL2 === true ) {\n\n\t\t\t// instead of using attributes, the WebGL 2 code path encodes morph targets\n\t\t\t// into an array of data textures. Each layer represents a single morph target.\n\n\t\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\t\tlet entry = morphTextures.get( geometry );\n\n\t\t\tif ( entry === undefined || entry.count !== morphTargetsCount ) {\n\n\t\t\t\tif ( entry !== undefined ) entry.texture.dispose();\n\n\t\t\t\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\n\t\t\t\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n\t\t\t\tconst hasMorphColors = geometry.morphAttributes.color !== undefined;\n\n\t\t\t\tconst morphTargets = geometry.morphAttributes.position || [];\n\t\t\t\tconst morphNormals = geometry.morphAttributes.normal || [];\n\t\t\t\tconst morphColors = geometry.morphAttributes.color || [];\n\n\t\t\t\tlet vertexDataCount = 0;\n\n\t\t\t\tif ( hasMorphPosition === true ) vertexDataCount = 1;\n\t\t\t\tif ( hasMorphNormals === true ) vertexDataCount = 2;\n\t\t\t\tif ( hasMorphColors === true ) vertexDataCount = 3;\n\n\t\t\t\tlet width = geometry.attributes.position.count * vertexDataCount;\n\t\t\t\tlet height = 1;\n\n\t\t\t\tif ( width > capabilities.maxTextureSize ) {\n\n\t\t\t\t\theight = Math.ceil( width / capabilities.maxTextureSize );\n\t\t\t\t\twidth = capabilities.maxTextureSize;\n\n\t\t\t\t}\n\n\t\t\t\tconst buffer = new Float32Array( width * height * 4 * morphTargetsCount );\n\n\t\t\t\tconst texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );\n\t\t\t\ttexture.type = FloatType;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t// fill buffer\n\n\t\t\t\tconst vertexDataStride = vertexDataCount * 4;\n\n\t\t\t\tfor ( let i = 0; i < morphTargetsCount; i ++ ) {\n\n\t\t\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\t\t\tconst morphNormal = morphNormals[ i ];\n\t\t\t\t\tconst morphColor = morphColors[ i ];\n\n\t\t\t\t\tconst offset = width * height * 4 * i;\n\n\t\t\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\n\n\t\t\t\t\t\tconst stride = j * vertexDataStride;\n\n\t\t\t\t\t\tif ( hasMorphPosition === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphTarget, j );\n\n\t\t\t\t\t\t\tif ( morphTarget.normalized === true ) denormalize( morph, morphTarget );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 0 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 1 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 2 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasMorphNormals === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphNormal, j );\n\n\t\t\t\t\t\t\tif ( morphNormal.normalized === true ) denormalize( morph, morphNormal );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 4 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 5 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 6 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasMorphColors === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphColor, j );\n\n\t\t\t\t\t\t\tif ( morphColor.normalized === true ) denormalize( morph, morphColor );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 8 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 9 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 10 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tentry = {\n\t\t\t\t\tcount: morphTargetsCount,\n\t\t\t\t\ttexture: texture,\n\t\t\t\t\tsize: new Vector2( width, height )\n\t\t\t\t};\n\n\t\t\t\tmorphTextures.set( geometry, entry );\n\n\t\t\t\tfunction disposeTexture() {\n\n\t\t\t\t\ttexture.dispose();\n\n\t\t\t\t\tmorphTextures.delete( geometry );\n\n\t\t\t\t\tgeometry.removeEventListener( 'dispose', disposeTexture );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.addEventListener( 'dispose', disposeTexture );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\t\tmorphInfluencesSum += objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );\n\n\n\t\t} else {\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tlet influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined || influences.length !== length ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\tconst influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tif ( i < length && influences[ i ][ 1 ] ) {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = influences[ i ][ 0 ];\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = influences[ i ][ 1 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tworkInfluences.sort( numericalSort );\n\n\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\tconst morphNormals = geometry.morphAttributes.normal;\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tconst influence = workInfluences[ i ];\n\t\t\t\tconst index = influence[ 0 ];\n\t\t\t\tconst value = influence[ 1 ];\n\n\t\t\t\tif ( index !== Number.MAX_SAFE_INTEGER && value ) {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphTarget' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphNormal' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tupdate: update\n\n\t};\n\n}\n\nfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\tlet updateMap = new WeakMap();\n\n\tfunction update( object ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\tconst geometry = object.geometry;\n\t\tconst buffergeometry = geometries.get( object, geometry );\n\n\t\t// Update once per frame\n\n\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\tgeometries.update( buffergeometry );\n\n\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\tif ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {\n\n\t\t\t\tobject.addEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\t\t}\n\n\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\tif ( object.instanceColor !== null ) {\n\n\t\t\t\tattributes.update( object.instanceColor, 34962 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tupdateMap = new WeakMap();\n\n\t}\n\n\tfunction onInstancedMeshDispose( event ) {\n\n\t\tconst instancedMesh = event.target;\n\n\t\tinstancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\tattributes.remove( instancedMesh.instanceMatrix );\n\n\t\tif ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update,\n\t\tdispose: dispose\n\n\t};\n\n}\n\n/**\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [textures] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'textures' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (textures factorizations):\n *\n * .upload( gl, seq, values, textures )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (textures factorizations):\n *\n * .setValue( gl, name, value, textures )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\nconst emptyTexture = new Texture();\nconst emptyArrayTexture = new DataArrayTexture();\nconst empty3dTexture = new Data3DTexture();\nconst emptyCubeTexture = new CubeTexture();\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nconst arrayCacheF32 = [];\nconst arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nconst mat4array = new Float32Array( 16 );\nconst mat3array = new Float32Array( 9 );\nconst mat2array = new Float32Array( 4 );\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten( array, nBlocks, blockSize ) {\n\n\tconst firstElem = array[ 0 ];\n\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t// unoptimized: ! isNaN( firstElem )\n\t// see http://jacksondunstan.com/articles/983\n\n\tconst n = nBlocks * blockSize;\n\tlet r = arrayCacheF32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Float32Array( n );\n\t\tarrayCacheF32[ n ] = r;\n\n\t}\n\n\tif ( nBlocks !== 0 ) {\n\n\t\tfirstElem.toArray( r, 0 );\n\n\t\tfor ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\toffset += blockSize;\n\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t}\n\n\t}\n\n\treturn r;\n\n}\n\nfunction arraysEqual( a, b ) {\n\n\tif ( a.length !== b.length ) return false;\n\n\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction copyArray( a, b ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\ta[ i ] = b[ i ];\n\n\t}\n\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits( textures, n ) {\n\n\tlet r = arrayCacheI32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Int32Array( n );\n\t\tarrayCacheI32[ n ] = r;\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\tr[ i ] = textures.allocateTextureUnit();\n\n\t}\n\n\treturn r;\n\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValueV1f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1f( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValueV2f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else if ( v.r !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\tcache[ 0 ] = v.r;\n\t\t\tcache[ 1 ] = v.g;\n\t\t\tcache[ 2 ] = v.b;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single matrix (from flat array or THREE.MatrixN)\n\nfunction setValueM2( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat2array.set( elements );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM3( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat3array.set( elements );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM4( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat4array.set( elements );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\n// Single integer / boolean\n\nfunction setValueV1i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1i( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single integer / boolean vector (from flat array)\n\nfunction setValueV2i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform2iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV3i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform3iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV4i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform4iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\n// Single unsigned integer\n\nfunction setValueV1ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1ui( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single unsigned integer vector (from flat array)\n\nfunction setValueV2ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform2uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV3ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform3uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV4ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform4uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\n\n// Single texture (2D / Cube)\n\nfunction setValueT1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2D( v || emptyTexture, unit );\n\n}\n\nfunction setValueT3D1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture3D( v || empty3dTexture, unit );\n\n}\n\nfunction setValueT6( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTextureCube( v || emptyCubeTexture, unit );\n\n}\n\nfunction setValueT2DArray1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2DArray( v || emptyArrayTexture, unit );\n\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\tcase 0x1405: return setValueV1ui; // UINT\n\t\tcase 0x8dc6: return setValueV2ui; // _VEC2\n\t\tcase 0x8dc7: return setValueV3ui; // _VEC3\n\t\tcase 0x8dc8: return setValueV4ui; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3D1;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArray1;\n\n\t}\n\n}\n\n\n// Array of scalars\n\nfunction setValueV1fArray( gl, v ) {\n\n\tgl.uniform1fv( this.addr, v );\n\n}\n\n// Array of vectors (from flat array or array of THREE.VectorN)\n\nfunction setValueV2fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 2 );\n\n\tgl.uniform2fv( this.addr, data );\n\n}\n\nfunction setValueV3fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 3 );\n\n\tgl.uniform3fv( this.addr, data );\n\n}\n\nfunction setValueV4fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniform4fv( this.addr, data );\n\n}\n\n// Array of matrices (from flat array or array of THREE.MatrixN)\n\nfunction setValueM2Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniformMatrix2fv( this.addr, false, data );\n\n}\n\nfunction setValueM3Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 9 );\n\n\tgl.uniformMatrix3fv( this.addr, false, data );\n\n}\n\nfunction setValueM4Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 16 );\n\n\tgl.uniformMatrix4fv( this.addr, false, data );\n\n}\n\n// Array of integer / boolean\n\nfunction setValueV1iArray( gl, v ) {\n\n\tgl.uniform1iv( this.addr, v );\n\n}\n\n// Array of integer / boolean vectors (from flat array)\n\nfunction setValueV2iArray( gl, v ) {\n\n\tgl.uniform2iv( this.addr, v );\n\n}\n\nfunction setValueV3iArray( gl, v ) {\n\n\tgl.uniform3iv( this.addr, v );\n\n}\n\nfunction setValueV4iArray( gl, v ) {\n\n\tgl.uniform4iv( this.addr, v );\n\n}\n\n// Array of unsigned integer\n\nfunction setValueV1uiArray( gl, v ) {\n\n\tgl.uniform1uiv( this.addr, v );\n\n}\n\n// Array of unsigned integer vectors (from flat array)\n\nfunction setValueV2uiArray( gl, v ) {\n\n\tgl.uniform2uiv( this.addr, v );\n\n}\n\nfunction setValueV3uiArray( gl, v ) {\n\n\tgl.uniform3uiv( this.addr, v );\n\n}\n\nfunction setValueV4uiArray( gl, v ) {\n\n\tgl.uniform4uiv( this.addr, v );\n\n}\n\n\n// Array of textures (2D / 3D / Cube / 2DArray)\n\nfunction setValueT1Array( gl, v, textures ) {\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT3DArray( gl, v, textures ) {\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT6Array( gl, v, textures ) {\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT2DArrayArray( gl, v, textures ) {\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );\n\n\t}\n\n}\n\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\tcase 0x1405: return setValueV1uiArray; // UINT\n\t\tcase 0x8dc6: return setValueV2uiArray; // _VEC2\n\t\tcase 0x8dc7: return setValueV3uiArray; // _VEC3\n\t\tcase 0x8dc8: return setValueV4uiArray; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1Array;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3DArray;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6Array;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArrayArray;\n\n\t}\n\n}\n\n// --- Uniform Classes ---\n\nfunction SingleUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.cache = [];\n\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.cache = [];\n\tthis.size = activeInfo.size;\n\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\tconst cache = this.cache;\n\n\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\tthis.cache = new Float32Array( data.length );\n\n\t}\n\n\tcopyArray( cache, data );\n\n};\n\nfunction StructuredUniform( id ) {\n\n\tthis.id = id;\n\n\tthis.seq = [];\n\tthis.map = {};\n\n}\n\nStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\tconst seq = this.seq;\n\n\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tconst u = seq[ i ];\n\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t}\n\n};\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform( container, uniformObject ) {\n\n\tcontainer.seq.push( uniformObject );\n\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n}\n\nfunction parseUniform( activeInfo, addr, container ) {\n\n\tconst path = activeInfo.name,\n\t\tpathLength = path.length;\n\n\t// reset RegExp object, because of the early exit of a previous run\n\tRePathPart.lastIndex = 0;\n\n\twhile ( true ) {\n\n\t\tconst match = RePathPart.exec( path ),\n\t\t\tmatchEnd = RePathPart.lastIndex;\n\n\t\tlet id = match[ 1 ];\n\t\tconst idIsIndex = match[ 2 ] === ']',\n\t\t\tsubscript = match[ 3 ];\n\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\tbreak;\n\n\t\t} else {\n\n\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\tconst map = container.map;\n\t\t\tlet next = map[ id ];\n\n\t\t\tif ( next === undefined ) {\n\n\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\taddUniform( container, next );\n\n\t\t\t}\n\n\t\t\tcontainer = next;\n\n\t\t}\n\n\t}\n\n}\n\n// Root Container\n\nfunction WebGLUniforms( gl, program ) {\n\n\tthis.seq = [];\n\tthis.map = {};\n\n\tconst n = gl.getProgramParameter( program, 35718 );\n\n\tfor ( let i = 0; i < n; ++ i ) {\n\n\t\tconst info = gl.getActiveUniform( program, i ),\n\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\tparseUniform( info, addr, this );\n\n\t}\n\n}\n\nWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\tconst u = this.map[ name ];\n\n\tif ( u !== undefined ) u.setValue( gl, value, textures );\n\n};\n\nWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\tconst v = object[ name ];\n\n\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n};\n\n\n// Static interface\n\nWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tconst u = seq[ i ],\n\t\t\tv = values[ u.id ];\n\n\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t}\n\n\t}\n\n};\n\nWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\tconst r = [];\n\n\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tconst u = seq[ i ];\n\t\tif ( u.id in values ) r.push( u );\n\n\t}\n\n\treturn r;\n\n};\n\nfunction WebGLShader( gl, type, string ) {\n\n\tconst shader = gl.createShader( type );\n\n\tgl.shaderSource( shader, string );\n\tgl.compileShader( shader );\n\n\treturn shader;\n\n}\n\nlet programIdCount = 0;\n\nfunction handleSource( string, errorLine ) {\n\n\tconst lines = string.split( '\\n' );\n\tconst lines2 = [];\n\n\tconst from = Math.max( errorLine - 6, 0 );\n\tconst to = Math.min( errorLine + 6, lines.length );\n\n\tfor ( let i = from; i < to; i ++ ) {\n\n\t\tlines2.push( ( i + 1 ) + ': ' + lines[ i ] );\n\n\t}\n\n\treturn lines2.join( '\\n' );\n\n}\n\nfunction getEncodingComponents( encoding ) {\n\n\tswitch ( encoding ) {\n\n\t\tcase LinearEncoding:\n\t\t\treturn [ 'Linear', '( value )' ];\n\t\tcase sRGBEncoding:\n\t\t\treturn [ 'sRGB', '( value )' ];\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );\n\t\t\treturn [ 'Linear', '( value )' ];\n\n\t}\n\n}\n\nfunction getShaderErrors( gl, shader, type ) {\n\n\tconst status = gl.getShaderParameter( shader, 35713 );\n\tconst errors = gl.getShaderInfoLog( shader ).trim();\n\n\tif ( status && errors === '' ) return '';\n\n\tconst errorLine = parseInt( /ERROR: 0:(\\d+)/.exec( errors )[ 1 ] );\n\n\t// --enable-privileged-webgl-extension\n\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + handleSource( gl.getShaderSource( shader ), errorLine );\n\n}\n\nfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\tconst components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n}\n\nfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\tlet toneMappingName;\n\n\tswitch ( toneMapping ) {\n\n\t\tcase LinearToneMapping:\n\t\t\ttoneMappingName = 'Linear';\n\t\t\tbreak;\n\n\t\tcase ReinhardToneMapping:\n\t\t\ttoneMappingName = 'Reinhard';\n\t\t\tbreak;\n\n\t\tcase CineonToneMapping:\n\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\tbreak;\n\n\t\tcase ACESFilmicToneMapping:\n\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\tbreak;\n\n\t\tcase CustomToneMapping:\n\t\t\ttoneMappingName = 'Custom';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\n\t\t\ttoneMappingName = 'Linear';\n\n\t}\n\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n}\n\nfunction generateExtensions( parameters ) {\n\n\tconst chunks = [\n\t\t( parameters.extensionDerivatives || !! parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t];\n\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n}\n\nfunction generateDefines( defines ) {\n\n\tconst chunks = [];\n\n\tfor ( const name in defines ) {\n\n\t\tconst value = defines[ name ];\n\n\t\tif ( value === false ) continue;\n\n\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t}\n\n\treturn chunks.join( '\\n' );\n\n}\n\nfunction fetchAttributeLocations( gl, program ) {\n\n\tconst attributes = {};\n\n\tconst n = gl.getProgramParameter( program, 35721 );\n\n\tfor ( let i = 0; i < n; i ++ ) {\n\n\t\tconst info = gl.getActiveAttrib( program, i );\n\t\tconst name = info.name;\n\n\t\tlet locationSize = 1;\n\t\tif ( info.type === 35674 ) locationSize = 2;\n\t\tif ( info.type === 35675 ) locationSize = 3;\n\t\tif ( info.type === 35676 ) locationSize = 4;\n\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\tattributes[ name ] = {\n\t\t\ttype: info.type,\n\t\t\tlocation: gl.getAttribLocation( program, name ),\n\t\t\tlocationSize: locationSize\n\t\t};\n\n\t}\n\n\treturn attributes;\n\n}\n\nfunction filterEmptyLine( string ) {\n\n\treturn string !== '';\n\n}\n\nfunction replaceLightNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n}\n\nfunction replaceClippingPlaneNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n}\n\n// Resolve Includes\n\nconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\nfunction resolveIncludes( string ) {\n\n\treturn string.replace( includePattern, includeReplacer );\n\n}\n\nfunction includeReplacer( match, include ) {\n\n\tconst string = ShaderChunk[ include ];\n\n\tif ( string === undefined ) {\n\n\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t}\n\n\treturn resolveIncludes( string );\n\n}\n\n// Unroll Loops\n\nconst deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\nconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\nfunction unrollLoops( string ) {\n\n\treturn string\n\t\t.replace( unrollLoopPattern, loopReplacer )\n\t\t.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );\n\n}\n\nfunction deprecatedLoopReplacer( match, start, end, snippet ) {\n\n\tconsole.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );\n\treturn loopReplacer( match, start, end, snippet );\n\n}\n\nfunction loopReplacer( match, start, end, snippet ) {\n\n\tlet string = '';\n\n\tfor ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\tstring += snippet\n\t\t\t.replace( /\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]' )\n\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t}\n\n\treturn string;\n\n}\n\n//\n\nfunction generatePrecision( parameters ) {\n\n\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\tif ( parameters.precision === 'highp' ) {\n\n\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\n\t} else if ( parameters.precision === 'mediump' ) {\n\n\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\n\t} else if ( parameters.precision === 'lowp' ) {\n\n\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\n\t}\n\n\treturn precisionstring;\n\n}\n\nfunction generateShadowMapTypeDefine( parameters ) {\n\n\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t}\n\n\treturn shadowMapTypeDefine;\n\n}\n\nfunction generateEnvMapTypeDefine( parameters ) {\n\n\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeReflectionMapping:\n\t\t\tcase CubeRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\tbreak;\n\n\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapTypeDefine;\n\n}\n\nfunction generateEnvMapModeDefine( parameters ) {\n\n\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeRefractionMapping:\n\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapModeDefine;\n\n}\n\nfunction generateEnvMapBlendingDefine( parameters ) {\n\n\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.combine ) {\n\n\t\t\tcase MultiplyOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\tbreak;\n\n\t\t\tcase MixOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\tbreak;\n\n\t\t\tcase AddOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapBlendingDefine;\n\n}\n\nfunction generateCubeUVSize( parameters ) {\n\n\tconst imageHeight = parameters.envMapCubeUVHeight;\n\n\tif ( imageHeight === null ) return null;\n\n\tconst maxMip = Math.log2( imageHeight / 32 + 1 ) + 3;\n\n\tconst texelHeight = 1.0 / imageHeight;\n\n\tconst texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );\n\n\treturn { texelWidth, texelHeight, maxMip };\n\n}\n\nfunction WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\n\n\t// TODO Send this event to Three.js DevTools\n\t// console.log( 'WebGLProgram', cacheKey );\n\n\tconst gl = renderer.getContext();\n\n\tconst defines = parameters.defines;\n\n\tlet vertexShader = parameters.vertexShader;\n\tlet fragmentShader = parameters.fragmentShader;\n\n\tconst shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\tconst envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\tconst envMapModeDefine = generateEnvMapModeDefine( parameters );\n\tconst envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\tconst envMapCubeUVSize = generateCubeUVSize( parameters );\n\n\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\tconst customDefines = generateDefines( defines );\n\n\tconst program = gl.createProgram();\n\n\tlet prefixVertex, prefixFragment;\n\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\tif ( parameters.isRawShaderMaterial ) {\n\n\t\tprefixVertex = [\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\tprefixVertex += '\\n';\n\n\t\t}\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\tprefixFragment += '\\n';\n\n\t\t}\n\n\t} else {\n\n\t\tprefixVertex = [\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\tparameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',\n\n\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',\n\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t( parameters.morphColors && parameters.isWebGL2 ) ? '#define USE_MORPHCOLORS' : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t'\tattribute mat4 instanceMatrix;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_INSTANCING_COLOR',\n\n\t\t\t'\tattribute vec3 instanceColor;',\n\n\t\t\t'#endif',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec3 normal;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if defined( USE_COLOR_ALPHA )',\n\n\t\t\t'\tattribute vec4 color;',\n\n\t\t\t'#elif defined( USE_COLOR )',\n\n\t\t\t'\tattribute vec3 color;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',\n\n\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t'\t#else',\n\n\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t'\t#endif',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t'#endif',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\tparameters.clearcoat ? '#define USE_CLEARCOAT' : '',\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.alphaTest ? '#define USE_ALPHATEST' : '',\n\n\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\t\t\tparameters.opaque ? '#define OPAQUE' : '',\n\n\t\t\tShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tgetTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),\n\n\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tvertexShader = resolveIncludes( vertexShader );\n\tvertexShader = replaceLightNums( vertexShader, parameters );\n\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\tfragmentShader = resolveIncludes( fragmentShader );\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\tvertexShader = unrollLoops( vertexShader );\n\tfragmentShader = unrollLoops( fragmentShader );\n\n\tif ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {\n\n\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\n\t\tversionString = '#version 300 es\\n';\n\n\t\tprefixVertex = [\n\t\t\t'precision mediump sampler2DArray;',\n\t\t\t'#define attribute in',\n\t\t\t'#define varying out',\n\t\t\t'#define texture2D texture'\n\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\tprefixFragment = [\n\t\t\t'#define varying in',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t'#define texture2D texture',\n\t\t\t'#define textureCube texture',\n\t\t\t'#define texture2DProj textureProj',\n\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t}\n\n\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader;\n\n\t// console.log( '*VERTEX*', vertexGlsl );\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\tconst glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\tconst glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\tgl.attachShader( program, glVertexShader );\n\tgl.attachShader( program, glFragmentShader );\n\n\t// Force a particular attribute to index 0.\n\n\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t} else if ( parameters.morphTargets === true ) {\n\n\t\t// programs with morphTargets displace position out of attribute 0\n\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t}\n\n\tgl.linkProgram( program );\n\n\t// check for link errors\n\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\tconst programLog = gl.getProgramInfoLog( program ).trim();\n\t\tconst vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\tconst fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\tlet runnable = true;\n\t\tlet haveDiagnostics = true;\n\n\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconst vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\tconst fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\tconsole.error(\n\t\t\t\t'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +\n\t\t\t\t'VALIDATE_STATUS ' + gl.getProgramParameter( program, 35715 ) + '\\n\\n' +\n\t\t\t\t'Program Info Log: ' + programLog + '\\n' +\n\t\t\t\tvertexErrors + '\\n' +\n\t\t\t\tfragmentErrors\n\t\t\t);\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\t// Clean up\n\n\t// Crashes in iOS9 and iOS10. #18402\n\t// gl.detachShader( program, glVertexShader );\n\t// gl.detachShader( program, glFragmentShader );\n\n\tgl.deleteShader( glVertexShader );\n\tgl.deleteShader( glFragmentShader );\n\n\t// set up caching for uniform locations\n\n\tlet cachedUniforms;\n\n\tthis.getUniforms = function () {\n\n\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t}\n\n\t\treturn cachedUniforms;\n\n\t};\n\n\t// set up caching for attribute locations\n\n\tlet cachedAttributes;\n\n\tthis.getAttributes = function () {\n\n\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t}\n\n\t\treturn cachedAttributes;\n\n\t};\n\n\t// free resource\n\n\tthis.destroy = function () {\n\n\t\tbindingStates.releaseStatesOfProgram( this );\n\n\t\tgl.deleteProgram( program );\n\t\tthis.program = undefined;\n\n\t};\n\n\t//\n\n\tthis.name = parameters.shaderName;\n\tthis.id = programIdCount ++;\n\tthis.cacheKey = cacheKey;\n\tthis.usedTimes = 1;\n\tthis.program = program;\n\tthis.vertexShader = glVertexShader;\n\tthis.fragmentShader = glFragmentShader;\n\n\treturn this;\n\n}\n\nlet _id = 0;\n\nclass WebGLShaderCache {\n\n\tconstructor() {\n\n\t\tthis.shaderCache = new Map();\n\t\tthis.materialCache = new Map();\n\n\t}\n\n\tupdate( material ) {\n\n\t\tconst vertexShader = material.vertexShader;\n\t\tconst fragmentShader = material.fragmentShader;\n\n\t\tconst vertexShaderStage = this._getShaderStage( vertexShader );\n\t\tconst fragmentShaderStage = this._getShaderStage( fragmentShader );\n\n\t\tconst materialShaders = this._getShaderCacheForMaterial( material );\n\n\t\tif ( materialShaders.has( vertexShaderStage ) === false ) {\n\n\t\t\tmaterialShaders.add( vertexShaderStage );\n\t\t\tvertexShaderStage.usedTimes ++;\n\n\t\t}\n\n\t\tif ( materialShaders.has( fragmentShaderStage ) === false ) {\n\n\t\t\tmaterialShaders.add( fragmentShaderStage );\n\t\t\tfragmentShaderStage.usedTimes ++;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( material ) {\n\n\t\tconst materialShaders = this.materialCache.get( material );\n\n\t\tfor ( const shaderStage of materialShaders ) {\n\n\t\t\tshaderStage.usedTimes --;\n\n\t\t\tif ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );\n\n\t\t}\n\n\t\tthis.materialCache.delete( material );\n\n\t\treturn this;\n\n\t}\n\n\tgetVertexShaderID( material ) {\n\n\t\treturn this._getShaderStage( material.vertexShader ).id;\n\n\t}\n\n\tgetFragmentShaderID( material ) {\n\n\t\treturn this._getShaderStage( material.fragmentShader ).id;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shaderCache.clear();\n\t\tthis.materialCache.clear();\n\n\t}\n\n\t_getShaderCacheForMaterial( material ) {\n\n\t\tconst cache = this.materialCache;\n\n\t\tif ( cache.has( material ) === false ) {\n\n\t\t\tcache.set( material, new Set() );\n\n\t\t}\n\n\t\treturn cache.get( material );\n\n\t}\n\n\t_getShaderStage( code ) {\n\n\t\tconst cache = this.shaderCache;\n\n\t\tif ( cache.has( code ) === false ) {\n\n\t\t\tconst stage = new WebGLShaderStage( code );\n\t\t\tcache.set( code, stage );\n\n\t\t}\n\n\t\treturn cache.get( code );\n\n\t}\n\n}\n\nclass WebGLShaderStage {\n\n\tconstructor( code ) {\n\n\t\tthis.id = _id ++;\n\n\t\tthis.code = code;\n\t\tthis.usedTimes = 0;\n\n\t}\n\n}\n\nfunction WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {\n\n\tconst _programLayers = new Layers();\n\tconst _customShaders = new WebGLShaderCache();\n\tconst programs = [];\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\tconst floatVertexTextures = capabilities.floatVertexTextures;\n\tconst maxVertexUniforms = capabilities.maxVertexUniforms;\n\tconst vertexTextures = capabilities.vertexTextures;\n\tlet precision = capabilities.precision;\n\n\tconst shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'toon',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tMeshMatcapMaterial: 'matcap',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow',\n\t\tSpriteMaterial: 'sprite'\n\t};\n\n\tfunction getMaxBones( object ) {\n\n\t\tconst skeleton = object.skeleton;\n\t\tconst bones = skeleton.bones;\n\n\t\tif ( floatVertexTextures ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tconst nVertexUniforms = maxVertexUniforms;\n\t\t\tconst nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tconst maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getParameters( material, lights, shadows, scene, object ) {\n\n\t\tconst fog = scene.fog;\n\t\tconst geometry = object.geometry;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\tconst envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tconst maxBones = object.isSkinnedMesh ? getMaxBones( object ) : 0;\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\tlet morphTextureStride = 0;\n\n\t\tif ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;\n\t\tif ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;\n\t\tif ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;\n\n\t\t//\n\n\t\tlet vertexShader, fragmentShader;\n\t\tlet customVertexShaderID, customFragmentShaderID;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\n\t\t\tvertexShader = shader.vertexShader;\n\t\t\tfragmentShader = shader.fragmentShader;\n\n\t\t} else {\n\n\t\t\tvertexShader = material.vertexShader;\n\t\t\tfragmentShader = material.fragmentShader;\n\n\t\t\t_customShaders.update( material );\n\n\t\t\tcustomVertexShaderID = _customShaders.getVertexShaderID( material );\n\t\t\tcustomFragmentShaderID = _customShaders.getFragmentShaderID( material );\n\n\t\t}\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tconst useAlphaTest = material.alphaTest > 0;\n\t\tconst useClearcoat = material.clearcoat > 0;\n\n\t\tconst parameters = {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tshaderID: shaderID,\n\t\t\tshaderName: material.type,\n\n\t\t\tvertexShader: vertexShader,\n\t\t\tfragmentShader: fragmentShader,\n\t\t\tdefines: material.defines,\n\n\t\t\tcustomVertexShaderID: customVertexShaderID,\n\t\t\tcustomFragmentShaderID: customFragmentShaderID,\n\n\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\tglslVersion: material.glslVersion,\n\n\t\t\tprecision: precision,\n\n\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\n\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\toutputEncoding: ( currentRenderTarget === null ) ? renderer.outputEncoding : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.encoding : LinearEncoding ),\n\t\t\tmap: !! material.map,\n\t\t\tmatcap: !! material.matcap,\n\t\t\tenvMap: !! envMap,\n\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\tenvMapCubeUVHeight: envMapCubeUVHeight,\n\t\t\tlightMap: !! material.lightMap,\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\n\t\t\tdecodeVideoTexture: !! material.map && ( material.map.isVideoTexture === true ) && ( material.map.encoding === sRGBEncoding ),\n\n\t\t\tclearcoat: useClearcoat,\n\t\t\tclearcoatMap: useClearcoat && !! material.clearcoatMap,\n\t\t\tclearcoatRoughnessMap: useClearcoat && !! material.clearcoatRoughnessMap,\n\t\t\tclearcoatNormalMap: useClearcoat && !! material.clearcoatNormalMap,\n\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\tspecularIntensityMap: !! material.specularIntensityMap,\n\t\t\tspecularColorMap: !! material.specularColorMap,\n\n\t\t\topaque: material.transparent === false && material.blending === NormalBlending,\n\n\t\t\talphaMap: !! material.alphaMap,\n\t\t\talphaTest: useAlphaTest,\n\n\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\tsheen: material.sheen > 0,\n\t\t\tsheenColorMap: !! material.sheenColorMap,\n\t\t\tsheenRoughnessMap: !! material.sheenRoughnessMap,\n\n\t\t\ttransmission: material.transmission > 0,\n\t\t\ttransmissionMap: !! material.transmissionMap,\n\t\t\tthicknessMap: !! material.thicknessMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexTangents: ( !! material.normalMap && !! geometry.attributes.tangent ),\n\t\t\tvertexColors: material.vertexColors,\n\t\t\tvertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,\n\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || !! material.sheenColorMap || !! material.sheenRoughnessMap,\n\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || material.transmission > 0 || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || material.sheen > 0 || !! material.sheenColorMap || !! material.sheenRoughnessMap ) && !! material.displacementMap,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: !! material.flatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tskinning: object.isSkinnedMesh === true && maxBones > 0,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\tmorphTargets: geometry.morphAttributes.position !== undefined,\n\t\t\tmorphNormals: geometry.morphAttributes.normal !== undefined,\n\t\t\tmorphColors: geometry.morphAttributes.color !== undefined,\n\t\t\tmorphTargetsCount: morphTargetsCount,\n\t\t\tmorphTextureStride: morphTextureStride,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\tnumClipIntersection: clipping.numIntersection,\n\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),\n\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),\n\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),\n\n\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\n\t\t};\n\n\t\treturn parameters;\n\n\t}\n\n\tfunction getProgramCacheKey( parameters ) {\n\n\t\tconst array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( parameters.customVertexShaderID );\n\t\t\tarray.push( parameters.customFragmentShaderID );\n\n\t\t}\n\n\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\tfor ( const name in parameters.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parameters.isRawShaderMaterial === false ) {\n\n\t\t\tgetProgramCacheKeyParameters( array, parameters );\n\t\t\tgetProgramCacheKeyBooleans( array, parameters );\n\t\t\tarray.push( renderer.outputEncoding );\n\n\t\t}\n\n\t\tarray.push( parameters.customProgramCacheKey );\n\n\t\treturn array.join();\n\n\t}\n\n\tfunction getProgramCacheKeyParameters( array, parameters ) {\n\n\t\tarray.push( parameters.precision );\n\t\tarray.push( parameters.outputEncoding );\n\t\tarray.push( parameters.envMapMode );\n\t\tarray.push( parameters.envMapCubeUVHeight );\n\t\tarray.push( parameters.combine );\n\t\tarray.push( parameters.vertexUvs );\n\t\tarray.push( parameters.fogExp2 );\n\t\tarray.push( parameters.sizeAttenuation );\n\t\tarray.push( parameters.maxBones );\n\t\tarray.push( parameters.morphTargetsCount );\n\t\tarray.push( parameters.morphAttributeCount );\n\t\tarray.push( parameters.numDirLights );\n\t\tarray.push( parameters.numPointLights );\n\t\tarray.push( parameters.numSpotLights );\n\t\tarray.push( parameters.numHemiLights );\n\t\tarray.push( parameters.numRectAreaLights );\n\t\tarray.push( parameters.numDirLightShadows );\n\t\tarray.push( parameters.numPointLightShadows );\n\t\tarray.push( parameters.numSpotLightShadows );\n\t\tarray.push( parameters.shadowMapType );\n\t\tarray.push( parameters.toneMapping );\n\t\tarray.push( parameters.numClippingPlanes );\n\t\tarray.push( parameters.numClipIntersection );\n\n\t}\n\n\tfunction getProgramCacheKeyBooleans( array, parameters ) {\n\n\t\t_programLayers.disableAll();\n\n\t\tif ( parameters.isWebGL2 )\n\t\t\t_programLayers.enable( 0 );\n\t\tif ( parameters.supportsVertexTextures )\n\t\t\t_programLayers.enable( 1 );\n\t\tif ( parameters.instancing )\n\t\t\t_programLayers.enable( 2 );\n\t\tif ( parameters.instancingColor )\n\t\t\t_programLayers.enable( 3 );\n\t\tif ( parameters.map )\n\t\t\t_programLayers.enable( 4 );\n\t\tif ( parameters.matcap )\n\t\t\t_programLayers.enable( 5 );\n\t\tif ( parameters.envMap )\n\t\t\t_programLayers.enable( 6 );\n\t\tif ( parameters.lightMap )\n\t\t\t_programLayers.enable( 7 );\n\t\tif ( parameters.aoMap )\n\t\t\t_programLayers.enable( 8 );\n\t\tif ( parameters.emissiveMap )\n\t\t\t_programLayers.enable( 9 );\n\t\tif ( parameters.bumpMap )\n\t\t\t_programLayers.enable( 10 );\n\t\tif ( parameters.normalMap )\n\t\t\t_programLayers.enable( 11 );\n\t\tif ( parameters.objectSpaceNormalMap )\n\t\t\t_programLayers.enable( 12 );\n\t\tif ( parameters.tangentSpaceNormalMap )\n\t\t\t_programLayers.enable( 13 );\n\t\tif ( parameters.clearcoat )\n\t\t\t_programLayers.enable( 14 );\n\t\tif ( parameters.clearcoatMap )\n\t\t\t_programLayers.enable( 15 );\n\t\tif ( parameters.clearcoatRoughnessMap )\n\t\t\t_programLayers.enable( 16 );\n\t\tif ( parameters.clearcoatNormalMap )\n\t\t\t_programLayers.enable( 17 );\n\t\tif ( parameters.displacementMap )\n\t\t\t_programLayers.enable( 18 );\n\t\tif ( parameters.specularMap )\n\t\t\t_programLayers.enable( 19 );\n\t\tif ( parameters.roughnessMap )\n\t\t\t_programLayers.enable( 20 );\n\t\tif ( parameters.metalnessMap )\n\t\t\t_programLayers.enable( 21 );\n\t\tif ( parameters.gradientMap )\n\t\t\t_programLayers.enable( 22 );\n\t\tif ( parameters.alphaMap )\n\t\t\t_programLayers.enable( 23 );\n\t\tif ( parameters.alphaTest )\n\t\t\t_programLayers.enable( 24 );\n\t\tif ( parameters.vertexColors )\n\t\t\t_programLayers.enable( 25 );\n\t\tif ( parameters.vertexAlphas )\n\t\t\t_programLayers.enable( 26 );\n\t\tif ( parameters.vertexUvs )\n\t\t\t_programLayers.enable( 27 );\n\t\tif ( parameters.vertexTangents )\n\t\t\t_programLayers.enable( 28 );\n\t\tif ( parameters.uvsVertexOnly )\n\t\t\t_programLayers.enable( 29 );\n\t\tif ( parameters.fog )\n\t\t\t_programLayers.enable( 30 );\n\n\t\tarray.push( _programLayers.mask );\n\t\t_programLayers.disableAll();\n\n\t\tif ( parameters.useFog )\n\t\t\t_programLayers.enable( 0 );\n\t\tif ( parameters.flatShading )\n\t\t\t_programLayers.enable( 1 );\n\t\tif ( parameters.logarithmicDepthBuffer )\n\t\t\t_programLayers.enable( 2 );\n\t\tif ( parameters.skinning )\n\t\t\t_programLayers.enable( 3 );\n\t\tif ( parameters.useVertexTexture )\n\t\t\t_programLayers.enable( 4 );\n\t\tif ( parameters.morphTargets )\n\t\t\t_programLayers.enable( 5 );\n\t\tif ( parameters.morphNormals )\n\t\t\t_programLayers.enable( 6 );\n\t\tif ( parameters.morphColors )\n\t\t\t_programLayers.enable( 7 );\n\t\tif ( parameters.premultipliedAlpha )\n\t\t\t_programLayers.enable( 8 );\n\t\tif ( parameters.shadowMapEnabled )\n\t\t\t_programLayers.enable( 9 );\n\t\tif ( parameters.physicallyCorrectLights )\n\t\t\t_programLayers.enable( 10 );\n\t\tif ( parameters.doubleSided )\n\t\t\t_programLayers.enable( 11 );\n\t\tif ( parameters.flipSided )\n\t\t\t_programLayers.enable( 12 );\n\t\tif ( parameters.depthPacking )\n\t\t\t_programLayers.enable( 13 );\n\t\tif ( parameters.dithering )\n\t\t\t_programLayers.enable( 14 );\n\t\tif ( parameters.specularIntensityMap )\n\t\t\t_programLayers.enable( 15 );\n\t\tif ( parameters.specularColorMap )\n\t\t\t_programLayers.enable( 16 );\n\t\tif ( parameters.transmission )\n\t\t\t_programLayers.enable( 17 );\n\t\tif ( parameters.transmissionMap )\n\t\t\t_programLayers.enable( 18 );\n\t\tif ( parameters.thicknessMap )\n\t\t\t_programLayers.enable( 19 );\n\t\tif ( parameters.sheen )\n\t\t\t_programLayers.enable( 20 );\n\t\tif ( parameters.sheenColorMap )\n\t\t\t_programLayers.enable( 21 );\n\t\tif ( parameters.sheenRoughnessMap )\n\t\t\t_programLayers.enable( 22 );\n\t\tif ( parameters.decodeVideoTexture )\n\t\t\t_programLayers.enable( 23 );\n\t\tif ( parameters.opaque )\n\t\t\t_programLayers.enable( 24 );\n\n\t\tarray.push( _programLayers.mask );\n\n\t}\n\n\tfunction getUniforms( material ) {\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\t\tlet uniforms;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\t\t\tuniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t} else {\n\n\t\t\tuniforms = material.uniforms;\n\n\t\t}\n\n\t\treturn uniforms;\n\n\t}\n\n\tfunction acquireProgram( parameters, cacheKey ) {\n\n\t\tlet program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( let p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tconst preexistingProgram = programs[ p ];\n\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\tfunction releaseProgram( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tconst i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t}\n\n\tfunction releaseShaderCache( material ) {\n\n\t\t_customShaders.remove( material );\n\n\t}\n\n\tfunction dispose() {\n\n\t\t_customShaders.dispose();\n\n\t}\n\n\treturn {\n\t\tgetParameters: getParameters,\n\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\tgetUniforms: getUniforms,\n\t\tacquireProgram: acquireProgram,\n\t\treleaseProgram: releaseProgram,\n\t\treleaseShaderCache: releaseShaderCache,\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tprograms: programs,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLProperties() {\n\n\tlet properties = new WeakMap();\n\n\tfunction get( object ) {\n\n\t\tlet map = properties.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tfunction remove( object ) {\n\n\t\tproperties.delete( object );\n\n\t}\n\n\tfunction update( object, key, value ) {\n\n\t\tproperties.get( object )[ key ] = value;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tproperties = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\n\nfunction WebGLRenderList() {\n\n\tconst renderItems = [];\n\tlet renderItemsIndex = 0;\n\n\tconst opaque = [];\n\tconst transmissive = [];\n\tconst transparent = [];\n\n\tfunction init() {\n\n\t\trenderItemsIndex = 0;\n\n\t\topaque.length = 0;\n\t\ttransmissive.length = 0;\n\t\ttransparent.length = 0;\n\n\t}\n\n\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\tlet renderItem = renderItems[ renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\trenderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.push( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.push( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.push( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.unshift( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.unshift( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.unshift( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\tif ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );\n\t\tif ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );\n\t\tif ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );\n\n\t}\n\n\tfunction finish() {\n\n\t\t// Clear references from inactive renderItems in the list\n\n\t\tfor ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = renderItems[ i ];\n\n\t\t\tif ( renderItem.id === null ) break;\n\n\t\t\trenderItem.id = null;\n\t\t\trenderItem.object = null;\n\t\t\trenderItem.geometry = null;\n\t\t\trenderItem.material = null;\n\t\t\trenderItem.group = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\topaque: opaque,\n\t\ttransmissive: transmissive,\n\t\ttransparent: transparent,\n\n\t\tinit: init,\n\t\tpush: push,\n\t\tunshift: unshift,\n\t\tfinish: finish,\n\n\t\tsort: sort\n\t};\n\n}\n\nfunction WebGLRenderLists() {\n\n\tlet lists = new WeakMap();\n\n\tfunction get( scene, renderCallDepth ) {\n\n\t\tlet list;\n\n\t\tif ( lists.has( scene ) === false ) {\n\n\t\t\tlist = new WebGLRenderList();\n\t\t\tlists.set( scene, [ list ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= lists.get( scene ).length ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists.get( scene ).push( list );\n\n\t\t\t} else {\n\n\t\t\t\tlist = lists.get( scene )[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tlists = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction UniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nfunction ShadowUniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\n\n\nlet nextVersion = 0;\n\nfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n}\n\nfunction WebGLLights( extensions, capabilities ) {\n\n\tconst cache = new UniformsCache();\n\n\tconst shadowCache = ShadowUniformsCache();\n\n\tconst state = {\n\n\t\tversion: 0,\n\n\t\thash: {\n\t\t\tdirectionalLength: - 1,\n\t\t\tpointLength: - 1,\n\t\t\tspotLength: - 1,\n\t\t\trectAreaLength: - 1,\n\t\t\themiLength: - 1,\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1\n\t\t},\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tprobe: [],\n\t\tdirectional: [],\n\t\tdirectionalShadow: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadow: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\trectArea: [],\n\t\trectAreaLTC1: null,\n\t\trectAreaLTC2: null,\n\t\tpoint: [],\n\t\tpointShadow: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: []\n\n\t};\n\n\tfor ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\n\n\tconst vector3 = new Vector3();\n\tconst matrix4 = new Matrix4();\n\tconst matrix42 = new Matrix4();\n\n\tfunction setup( lights, physicallyCorrectLights ) {\n\n\t\tlet r = 0, g = 0, b = 0;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tlet numDirectionalShadows = 0;\n\t\tlet numPointShadows = 0;\n\t\tlet numSpotShadows = 0;\n\n\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t// artist-friendly light intensity scaling factor\n\t\tconst scaleFactor = ( physicallyCorrectLights !== true ) ? Math.PI : 1;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tconst color = light.color;\n\t\t\tconst intensity = light.intensity;\n\t\t\tconst distance = light.distance;\n\n\t\t\tconst shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity * scaleFactor;\n\t\t\t\tg += color.g * intensity * scaleFactor;\n\t\t\t\tb += color.b * intensity * scaleFactor;\n\n\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\tfor ( let j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t}\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( rectAreaLength > 0 ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t// WebGL 2\n\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t} else {\n\n\t\t\t\t// WebGL 1\n\n\t\t\t\tif ( extensions.has( 'OES_texture_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t\t} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tconst hash = state.hash;\n\n\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\thash.pointLength !== pointLength ||\n\t\t\thash.spotLength !== spotLength ||\n\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\thash.hemiLength !== hemiLength ||\n\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\thash.directionalLength = directionalLength;\n\t\t\thash.pointLength = pointLength;\n\t\t\thash.spotLength = spotLength;\n\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\thash.hemiLength = hemiLength;\n\n\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\thash.numPointShadows = numPointShadows;\n\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\tstate.version = nextVersion ++;\n\n\t\t}\n\n\t}\n\n\tfunction setupView( lights, camera ) {\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = state.directional[ directionalLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = state.spot[ spotLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = state.rectArea[ rectAreaLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = state.point[ pointLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = state.hemi[ hemiLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tsetupView: setupView,\n\t\tstate: state\n\t};\n\n}\n\nfunction WebGLRenderState( extensions, capabilities ) {\n\n\tconst lights = new WebGLLights( extensions, capabilities );\n\n\tconst lightsArray = [];\n\tconst shadowsArray = [];\n\n\tfunction init() {\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\n\t}\n\n\tfunction pushLight( light ) {\n\n\t\tlightsArray.push( light );\n\n\t}\n\n\tfunction pushShadow( shadowLight ) {\n\n\t\tshadowsArray.push( shadowLight );\n\n\t}\n\n\tfunction setupLights( physicallyCorrectLights ) {\n\n\t\tlights.setup( lightsArray, physicallyCorrectLights );\n\n\t}\n\n\tfunction setupLightsView( camera ) {\n\n\t\tlights.setupView( lightsArray, camera );\n\n\t}\n\n\tconst state = {\n\t\tlightsArray: lightsArray,\n\t\tshadowsArray: shadowsArray,\n\n\t\tlights: lights\n\t};\n\n\treturn {\n\t\tinit: init,\n\t\tstate: state,\n\t\tsetupLights: setupLights,\n\t\tsetupLightsView: setupLightsView,\n\n\t\tpushLight: pushLight,\n\t\tpushShadow: pushShadow\n\t};\n\n}\n\nfunction WebGLRenderStates( extensions, capabilities ) {\n\n\tlet renderStates = new WeakMap();\n\n\tfunction get( scene, renderCallDepth = 0 ) {\n\n\t\tlet renderState;\n\n\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\trenderStates.set( scene, [ renderState ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= renderStates.get( scene ).length ) {\n\n\t\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\t\trenderStates.get( scene ).push( renderState );\n\n\t\t\t} else {\n\n\t\t\t\trenderState = renderStates.get( scene )[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn renderState;\n\n\t}\n\n\tfunction dispose() {\n\n\t\trenderStates = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nclass MeshDepthMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\nclass MeshDistanceMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\nconst vertex = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\nconst fragment = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tconst float samples = float( VSM_SAMPLES );\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\nfunction WebGLShadowMap( _renderer, _objects, _capabilities ) {\n\n\tlet _frustum = new Frustum();\n\n\tconst _shadowMapSize = new Vector2(),\n\t\t_viewportSize = new Vector2(),\n\n\t\t_viewport = new Vector4(),\n\n\t\t_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),\n\t\t_distanceMaterial = new MeshDistanceMaterial(),\n\n\t\t_materialCache = {},\n\n\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\tconst shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\tconst shadowMaterialVertical = new ShaderMaterial( {\n\t\tdefines: {\n\t\t\tVSM_SAMPLES: 8\n\t\t},\n\t\tuniforms: {\n\t\t\tshadow_pass: { value: null },\n\t\t\tresolution: { value: new Vector2() },\n\t\t\tradius: { value: 4.0 }\n\t\t},\n\n\t\tvertexShader: vertex,\n\t\tfragmentShader: fragment\n\n\t} );\n\n\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\n\tconst fullScreenTri = new BufferGeometry();\n\tfullScreenTri.setAttribute(\n\t\t'position',\n\t\tnew BufferAttribute(\n\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t3\n\t\t)\n\t);\n\n\tconst fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\tconst scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = PCFShadowMap;\n\n\tthis.render = function ( lights, scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( lights.length === 0 ) return;\n\n\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\tconst _state = _renderer.state;\n\n\t\t// Set GL state for depth map.\n\t\t_state.setBlending( NoBlending );\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t_state.buffers.depth.setTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tfor ( let i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\t\t\tconst shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\tif ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\tif ( _shadowMapSize.x > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\n\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tconst pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\n\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\tfor ( let vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\tconst viewport = shadow.getViewport( vp );\n\n\t\t\t\t_viewport.set(\n\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t);\n\n\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t}\n\n\t\t\t// do blur pass for VSM\n\n\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t}\n\n\t\t\tshadow.needsUpdate = false;\n\n\t\t}\n\n\t\tscope.needsUpdate = false;\n\n\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t};\n\n\tfunction VSMPass( shadow, camera ) {\n\n\t\tconst geometry = _objects.update( fullScreenMesh );\n\n\t\tif ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {\n\n\t\t\tshadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;\n\t\t\tshadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;\n\n\t\t\tshadowMaterialVertical.needsUpdate = true;\n\t\t\tshadowMaterialHorizontal.needsUpdate = true;\n\n\t\t}\n\n\t\t// vertical pass\n\n\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t// horizontal pass\n\n\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.map );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );\n\n\t}\n\n\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\tlet result = null;\n\n\t\tconst customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;\n\n\t\tif ( customMaterial !== undefined ) {\n\n\t\t\tresult = customMaterial;\n\n\t\t} else {\n\n\t\t\tresult = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;\n\n\t\t}\n\n\t\tif ( ( _renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 ) ||\n\t\t\t( material.displacementMap && material.displacementScale !== 0 ) ||\n\t\t\t( material.alphaMap && material.alphaTest > 0 ) ) {\n\n\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t// appropriate state\n\n\t\t\tconst keyA = result.uuid, keyB = material.uuid;\n\n\t\t\tlet materialsForVariant = _materialCache[ keyA ];\n\n\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t}\n\n\t\t\tlet cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult = cachedMaterial;\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tif ( type === VSMShadowMap ) {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t} else {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t}\n\n\t\tresult.alphaMap = material.alphaMap;\n\t\tresult.alphaTest = material.alphaTest;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\tresult.displacementMap = material.displacementMap;\n\t\tresult.displacementScale = material.displacementScale;\n\t\tresult.displacementBias = material.displacementBias;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\tconst geometry = _objects.update( object );\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\tfor ( let k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ k ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t}\n\n\t}\n\n}\n\nfunction WebGLState( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction ColorBuffer() {\n\n\t\tlet locked = false;\n\n\t\tconst color = new Vector4();\n\t\tlet currentColorMask = null;\n\t\tconst currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentDepthMask = null;\n\t\tlet currentDepthFunc = null;\n\t\tlet currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentStencilMask = null;\n\t\tlet currentStencilFunc = null;\n\t\tlet currentStencilRef = null;\n\t\tlet currentStencilFuncMask = null;\n\t\tlet currentStencilFail = null;\n\t\tlet currentStencilZFail = null;\n\t\tlet currentStencilZPass = null;\n\t\tlet currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef !== stencilRef ||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail !== stencilFail ||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tconst colorBuffer = new ColorBuffer();\n\tconst depthBuffer = new DepthBuffer();\n\tconst stencilBuffer = new StencilBuffer();\n\n\tlet enabledCapabilities = {};\n\n\tlet currentBoundFramebuffers = {};\n\tlet currentDrawbuffers = new WeakMap();\n\tlet defaultDrawbuffers = [];\n\n\tlet currentProgram = null;\n\n\tlet currentBlendingEnabled = false;\n\tlet currentBlending = null;\n\tlet currentBlendEquation = null;\n\tlet currentBlendSrc = null;\n\tlet currentBlendDst = null;\n\tlet currentBlendEquationAlpha = null;\n\tlet currentBlendSrcAlpha = null;\n\tlet currentBlendDstAlpha = null;\n\tlet currentPremultipledAlpha = false;\n\n\tlet currentFlipSided = null;\n\tlet currentCullFace = null;\n\n\tlet currentLineWidth = null;\n\n\tlet currentPolygonOffsetFactor = null;\n\tlet currentPolygonOffsetUnits = null;\n\n\tconst maxTextures = gl.getParameter( 35661 );\n\n\tlet lineWidthAvailable = false;\n\tlet version = 0;\n\tconst glVersion = gl.getParameter( 7938 );\n\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^WebGL (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^OpenGL ES (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t}\n\n\tlet currentTextureSlot = null;\n\tlet currentBoundTextures = {};\n\n\tconst scissorParam = gl.getParameter( 3088 );\n\tconst viewportParam = gl.getParameter( 2978 );\n\n\tconst currentScissor = new Vector4().fromArray( scissorParam );\n\tconst currentViewport = new Vector4().fromArray( viewportParam );\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tconst data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tconst texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, 10241, 9728 );\n\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tconst emptyTextures = {};\n\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( 2929 );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( 2884 );\n\n\tsetBlending( NoBlending );\n\n\t//\n\n\tfunction enable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction bindFramebuffer( target, framebuffer ) {\n\n\t\tif ( currentBoundFramebuffers[ target ] !== framebuffer ) {\n\n\t\t\tgl.bindFramebuffer( target, framebuffer );\n\n\t\t\tcurrentBoundFramebuffers[ target ] = framebuffer;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t// 36009 is equivalent to 36160\n\n\t\t\t\tif ( target === 36009 ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ 36160 ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t\tif ( target === 36160 ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ 36009 ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction drawBuffers( renderTarget, framebuffer ) {\n\n\t\tlet drawBuffers = defaultDrawbuffers;\n\n\t\tlet needsUpdate = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tdrawBuffers = currentDrawbuffers.get( framebuffer );\n\n\t\t\tif ( drawBuffers === undefined ) {\n\n\t\t\t\tdrawBuffers = [];\n\t\t\t\tcurrentDrawbuffers.set( framebuffer, drawBuffers );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\tif ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== 36064 ) {\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tdrawBuffers[ i ] = 36064 + i;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdrawBuffers.length = textures.length;\n\n\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( drawBuffers[ 0 ] !== 36064 ) {\n\n\t\t\t\t\tdrawBuffers[ 0 ] = 36064;\n\n\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( drawBuffers[ 0 ] !== 1029 ) {\n\n\t\t\t\tdrawBuffers[ 0 ] = 1029;\n\n\t\t\t\tneedsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tgl.drawBuffers( drawBuffers );\n\n\t\t\t} else {\n\n\t\t\t\textensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( drawBuffers );\n\n\t\t\t}\n\n\t\t}\n\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tconst equationToGL = {\n\t\t[ AddEquation ]: 32774,\n\t\t[ SubtractEquation ]: 32778,\n\t\t[ ReverseSubtractEquation ]: 32779\n\t};\n\n\tif ( isWebGL2 ) {\n\n\t\tequationToGL[ MinEquation ] = 32775;\n\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t} else {\n\n\t\tconst extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t}\n\n\t}\n\n\tconst factorToGL = {\n\t\t[ ZeroFactor ]: 0,\n\t\t[ OneFactor ]: 1,\n\t\t[ SrcColorFactor ]: 768,\n\t\t[ SrcAlphaFactor ]: 770,\n\t\t[ SrcAlphaSaturateFactor ]: 776,\n\t\t[ DstColorFactor ]: 774,\n\t\t[ DstAlphaFactor ]: 772,\n\t\t[ OneMinusSrcColorFactor ]: 769,\n\t\t[ OneMinusSrcAlphaFactor ]: 771,\n\t\t[ OneMinusDstColorFactor ]: 775,\n\t\t[ OneMinusDstAlphaFactor ]: 773\n\t};\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( currentBlendingEnabled === true ) {\n\n\t\t\t\tdisable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( currentBlendingEnabled === false ) {\n\n\t\t\tenable( 3042 );\n\t\t\tcurrentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 769, 0, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 769, 0, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\tcurrentBlendDst = blendDst;\n\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = null;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( 2884 )\n\t\t\t: enable( 2884 );\n\n\t\tlet flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? setBlending( NoBlending )\n\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tconst stencilWrite = material.stencilWrite;\n\t\tstencilBuffer.setTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\tmaterial.alphaToCoverage === true\n\t\t\t? enable( 32926 )\n\t\t\t: disable( 32926 );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( 2884 );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 2884 );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( 32823 );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 32823 );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( 3089 );\n\n\t\t} else {\n\n\t\t\tdisable( 3089 );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === null ) {\n\n\t\t\tactiveTexture();\n\n\t\t}\n\n\t\tlet boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction unbindTexture() {\n\n\t\tconst boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\tboundTexture.type = undefined;\n\t\t\tboundTexture.texture = undefined;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texSubImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texSubImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texSubImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texSubImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexSubImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexSubImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texStorage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texStorage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texStorage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texStorage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\t// reset state\n\n\t\tgl.disable( 3042 );\n\t\tgl.disable( 2884 );\n\t\tgl.disable( 2929 );\n\t\tgl.disable( 32823 );\n\t\tgl.disable( 3089 );\n\t\tgl.disable( 2960 );\n\t\tgl.disable( 32926 );\n\n\t\tgl.blendEquation( 32774 );\n\t\tgl.blendFunc( 1, 0 );\n\t\tgl.blendFuncSeparate( 1, 0, 1, 0 );\n\n\t\tgl.colorMask( true, true, true, true );\n\t\tgl.clearColor( 0, 0, 0, 0 );\n\n\t\tgl.depthMask( true );\n\t\tgl.depthFunc( 513 );\n\t\tgl.clearDepth( 1 );\n\n\t\tgl.stencilMask( 0xffffffff );\n\t\tgl.stencilFunc( 519, 0, 0xffffffff );\n\t\tgl.stencilOp( 7680, 7680, 7680 );\n\t\tgl.clearStencil( 0 );\n\n\t\tgl.cullFace( 1029 );\n\t\tgl.frontFace( 2305 );\n\n\t\tgl.polygonOffset( 0, 0 );\n\n\t\tgl.activeTexture( 33984 );\n\n\t\tgl.bindFramebuffer( 36160, null );\n\n\t\tif ( isWebGL2 === true ) {\n\n\t\t\tgl.bindFramebuffer( 36009, null );\n\t\t\tgl.bindFramebuffer( 36008, null );\n\n\t\t}\n\n\t\tgl.useProgram( null );\n\n\t\tgl.lineWidth( 1 );\n\n\t\tgl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tgl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\t// reset internals\n\n\t\tenabledCapabilities = {};\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentBoundFramebuffers = {};\n\t\tcurrentDrawbuffers = new WeakMap();\n\t\tdefaultDrawbuffers = [];\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlendingEnabled = false;\n\t\tcurrentBlending = null;\n\t\tcurrentBlendEquation = null;\n\t\tcurrentBlendSrc = null;\n\t\tcurrentBlendDst = null;\n\t\tcurrentBlendEquationAlpha = null;\n\t\tcurrentBlendSrcAlpha = null;\n\t\tcurrentBlendDstAlpha = null;\n\t\tcurrentPremultipledAlpha = false;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcurrentLineWidth = null;\n\n\t\tcurrentPolygonOffsetFactor = null;\n\t\tcurrentPolygonOffsetUnits = null;\n\n\t\tcurrentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tcurrentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tenable: enable,\n\t\tdisable: disable,\n\n\t\tbindFramebuffer: bindFramebuffer,\n\t\tdrawBuffers: drawBuffers,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tunbindTexture: unbindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\ttexImage2D: texImage2D,\n\t\ttexImage3D: texImage3D,\n\n\t\ttexStorage2D: texStorage2D,\n\t\ttexStorage3D: texStorage3D,\n\t\ttexSubImage2D: texSubImage2D,\n\t\ttexSubImage3D: texSubImage3D,\n\t\tcompressedTexSubImage2D: compressedTexSubImage2D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst maxTextures = capabilities.maxTextures;\n\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\tconst maxTextureSize = capabilities.maxTextureSize;\n\tconst maxSamples = capabilities.maxSamples;\n\tconst multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;\n\tconst supportsInvalidateFramebuffer = /OculusBrowser/g.test( navigator.userAgent );\n\n\tconst _videoTextures = new WeakMap();\n\tlet _canvas;\n\n\tconst _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\tlet useOffscreenCanvas = false;\n\n\ttry {\n\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\n\n\t} catch ( err ) {\n\n\t\t// Ignore any errors\n\n\t}\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\tnew OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\tlet scale = 1;\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\n\t\t\t\tconst width = floor( scale * image.width );\n\t\t\t\tconst height = floor( scale * image.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo$1( image ) {\n\n\t\treturn isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( isWebGL2 ) return false;\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t}\n\n\tfunction getInternalFormat( internalFormatName, glFormat, glType, encoding, isVideoTexture = false ) {\n\n\t\tif ( isWebGL2 === false ) return glFormat;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === 6403 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 33326;\n\t\t\tif ( glType === 5131 ) internalFormat = 33325;\n\t\t\tif ( glType === 5121 ) internalFormat = 33321;\n\n\t\t}\n\n\t\tif ( glFormat === 33319 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 33328;\n\t\t\tif ( glType === 5131 ) internalFormat = 33327;\n\t\t\tif ( glType === 5121 ) internalFormat = 33323;\n\n\t\t}\n\n\t\tif ( glFormat === 6408 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 34836;\n\t\t\tif ( glType === 5131 ) internalFormat = 34842;\n\t\t\tif ( glType === 5121 ) internalFormat = ( encoding === sRGBEncoding && isVideoTexture === false ) ? 35907 : 32856;\n\t\t\tif ( glType === 32819 ) internalFormat = 32854;\n\t\t\tif ( glType === 32820 ) internalFormat = 32855;\n\n\t\t}\n\n\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\tinternalFormat === 33327 || internalFormat === 33328 ||\n\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\tfunction getMipLevels( texture, image, supportsMips ) {\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {\n\n\t\t\treturn Math.log2( Math.max( image.width, image.height ) ) + 1;\n\n\t\t} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {\n\n\t\t\t// user-defined mipmaps\n\n\t\t\treturn texture.mipmaps.length;\n\n\t\t} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {\n\n\t\t\treturn image.mipmaps.length;\n\n\t\t} else {\n\n\t\t\t// texture without mipmaps (only base level)\n\n\t\t\treturn 1;\n\n\t\t}\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn 9728;\n\n\t\t}\n\n\t\treturn 9729;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tconst renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t// check if it's necessary to remove the WebGLTexture object\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures ) {\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\t\t\twebglTexture.usedTimes --;\n\n\t\t\t// the WebGLTexture object is not used anymore, remove it\n\n\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\tdeleteTexture( texture );\n\n\t\t\t}\n\n\t\t\t// remove the weak map entry if no WebGLTexture uses the source anymore\n\n\t\t\tif ( Object.keys( webglTextures ).length === 0 ) {\n\n\t\t\t\t_sources.delete( source );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deleteTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\t\tdelete webglTextures[ textureProperties.__cacheKey ];\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\tfor ( let i = 0, il = texture.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachmentProperties = properties.get( texture[ i ] );\n\n\t\t\t\tif ( attachmentProperties.__webglTexture ) {\n\n\t\t\t\t\t_gl.deleteTexture( attachmentProperties.__webglTexture );\n\n\t\t\t\t\tinfo.memory.textures --;\n\n\t\t\t\t}\n\n\t\t\t\tproperties.remove( texture[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tlet textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tconst textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tfunction getTextureCacheKey( texture ) {\n\n\t\tconst array = [];\n\n\t\tarray.push( texture.wrapS );\n\t\tarray.push( texture.wrapT );\n\t\tarray.push( texture.magFilter );\n\t\tarray.push( texture.minFilter );\n\t\tarray.push( texture.anisotropy );\n\t\tarray.push( texture.internalFormat );\n\t\tarray.push( texture.format );\n\t\tarray.push( texture.type );\n\t\tarray.push( texture.generateMipmaps );\n\t\tarray.push( texture.premultiplyAlpha );\n\t\tarray.push( texture.flipY );\n\t\tarray.push( texture.unpackAlignment );\n\t\tarray.push( texture.encoding );\n\n\t\treturn array.join();\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tconst image = texture.image;\n\n\t\t\tif ( image === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t}\n\n\tconst wrappingToGL = {\n\t\t[ RepeatWrapping ]: 10497,\n\t\t[ ClampToEdgeWrapping ]: 33071,\n\t\t[ MirroredRepeatWrapping ]: 33648\n\t};\n\n\tconst filterToGL = {\n\t\t[ NearestFilter ]: 9728,\n\t\t[ NearestMipmapNearestFilter ]: 9984,\n\t\t[ NearestMipmapLinearFilter ]: 9986,\n\n\t\t[ LinearFilter ]: 9729,\n\t\t[ LinearMipmapNearestFilter ]: 9985,\n\t\t[ LinearMipmapLinearFilter ]: 9987\n\t};\n\n\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\tif ( supportsMips ) {\n\n\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t}\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\t\t\tif ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tlet forceUpload = false;\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t}\n\n\t\t// create Source <-> WebGLTextures mapping if necessary\n\n\t\tconst source = texture.source;\n\t\tlet webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures === undefined ) {\n\n\t\t\twebglTextures = {};\n\t\t\t_sources.set( source, webglTextures );\n\n\t\t}\n\n\t\t// check if there is already a WebGLTexture object for the given texture parameters\n\n\t\tconst textureCacheKey = getTextureCacheKey( texture );\n\n\t\tif ( textureCacheKey !== textureProperties.__cacheKey ) {\n\n\t\t\t// if not, create a new instance of WebGLTexture\n\n\t\t\tif ( webglTextures[ textureCacheKey ] === undefined ) {\n\n\t\t\t\t// create new entry\n\n\t\t\t\twebglTextures[ textureCacheKey ] = {\n\t\t\t\t\ttexture: _gl.createTexture(),\n\t\t\t\t\tusedTimes: 0\n\t\t\t\t};\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t// when a new instance of WebGLTexture was created, a texture upload is required\n\t\t\t\t// even if the image contents are identical\n\n\t\t\t\tforceUpload = true;\n\n\t\t\t}\n\n\t\t\twebglTextures[ textureCacheKey ].usedTimes ++;\n\n\t\t\t// every time the texture cache key changes, it's necessary to check if an instance of\n\t\t\t// WebGLTexture can be deleted in order to avoid a memory leak.\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\n\t\t\tif ( webglTexture !== undefined ) {\n\n\t\t\t\twebglTextures[ textureProperties.__cacheKey ].usedTimes --;\n\n\t\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\t\tdeleteTexture( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// store references to cache key and WebGLTexture object\n\n\t\t\ttextureProperties.__cacheKey = textureCacheKey;\n\t\t\ttextureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;\n\n\t\t}\n\n\t\treturn forceUpload;\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tlet textureType = 3553;\n\n\t\tif ( texture.isDataArrayTexture ) textureType = 35866;\n\t\tif ( texture.isData3DTexture ) textureType = 32879;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\tif ( source.version !== source.__currentVersion || forceUpload === true ) {\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( 37443, 0 );\n\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;\n\t\t\tlet image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\t\t\timage = verifyColorSpace( texture, image );\n\n\t\t\tconst supportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format, texture.encoding );\n\n\t\t\tlet glType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( textureProperties.__version === undefined );\n\t\t\tconst levels = getMipLevels( texture, image, supportsMips );\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\t\tglInternalFormat = 35056;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// validation checks for WebGL 1\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\tstate.texStorage2D( 3553, 1, glInternalFormat, image.width, image.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.texSubImage2D( 3553, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataArrayTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( 35866, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.texSubImage3D( 35866, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( 32879, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.texSubImage3D( 32879, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isFramebufferTexture ) {\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 3553, i, 0, 0, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.texSubImage2D( 3553, 0, 0, 0, glFormat, glType, image );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType );\n\n\t\t\t}\n\n\t\t\tsource.__currentVersion = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\tif ( source.version !== source.__currentVersion || forceUpload === true ) {\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( 37443, 0 );\n\n\t\t\tconst isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );\n\t\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );\n\n\t\t\t}\n\n\t\t\tconst image = cubeImage[ 0 ],\n\t\t\t\tsupportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format, texture.encoding ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( textureProperties.__version === undefined );\n\t\t\tlet levels = getMipLevels( texture, image, supportsMips );\n\n\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\tlet mipmaps;\n\n\t\t\tif ( isCompressed ) {\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\tstate.texStorage2D( 34067, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( 34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t// TODO: Uniformly handle mipmap definitions\n\t\t\t\t\t// Normal textures and compressed cube textures define base level + mips with their mipmap array\n\t\t\t\t\t// Uncompressed cube textures use their mipmap array only for mips (no base level)\n\n\t\t\t\t\tif ( mipmaps.length > 0 ) levels ++;\n\n\t\t\t\t\tstate.texStorage2D( 34067, levels, glInternalFormat, cubeImage[ 0 ].width, cubeImage[ 0 ].height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap( 34067 );\n\n\t\t\t}\n\n\t\t\tsource.__currentVersion = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {\n\n\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\n\t\tconst glType = utils.convert( texture.type );\n\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( ! renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\tif ( textureTarget === 32879 || textureTarget === 35866 ) {\n\n\t\t\t\tstate.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );\n\n\t\t} else {\n\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, null );\n\n\t}\n\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\tlet glInternalFormat = 33189;\n\n\t\t\tif ( isMultisample || useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t} else {\n\n\t\t\t// Use the first texture for MRT so far\n\t\t\tconst texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[ 0 ] : renderTarget.texture;\n\n\t\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\n\t\t\tconst glType = utils.convert( texture.type );\n\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tconst webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, 36096, 3553, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, 33306, 3553, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\tif ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, null );\n\n\t}\n\n\t// rebind framebuffer with external textures\n\tfunction rebindTextures( renderTarget, colorTexture, depthTexture ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( colorTexture !== undefined ) {\n\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, 36064, 3553 );\n\n\t\t}\n\n\t\tif ( depthTexture !== undefined ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets !== true ) {\n\n\t\t\tif ( textureProperties.__webglTexture === undefined ) {\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tif ( capabilities.drawBuffers ) {\n\n\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\n\n\t\t\t\t\t\tif ( attachmentProperties.__webglTexture === undefined ) {\n\n\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\n\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( 36160, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, 36064, 34069 + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( 34067 );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else if ( isMultipleRenderTargets ) {\n\n\t\t\tconst textures = renderTarget.texture;\n\n\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachment = textures[ i ];\n\t\t\t\tconst attachmentProperties = properties.get( attachment );\n\n\t\t\t\tstate.bindTexture( 3553, attachmentProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, attachment, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else {\n\n\t\t\tlet glTextureType = 3553;\n\n\t\t\tif ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tglTextureType = renderTarget.isWebGL3DRenderTarget ? 32879 : 35866;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( glTextureType, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( glTextureType, texture, supportsMips );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( glTextureType );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target );\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\tconst width = renderTarget.width;\n\t\t\tconst height = renderTarget.height;\n\t\t\tlet mask = 16384;\n\t\t\tconst invalidationArray = [ 36064 ];\n\t\t\tconst depthStyle = renderTarget.stencilBuffer ? 33306 : 36096;\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tinvalidationArray.push( depthStyle );\n\n\t\t\t}\n\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\tconst ignoreDepthValues = ( renderTargetProperties.__ignoreDepthValues !== undefined ) ? renderTargetProperties.__ignoreDepthValues : false;\n\n\t\t\tif ( ignoreDepthValues === false ) {\n\n\t\t\t\tif ( renderTarget.depthBuffer ) mask |= 256;\n\t\t\t\tif ( renderTarget.stencilBuffer ) mask |= 1024;\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\tstate.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\tif ( ignoreDepthValues === true ) {\n\n\t\t\t\t_gl.invalidateFramebuffer( 36008, [ depthStyle ] );\n\t\t\t\t_gl.invalidateFramebuffer( 36009, [ depthStyle ] );\n\n\t\t\t}\n\n\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\tif ( supportsInvalidateFramebuffer ) {\n\n\t\t\t\t_gl.invalidateFramebuffer( 36008, invalidationArray );\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( 36008, null );\n\t\t\tstate.bindFramebuffer( 36009, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn Math.min( maxSamples, renderTarget.samples );\n\n\t}\n\n\tfunction useMultisampledRTT( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\treturn isWebGL2 && renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\tfunction verifyColorSpace( texture, image ) {\n\n\t\tconst encoding = texture.encoding;\n\t\tconst format = texture.format;\n\t\tconst type = texture.type;\n\n\t\tif ( texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat ) return image;\n\n\t\tif ( encoding !== LinearEncoding ) {\n\n\t\t\t// sRGB\n\n\t\t\tif ( encoding === sRGBEncoding ) {\n\n\t\t\t\tif ( isWebGL2 === false ) {\n\n\t\t\t\t\t// in WebGL 1, try to use EXT_sRGB extension and unsized formats\n\n\t\t\t\t\tif ( extensions.has( 'EXT_sRGB' ) === true && format === RGBAFormat ) {\n\n\t\t\t\t\t\ttexture.format = _SRGBAFormat;\n\n\t\t\t\t\t\t// it's not possible to generate mips in WebGL 1 with this extension\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// slow fallback (CPU decode)\n\n\t\t\t\t\t\timage = ImageUtils.sRGBToLinear( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\n\n\t\t\t\t\tif ( format !== RGBAFormat || type !== UnsignedByteType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.WebGLTextures: Unsupported texture encoding:', encoding );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.rebindTextures = rebindTextures;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\tthis.setupDepthRenderbuffer = setupDepthRenderbuffer;\n\tthis.setupFrameBufferTexture = setupFrameBufferTexture;\n\tthis.useMultisampledRTT = useMultisampledRTT;\n\n}\n\nfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction convert( p, encoding = null ) {\n\n\t\tlet extension;\n\n\t\tif ( p === UnsignedByteType ) return 5121;\n\t\tif ( p === UnsignedShort4444Type ) return 32819;\n\t\tif ( p === UnsignedShort5551Type ) return 32820;\n\n\t\tif ( p === ByteType ) return 5120;\n\t\tif ( p === ShortType ) return 5122;\n\t\tif ( p === UnsignedShortType ) return 5123;\n\t\tif ( p === IntType ) return 5124;\n\t\tif ( p === UnsignedIntType ) return 5125;\n\t\tif ( p === FloatType ) return 5126;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\tif ( isWebGL2 ) return 5131;\n\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return 6406;\n\t\tif ( p === RGBAFormat ) return 6408;\n\t\tif ( p === LuminanceFormat ) return 6409;\n\t\tif ( p === LuminanceAlphaFormat ) return 6410;\n\t\tif ( p === DepthFormat ) return 6402;\n\t\tif ( p === DepthStencilFormat ) return 34041;\n\t\tif ( p === RedFormat ) return 6403;\n\n\t\tif ( p === RGBFormat ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228' );\n\t\t\treturn 6408;\n\n\t\t}\n\n\t\t// WebGL 1 sRGB fallback\n\n\t\tif ( p === _SRGBAFormat ) {\n\n\t\t\textension = extensions.get( 'EXT_sRGB' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.SRGB_ALPHA_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// WebGL2 formats.\n\n\t\tif ( p === RedIntegerFormat ) return 36244;\n\t\tif ( p === RGFormat ) return 33319;\n\t\tif ( p === RGIntegerFormat ) return 33320;\n\t\tif ( p === RGBAIntegerFormat ) return 36249;\n\n\t\t// S3TC\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\tif ( encoding === sRGBEncoding ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// PVRTC\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC1\n\n\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC2\n\n\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_ETC2_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ASTC\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_ASTC_4x4_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x4_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x8_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x8_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x10_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x10_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x12_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// BPTC\n\n\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\tif ( isWebGL2 ) return 34042;\n\n\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { convert: convert };\n\n}\n\nclass ArrayCamera extends PerspectiveCamera {\n\n\tconstructor( array = [] ) {\n\n\t\tsuper();\n\n\t\tthis.cameras = array;\n\n\t}\n\n}\n\nArrayCamera.prototype.isArrayCamera = true;\n\nclass Group extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Group';\n\n\t}\n\n}\n\nGroup.prototype.isGroup = true;\n\nconst _moveEvent = { type: 'move' };\n\nclass WebXRController {\n\n\tconstructor() {\n\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\n\t}\n\n\tgetHandSpace() {\n\n\t\tif ( this._hand === null ) {\n\n\t\t\tthis._hand = new Group();\n\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\tthis._hand.visible = false;\n\n\t\t\tthis._hand.joints = {};\n\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t}\n\n\t\treturn this._hand;\n\n\t}\n\n\tgetTargetRaySpace() {\n\n\t\tif ( this._targetRay === null ) {\n\n\t\t\tthis._targetRay = new Group();\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\tthis._targetRay.visible = false;\n\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._targetRay;\n\n\t}\n\n\tgetGripSpace() {\n\n\t\tif ( this._grip === null ) {\n\n\t\t\tthis._grip = new Group();\n\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\tthis._grip.visible = false;\n\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\tthis._grip.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._grip;\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect( inputSource ) {\n\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.visible = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tupdate( inputSource, frame, referenceSpace ) {\n\n\t\tlet inputPose = null;\n\t\tlet gripPose = null;\n\t\tlet handPose = null;\n\n\t\tconst targetRay = this._targetRay;\n\t\tconst grip = this._grip;\n\t\tconst hand = this._hand;\n\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\thandPose = true;\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\n\n\t\t\t\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\n\n\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\tconst joint = new Group();\n\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\t\thand.joints[ inputjoint.jointName ] = joint;\n\t\t\t\t\t\t// ??\n\t\t\t\t\t\thand.add( joint );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst joint = hand.joints[ inputjoint.jointName ];\n\n\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\t// Custom events\n\n\t\t\t\t// Check pinchz\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( targetRay !== null ) {\n\n\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t}\n\n\t\tif ( grip !== null ) {\n\n\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t}\n\n\t\tif ( hand !== null ) {\n\n\t\t\thand.visible = ( handPose !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass DepthTexture extends Texture {\n\n\tconstructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\n}\n\nDepthTexture.prototype.isDepthTexture = true;\n\nclass WebXRManager extends EventDispatcher {\n\n\tconstructor( renderer, gl ) {\n\n\t\tsuper();\n\n\t\tconst scope = this;\n\n\t\tlet session = null;\n\t\tlet framebufferScaleFactor = 1.0;\n\n\t\tlet referenceSpace = null;\n\t\tlet referenceSpaceType = 'local-floor';\n\n\t\tlet pose = null;\n\t\tlet glBinding = null;\n\t\tlet glProjLayer = null;\n\t\tlet glBaseLayer = null;\n\t\tlet xrFrame = null;\n\t\tconst attributes = gl.getContextAttributes();\n\t\tlet initialRenderTarget = null;\n\t\tlet newRenderTarget = null;\n\n\t\tconst controllers = [];\n\t\tconst inputSourcesMap = new Map();\n\n\t\t//\n\n\t\tconst cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tconst cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tconst cameras = [ cameraL, cameraR ];\n\n\t\tconst cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tlet _currentDepthNear = null;\n\t\tlet _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.cameraAutoUpdate = true;\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\n\t\t};\n\n\t\tthis.getHand = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tconst controller = inputSourcesMap.get( event.inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\t\tcontroller.disconnect( inputSource );\n\n\t\t\t} );\n\n\t\t\tinputSourcesMap.clear();\n\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null;\n\n\t\t\t// restore framebuffer/rendering state\n\n\t\t\trenderer.setRenderTarget( initialRenderTarget );\n\n\t\t\tglBaseLayer = null;\n\t\t\tglProjLayer = null;\n\t\t\tglBinding = null;\n\t\t\tsession = null;\n\t\t\tnewRenderTarget = null;\n\n\t\t\t//\n\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn referenceSpace;\n\n\t\t};\n\n\t\tthis.getBaseLayer = function () {\n\n\t\t\treturn glProjLayer !== null ? glProjLayer : glBaseLayer;\n\n\t\t};\n\n\t\tthis.getBinding = function () {\n\n\t\t\treturn glBinding;\n\n\t\t};\n\n\t\tthis.getFrame = function () {\n\n\t\t\treturn xrFrame;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = async function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tinitialRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\t\t\t\tsession.addEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\t\tawait gl.makeXRCompatible();\n\n\t\t\t\t}\n\n\t\t\t\tif ( ( session.renderState.layers === undefined ) || ( renderer.capabilities.isWebGL2 === false ) ) {\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: ( session.renderState.layers === undefined ) ? attributes.antialias : true,\n\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\t\tsession.updateRenderState( { baseLayer: glBaseLayer } );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglBaseLayer.framebufferWidth,\n\t\t\t\t\t\tglBaseLayer.framebufferHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tencoding: renderer.outputEncoding\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlet depthFormat = null;\n\t\t\t\t\tlet depthType = null;\n\t\t\t\t\tlet glDepthFormat = null;\n\n\t\t\t\t\tif ( attributes.depth ) {\n\n\t\t\t\t\t\tglDepthFormat = attributes.stencil ? 35056 : 33190;\n\t\t\t\t\t\tdepthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;\n\t\t\t\t\t\tdepthType = attributes.stencil ? UnsignedInt248Type : UnsignedShortType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\t\tcolorFormat: ( renderer.outputEncoding === sRGBEncoding ) ? 35907 : 32856,\n\t\t\t\t\t\tdepthFormat: glDepthFormat,\n\t\t\t\t\t\tscaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBinding = new XRWebGLBinding( session, gl );\n\n\t\t\t\t\tglProjLayer = glBinding.createProjectionLayer( projectionlayerInit );\n\n\t\t\t\t\tsession.updateRenderState( { layers: [ glProjLayer ] } );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglProjLayer.textureWidth,\n\t\t\t\t\t\tglProjLayer.textureHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tdepthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\t\t\t\tencoding: renderer.outputEncoding,\n\t\t\t\t\t\t\tsamples: attributes.antialias ? 4 : 0\n\t\t\t\t\t\t} );\n\n\t\t\t\t\tconst renderTargetProperties = renderer.properties.get( newRenderTarget );\n\t\t\t\t\trenderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;\n\n\t\t\t\t}\n\n\t\t\t\tnewRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278\n\n\t\t\t\t// Set foveation to maximum.\n\t\t\t\tthis.setFoveation( 1.0 );\n\n\t\t\t\treferenceSpace = await session.requestReferenceSpace( referenceSpaceType );\n\n\t\t\t\tanimation.setContext( session );\n\t\t\t\tanimation.start();\n\n\t\t\t\tscope.isPresenting = true;\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction onInputSourcesChange( event ) {\n\n\t\t\tconst inputSources = session.inputSources;\n\n\t\t\t// Assign inputSources to available controllers\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t\t}\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( let i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.removed[ i ];\n\t\t\t\tconst controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( let i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.added[ i ];\n\t\t\t\tconst controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst cameraLPos = new Vector3();\n\t\tconst cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tconst ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\tconst projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tconst left = near * leftFov;\n\t\t\tconst right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tconst zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tconst xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tconst near2 = near + zOffset;\n\t\t\tconst far2 = far + zOffset;\n\t\t\tconst left2 = left - xOffset;\n\t\t\tconst right2 = right + ( ipd - xOffset );\n\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t}\n\n\t\tthis.updateCamera = function ( camera ) {\n\n\t\t\tif ( session === null ) return;\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tconst parent = camera.parent;\n\t\t\tconst cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\tcameraVR.matrixWorld.decompose( cameraVR.position, cameraVR.quaternion, cameraVR.scale );\n\n\t\t\t// update user camera and its children\n\n\t\t\tcamera.position.copy( cameraVR.position );\n\t\t\tcamera.quaternion.copy( cameraVR.quaternion );\n\t\t\tcamera.scale.copy( cameraVR.scale );\n\t\t\tcamera.matrix.copy( cameraVR.matrix );\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tconst children = camera.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\t// update projection matrix for proper view frustum culling\n\n\t\t\tif ( cameras.length === 2 ) {\n\n\t\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\t} else {\n\n\t\t\t\t// assume single camera setup (AR)\n\n\t\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getCamera = function () {\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.getFoveation = function () {\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\treturn glProjLayer.fixedFoveation;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\treturn glBaseLayer.fixedFoveation;\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t};\n\n\t\tthis.setFoveation = function ( foveation ) {\n\n\t\t\t// 0 = no foveation = full resolution\n\t\t\t// 1 = maximum foveation = the edges render at lower resolution\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\tglProjLayer.fixedFoveation = foveation;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {\n\n\t\t\t\tglBaseLayer.fixedFoveation = foveation;\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\t\t\txrFrame = frame;\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tconst views = pose.views;\n\n\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\trenderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );\n\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tlet cameraVRNeedsUpdate = false;\n\n\t\t\t\t// check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif ( views.length !== cameraVR.cameras.length ) {\n\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tconst view = views[ i ];\n\n\t\t\t\t\tlet viewport = null;\n\n\t\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\t\tviewport = glBaseLayer.getViewport( view );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst glSubImage = glBinding.getViewSubImage( glProjLayer, view );\n\t\t\t\t\t\tviewport = glSubImage.viewport;\n\n\t\t\t\t\t\t// For side-by-side projection, we only produce a single texture for both eyes.\n\t\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\t\trenderer.setRenderTargetTextures(\n\t\t\t\t\t\t\t\tnewRenderTarget,\n\t\t\t\t\t\t\t\tglSubImage.colorTexture,\n\t\t\t\t\t\t\t\tglProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );\n\n\t\t\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst camera = cameras[ i ];\n\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cameraVRNeedsUpdate === true ) {\n\n\t\t\t\t\t\tcameraVR.cameras.push( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst inputSources = session.inputSources;\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst controller = controllers[ i ];\n\t\t\t\tconst inputSource = inputSources[ i ];\n\n\t\t\t\tcontroller.update( inputSource, frame, referenceSpace );\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n\n\t\t\txrFrame = null;\n\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n}\n\nfunction WebGLMaterials( renderer, properties ) {\n\n\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\n\n\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\tuniforms.color.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.ior.value = material.ior;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\n\t\t\t// artist-friendly light intensity scaling factor\n\t\t\tconst scaleFactor = ( renderer.physicallyCorrectLights !== true ) ? Math.PI : 1;\n\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. displacementMap map\n\t\t// 4. normal map\n\t\t// 5. bump map\n\t\t// 6. roughnessMap map\n\t\t// 7. metalnessMap map\n\t\t// 8. alphaMap map\n\t\t// 9. emissiveMap map\n\t\t// 10. clearcoat map\n\t\t// 11. clearcoat normal map\n\t\t// 12. clearcoat roughnessMap map\n\t\t// 13. specular intensity map\n\t\t// 14. specular tint map\n\t\t// 15. transmission map\n\t\t// 16. thickness map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t} else if ( material.clearcoatMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatMap;\n\n\t\t} else if ( material.clearcoatNormalMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\n\t\t} else if ( material.clearcoatRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\n\t\t} else if ( material.specularIntensityMap ) {\n\n\t\t\tuvScaleMap = material.specularIntensityMap;\n\n\t\t} else if ( material.specularColorMap ) {\n\n\t\t\tuvScaleMap = material.specularColorMap;\n\n\t\t} else if ( material.transmissionMap ) {\n\n\t\t\tuvScaleMap = material.transmissionMap;\n\n\t\t} else if ( material.thicknessMap ) {\n\n\t\t\tuvScaleMap = material.thicknessMap;\n\n\t\t} else if ( material.sheenColorMap ) {\n\n\t\t\tuvScaleMap = material.sheenColorMap;\n\n\t\t} else if ( material.sheenRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.sheenRoughnessMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities for uv2\n\t\t// 1. ao map\n\t\t// 2. light map\n\n\t\tlet uv2ScaleMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t} else if ( material.lightMap ) {\n\n\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t}\n\n\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * pixelRatio;\n\t\tuniforms.scale.value = height * 0.5;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\n\n\t\tuniforms.ior.value = material.ior; // also part of uniforms common\n\n\t\tif ( material.sheen > 0 ) {\n\n\t\t\tuniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );\n\n\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\n\n\t\t\tif ( material.sheenColorMap ) {\n\n\t\t\t\tuniforms.sheenColorMap.value = material.sheenColorMap;\n\n\t\t\t}\n\n\t\t\tif ( material.sheenRoughnessMap ) {\n\n\t\t\t\tuniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.clearcoat > 0 ) {\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.transmission > 0 ) {\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\tuniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif ( material.thicknessMap ) {\n\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy( material.attenuationColor );\n\n\t\t}\n\n\t\tuniforms.specularIntensity.value = material.specularIntensity;\n\t\tuniforms.specularColor.value.copy( material.specularColor );\n\n\t\tif ( material.specularIntensityMap ) {\n\n\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\n\n\t\t}\n\n\t\tif ( material.specularColorMap ) {\n\n\t\t\tuniforms.specularColorMap.value = material.specularColorMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\tuniforms.farDistance.value = material.farDistance;\n\n\t}\n\n\treturn {\n\t\trefreshFogUniforms: refreshFogUniforms,\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t};\n\n}\n\nfunction createCanvasElement() {\n\n\tconst canvas = createElementNS( 'canvas' );\n\tcanvas.style.display = 'block';\n\treturn canvas;\n\n}\n\nfunction WebGLRenderer( parameters = {} ) {\n\n\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\tlet _alpha;\n\n\tif ( parameters.context !== undefined ) {\n\n\t\t_alpha = _context.getContextAttributes().alpha;\n\n\t} else {\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false;\n\n\t}\n\n\tlet currentRenderList = null;\n\tlet currentRenderState = null;\n\n\t// render() can be called from within a callback triggered by another render.\n\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\tconst renderListStack = [];\n\tconst renderStateStack = [];\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\n\t// Debug configuration container\n\tthis.debug = {\n\n\t\t/**\n\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t * @type {boolean}\n\t\t */\n\t\tcheckShaderErrors: true\n\t};\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.outputEncoding = LinearEncoding;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = NoToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\n\t// internal properties\n\n\tconst _this = this;\n\n\tlet _isContextLost = false;\n\n\t// internal state cache\n\n\tlet _currentActiveCubeFace = 0;\n\tlet _currentActiveMipmapLevel = 0;\n\tlet _currentRenderTarget = null;\n\tlet _currentMaterialId = - 1;\n\n\tlet _currentCamera = null;\n\n\tconst _currentViewport = new Vector4();\n\tconst _currentScissor = new Vector4();\n\tlet _currentScissorTest = null;\n\n\t//\n\n\tlet _width = _canvas.width;\n\tlet _height = _canvas.height;\n\n\tlet _pixelRatio = 1;\n\tlet _opaqueSort = null;\n\tlet _transparentSort = null;\n\n\tconst _viewport = new Vector4( 0, 0, _width, _height );\n\tconst _scissor = new Vector4( 0, 0, _width, _height );\n\tlet _scissorTest = false;\n\n\t// frustum\n\n\tconst _frustum = new Frustum();\n\n\t// clipping\n\n\tlet _clippingEnabled = false;\n\tlet _localClippingEnabled = false;\n\n\t// transmission\n\n\tlet _transmissionRenderTarget = null;\n\n\t// camera matrices cache\n\n\tconst _projScreenMatrix = new Matrix4();\n\n\tconst _vector2 = new Vector2();\n\tconst _vector3 = new Vector3();\n\n\tconst _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\t// initialize\n\n\tlet _gl = _context;\n\n\tfunction getContext( contextNames, contextAttributes ) {\n\n\t\tfor ( let i = 0; i < contextNames.length; i ++ ) {\n\n\t\t\tconst contextName = contextNames[ i ];\n\t\t\tconst context = _canvas.getContext( contextName, contextAttributes );\n\t\t\tif ( context !== null ) return context;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\ttry {\n\n\t\tconst contextAttributes = {\n\t\t\talpha: true,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\tpowerPreference: _powerPreference,\n\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t};\n\n\t\t// OffscreenCanvas does not have setAttribute, see #22811\n\t\tif ( 'setAttribute' in _canvas ) _canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );\n\n\t\t// event listeners must be registered before WebGL context is created, see #12753\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tconst contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];\n\n\t\t\tif ( _this.isWebGL1Renderer === true ) {\n\n\t\t\t\tcontextNames.shift();\n\n\t\t\t}\n\n\t\t\t_gl = getContext( contextNames, contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( getContext( contextNames ) ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\tthrow error;\n\n\t}\n\n\tlet extensions, capabilities, state, info;\n\tlet properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\n\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\tlet utils, bindingStates;\n\n\tfunction initGLContext() {\n\n\t\textensions = new WebGLExtensions( _gl );\n\n\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\textensions.init( capabilities );\n\n\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\n\t\tinfo = new WebGLInfo( _gl );\n\t\tproperties = new WebGLProperties();\n\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\tcubemaps = new WebGLCubeMaps( _this );\n\t\tcubeuvmaps = new WebGLCubeUVMaps( _this );\n\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\tbindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );\n\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\tmorphtargets = new WebGLMorphtargets( _gl, capabilities, textures );\n\t\tclipping = new WebGLClipping( properties );\n\t\tprogramCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );\n\t\tmaterials = new WebGLMaterials( _this, properties );\n\t\trenderLists = new WebGLRenderLists();\n\t\trenderStates = new WebGLRenderStates( extensions, capabilities );\n\t\tbackground = new WebGLBackground( _this, cubemaps, state, objects, _alpha, _premultipliedAlpha );\n\t\tshadowMap = new WebGLShadowMap( _this, objects, capabilities );\n\n\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\tinfo.programs = programCache.programs;\n\n\t\t_this.capabilities = capabilities;\n\t\t_this.extensions = extensions;\n\t\t_this.properties = properties;\n\t\t_this.renderLists = renderLists;\n\t\t_this.shadowMap = shadowMap;\n\t\t_this.state = state;\n\t\t_this.info = info;\n\n\t}\n\n\tinitGLContext();\n\n\t// xr\n\n\tconst xr = new WebXRManager( _this, _gl );\n\n\tthis.xr = xr;\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.loseContext();\n\n\t};\n\n\tthis.forceContextRestore = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.restoreContext();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _width, _height, false );\n\n\t};\n\n\tthis.getSize = function ( target ) {\n\n\t\treturn target.set( _width, _height );\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\tif ( xr.isPresenting ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t};\n\n\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_pixelRatio = pixelRatio;\n\n\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getCurrentViewport = function ( target ) {\n\n\t\treturn target.copy( _currentViewport );\n\n\t};\n\n\tthis.getViewport = function ( target ) {\n\n\t\treturn target.copy( _viewport );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_viewport.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissor = function ( target ) {\n\n\t\treturn target.copy( _scissor );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_scissor.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissorTest = function () {\n\n\t\treturn _scissorTest;\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\tthis.setOpaqueSort = function ( method ) {\n\n\t\t_opaqueSort = method;\n\n\t};\n\n\tthis.setTransparentSort = function ( method ) {\n\n\t\t_transparentSort = method;\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function ( target ) {\n\n\t\treturn target.copy( background.getClearColor() );\n\n\t};\n\n\tthis.setClearColor = function () {\n\n\t\tbackground.setClearColor.apply( background, arguments );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn background.getClearAlpha();\n\n\t};\n\n\tthis.setClearAlpha = function () {\n\n\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t};\n\n\tthis.clear = function ( color = true, depth = true, stencil = true ) {\n\n\t\tlet bits = 0;\n\n\t\tif ( color ) bits |= 16384;\n\t\tif ( depth ) bits |= 256;\n\t\tif ( stencil ) bits |= 1024;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\t//\n\n\tthis.dispose = function () {\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\trenderLists.dispose();\n\t\trenderStates.dispose();\n\t\tproperties.dispose();\n\t\tcubemaps.dispose();\n\t\tcubeuvmaps.dispose();\n\t\tobjects.dispose();\n\t\tbindingStates.dispose();\n\t\tprogramCache.dispose();\n\n\t\txr.dispose();\n\n\t\txr.removeEventListener( 'sessionstart', onXRSessionStart );\n\t\txr.removeEventListener( 'sessionend', onXRSessionEnd );\n\n\t\tif ( _transmissionRenderTarget ) {\n\n\t\t\t_transmissionRenderTarget.dispose();\n\t\t\t_transmissionRenderTarget = null;\n\n\t\t}\n\n\t\tanimation.stop();\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t_isContextLost = true;\n\n\t}\n\n\tfunction onContextRestore( /* event */ ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t_isContextLost = false;\n\n\t\tconst infoAutoReset = info.autoReset;\n\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\tconst shadowMapType = shadowMap.type;\n\n\t\tinitGLContext();\n\n\t\tinfo.autoReset = infoAutoReset;\n\t\tshadowMap.enabled = shadowMapEnabled;\n\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\tshadowMap.type = shadowMapType;\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tconst material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReferences( material );\n\n\t\tproperties.remove( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReferences( material ) {\n\n\t\tconst programs = properties.get( material ).programs;\n\n\t\tif ( programs !== undefined ) {\n\n\t\t\tprograms.forEach( function ( program ) {\n\n\t\t\t\tprogramCache.releaseProgram( program );\n\n\t\t\t} );\n\n\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\tprogramCache.releaseShaderCache( material );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\tif ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\tconst frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tconst program = setProgram( camera, scene, geometry, material, object );\n\n\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t//\n\n\t\tlet index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\n\t\t//\n\n\t\tif ( index === null ) {\n\n\t\t\tif ( position === undefined || position.count === 0 ) return;\n\n\t\t} else if ( index.count === 0 ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t//\n\n\t\tlet rangeFactor = 1;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\tbindingStates.setup( object, material, program, geometry, index );\n\n\t\tlet attribute;\n\t\tlet renderer = bufferRenderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattribute = attributes.get( index );\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( attribute );\n\n\t\t}\n\n\t\t//\n\n\t\tconst dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\tconst rangeStart = geometry.drawRange.start * rangeFactor;\n\t\tconst rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\tconst groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\tconst groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\tconst drawStart = Math.max( rangeStart, groupStart );\n\t\tconst drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tconst drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\t//\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tlet lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t}\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\trenderer.setMode( 0 );\n\n\t\t} else if ( object.isSprite ) {\n\n\t\t\trenderer.setMode( 4 );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, object.count );\n\n\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\tconst instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, instanceCount );\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\t// Compile\n\n\tthis.compile = function ( scene, camera ) {\n\n\t\tcurrentRenderState = renderStates.get( scene );\n\t\tcurrentRenderState.init();\n\n\t\trenderStateStack.push( currentRenderState );\n\n\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tcurrentRenderState.setupLights( _this.physicallyCorrectLights );\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tconst material = object.material;\n\n\t\t\tif ( material ) {\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\tconst material2 = material[ i ];\n\n\t\t\t\t\t\tgetProgram( material2, scene, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\trenderStateStack.pop();\n\t\tcurrentRenderState = null;\n\n\t};\n\n\t// Animation Loop\n\n\tlet onAnimationFrameCallback = null;\n\n\tfunction onAnimationFrame( time ) {\n\n\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t}\n\n\tfunction onXRSessionStart() {\n\n\t\tanimation.stop();\n\n\t}\n\n\tfunction onXRSessionEnd() {\n\n\t\tanimation.start();\n\n\t}\n\n\tconst animation = new WebGLAnimation();\n\tanimation.setAnimationLoop( onAnimationFrame );\n\n\tif ( typeof self !== 'undefined' ) animation.setContext( self );\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tonAnimationFrameCallback = callback;\n\t\txr.setAnimationLoop( callback );\n\n\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t};\n\n\txr.addEventListener( 'sessionstart', onXRSessionStart );\n\txr.addEventListener( 'sessionend', onXRSessionEnd );\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( _isContextLost === true ) return;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\tif ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );\n\n\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\n\t\t}\n\n\t\t//\n\t\tif ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );\n\n\t\tcurrentRenderState = renderStates.get( scene, renderStateStack.length );\n\t\tcurrentRenderState.init();\n\n\t\trenderStateStack.push( currentRenderState );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tcurrentRenderList = renderLists.get( scene, renderListStack.length );\n\t\tcurrentRenderList.init();\n\n\t\trenderListStack.push( currentRenderList );\n\n\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\tcurrentRenderList.finish();\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled === true ) clipping.beginShadows();\n\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\tif ( _clippingEnabled === true ) clipping.endShadows();\n\n\t\t//\n\n\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\t\t//\n\n\t\tbackground.render( currentRenderList, scene );\n\n\t\t// render scene\n\n\t\tcurrentRenderState.setupLights( _this.physicallyCorrectLights );\n\n\t\tif ( camera.isArrayCamera ) {\n\n\t\t\tconst cameras = camera.cameras;\n\n\t\t\tfor ( let i = 0, l = cameras.length; i < l; i ++ ) {\n\n\t\t\t\tconst camera2 = cameras[ i ];\n\n\t\t\t\trenderScene( currentRenderList, scene, camera2, camera2.viewport );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderScene( currentRenderList, scene, camera );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );\n\n\t\t// _gl.finish();\n\n\t\tbindingStates.resetDefaultState();\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\trenderStateStack.pop();\n\n\t\tif ( renderStateStack.length > 0 ) {\n\n\t\t\tcurrentRenderState = renderStateStack[ renderStateStack.length - 1 ];\n\n\t\t} else {\n\n\t\t\tcurrentRenderState = null;\n\n\t\t}\n\n\t\trenderListStack.pop();\n\n\t\tif ( renderListStack.length > 0 ) {\n\n\t\t\tcurrentRenderList = renderListStack[ renderListStack.length - 1 ];\n\n\t\t} else {\n\n\t\t\tcurrentRenderList = null;\n\n\t\t}\n\n\t};\n\n\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isGroup ) {\n\n\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t}\n\n\t}\n\n\tfunction renderScene( currentRenderList, scene, camera, viewport ) {\n\n\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\tconst transparentObjects = currentRenderList.transparent;\n\n\t\tcurrentRenderState.setupLightsView( camera );\n\n\t\tif ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, scene, camera );\n\n\t\tif ( viewport ) state.viewport( _currentViewport.copy( viewport ) );\n\n\t\tif ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );\n\t\tif ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );\n\t\tif ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.buffers.depth.setTest( true );\n\t\tstate.buffers.depth.setMask( true );\n\t\tstate.buffers.color.setMask( true );\n\n\t\tstate.setPolygonOffset( false );\n\n\t}\n\n\tfunction renderTransmissionPass( opaqueObjects, scene, camera ) {\n\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tif ( _transmissionRenderTarget === null ) {\n\n\t\t\t_transmissionRenderTarget = new WebGLRenderTarget( 1, 1, {\n\t\t\t\tgenerateMipmaps: true,\n\t\t\t\ttype: utils.convert( HalfFloatType ) !== null ? HalfFloatType : UnsignedByteType,\n\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\tsamples: ( isWebGL2 && _antialias === true ) ? 4 : 0\n\t\t\t} );\n\n\t\t}\n\n\t\t_this.getDrawingBufferSize( _vector2 );\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\t_transmissionRenderTarget.setSize( _vector2.x, _vector2.y );\n\n\t\t} else {\n\n\t\t\t_transmissionRenderTarget.setSize( floorPowerOfTwo( _vector2.x ), floorPowerOfTwo( _vector2.y ) );\n\n\t\t}\n\n\t\t//\n\n\t\tconst currentRenderTarget = _this.getRenderTarget();\n\t\t_this.setRenderTarget( _transmissionRenderTarget );\n\t\t_this.clear();\n\n\t\t// Turn off the features which can affect the frag color for opaque objects pass.\n\t\t// Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n\t\tconst currentToneMapping = _this.toneMapping;\n\t\t_this.toneMapping = NoToneMapping;\n\n\t\trenderObjects( opaqueObjects, scene, camera );\n\n\t\t_this.toneMapping = currentToneMapping;\n\n\t\ttextures.updateMultisampleRenderTarget( _transmissionRenderTarget );\n\t\ttextures.updateRenderTargetMipmap( _transmissionRenderTarget );\n\n\t\t_this.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\tfunction renderObjects( renderList, scene, camera ) {\n\n\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\tfor ( let i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tconst renderItem = renderList[ i ];\n\n\t\t\tconst object = renderItem.object;\n\t\t\tconst geometry = renderItem.geometry;\n\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\tconst group = renderItem.group;\n\n\t\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\tmaterial.onBeforeRender( _this, scene, camera, geometry, object, group );\n\n\t\tif ( material.transparent === true && material.side === DoubleSide ) {\n\n\t\t\tmaterial.side = BackSide;\n\t\t\tmaterial.needsUpdate = true;\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\tmaterial.side = FrontSide;\n\t\t\tmaterial.needsUpdate = true;\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\tmaterial.side = DoubleSide;\n\n\t\t} else {\n\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t}\n\n\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\t}\n\n\tfunction getProgram( material, scene, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tconst lights = currentRenderState.state.lights;\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tconst lightsStateVersion = lights.state.version;\n\n\t\tconst parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );\n\t\tconst programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\tlet programs = materialProperties.programs;\n\n\t\t// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tmaterialProperties.fog = scene.fog;\n\t\tmaterialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );\n\n\t\tif ( programs === undefined ) {\n\n\t\t\t// new material\n\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tprograms = new Map();\n\t\t\tmaterialProperties.programs = programs;\n\n\t\t}\n\n\t\tlet program = programs.get( programCacheKey );\n\n\t\tif ( program !== undefined ) {\n\n\t\t\t// early out if program and light state is identical\n\n\t\t\tif ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {\n\n\t\t\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t\t\treturn program;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tparameters.uniforms = programCache.getUniforms( material );\n\n\t\t\tmaterial.onBuild( object, parameters, _this );\n\n\t\t\tmaterial.onBeforeCompile( parameters, _this );\n\n\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\t\t\tprograms.set( programCacheKey, program );\n\n\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\n\t\t}\n\n\t\tconst uniforms = materialProperties.uniforms;\n\n\t\tif ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {\n\n\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\n\t\t}\n\n\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t// store the light setup it was created for\n\n\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t}\n\n\t\tconst progUniforms = program.getUniforms();\n\t\tconst uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.currentProgram = program;\n\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\treturn program;\n\n\t}\n\n\tfunction updateCommonMaterialProperties( material, parameters ) {\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\tmaterialProperties.instancing = parameters.instancing;\n\t\tmaterialProperties.skinning = parameters.skinning;\n\t\tmaterialProperties.morphTargets = parameters.morphTargets;\n\t\tmaterialProperties.morphNormals = parameters.morphNormals;\n\t\tmaterialProperties.morphColors = parameters.morphColors;\n\t\tmaterialProperties.morphTargetsCount = parameters.morphTargetsCount;\n\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\tmaterialProperties.vertexTangents = parameters.vertexTangents;\n\t\tmaterialProperties.toneMapping = parameters.toneMapping;\n\n\t}\n\n\tfunction setProgram( camera, scene, geometry, material, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\ttextures.resetTextureUnits();\n\n\t\tconst fog = scene.fog;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tconst encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.encoding : LinearEncoding );\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\tconst vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;\n\t\tconst vertexTangents = !! material.normalMap && !! geometry.attributes.tangent;\n\t\tconst morphTargets = !! geometry.morphAttributes.position;\n\t\tconst morphNormals = !! geometry.morphAttributes.normal;\n\t\tconst morphColors = !! geometry.morphAttributes.color;\n\t\tconst toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping;\n\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\tconst materialProperties = properties.get( material );\n\t\tconst lights = currentRenderState.state.lights;\n\n\t\tif ( _clippingEnabled === true ) {\n\n\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\n\n\t\t\t\tconst useCache =\n\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\tclipping.setState( material, camera, useCache );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet needsProgramChange = false;\n\n\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\tif ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.outputEncoding !== encoding ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.envMap !== envMap ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t( materialProperties.numClippingPlanes !== clipping.numPlanes ||\n\t\t\t\tmaterialProperties.numIntersection !== clipping.numIntersection ) ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.vertexTangents !== vertexTangents ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphTargets !== morphTargets ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphNormals !== morphNormals ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphColors !== morphColors ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.toneMapping !== toneMapping ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tneedsProgramChange = true;\n\t\t\tmaterialProperties.__version = material.version;\n\n\t\t}\n\n\t\t//\n\n\t\tlet program = materialProperties.currentProgram;\n\n\t\tif ( needsProgramChange === true ) {\n\n\t\t\tprogram = getProgram( material, scene, object );\n\n\t\t}\n\n\t\tlet refreshProgram = false;\n\t\tlet refreshMaterial = false;\n\t\tlet refreshLights = false;\n\n\t\tconst p_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\tmaterial.isShadowMaterial ||\n\t\t\t\tobject.isSkinnedMesh ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning and morph target uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone and morph texture must go before other textures\n\t\t// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tconst skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\tif ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\tif ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined && capabilities.isWebGL2 === true ) ) {\n\n\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t}\n\n\n\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t}\n\n\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t}\n\n\t\t// common matrices\n\n\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\treturn program;\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\tfunction materialNeedsLights( material ) {\n\n\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t}\n\n\tthis.getActiveCubeFace = function () {\n\n\t\treturn _currentActiveCubeFace;\n\n\t};\n\n\tthis.getActiveMipmapLevel = function () {\n\n\t\treturn _currentActiveMipmapLevel;\n\n\t};\n\n\tthis.getRenderTarget = function () {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {\n\n\t\tproperties.get( renderTarget.texture ).__webglTexture = colorTexture;\n\t\tproperties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\trenderTargetProperties.__hasExternalTextures = true;\n\n\t\tif ( renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\trenderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;\n\n\t\t\tif ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\t\t// The multisample_render_to_texture extension doesn't work properly if there\n\t\t\t\t// are midframe flushes and an external depth buffer. Disable use of the extension.\n\t\t\t\tif ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );\n\t\t\t\t\trenderTargetProperties.__useRenderToTexture = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\trenderTargetProperties.__webglFramebuffer = defaultFramebuffer;\n\t\trenderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\tlet useDefaultFramebuffer = true;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tif ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {\n\n\t\t\t\t// We need to make sure to rebind the framebuffer.\n\t\t\t\tstate.bindFramebuffer( 36160, null );\n\t\t\t\tuseDefaultFramebuffer = false;\n\n\t\t\t} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t} else if ( renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\t\t// Color and depth texture must be rebound in order for the swapchain to update.\n\t\t\t\ttextures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet framebuffer = null;\n\t\tlet isCube = false;\n\t\tlet isRenderTarget3D = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tconst texture = renderTarget.texture;\n\n\t\t\tif ( texture.isData3DTexture || texture.isDataArrayTexture ) {\n\n\t\t\t\tisRenderTarget3D = true;\n\n\t\t\t}\n\n\t\t\tconst __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ];\n\t\t\t\tisCube = true;\n\n\t\t\t} else if ( ( capabilities.isWebGL2 && renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t} else {\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t}\n\n\t\tconst framebufferBound = state.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer ) {\n\n\t\t\tstate.drawBuffers( renderTarget, framebuffer );\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport );\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tif ( isCube ) {\n\n\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );\n\n\t\t} else if ( isRenderTarget3D ) {\n\n\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\tconst layer = activeCubeFace || 0;\n\t\t\t_gl.framebufferTextureLayer( 36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );\n\n\t\t}\n\n\t\t_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tlet framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t}\n\n\t\tif ( framebuffer ) {\n\n\t\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\t\ttry {\n\n\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tconst halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );\n\n\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t! halfFloatSupportedByExt ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\t// restore framebuffer of current render target if necessary\n\n\t\t\t\tconst framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;\n\t\t\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.copyFramebufferToTexture = function ( position, texture, level = 0 ) {\n\n\t\tif ( texture.isFramebufferTexture !== true ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst levelScale = Math.pow( 2, - level );\n\t\tconst width = Math.floor( texture.image.width * levelScale );\n\t\tconst height = Math.floor( texture.image.height * levelScale );\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t_gl.copyTexSubImage2D( 3553, level, 0, 0, position.x, position.y, width, height );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {\n\n\t\tconst width = srcTexture.image.width;\n\t\tconst height = srcTexture.image.height;\n\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\tconst glType = utils.convert( dstTexture.type );\n\n\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t// As another texture upload may have changed pixelStorei\n\t\t// parameters, make sure they are correct for the dstTexture\n\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( 3553 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {\n\n\t\tif ( _this.isWebGL1Renderer ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst width = sourceBox.max.x - sourceBox.min.x + 1;\n\t\tconst height = sourceBox.max.y - sourceBox.min.y + 1;\n\t\tconst depth = sourceBox.max.z - sourceBox.min.z + 1;\n\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\tconst glType = utils.convert( dstTexture.type );\n\t\tlet glTarget;\n\n\t\tif ( dstTexture.isData3DTexture ) {\n\n\t\t\ttextures.setTexture3D( dstTexture, 0 );\n\t\t\tglTarget = 32879;\n\n\t\t} else if ( dstTexture.isDataArrayTexture ) {\n\n\t\t\ttextures.setTexture2DArray( dstTexture, 0 );\n\t\t\tglTarget = 35866;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\tconst unpackRowLen = _gl.getParameter( 3314 );\n\t\tconst unpackImageHeight = _gl.getParameter( 32878 );\n\t\tconst unpackSkipPixels = _gl.getParameter( 3316 );\n\t\tconst unpackSkipRows = _gl.getParameter( 3315 );\n\t\tconst unpackSkipImages = _gl.getParameter( 32877 );\n\n\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;\n\n\t\t_gl.pixelStorei( 3314, image.width );\n\t\t_gl.pixelStorei( 32878, image.height );\n\t\t_gl.pixelStorei( 3316, sourceBox.min.x );\n\t\t_gl.pixelStorei( 3315, sourceBox.min.y );\n\t\t_gl.pixelStorei( 32877, sourceBox.min.z );\n\n\t\tif ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {\n\n\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );\n\t\t\t\t_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.pixelStorei( 3314, unpackRowLen );\n\t\t_gl.pixelStorei( 32878, unpackImageHeight );\n\t\t_gl.pixelStorei( 3316, unpackSkipPixels );\n\t\t_gl.pixelStorei( 3315, unpackSkipRows );\n\t\t_gl.pixelStorei( 32877, unpackSkipImages );\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.initTexture = function ( texture ) {\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.resetState = function () {\n\n\t\t_currentActiveCubeFace = 0;\n\t\t_currentActiveMipmapLevel = 0;\n\t\t_currentRenderTarget = null;\n\n\t\tstate.reset();\n\t\tbindingStates.reset();\n\n\t};\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t}\n\n}\n\nWebGLRenderer.prototype.isWebGLRenderer = true;\n\nclass WebGL1Renderer extends WebGLRenderer {}\n\nWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\nclass FogExp2 {\n\n\tconstructor( color, density = 0.00025 ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = density;\n\n\t}\n\n\tclone() {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t}\n\n}\n\nFogExp2.prototype.isFogExp2 = true;\n\nclass Fog {\n\n\tconstructor( color, near = 1, far = 1000 ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t}\n\n}\n\nFog.prototype.isFog = true;\n\nclass Scene extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.environment !== null ) this.environment = source.environment.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\treturn data;\n\n\t}\n\n}\n\nScene.prototype.isScene = true;\n\nclass InterleavedBuffer {\n\n\tconstructor( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t\tthis.uuid = generateUUID();\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t}\n\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\tconst ib = new this.constructor( array, this.stride );\n\t\tib.setUsage( this.usage );\n\n\t\treturn ib;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\t// generate UUID for array buffer if necessary\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.prototype.slice.call( new Uint32Array( this.array.buffer ) );\n\n\t\t}\n\n\t\t//\n\n\t\treturn {\n\t\t\tuuid: this.uuid,\n\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tstride: this.stride\n\t\t};\n\n\t}\n\n}\n\nInterleavedBuffer.prototype.isInterleavedBuffer = true;\n\nconst _vector$6 = /*@__PURE__*/ new Vector3();\n\nclass InterleavedBufferAttribute {\n\n\tconstructor( interleavedBuffer, itemSize, offset, normalized = false ) {\n\n\t\tthis.name = '';\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t}\n\n\tget array() {\n\n\t\treturn this.data.array;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tthis.data.needsUpdate = value;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.fromBufferAttribute( this, i );\n\n\t\t\t_vector$6.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.fromBufferAttribute( this, i );\n\n\t\t\t_vector$6.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.fromBufferAttribute( this, i );\n\n\t\t\t_vector$6.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t}\n\n\tgetY( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t}\n\n\tgetZ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t}\n\n\tgetW( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n\n\t\t} else {\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n\n\t\t\t}\n\n\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n\n\t\t}\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// deinterleave data and save it as an ordinary buffer attribute for now\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t} else {\n\n\t\t\t// save as true interlaved attribtue\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\tdata: this.data.uuid,\n\t\t\t\toffset: this.offset,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t}\n\n}\n\nInterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;\n\nclass SpriteMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t}\n\n}\n\nSpriteMaterial.prototype.isSpriteMaterial = true;\n\nlet _geometry;\n\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\nconst _worldScale = /*@__PURE__*/ new Vector3();\nconst _mvPosition = /*@__PURE__*/ new Vector3();\n\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _uvA = /*@__PURE__*/ new Vector2();\nconst _uvB = /*@__PURE__*/ new Vector2();\nconst _uvC = /*@__PURE__*/ new Vector2();\n\nclass Sprite extends Object3D {\n\n\tconstructor( material ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tconst float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n}\n\nSprite.prototype.isSprite = true;\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nconst _v1$2 = /*@__PURE__*/ new Vector3();\nconst _v2$1 = /*@__PURE__*/ new Vector3();\n\nclass LOD extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tisLOD: {\n\t\t\t\tvalue: true,\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tconst levels = source.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t}\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\taddLevel( object, distance = 0 ) {\n\n\t\tdistance = Math.abs( distance );\n\n\t\tconst levels = this.levels;\n\n\t\tlet l;\n\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t}\n\n\tgetCurrentLevel() {\n\n\t\treturn this._currentLevel;\n\n\t}\n\n\tgetObjectForDistance( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1$2 );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t}\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2$1.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._currentLevel = i - 1;\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\n\n\t\tdata.object.levels = [];\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _basePosition = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\n\nconst _vector$5 = /*@__PURE__*/ new Vector3();\nconst _matrix = /*@__PURE__*/ new Matrix4();\n\nclass SkinnedMesh extends Mesh {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bindMode = source.bindMode;\n\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\tthis.skeleton = source.skeleton;\n\n\t\treturn this;\n\n\t}\n\n\tbind( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.copy( bindMatrix ).invert();\n\n\t}\n\n\tpose() {\n\n\t\tthis.skeleton.pose();\n\n\t}\n\n\tnormalizeSkinWeights() {\n\n\t\tconst vector = new Vector4();\n\n\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\tfor ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\tvector.fromBufferAttribute( skinWeight, i );\n\n\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t}\n\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.matrixWorld ).invert();\n\n\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.bindMatrix ).invert();\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t}\n\n\tboneTransform( index, target ) {\n\n\t\tconst skeleton = this.skeleton;\n\t\tconst geometry = this.geometry;\n\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t_basePosition.copy( target ).applyMatrix4( this.bindMatrix );\n\n\t\ttarget.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\n\t\t\t\t_matrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\ttarget.addScaledVector( _vector$5.copy( _basePosition ).applyMatrix4( _matrix ), weight );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn target.applyMatrix4( this.bindMatrixInverse );\n\n\t}\n\n}\n\nSkinnedMesh.prototype.isSkinnedMesh = true;\n\nclass Bone extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n}\n\nBone.prototype.isBone = true;\n\nclass DataTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nDataTexture.prototype.isDataTexture = true;\n\nconst _offsetMatrix = /*@__PURE__*/ new Matrix4();\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\n\nclass Skeleton {\n\n\tconstructor( bones = [], boneInverses = [] ) {\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneInverses = boneInverses;\n\t\tthis.boneMatrices = null;\n\n\t\tthis.boneTexture = null;\n\t\tthis.boneTextureSize = 0;\n\n\t\tthis.frame = - 1;\n\n\t\tthis.init();\n\n\t}\n\n\tinit() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tthis.boneMatrices = new Float32Array( bones.length * 16 );\n\n\t\t// calculate inverse bone matrices if necessary\n\n\t\tif ( boneInverses.length === 0 ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\t// handle special case\n\n\t\t\tif ( bones.length !== boneInverses.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcalculateInverses() {\n\n\t\tthis.boneInverses.length = 0;\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.copy( this.bones[ i ].matrixWorld ).invert();\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t}\n\n\tpose() {\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.copy( this.boneInverses[ i ] ).invert();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.copy( bone.parent.matrixWorld ).invert();\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\t\tconst boneMatrices = this.boneMatrices;\n\t\tconst boneTexture = this.boneTexture;\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tconst matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t}\n\n\t\tif ( boneTexture !== null ) {\n\n\t\t\tboneTexture.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t}\n\n\tcomputeBoneTexture() {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\t\tlet size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = ceilPowerOfTwo( size );\n\t\tsize = Math.max( size, 4 );\n\n\t\tconst boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\tboneMatrices.set( this.boneMatrices ); // copy current values\n\n\t\tconst boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\t\tboneTexture.needsUpdate = true;\n\n\t\tthis.boneMatrices = boneMatrices;\n\t\tthis.boneTexture = boneTexture;\n\t\tthis.boneTextureSize = size;\n\n\t\treturn this;\n\n\t}\n\n\tgetBoneByName( name ) {\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tdispose( ) {\n\n\t\tif ( this.boneTexture !== null ) {\n\n\t\t\tthis.boneTexture.dispose();\n\n\t\t\tthis.boneTexture = null;\n\n\t\t}\n\n\t}\n\n\tfromJSON( json, bones ) {\n\n\t\tthis.uuid = json.uuid;\n\n\t\tfor ( let i = 0, l = json.bones.length; i < l; i ++ ) {\n\n\t\t\tconst uuid = json.bones[ i ];\n\t\t\tlet bone = bones[ uuid ];\n\n\t\t\tif ( bone === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );\n\t\t\t\tbone = new Bone();\n\n\t\t\t}\n\n\t\t\tthis.bones.push( bone );\n\t\t\tthis.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );\n\n\t\t}\n\n\t\tthis.init();\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Skeleton',\n\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t},\n\t\t\tbones: [],\n\t\t\tboneInverses: []\n\t\t};\n\n\t\tdata.uuid = this.uuid;\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tfor ( let i = 0, l = bones.length; i < l; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\t\t\tdata.bones.push( bone.uuid );\n\n\t\t\tconst boneInverse = boneInverses[ i ];\n\t\t\tdata.boneInverses.push( boneInverse.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass InstancedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\n\n\t\tif ( typeof normalized === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tsuper( array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\tdata.isInstancedBufferAttribute = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nInstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _mesh = /*@__PURE__*/ new Mesh();\n\nclass InstancedMesh extends Mesh {\n\n\tconstructor( geometry, material, count ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\n\t\tthis.instanceColor = null;\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\n\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\n\n\t\tthis.count = source.count;\n\n\t\treturn this;\n\n\t}\n\n\tgetColorAt( index, color ) {\n\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tgetMatrixAt( index, matrix ) {\n\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst raycastTimes = this.count;\n\n\t\t_mesh.geometry = this.geometry;\n\t\t_mesh.material = this.material;\n\n\t\tif ( _mesh.material === undefined ) return;\n\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t// calculate the world matrix for each instance\n\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t// the mesh represents this single instance\n\n\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t// process the result of raycast\n\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\n\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_instanceIntersects.length = 0;\n\n\t\t}\n\n\t}\n\n\tsetColorAt( index, color ) {\n\n\t\tif ( this.instanceColor === null ) {\n\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ), 3 );\n\n\t\t}\n\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tsetMatrixAt( index, matrix ) {\n\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nInstancedMesh.prototype.isInstancedMesh = true;\n\nclass LineBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t}\n\n}\n\nLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\nconst _start$1 = /*@__PURE__*/ new Vector3();\nconst _end$1 = /*@__PURE__*/ new Vector3();\nconst _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _ray$1 = /*@__PURE__*/ new Ray();\nconst _sphere$1 = /*@__PURE__*/ new Sphere();\n\nclass Line extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t// we assume non-indexed geometry\n\n\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\tconst lineDistances = [ 0 ];\n\n\t\t\t\tfor ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i ] += _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Line.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$1.copy( geometry.boundingSphere );\n\t\t_sphere$1.applyMatrix4( matrixWorld );\n\t\t_sphere$1.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$1.copy( matrixWorld ).invert();\n\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst vStart = new Vector3();\n\t\tconst vEnd = new Vector3();\n\t\tconst interSegment = new Vector3();\n\t\tconst interRay = new Vector3();\n\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\tconst b = index.getX( i + 1 );\n\n\t\t\t\t\tvStart.fromBufferAttribute( positionAttribute, a );\n\t\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, b );\n\n\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\t\tvStart.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\tconst keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nLine.prototype.isLine = true;\n\nconst _start = /*@__PURE__*/ new Vector3();\nconst _end = /*@__PURE__*/ new Vector3();\n\nclass LineSegments extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t// we assume non-indexed geometry\n\n\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\tconst lineDistances = [];\n\n\t\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nLineSegments.prototype.isLineSegments = true;\n\nclass LineLoop extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n}\n\nLineLoop.prototype.isLineLoop = true;\n\nclass PointsMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t}\n\n}\n\nPointsMaterial.prototype.isPointsMaterial = true;\n\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\nconst _ray = /*@__PURE__*/ new Ray();\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _position$2 = /*@__PURE__*/ new Vector3();\n\nclass Points extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Points.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\t\t_sphere.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i ++ ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\n\t\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, a );\n\n\t\t\t\t\ttestPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, l = end; i < l; i ++ ) {\n\n\t\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\ttestPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\tconst keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nPoints.prototype.isPoints = true;\n\nfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\tconst rayPointDistanceSq = _ray.distanceSqToPoint( point );\n\n\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\tconst intersectPoint = new Vector3();\n\n\t\t_ray.closestPointToPoint( point, intersectPoint );\n\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\tpoint: intersectPoint,\n\t\t\tindex: index,\n\t\t\tface: null,\n\t\t\tobject: object\n\n\t\t} );\n\n\t}\n\n}\n\nclass VideoTexture extends Texture {\n\n\tconstructor( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tconst scope = this;\n\n\t\tfunction updateVideo() {\n\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t\tif ( 'requestVideoFrameCallback' in video ) {\n\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.image ).copy( this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst video = this.image;\n\t\tconst hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n\n\t\tif ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\nVideoTexture.prototype.isVideoTexture = true;\n\nclass FramebufferTexture extends Texture {\n\n\tconstructor( width, height, format ) {\n\n\t\tsuper( { width, height } );\n\n\t\tthis.format = format;\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nFramebufferTexture.prototype.isFramebufferTexture = true;\n\nclass CompressedTexture extends Texture {\n\n\tconstructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n}\n\nCompressedTexture.prototype.isCompressedTexture = true;\n\nclass CanvasTexture extends Texture {\n\n\tconstructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nCanvasTexture.prototype.isCanvasTexture = true;\n\n/**\n * Extensible curve object.\n *\n * Some common of curve methods:\n * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following curves inherit from THREE.Curve:\n *\n * -- 2D curves --\n * THREE.ArcCurve\n * THREE.CubicBezierCurve\n * THREE.EllipseCurve\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.SplineCurve\n *\n * -- 3D curves --\n * THREE.CatmullRomCurve3\n * THREE.CubicBezierCurve3\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath.\n *\n **/\n\nclass Curve {\n\n\tconstructor() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\treturn null;\n\n\t}\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t}\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get total curve arc length\n\n\tgetLength() {\n\n\t\tconst lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t}\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths( divisions = this.arcLengthDivisions ) {\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tconst cache = [];\n\t\tlet current, last = this.getPoint( 0 );\n\t\tlet sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( let p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t}\n\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t}\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping( u, distance ) {\n\n\t\tconst arcLengths = this.getLengths();\n\n\t\tlet i = 0;\n\t\tconst il = arcLengths.length;\n\n\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tlet low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tconst lengthBefore = arcLengths[ i ];\n\t\tconst lengthAfter = arcLengths[ i + 1 ];\n\n\t\tconst segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tconst segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tconst t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t}\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst delta = 0.0001;\n\t\tlet t1 = t - delta;\n\t\tlet t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tconst pt1 = this.getPoint( t1 );\n\t\tconst pt2 = this.getPoint( t2 );\n\n\t\tconst tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n\n\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t, optionalTarget );\n\n\t}\n\n\tcomputeFrenetFrames( segments, closed ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tconst normal = new Vector3();\n\n\t\tconst tangents = [];\n\t\tconst normals = [];\n\t\tconst binormals = [];\n\n\t\tconst vec = new Vector3();\n\t\tconst mat = new Matrix4();\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst u = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tlet min = Number.MAX_VALUE;\n\t\tconst tx = Math.abs( tangents[ 0 ].x );\n\t\tconst ty = Math.abs( tangents[ 0 ].y );\n\t\tconst tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\tconst theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\tlet theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass EllipseCurve extends Curve {\n\n\tconstructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX;\n\t\tthis.aY = aY;\n\n\t\tthis.xRadius = xRadius;\n\t\tthis.yRadius = yRadius;\n\n\t\tthis.aStartAngle = aStartAngle;\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\tthis.aClockwise = aClockwise;\n\n\t\tthis.aRotation = aRotation;\n\n\t}\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst point = optionalTarget || new Vector2();\n\n\t\tconst twoPi = Math.PI * 2;\n\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tconst samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\tlet x = this.aX + this.xRadius * Math.cos( angle );\n\t\tlet y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tconst cos = Math.cos( this.aRotation );\n\t\t\tconst sin = Math.sin( this.aRotation );\n\n\t\t\tconst tx = x - this.aX;\n\t\t\tconst ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t}\n\n}\n\nEllipseCurve.prototype.isEllipseCurve = true;\n\nclass ArcCurve extends EllipseCurve {\n\n\tconstructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tsuper( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n}\n\nArcCurve.prototype.isArcCurve = true;\n\n/**\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nconst tmp = new Vector3();\nconst px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\nclass CatmullRomCurve3 extends Curve {\n\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points;\n\t\tthis.closed = closed;\n\t\tthis.curveType = curveType;\n\t\tthis.tension = tension;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst l = points.length;\n\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tlet intPoint = Math.floor( p );\n\t\tlet weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tconst p1 = points[ intPoint % l ];\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t}\n\n}\n\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n/**\n * Bezier Curves formulas obtained from\n * https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n */\n\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tconst v0 = ( p2 - p0 ) * 0.5;\n\tconst v1 = ( p3 - p1 ) * 0.5;\n\tconst t2 = t * t;\n\tconst t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tconst k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\nclass CubicBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\nclass CubicBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\nclass LineCurve extends Curve {\n\n\tconstructor( v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst tangent = optionalTarget || new Vector2();\n\n\t\ttangent.copy( this.v2 ).sub( this.v1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nLineCurve.prototype.isLineCurve = true;\n\nclass LineCurve3 extends Curve {\n\n\tconstructor( v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LineCurve3';\n\t\tthis.isLineCurve3 = true;\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass QuadraticBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\nclass QuadraticBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\nclass SplineCurve extends Curve {\n\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst p = ( points.length - 1 ) * t;\n\n\t\tconst intPoint = Math.floor( p );\n\t\tconst weight = p - intPoint;\n\n\t\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tconst p1 = points[ intPoint ];\n\t\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nSplineCurve.prototype.isSplineCurve = true;\n\nvar Curves = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nclass CurvePath extends Curve {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tadd( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t}\n\n\tclosePath() {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tconst startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tconst endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t}\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst d = t * this.getLength();\n\t\tconst curveLengths = this.getCurveLengths();\n\t\tlet i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tconst diff = curveLengths[ i ] - d;\n\t\t\t\tconst curve = this.curves[ i ];\n\n\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u, optionalTarget );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t}\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength() {\n\n\t\tconst lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t}\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t}\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths() {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tconst lengths = [];\n\t\tlet sums = 0;\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t}\n\n\tgetSpacedPoints( divisions = 40 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tgetPoints( divisions = 12 ) {\n\n\t\tconst points = [];\n\t\tlet last;\n\n\t\tfor ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tconst curve = curves[ i ];\n\t\t\tconst resolution = curve.isEllipseCurve ? divisions * 2\n\t\t\t\t: ( curve.isLineCurve || curve.isLineCurve3 ) ? 1\n\t\t\t\t\t: curve.isSplineCurve ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tconst pts = curve.getPoints( resolution );\n\n\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tconst point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Path extends CurvePath {\n\n\tconstructor( points ) {\n\n\t\tsuper();\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( let i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tconst curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tconst curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tconst curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts /*Array of Vector*/ ) {\n\n\t\tconst npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tconst curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\treturn this;\n\n\t}\n\n\tarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tabsarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\treturn this;\n\n\t}\n\n\tabsellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tconst firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tconst lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LatheGeometry extends BufferGeometry {\n\n\tconstructor( points = [ new Vector2( 0, 0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, - 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments );\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = clamp( phiLength, 0, Math.PI * 2 );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst uvs = [];\n\t\tconst initNormals = [];\n\t\tconst normals = [];\n\n\t\t// helper variables\n\n\t\tconst inverseSegments = 1.0 / segments;\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tconst normal = new Vector3();\n\t\tconst curNormal = new Vector3();\n\t\tconst prevNormal = new Vector3();\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\n\t\t// pre-compute normals for initial \"meridian\"\n\n\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\tswitch ( j ) {\n\n\t\t\t\tcase 0:\t\t\t\t// special handling for 1st vertex on path\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tprevNormal.copy( normal );\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ( points.length - 1 ):\t// special handling for last Vertex on path\n\n\t\t\t\t\tinitNormals.push( prevNormal.x, prevNormal.y, prevNormal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\t\t\t// default handling for all vertices in between\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tcurNormal.copy( normal );\n\n\t\t\t\t\tnormal.x += prevNormal.x;\n\t\t\t\t\tnormal.y += prevNormal.y;\n\t\t\t\t\tnormal.z += prevNormal.z;\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tprevNormal.copy( curNormal );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices, uvs and normals\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tconst sin = Math.sin( phi );\n\t\t\tconst cos = Math.cos( phi );\n\n\t\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// normal\n\n\t\t\t\tconst x = initNormals[ 3 * j + 0 ] * sin;\n\t\t\t\tconst y = initNormals[ 3 * j + 1 ];\n\t\t\t\tconst z = initNormals[ 3 * j + 0 ] * cos;\n\n\t\t\t\tnormals.push( x, y, z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tconst base = j + i * points.length;\n\n\t\t\t\tconst a = base;\n\t\t\t\tconst b = base + points.length;\n\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\tconst d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( c, d, b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );\n\n\t}\n\n}\n\nclass CapsuleGeometry extends LatheGeometry {\n\n\tconstructor( radius = 1, length = 1, capSegments = 4, radialSegments = 8 ) {\n\n\t\tconst path = new Path();\n\t\tpath.absarc( 0, - length / 2, radius, Math.PI * 1.5, 0 );\n\t\tpath.absarc( 0, length / 2, radius, 0, Math.PI * 0.5 );\n\n\t\tsuper( path.getPoints( capSegments ), radialSegments );\n\n\t\tthis.type = 'CapsuleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: length,\n\t\t\tcapSegments: capSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CapsuleGeometry( data.radius, data.length, data.capSegments, data.radialSegments );\n\n\t}\n\n}\n\nclass CircleGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tsegments = Math.max( 3, segments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tconst segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass CylinderGeometry extends BufferGeometry {\n\n\tconstructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tconst scope = this;\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet index = 0;\n\t\tconst indexArray = [];\n\t\tconst halfHeight = height / 2;\n\t\tlet groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tconst normal = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tconst slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tconst indexRow = [];\n\n\t\t\t\tconst v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tconst radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tconst u = x / radialSegments;\n\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tconst sinTheta = Math.sin( theta );\n\t\t\t\t\tconst cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tconst a = indexArray[ y ][ x ];\n\t\t\t\t\tconst b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tconst c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tconst d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\t// save the index of the first center vertex\n\t\t\tconst centerIndexStart = index;\n\n\t\t\tconst uv = new Vector2();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tconst sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( let x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\t\t\tconst centerIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tconst u = x / radialSegments;\n\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\tconst cosTheta = Math.cos( theta );\n\t\t\t\tconst sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ConeGeometry extends CylinderGeometry {\n\n\tconstructor( radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass PolyhedronGeometry extends BufferGeometry {\n\n\tconstructor( vertices = [], indices = [], radius = 1, detail = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\t// default buffer data\n\n\t\tconst vertexBuffer = [];\n\t\tconst uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( let i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tconst cols = detail + 1;\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tconst v = [];\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( let i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tconst aj = a.clone().lerp( c, i / cols );\n\t\t\t\tconst bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tconst rows = cols - i;\n\n\t\t\t\tfor ( let j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( let i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tconst k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tconst u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tconst v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( let i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tconst x0 = uvBuffer[ i + 0 ];\n\t\t\t\tconst x1 = uvBuffer[ i + 2 ];\n\t\t\t\tconst x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tconst max = Math.max( x0, x1, x2 );\n\t\t\t\tconst min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tconst stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\tconst centroid = new Vector3();\n\n\t\t\tconst uvA = new Vector2();\n\t\t\tconst uvB = new Vector2();\n\t\t\tconst uvC = new Vector2();\n\n\t\t\tfor ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tconst azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );\n\n\t}\n\n}\n\nclass DodecahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tconst r = 1 / t;\n\n\t\tconst vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t0, - r, - t, 0, - r, t,\n\t\t\t0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\tr, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tconst indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new DodecahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nconst _v0 = new Vector3();\nconst _v1$1 = new Vector3();\nconst _normal = new Vector3();\nconst _triangle = new Triangle();\n\nclass EdgesGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null, thresholdAngle = 1 ) {\n\n\t\tsuper();\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry,\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow( 10, precisionPoints );\n\t\t\tconst thresholdDot = Math.cos( DEG2RAD * thresholdAngle );\n\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute( 'position' );\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\n\t\t\tconst indexArr = [ 0, 0, 0 ];\n\t\t\tconst vertKeys = [ 'a', 'b', 'c' ];\n\t\t\tconst hashes = new Array( 3 );\n\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\t\t\tfor ( let i = 0; i < indexCount; i += 3 ) {\n\n\t\t\t\tif ( indexAttr ) {\n\n\t\t\t\t\tindexArr[ 0 ] = indexAttr.getX( i );\n\t\t\t\t\tindexArr[ 1 ] = indexAttr.getX( i + 1 );\n\t\t\t\t\tindexArr[ 2 ] = indexAttr.getX( i + 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindexArr[ 0 ] = i;\n\t\t\t\t\tindexArr[ 1 ] = i + 1;\n\t\t\t\t\tindexArr[ 2 ] = i + 2;\n\n\t\t\t\t}\n\n\t\t\t\tconst { a, b, c } = _triangle;\n\t\t\t\ta.fromBufferAttribute( positionAttr, indexArr[ 0 ] );\n\t\t\t\tb.fromBufferAttribute( positionAttr, indexArr[ 1 ] );\n\t\t\t\tc.fromBufferAttribute( positionAttr, indexArr[ 2 ] );\n\t\t\t\t_triangle.getNormal( _normal );\n\n\t\t\t\t// create hashes for the edge from the vertices\n\t\t\t\thashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;\n\t\t\t\thashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;\n\t\t\t\thashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;\n\n\t\t\t\t// skip degenerate triangles\n\t\t\t\tif ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over every edge\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = ( j + 1 ) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[ j ];\n\t\t\t\t\tconst vecHash1 = hashes[ jNext ];\n\t\t\t\t\tconst v0 = _triangle[ vertKeys[ j ] ];\n\t\t\t\t\tconst v1 = _triangle[ vertKeys[ jNext ] ];\n\n\t\t\t\t\tconst hash = `${ vecHash0 }_${ vecHash1 }`;\n\t\t\t\t\tconst reverseHash = `${ vecHash1 }_${ vecHash0 }`;\n\n\t\t\t\t\tif ( reverseHash in edgeData && edgeData[ reverseHash ] ) {\n\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {\n\n\t\t\t\t\t\t\tvertices.push( v0.x, v0.y, v0.z );\n\t\t\t\t\t\t\tvertices.push( v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[ reverseHash ] = null;\n\n\t\t\t\t\t} else if ( ! ( hash in edgeData ) ) {\n\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[ hash ] = {\n\n\t\t\t\t\t\t\tindex0: indexArr[ j ],\n\t\t\t\t\t\t\tindex1: indexArr[ jNext ],\n\t\t\t\t\t\t\tnormal: _normal.clone(),\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// iterate over all remaining, unmatched edges and add them to the vertex array\n\t\t\tfor ( const key in edgeData ) {\n\n\t\t\t\tif ( edgeData[ key ] ) {\n\n\t\t\t\t\tconst { index0, index1 } = edgeData[ key ];\n\t\t\t\t\t_v0.fromBufferAttribute( positionAttr, index0 );\n\t\t\t\t\t_v1$1.fromBufferAttribute( positionAttr, index1 );\n\n\t\t\t\t\tvertices.push( _v0.x, _v0.y, _v0.z );\n\t\t\t\t\tvertices.push( _v1$1.x, _v1$1.y, _v1$1.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n}\n\nclass Shape extends Path {\n\n\tconstructor( points ) {\n\n\t\tsuper( points );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tgetPointsHoles( divisions ) {\n\n\t\tconst holesPts = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t}\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\textractPoints( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Port from https://github.com/mapbox/earcut (v2.2.2)\n */\n\nconst Earcut = {\n\n\ttriangulate: function ( data, holeIndices, dim = 2 ) {\n\n\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\tconst outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;\n\t\tlet outerNode = linkedList( data, 0, outerLen, dim, true );\n\t\tconst triangles = [];\n\n\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;\n\n\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\tif ( data.length > 80 * dim ) {\n\n\t\t\tminX = maxX = data[ 0 ];\n\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\tfor ( let i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\tx = data[ i ];\n\t\t\t\ty = data[ i + 1 ];\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t}\n\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t}\n\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\treturn triangles;\n\n\t}\n\n};\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList( data, start, end, dim, clockwise ) {\n\n\tlet i, last;\n\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t} else {\n\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t}\n\n\tif ( last && equals( last, last.next ) ) {\n\n\t\tremoveNode( last );\n\t\tlast = last.next;\n\n\t}\n\n\treturn last;\n\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints( start, end ) {\n\n\tif ( ! start ) return start;\n\tif ( ! end ) end = start;\n\n\tlet p = start,\n\t\tagain;\n\tdo {\n\n\t\tagain = false;\n\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\tremoveNode( p );\n\t\t\tp = end = p.prev;\n\t\t\tif ( p === p.next ) break;\n\t\t\tagain = true;\n\n\t\t} else {\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t} while ( again || p !== end );\n\n\treturn end;\n\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\tif ( ! ear ) return;\n\n\t// interlink polygon nodes in z-order\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\tlet stop = ear,\n\t\tprev, next;\n\n\t// iterate through ears, slicing them one by one\n\twhile ( ear.prev !== ear.next ) {\n\n\t\tprev = ear.prev;\n\t\tnext = ear.next;\n\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t// cut off the triangle\n\t\t\ttriangles.push( prev.i / dim );\n\t\t\ttriangles.push( ear.i / dim );\n\t\t\ttriangles.push( next.i / dim );\n\n\t\t\tremoveNode( ear );\n\n\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\tear = next.next;\n\t\t\tstop = next.next;\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tear = next;\n\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\tif ( ear === stop ) {\n\n\t\t\t// try filtering points and slicing again\n\t\t\tif ( ! pass ) {\n\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\tear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar( ear ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// now make sure we don't have other points inside the potential ear\n\tlet p = ear.next.next;\n\n\twhile ( p !== ear.prev ) {\n\n\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.next;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// triangle bbox; min & max are calculated like this for speed\n\tconst minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t// z-order range for the current triangle bbox;\n\tconst minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\tlet p = ear.prevZ,\n\t\tn = ear.nextZ;\n\n\t// look for points inside the triangle in both directions\n\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\tarea( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\t// look for remaining points in decreasing z-order\n\twhile ( p && p.z >= minZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t}\n\n\t// look for remaining points in increasing z-order\n\twhile ( n && n.z <= maxZ ) {\n\n\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\tarea( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\treturn true;\n\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections( start, triangles, dim ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tconst a = p.prev,\n\t\t\tb = p.next.next;\n\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\ttriangles.push( a.i / dim );\n\t\t\ttriangles.push( p.i / dim );\n\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t// remove two nodes involved\n\t\t\tremoveNode( p );\n\t\t\tremoveNode( p.next );\n\n\t\t\tp = start = b;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn filterPoints( p );\n\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t// look for a valid diagonal that divides the polygon into two\n\tlet a = start;\n\tdo {\n\n\t\tlet b = a.next.next;\n\t\twhile ( b !== a.prev ) {\n\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\tlet c = splitPolygon( a, b );\n\n\t\t\t\t// filter colinear points around the cuts\n\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t// run earcut on each half\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tb = b.next;\n\n\t\t}\n\n\t\ta = a.next;\n\n\t} while ( a !== start );\n\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\tconst queue = [];\n\tlet i, len, start, end, list;\n\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\tstart = holeIndices[ i ] * dim;\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\tlist = linkedList( data, start, end, dim, false );\n\t\tif ( list === list.next ) list.steiner = true;\n\t\tqueue.push( getLeftmost( list ) );\n\n\t}\n\n\tqueue.sort( compareX );\n\n\t// process holes from left to right\n\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\teliminateHole( queue[ i ], outerNode );\n\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t}\n\n\treturn outerNode;\n\n}\n\nfunction compareX( a, b ) {\n\n\treturn a.x - b.x;\n\n}\n\n// find a bridge between vertices that connects hole with an outer ring and link it\nfunction eliminateHole( hole, outerNode ) {\n\n\touterNode = findHoleBridge( hole, outerNode );\n\tif ( outerNode ) {\n\n\t\tconst b = splitPolygon( outerNode, hole );\n\n\t\t// filter collinear points around the cuts\n\t\tfilterPoints( outerNode, outerNode.next );\n\t\tfilterPoints( b, b.next );\n\n\t}\n\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge( hole, outerNode ) {\n\n\tlet p = outerNode;\n\tconst hx = hole.x;\n\tconst hy = hole.y;\n\tlet qx = - Infinity, m;\n\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t// segment's endpoint with lesser x will be potential connection point\n\tdo {\n\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\tconst x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\tqx = x;\n\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\tif ( hy === p.y ) return p;\n\t\t\t\t\tif ( hy === p.next.y ) return p.next;\n\n\t\t\t\t}\n\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== outerNode );\n\n\tif ( ! m ) return null;\n\n\tif ( hx === qx ) return m; // hole touches outer segment; pick leftmost endpoint\n\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t// if there are no points found, we have a valid connection;\n\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\tconst stop = m,\n\t\tmx = m.x,\n\t\tmy = m.y;\n\tlet tanMin = Infinity, tan;\n\n\tp = m;\n\n\tdo {\n\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\tif ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\n\n\t\t\t\tm = p;\n\t\t\t\ttanMin = tan;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== stop );\n\n\treturn m;\n\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector( m, p ) {\n\n\treturn area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\n\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve( start, minX, minY, invSize ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\tp.prevZ = p.prev;\n\t\tp.nextZ = p.next;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\tp.prevZ.nextZ = null;\n\tp.prevZ = null;\n\n\tsortLinked( p );\n\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked( list ) {\n\n\tlet i, p, q, e, tail, numMerges, pSize, qSize,\n\t\tinSize = 1;\n\n\tdo {\n\n\t\tp = list;\n\t\tlist = null;\n\t\ttail = null;\n\t\tnumMerges = 0;\n\n\t\twhile ( p ) {\n\n\t\t\tnumMerges ++;\n\t\t\tq = p;\n\t\t\tpSize = 0;\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\tpSize ++;\n\t\t\t\tq = q.nextZ;\n\t\t\t\tif ( ! q ) break;\n\n\t\t\t}\n\n\t\t\tqSize = inSize;\n\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\te = p;\n\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\tpSize --;\n\n\t\t\t\t} else {\n\n\t\t\t\t\te = q;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tqSize --;\n\n\t\t\t\t}\n\n\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\telse list = e;\n\n\t\t\t\te.prevZ = tail;\n\t\t\t\ttail = e;\n\n\t\t\t}\n\n\t\t\tp = q;\n\n\t\t}\n\n\t\ttail.nextZ = null;\n\t\tinSize *= 2;\n\n\t} while ( numMerges > 1 );\n\n\treturn list;\n\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t// coords are transformed into non-negative 15-bit integer range\n\tx = 32767 * ( x - minX ) * invSize;\n\ty = 32767 * ( y - minY ) * invSize;\n\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\treturn x | ( y << 1 );\n\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost( start ) {\n\n\tlet p = start,\n\t\tleftmost = start;\n\tdo {\n\n\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn leftmost;\n\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal( a, b ) {\n\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // doesn't intersect other edges\n\t\t( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\n\t\t( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\n\t\tequals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\n\n}\n\n// signed area of a triangle\nfunction area( p, q, r ) {\n\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n}\n\n// check if two points are equal\nfunction equals( p1, p2 ) {\n\n\treturn p1.x === p2.x && p1.y === p2.y;\n\n}\n\n// check if two segments intersect\nfunction intersects( p1, q1, p2, q2 ) {\n\n\tconst o1 = sign( area( p1, q1, p2 ) );\n\tconst o2 = sign( area( p1, q1, q2 ) );\n\tconst o3 = sign( area( p2, q2, p1 ) );\n\tconst o4 = sign( area( p2, q2, q1 ) );\n\n\tif ( o1 !== o2 && o3 !== o4 ) return true; // general case\n\n\tif ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\tif ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\tif ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\tif ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\treturn false;\n\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment( p, q, r ) {\n\n\treturn q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\n\n}\n\nfunction sign( num ) {\n\n\treturn num > 0 ? 1 : num < 0 ? - 1 : 0;\n\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon( a, b ) {\n\n\tlet p = a;\n\tdo {\n\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\tintersects( p, p.next, a, b ) ) return true;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn false;\n\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside( a, b ) {\n\n\treturn area( a.prev, a, a.next ) < 0 ?\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside( a, b ) {\n\n\tlet p = a,\n\t\tinside = false;\n\tconst px = ( a.x + b.x ) / 2,\n\t\tpy = ( a.y + b.y ) / 2;\n\tdo {\n\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\tinside = ! inside;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn inside;\n\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon( a, b ) {\n\n\tconst a2 = new Node( a.i, a.x, a.y ),\n\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\tan = a.next,\n\t\tbp = b.prev;\n\n\ta.next = b;\n\tb.prev = a;\n\n\ta2.next = an;\n\tan.prev = a2;\n\n\tb2.next = a2;\n\ta2.prev = b2;\n\n\tbp.next = b2;\n\tb2.prev = bp;\n\n\treturn b2;\n\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode( i, x, y, last ) {\n\n\tconst p = new Node( i, x, y );\n\n\tif ( ! last ) {\n\n\t\tp.prev = p;\n\t\tp.next = p;\n\n\t} else {\n\n\t\tp.next = last.next;\n\t\tp.prev = last;\n\t\tlast.next.prev = p;\n\t\tlast.next = p;\n\n\t}\n\n\treturn p;\n\n}\n\nfunction removeNode( p ) {\n\n\tp.next.prev = p.prev;\n\tp.prev.next = p.next;\n\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n}\n\nfunction Node( i, x, y ) {\n\n\t// vertex index in coordinates array\n\tthis.i = i;\n\n\t// vertex coordinates\n\tthis.x = x;\n\tthis.y = y;\n\n\t// previous and next vertex nodes in a polygon ring\n\tthis.prev = null;\n\tthis.next = null;\n\n\t// z-order curve value\n\tthis.z = null;\n\n\t// previous and next nodes in z-order\n\tthis.prevZ = null;\n\tthis.nextZ = null;\n\n\t// indicates whether this is a steiner point\n\tthis.steiner = false;\n\n}\n\nfunction signedArea( data, start, end, dim ) {\n\n\tlet sum = 0;\n\tfor ( let i = start, j = end - dim; i < end; i += dim ) {\n\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\tj = i;\n\n\t}\n\n\treturn sum;\n\n}\n\nclass ShapeUtils {\n\n\t// calculate area of the contour polygon\n\n\tstatic area( contour ) {\n\n\t\tconst n = contour.length;\n\t\tlet a = 0.0;\n\n\t\tfor ( let p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t}\n\n\tstatic isClockWise( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t}\n\n\tstatic triangulateShape( contour, holes ) {\n\n\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tconst holeIndices = []; // array of hole indices\n\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tlet holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( let i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tconst triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( let i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n}\n\nfunction removeDupEndPts( points ) {\n\n\tconst l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( let i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\n/**\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  depth: <float>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n *  bevelOffset: <float>, // how far from shape outline does bevel start\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\n *\n *  UVGenerator: <Object> // object that provides UV generator functions\n *\n * }\n */\n\nclass ExtrudeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( - 0.5, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tconst scope = this;\n\n\t\tconst verticesArray = [];\n\t\tconst uvArray = [];\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst placeholder = [];\n\n\t\t\t// options\n\n\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tlet depth = options.depth !== undefined ? options.depth : 1;\n\n\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tconst extrudePath = options.extrudePath;\n\n\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet extrudePts, extrudeByPath = false;\n\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tconst shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tlet vertices = shapePoints.shape;\n\t\t\tconst holes = shapePoints.holes;\n\n\t\t\tconst reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tconst vlen = vertices.length, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tconst v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tconst collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tconst v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tconst v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tconst ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tconst ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tconst ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tconst ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tconst sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tconst v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tconst contourMovements = [];\n\n\t\t\tfor ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tconst holesMovements = [];\n\t\t\tlet oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( let b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst bs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tfor ( let s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( let b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tlet layer = 0; // steps + 1\n\t\t\t\t\tlet offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\tlet layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tlet i = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tconst j = i;\n\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tfor ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n\n\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\tconst slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\t\tconst options = this.parameters.options;\n\n\t\treturn toJSON$1( shapes, options, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\tconst extrudePath = data.options.extrudePath;\n\n\t\tif ( extrudePath !== undefined ) {\n\n\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t}\n\n\t\treturn new ExtrudeGeometry( geometryShapes, data.options );\n\n\t}\n\n}\n\nconst WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst a_z = vertices[ indexA * 3 + 2 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst b_z = vertices[ indexB * 3 + 2 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\t\tconst c_z = vertices[ indexC * 3 + 2 ];\n\t\tconst d_x = vertices[ indexD * 3 ];\n\t\tconst d_y = vertices[ indexD * 3 + 1 ];\n\t\tconst d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n\n};\n\nfunction toJSON$1( shapes, options, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n\n\treturn data;\n\n}\n\nclass IcosahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tconst vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\tt, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new IcosahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass OctahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new OctahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass RingGeometry extends BufferGeometry {\n\n\tconstructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthetaSegments = Math.max( 3, thetaSegments );\n\t\tphiSegments = Math.max( 1, phiSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// some helper variables\n\n\t\tlet radius = innerRadius;\n\t\tconst radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tconst thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( let i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tconst segment = i + thetaSegmentLevel;\n\n\t\t\t\tconst a = segment;\n\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\tconst d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ShapeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {\n\n\t\tsuper();\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet groupStart = 0;\n\t\tlet groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\tconst points = shape.extractPoints( curveSegments );\n\n\t\t\tlet shapeVertices = points.shape;\n\t\t\tconst shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tconst vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tconst face = faces[ i ];\n\n\t\t\t\tconst a = face[ 0 ] + indexOffset;\n\t\t\t\tconst b = face[ 1 ] + indexOffset;\n\t\t\t\tconst c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\n\t\treturn toJSON( shapes, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\treturn new ShapeGeometry( geometryShapes, data.curveSegments );\n\n\t}\n\n}\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\nclass SphereGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\n\n\t\tsuper();\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\n\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tlet index = 0;\n\t\tconst grid = [];\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tconst verticesRow = [];\n\n\t\t\tconst v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tlet uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tconst u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\n\t\t\t\tconst b = grid[ iy ][ ix ];\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass TetrahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TetrahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass TorusGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2 ) {\n\n\t\tsuper();\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\ttubularSegments = Math.floor( tubularSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst center = new Vector3();\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\n\n\t}\n\n}\n\nclass TorusKnotGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {\n\n\t\tsuper();\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\ttubularSegments = Math.floor( tubularSegments );\n\t\tradialSegments = Math.floor( radialSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tconst P1 = new Vector3();\n\t\tconst P2 = new Vector3();\n\n\t\tconst B = new Vector3();\n\t\tconst T = new Vector3();\n\t\tconst N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segment\n\n\t\t\tconst u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( let j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\tconst cx = - tube * Math.cos( v );\n\t\t\t\tconst cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tconst cu = Math.cos( u );\n\t\t\tconst su = Math.sin( u );\n\t\t\tconst quOverP = q / p * u;\n\t\t\tconst cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );\n\n\t}\n\n}\n\nclass TubeGeometry extends BufferGeometry {\n\n\tconstructor( path = new QuadraticBezierCurve3( new Vector3( - 1, - 1, 0 ), new Vector3( - 1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {\n\n\t\tsuper();\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tconst frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tlet P = new Vector3();\n\n\t\t// buffer\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\t\tconst indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( let i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tconst N = frames.normals[ i ];\n\t\t\tconst B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tconst sin = Math.sin( v );\n\t\t\t\tconst cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\treturn new TubeGeometry(\n\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\tdata.tubularSegments,\n\t\t\tdata.radius,\n\t\t\tdata.radialSegments,\n\t\t\tdata.closed\n\t\t);\n\n\t}\n\n}\n\nclass WireframeGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null ) {\n\n\t\tsuper();\n\t\tthis.type = 'WireframeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\t// buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst edges = new Set();\n\n\t\t\t// helper variables\n\n\t\t\tconst start = new Vector3();\n\t\t\tconst end = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\t\tfor ( let o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tconst group = groups[ o ];\n\n\t\t\t\t\tconst groupStart = group.start;\n\t\t\t\t\tconst groupCount = group.count;\n\n\t\t\t\t\tfor ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tconst index1 = indices.getX( i + j );\n\t\t\t\t\t\t\tconst index2 = indices.getX( i + ( j + 1 ) % 3 );\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tconst index2 = 3 * i + ( ( j + 1 ) % 3 );\n\n\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n}\n\nfunction isUniqueEdge( start, end, edges ) {\n\n\tconst hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n\tconst hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n\tif ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {\n\n\t\treturn false;\n\n\t} else {\n\n\t\tedges.add( hash1 );\n\t\tedges.add( hash2 );\n\t\treturn true;\n\n\t}\n\n}\n\nvar Geometries = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBoxGeometry: BoxGeometry,\n\tBoxBufferGeometry: BoxGeometry,\n\tCapsuleGeometry: CapsuleGeometry,\n\tCapsuleBufferGeometry: CapsuleGeometry,\n\tCircleGeometry: CircleGeometry,\n\tCircleBufferGeometry: CircleGeometry,\n\tConeGeometry: ConeGeometry,\n\tConeBufferGeometry: ConeGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tCylinderBufferGeometry: CylinderGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tExtrudeBufferGeometry: ExtrudeGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\tLatheGeometry: LatheGeometry,\n\tLatheBufferGeometry: LatheGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tOctahedronBufferGeometry: OctahedronGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPlaneBufferGeometry: PlaneGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\tRingGeometry: RingGeometry,\n\tRingBufferGeometry: RingGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tShapeBufferGeometry: ShapeGeometry,\n\tSphereGeometry: SphereGeometry,\n\tSphereBufferGeometry: SphereGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusBufferGeometry: TorusGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\tTubeGeometry: TubeGeometry,\n\tTubeBufferGeometry: TubeGeometry,\n\tWireframeGeometry: WireframeGeometry\n});\n\nclass ShadowMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t}\n\n}\n\nShadowMaterial.prototype.isShadowMaterial = true;\n\nclass RawShaderMaterial extends ShaderMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n}\n\nRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\nclass MeshStandardMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.ior = 1.5;\n\n\t\tObject.defineProperty( this, 'reflectivity', {\n\t\t\tget: function () {\n\n\t\t\t\treturn ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\n\n\t\t\t},\n\t\t\tset: function ( reflectivity ) {\n\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.sheenColor = new Color( 0x000000 );\n\t\tthis.sheenColorMap = null;\n\t\tthis.sheenRoughness = 1.0;\n\t\tthis.sheenRoughnessMap = null;\n\n\t\tthis.transmissionMap = null;\n\n\t\tthis.thickness = 0;\n\t\tthis.thicknessMap = null;\n\t\tthis.attenuationDistance = 0.0;\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\n\n\t\tthis.specularIntensity = 1.0;\n\t\tthis.specularIntensityMap = null;\n\t\tthis.specularColor = new Color( 1, 1, 1 );\n\t\tthis.specularColorMap = null;\n\n\t\tthis._sheen = 0.0;\n\t\tthis._clearcoat = 0;\n\t\tthis._transmission = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tget sheen() {\n\n\t\treturn this._sheen;\n\n\t}\n\n\tset sheen( value ) {\n\n\t\tif ( this._sheen > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._sheen = value;\n\n\t}\n\n\tget clearcoat() {\n\n\t\treturn this._clearcoat;\n\n\t}\n\n\tset clearcoat( value ) {\n\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._clearcoat = value;\n\n\t}\n\n\tget transmission() {\n\n\t\treturn this._transmission;\n\n\t}\n\n\tset transmission( value ) {\n\n\t\tif ( this._transmission > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._transmission = value;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.ior = source.ior;\n\n\t\tthis.sheen = source.sheen;\n\t\tthis.sheenColor.copy( source.sheenColor );\n\t\tthis.sheenColorMap = source.sheenColorMap;\n\t\tthis.sheenRoughness = source.sheenRoughness;\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\n\t\tthis.thickness = source.thickness;\n\t\tthis.thicknessMap = source.thicknessMap;\n\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\tthis.attenuationColor.copy( source.attenuationColor );\n\n\t\tthis.specularIntensity = source.specularIntensity;\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\tthis.specularColor.copy( source.specularColor );\n\t\tthis.specularColorMap = source.specularColorMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\nclass MeshPhongMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\nclass MeshToonMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\nclass MeshNormalMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\nclass MeshLambertMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\nclass MeshMatcapMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\nclass LineDashedMaterial extends LineBasicMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t}\n\n}\n\nLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\nconst materialLib = {\n\tShadowMaterial,\n\tSpriteMaterial,\n\tRawShaderMaterial,\n\tShaderMaterial,\n\tPointsMaterial,\n\tMeshPhysicalMaterial,\n\tMeshStandardMaterial,\n\tMeshPhongMaterial,\n\tMeshToonMaterial,\n\tMeshNormalMaterial,\n\tMeshLambertMaterial,\n\tMeshDepthMaterial,\n\tMeshDistanceMaterial,\n\tMeshBasicMaterial,\n\tMeshMatcapMaterial,\n\tLineDashedMaterial,\n\tLineBasicMaterial,\n\tMaterial\n};\n\nMaterial.fromType = function ( type ) {\n\n\treturn new materialLib[ type ]();\n\n};\n\nconst AnimationUtils = {\n\n\t// same as Array.prototype.slice, but also works on typed arrays\n\tarraySlice: function ( array, from, to ) {\n\n\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t}\n\n\t\treturn array.slice( from, to );\n\n\t},\n\n\t// converts an array to a specific type\n\tconvertArray: function ( array, type, forceClone ) {\n\n\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\treturn new type( array ); // create typed array\n\n\t\t}\n\n\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t},\n\n\tisTypedArray: function ( object ) {\n\n\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t! ( object instanceof DataView );\n\n\t},\n\n\t// returns an array by which times and values can be sorted\n\tgetKeyframeOrder: function ( times ) {\n\n\t\tfunction compareTime( i, j ) {\n\n\t\t\treturn times[ i ] - times[ j ];\n\n\t\t}\n\n\t\tconst n = times.length;\n\t\tconst result = new Array( n );\n\t\tfor ( let i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\tresult.sort( compareTime );\n\n\t\treturn result;\n\n\t},\n\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\tsortedArray: function ( values, stride, order ) {\n\n\t\tconst nValues = values.length;\n\t\tconst result = new values.constructor( nValues );\n\n\t\tfor ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\tconst srcOffset = order[ i ] * stride;\n\n\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// function for parsing AOS keyframe formats\n\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\tlet i = 1, key = jsonKeys[ 0 ];\n\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t}\n\n\t\tif ( key === undefined ) return; // no data\n\n\t\tlet value = key[ valuePropertyName ];\n\t\tif ( value === undefined ) return; // no data\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t// ...assume THREE.Math-ish\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else {\n\n\t\t\t// otherwise push as-is\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t}\n\n\t},\n\n\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps = 30 ) {\n\n\t\tconst clip = sourceClip.clone();\n\n\t\tclip.name = name;\n\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\tconst track = clip.tracks[ i ];\n\t\t\tconst valueSize = track.getValueSize();\n\n\t\t\tconst times = [];\n\t\t\tconst values = [];\n\n\t\t\tfor ( let j = 0; j < track.times.length; ++ j ) {\n\n\t\t\t\tconst frame = track.times[ j ] * fps;\n\n\t\t\t\tif ( frame < startFrame || frame >= endFrame ) continue;\n\n\t\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\t\tfor ( let k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( times.length === 0 ) continue;\n\n\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\n\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\n\n\t\t\ttracks.push( track );\n\n\t\t}\n\n\t\tclip.tracks = tracks;\n\n\t\t// find minimum .times value across all tracks in the trimmed clip\n\n\t\tlet minStartTime = Infinity;\n\n\t\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// shift all tracks such that clip begins at t=0\n\n\t\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t\t}\n\n\t\tclip.resetDuration();\n\n\t\treturn clip;\n\n\t},\n\n\tmakeClipAdditive: function ( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\n\n\t\tif ( fps <= 0 ) fps = 30;\n\n\t\tconst numTracks = referenceClip.tracks.length;\n\t\tconst referenceTime = referenceFrame / fps;\n\n\t\t// Make each track's values relative to the values at the reference frame\n\t\tfor ( let i = 0; i < numTracks; ++ i ) {\n\n\t\t\tconst referenceTrack = referenceClip.tracks[ i ];\n\t\t\tconst referenceTrackType = referenceTrack.ValueTypeName;\n\n\t\t\t// Skip this track if it's non-numeric\n\t\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;\n\n\t\t\t// Find the track in the target clip whose name and type matches the reference track\n\t\t\tconst targetTrack = targetClip.tracks.find( function ( track ) {\n\n\t\t\t\treturn track.name === referenceTrack.name\n\t\t\t\t\t&& track.ValueTypeName === referenceTrackType;\n\n\t\t\t} );\n\n\t\t\tif ( targetTrack === undefined ) continue;\n\n\t\t\tlet referenceOffset = 0;\n\t\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\tif ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\t\treferenceOffset = referenceValueSize / 3;\n\n\t\t\t}\n\n\t\t\tlet targetOffset = 0;\n\t\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\t\tif ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\t\ttargetOffset = targetValueSize / 3;\n\n\t\t\t}\n\n\t\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\t\tlet referenceValue;\n\n\t\t\t// Find the value to subtract out of the track\n\t\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\n\n\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\treferenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex, endIndex );\n\n\t\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n\n\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\t\treferenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex, endIndex );\n\n\t\t\t} else {\n\n\t\t\t\t// Interpolate to the reference value\n\t\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\tinterpolant.evaluate( referenceTime );\n\t\t\t\treferenceValue = AnimationUtils.arraySlice( interpolant.resultBuffer, startIndex, endIndex );\n\n\t\t\t}\n\n\t\t\t// Conjugate the quaternion\n\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\tconst referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\n\t\t\t\treferenceQuat.toArray( referenceValue );\n\n\t\t\t}\n\n\t\t\t// Subtract the reference value from all of the track values\n\n\t\t\tconst numTimes = targetTrack.times.length;\n\t\t\tfor ( let j = 0; j < numTimes; ++ j ) {\n\n\t\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(\n\t\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\t\tvalueStart,\n\t\t\t\t\t\treferenceValue,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\t\tvalueStart\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2;\n\n\t\t\t\t\t// Subtract each value for all other numeric track types\n\t\t\t\t\tfor ( let k = 0; k < valueEnd; ++ k ) {\n\n\t\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\n\t\treturn targetClip;\n\n\t}\n\n};\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n */\n\nclass Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t\tthis.settings = null;\n\t\tthis.DefaultSettings_ = {};\n\n\t}\n\n\tevaluate( t ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet i1 = this._cachedIndex,\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tlet right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tconst t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tconst mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t}\n\n\tgetSettings_() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t}\n\n\tcopySampleValue_( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t// Template methods for derived classes:\n\n\tinterpolate_( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t}\n\n\tintervalChanged_( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n}\n\n// ALIAS DEFINITIONS\n\nInterpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;\nInterpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n */\n\nclass CubicInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t\tthis.DefaultSettings_ = {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t};\n\n\t}\n\n\tintervalChanged_( i1, t0, t1 ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet iPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tconst s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\tconst s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tconst sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\nclass LinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceding\n * the parameter.\n */\n\nclass DiscreteInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n}\n\nclass KeyframeTrack {\n\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tstatic toJSON( track ) {\n\n\t\tconst trackType = track.constructor;\n\n\t\tlet json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== this.toJSON ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t}\n\n\tInterpolantFactoryMethodDiscrete( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodSmooth( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tsetInterpolation( interpolation ) {\n\n\t\tlet factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tconst message = 'unsupported interpolation for ' +\n\t\t\t\tthis.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t\treturn this;\n\n\t}\n\n\tgetInterpolation() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t}\n\n\tgetValueSize() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t}\n\n\t// move all keyframes either forwards or backwards in time\n\tshift( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim( startTime, endTime ) {\n\n\t\tconst times = this.times,\n\t\t\tnKeys = times.length;\n\n\t\tlet from = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) {\n\n\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\tfrom = to - 1;\n\n\t\t\t}\n\n\t\t\tconst stride = this.getValueSize();\n\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tconst valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tconst times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tlet prevTime = null;\n\n\t\tfor ( let i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tconst currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\tfor ( let i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tconst value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize() {\n\n\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\tconst times = AnimationUtils.arraySlice( this.times ),\n\t\t\tvalues = AnimationUtils.arraySlice( this.values ),\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\tlastIndex = times.length - 1;\n\n\t\tlet writeIndex = 1;\n\n\t\tfor ( let i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tlet keep = false;\n\n\t\t\tconst time = times[ i ];\n\t\t\tconst timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tconst value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t} else {\n\n\t\t\tthis.times = times;\n\t\t\tthis.values = values;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst times = AnimationUtils.arraySlice( this.times, 0 );\n\t\tconst values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\tconst TypedKeyframeTrack = this.constructor;\n\t\tconst track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\treturn track;\n\n\t}\n\n}\n\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n/**\n * A Track of Boolean keyframe values.\n */\nclass BooleanKeyframeTrack extends KeyframeTrack {}\n\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of keyframe values that represent color.\n */\nclass ColorKeyframeTrack extends KeyframeTrack {}\n\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\n\n/**\n * A Track of numeric keyframe values.\n */\nclass NumberKeyframeTrack extends KeyframeTrack {}\n\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\n\n/**\n * Spherical linear unit quaternion interpolant.\n */\n\nclass QuaternionLinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tlet offset = i1 * stride;\n\n\t\tfor ( let end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * A Track of quaternion keyframe values.\n */\nclass QuaternionKeyframeTrack extends KeyframeTrack {\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n}\n\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n// ValueBufferType is inherited\nQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track that interpolates Strings\n */\nclass StringKeyframeTrack extends KeyframeTrack {}\n\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\nStringKeyframeTrack.prototype.ValueBufferType = Array;\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of vectored keyframe values.\n */\nclass VectorKeyframeTrack extends KeyframeTrack {}\n\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n\nclass AnimationClip {\n\n\tconstructor( name, duration = - 1, tracks, blendMode = NormalAnimationBlendMode ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = duration;\n\t\tthis.blendMode = blendMode;\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\n\tstatic parse( json ) {\n\n\t\tconst tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\tconst clip = new this( json.name, json.duration, tracks, json.blendMode );\n\t\tclip.uuid = json.uuid;\n\n\t\treturn clip;\n\n\t}\n\n\tstatic toJSON( clip ) {\n\n\t\tconst tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tconst json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks,\n\t\t\t'uuid': clip.uuid,\n\t\t\t'blendMode': clip.blendMode\n\n\t\t};\n\n\t\tfor ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t}\n\n\tstatic CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tlet times = [];\n\t\t\tlet values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tconst order = AnimationUtils.getKeyframeOrder( times );\n\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new this( name, - 1, tracks );\n\n\t}\n\n\tstatic findByName( objectOrClipArray, name ) {\n\n\t\tlet clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tconst o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tstatic CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {\n\n\t\tconst animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( let i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\tconst parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tconst name = parts[ 1 ];\n\n\t\t\t\tlet animationMorphTargets = animationToMorphTargets[ name ];\n\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst clips = [];\n\n\t\tfor ( const name in animationToMorphTargets ) {\n\n\t\t\tclips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t}\n\n\t// parse the animation.hierarchy format\n\tstatic parseAnimation( animation, bones ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tconst tracks = [];\n\n\t\tconst clipName = animation.name || 'default';\n\t\tconst fps = animation.fps || 30;\n\t\tconst blendMode = animation.blendMode;\n\n\t\t// automatic length determination in AnimationClip.\n\t\tlet duration = animation.length || - 1;\n\n\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( let h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tconst animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tconst morphTargetNames = {};\n\n\t\t\t\tlet k;\n\n\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( const morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\n\t\t\t\t\tfor ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tconst animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * fps;\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tconst boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst clip = new this( clipName, duration, tracks, blendMode );\n\n\t\treturn clip;\n\n\t}\n\n\tresetDuration() {\n\n\t\tconst tracks = this.tracks;\n\t\tlet duration = 0;\n\n\t\tfor ( let i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tconst track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t\treturn this;\n\n\t}\n\n\ttrim() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\toptimize() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t}\n\n\t\treturn new this.constructor( this.name, this.duration, tracks, this.blendMode );\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.constructor.toJSON( this );\n\n\t}\n\n}\n\nfunction getTrackTypeForValueTypeName( typeName ) {\n\n\tswitch ( typeName.toLowerCase() ) {\n\n\t\tcase 'scalar':\n\t\tcase 'double':\n\t\tcase 'float':\n\t\tcase 'number':\n\t\tcase 'integer':\n\n\t\t\treturn NumberKeyframeTrack;\n\n\t\tcase 'vector':\n\t\tcase 'vector2':\n\t\tcase 'vector3':\n\t\tcase 'vector4':\n\n\t\t\treturn VectorKeyframeTrack;\n\n\t\tcase 'color':\n\n\t\t\treturn ColorKeyframeTrack;\n\n\t\tcase 'quaternion':\n\n\t\t\treturn QuaternionKeyframeTrack;\n\n\t\tcase 'bool':\n\t\tcase 'boolean':\n\n\t\t\treturn BooleanKeyframeTrack;\n\n\t\tcase 'string':\n\n\t\t\treturn StringKeyframeTrack;\n\n\t}\n\n\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n}\n\nfunction parseKeyframeTrack( json ) {\n\n\tif ( json.type === undefined ) {\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t}\n\n\tconst trackType = getTrackTypeForValueTypeName( json.type );\n\n\tif ( json.times === undefined ) {\n\n\t\tconst times = [], values = [];\n\n\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\tjson.times = times;\n\t\tjson.values = values;\n\n\t}\n\n\t// derived classes can define a static parse method\n\tif ( trackType.parse !== undefined ) {\n\n\t\treturn trackType.parse( json );\n\n\t} else {\n\n\t\t// by default, we assume a constructor compatible with the base\n\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t}\n\n}\n\nconst Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\nclass LoadingManager {\n\n\tconstructor( onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet isLoading = false;\n\t\tlet itemsLoaded = 0;\n\t\tlet itemsTotal = 0;\n\t\tlet urlModifier = undefined;\n\t\tconst handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tconst index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( let i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tconst regex = handlers[ i ];\n\t\t\t\tconst loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n}\n\nconst DefaultLoadingManager = new LoadingManager();\n\nclass Loader {\n\n\tconstructor( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\n\t}\n\n\tload( /* url, onLoad, onProgress, onError */ ) {}\n\n\tloadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t} );\n\n\t}\n\n\tparse( /* data */ ) {}\n\n\tsetCrossOrigin( crossOrigin ) {\n\n\t\tthis.crossOrigin = crossOrigin;\n\t\treturn this;\n\n\t}\n\n\tsetWithCredentials( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t}\n\n\tsetResourcePath( resourcePath ) {\n\n\t\tthis.resourcePath = resourcePath;\n\t\treturn this;\n\n\t}\n\n\tsetRequestHeader( requestHeader ) {\n\n\t\tthis.requestHeader = requestHeader;\n\t\treturn this;\n\n\t}\n\n}\n\nconst loading = {};\n\nclass FileLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tthis.manager.itemStart( url );\n\n\t\t\tsetTimeout( () => {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Initialise array for duplicate requests\n\t\tloading[ url ] = [];\n\n\t\tloading[ url ].push( {\n\t\t\tonLoad: onLoad,\n\t\t\tonProgress: onProgress,\n\t\t\tonError: onError,\n\t\t} );\n\n\t\t// create request\n\t\tconst req = new Request( url, {\n\t\t\theaders: new Headers( this.requestHeader ),\n\t\t\tcredentials: this.withCredentials ? 'include' : 'same-origin',\n\t\t\t// An abort controller could be added within a future PR\n\t\t} );\n\n\t\t// record states ( avoid data race )\n\t\tconst mimeType = this.mimeType;\n\t\tconst responseType = this.responseType;\n\n\t\t// start the fetch\n\t\tfetch( req )\n\t\t\t.then( response => {\n\n\t\t\t\tif ( response.status === 200 || response.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tif ( response.status === 0 ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Workaround: Checking if response.body === undefined for Alipay browser #23548\n\n\t\t\t\t\tif ( typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined ) {\n\n\t\t\t\t\t\treturn response;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\t\tconst reader = response.body.getReader();\n\t\t\t\t\tconst contentLength = response.headers.get( 'Content-Length' );\n\t\t\t\t\tconst total = contentLength ? parseInt( contentLength ) : 0;\n\t\t\t\t\tconst lengthComputable = total !== 0;\n\t\t\t\t\tlet loaded = 0;\n\n\t\t\t\t\t// periodically read data into the new stream tracking while download progress\n\t\t\t\t\tconst stream = new ReadableStream( {\n\t\t\t\t\t\tstart( controller ) {\n\n\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\tfunction readData() {\n\n\t\t\t\t\t\t\t\treader.read().then( ( { done, value } ) => {\n\n\t\t\t\t\t\t\t\t\tif ( done ) {\n\n\t\t\t\t\t\t\t\t\t\tcontroller.close();\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tloaded += value.byteLength;\n\n\t\t\t\t\t\t\t\t\t\tconst event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\t\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tcontroller.enqueue( value );\n\t\t\t\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn new Response( stream );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow Error( `fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}` );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( response => {\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\n\t\t\t\t\t\treturn response.arrayBuffer();\n\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\treturn response.blob();\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\treturn response.text()\n\t\t\t\t\t\t\t.then( text => {\n\n\t\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\t\treturn parser.parseFromString( text, mimeType );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\treturn response.json();\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( mimeType === undefined ) {\n\n\t\t\t\t\t\t\treturn response.text();\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// sniff encoding\n\t\t\t\t\t\t\tconst re = /charset=\"?([^;\"\\s]*)\"?/i;\n\t\t\t\t\t\t\tconst exec = re.exec( mimeType );\n\t\t\t\t\t\t\tconst label = exec && exec[ 1 ] ? exec[ 1 ].toLowerCase() : undefined;\n\t\t\t\t\t\t\tconst decoder = new TextDecoder( label );\n\t\t\t\t\t\t\treturn response.arrayBuffer().then( ab => decoder.decode( ab ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( data => {\n\n\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\tCache.add( url, data );\n\n\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( data );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.catch( err => {\n\n\t\t\t\t// Abort errors and other errors are handled the same\n\n\t\t\t\tconst callbacks = loading[ url ];\n\n\t\t\t\tif ( callbacks === undefined ) {\n\n\t\t\t\t\t// When onLoad was called and url was deleted in `loading`\n\t\t\t\t\tthis.manager.itemError( url );\n\t\t\t\t\tthrow err;\n\n\t\t\t\t}\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( err );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t} )\n\t\t\t.finally( () => {\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\tthis.manager.itemStart( url );\n\n\t}\n\n\tsetResponseType( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t}\n\n\tsetMimeType( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t}\n\n}\n\nclass AnimationLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst animations = [];\n\n\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\tconst clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass CompressedTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst images = [];\n\n\t\tconst texture = new CompressedTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.image = images;\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tfor ( let i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( let f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( let i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.image = images;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass ImageLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst image = createElementNS( 'img' );\n\n\t\tfunction onImageLoad() {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction onImageError( event ) {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction removeEventListeners() {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t}\n\n\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\tif ( url.slice( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t}\n\n}\n\nclass CubeTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( urls, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new CubeTexture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass DataTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst texture = new DataTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tconst texData = scope.parse( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.encoding !== undefined ) {\n\n\t\t\t\ttexture.encoding = texData.encoding;\n\n\t\t\t}\n\n\t\t\tif ( texData.flipY !== undefined ) {\n\n\t\t\t\ttexture.flipY = texData.flipY;\n\n\t\t\t}\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\tif ( texData.generateMipmaps !== undefined ) {\n\n\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass TextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new Texture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass Light extends Object3D {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity;\n\n\t}\n\n\tdispose() {\n\n\t\t// Empty here in base class; some subclasses override.\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\treturn data;\n\n\t}\n\n}\n\nLight.prototype.isLight = true;\n\nclass HemisphereLight extends Light {\n\n\tconstructor( skyColor, groundColor, intensity ) {\n\n\t\tsuper( skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n}\n\nHemisphereLight.prototype.isHemisphereLight = true;\n\nconst _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();\nconst _lookTarget$1 = /*@__PURE__*/ new Vector3();\n\nclass LightShadow {\n\n\tconstructor( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\t\tthis.blurSamples = 8;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tgetViewportCount() {\n\n\t\treturn this._viewportCount;\n\n\t}\n\n\tgetFrustum() {\n\n\t\treturn this._frustum;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst shadowCamera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\t_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );\n\t\tshadowCamera.position.copy( _lightPositionWorld$1 );\n\n\t\t_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );\n\t\tshadowCamera.lookAt( _lookTarget$1 );\n\t\tshadowCamera.updateMatrixWorld();\n\n\t\t_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );\n\n\t\tshadowMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\n\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t}\n\n\tgetViewport( viewportIndex ) {\n\n\t\treturn this._viewports[ viewportIndex ];\n\n\t}\n\n\tgetFrameExtents() {\n\n\t\treturn this._frameExtents;\n\n\t}\n\n\tdispose() {\n\n\t\tif ( this.map ) {\n\n\t\t\tthis.map.dispose();\n\n\t\t}\n\n\t\tif ( this.mapPass ) {\n\n\t\t\tthis.mapPass.dispose();\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst object = {};\n\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n}\n\nclass SpotLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t\tthis.focus = 1;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst camera = this.camera;\n\n\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\tsuper.updateMatrices( light );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.focus = source.focus;\n\n\t\treturn this;\n\n\t}\n\n}\n\nSpotLightShadow.prototype.isSpotLightShadow = true;\n\nclass SpotLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.distance = distance;\n\t\tthis.angle = angle;\n\t\tthis.penumbra = penumbra;\n\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n\t\treturn this.intensity * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / Math.PI;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nSpotLight.prototype.isSpotLight = true;\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\nclass PointLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tupdateMatrices( light, viewportIndex = 0 ) {\n\n\t\tconst camera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( far !== camera.far ) {\n\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tcamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.copy( camera.position );\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\tcamera.lookAt( _lookTarget );\n\t\tcamera.updateMatrixWorld();\n\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t}\n\n}\n\nPointLightShadow.prototype.isPointLightShadow = true;\n\nclass PointLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, decay = 1 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tthis.distance = distance;\n\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\treturn this.intensity * 4 * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nPointLight.prototype.isPointLight = true;\n\nclass DirectionalLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n}\n\nDirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n\nclass DirectionalLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.target = source.target.clone();\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nDirectionalLight.prototype.isDirectionalLight = true;\n\nclass AmbientLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t}\n\n}\n\nAmbientLight.prototype.isAmbientLight = true;\n\nclass RectAreaLight extends Light {\n\n\tconstructor( color, intensity, width = 10, height = 10 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\treturn this.intensity * this.width * this.height * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n}\n\nRectAreaLight.prototype.isRectAreaLight = true;\n\n/**\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n\n// 3-band SH defined by 9 coefficients\n\nclass SphericalHarmonics3 {\n\n\tconstructor() {\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tset( coefficients ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tzero() {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// get the radiance in the direction of the normal\n\t// target is a Vector3\n\tgetAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t}\n\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t// target is a Vector3\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\tgetIrradianceAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t}\n\n\tadd( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\taddScaledSH( sh, s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tscale( s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tlerp( sh, alpha ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcopy( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t// evaluate the basis functions\n\t// shBasis is an Array[ 9 ]\n\tstatic getBasisAt( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n}\n\nSphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n\nclass LightProbe extends Light {\n\n\tconstructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.sh = sh;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.sh.copy( source.sh );\n\n\t\treturn this;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\tthis.sh.fromArray( json.sh );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.sh = this.sh.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\nLightProbe.prototype.isLightProbe = true;\n\nclass MaterialLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\t\tthis.textures = {};\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tconst material = Material.fromType( json.type );\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( const name in json.uniforms ) {\n\n\t\t\t\tconst uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( const key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Deprecated\n\n\t\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tlet normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\n\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\n\n\t\treturn material;\n\n\t}\n\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n}\n\nclass LoaderUtils {\n\n\tstatic decodeText( array ) {\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tlet s = '';\n\n\t\tfor ( let i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\ttry {\n\n\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t} catch ( e ) { // see #16358\n\n\t\t\treturn s;\n\n\t\t}\n\n\t}\n\n\tstatic extractUrlBase( url ) {\n\n\t\tconst index = url.lastIndexOf( '/' );\n\n\t\tif ( index === - 1 ) return './';\n\n\t\treturn url.slice( 0, index + 1 );\n\n\t}\n\n\tstatic resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n}\n\nclass InstancedBufferGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceCount = source.instanceCount;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON( this );\n\n\t\tdata.instanceCount = this.instanceCount;\n\n\t\tdata.isInstancedBufferGeometry = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nInstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\nclass BufferGeometryLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst interleavedBufferMap = {};\n\t\tconst arrayBufferMap = {};\n\n\t\tfunction getInterleavedBuffer( json, uuid ) {\n\n\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];\n\n\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\tconst interleavedBuffer = interleavedBuffers[ uuid ];\n\n\t\t\tconst buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n\n\t\t\tconst array = getTypedArray( interleavedBuffer.type, buffer );\n\t\t\tconst ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n\t\t\tib.uuid = interleavedBuffer.uuid;\n\n\t\t\tinterleavedBufferMap[ uuid ] = ib;\n\n\t\t\treturn ib;\n\n\t\t}\n\n\t\tfunction getArrayBuffer( json, uuid ) {\n\n\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];\n\n\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\tconst arrayBuffer = arrayBuffers[ uuid ];\n\n\t\t\tconst ab = new Uint32Array( arrayBuffer ).buffer;\n\n\t\t\tarrayBufferMap[ uuid ] = ab;\n\n\t\t\treturn ab;\n\n\t\t}\n\n\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\tconst index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst typedArray = getTypedArray( index.type, index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tconst attributes = json.data.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\t\t\tlet bufferAttribute;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t} else {\n\n\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t}\n\n\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\tif ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );\n\n\t\t\tif ( attribute.updateRange !== undefined ) {\n\n\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t}\n\n\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\tif ( morphAttributes ) {\n\n\t\t\tfor ( const key in morphAttributes ) {\n\n\t\t\t\tconst attributeArray = morphAttributes[ key ];\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst attribute = attributeArray[ i ];\n\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\t\t\tbufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\tif ( morphTargetsRelative ) {\n\n\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t}\n\n\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( let i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tconst center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\tif ( json.name ) geometry.name = json.name;\n\t\tif ( json.userData ) geometry.userData = json.userData;\n\n\t\treturn geometry;\n\n\t}\n\n}\n\nclass ObjectLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tlet json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tasync loadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tconst text = await loader.loadAsync( url, onProgress );\n\n\t\tconst json = JSON.parse( text );\n\n\t\tconst metadata = json.metadata;\n\n\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\tthrow new Error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\n\t\t}\n\n\t\treturn await scope.parseAsync( json );\n\n\t}\n\n\tparse( json, onLoad ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\t//\n\n\t\tif ( onLoad !== undefined ) {\n\n\t\t\tlet hasImages = false;\n\n\t\t\tfor ( const uuid in images ) {\n\n\t\t\t\tif ( images[ uuid ] instanceof HTMLImageElement ) {\n\n\t\t\t\t\thasImages = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasImages === false ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tasync parseAsync( json ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = await this.parseImagesAsync( json.images );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\treturn object;\n\n\t}\n\n\tparseShapes( json ) {\n\n\t\tconst shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n\tparseSkeletons( json, object ) {\n\n\t\tconst skeletons = {};\n\t\tconst bones = {};\n\n\t\t// generate bone lookup table\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isBone ) bones[ child.uuid ] = child;\n\n\t\t} );\n\n\t\t// create skeletons\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst skeleton = new Skeleton().fromJSON( json[ i ], bones );\n\n\t\t\t\tskeletons[ skeleton.uuid ] = skeleton;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn skeletons;\n\n\t}\n\n\tparseGeometries( json, shapes ) {\n\n\t\tconst geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tlet geometry;\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: The legacy Geometry type is no longer supported.' );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( data.type in Geometries ) {\n\n\t\t\t\t\t\t\tgeometry = Geometries[ data.type ].fromJSON( data, shapes );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( `THREE.ObjectLoader: Unsupported geometry type \"${ data.type }\"` );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t}\n\n\tparseMaterials( json, textures ) {\n\n\t\tconst cache = {}; // MultiMaterial\n\t\tconst materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t// Deprecated\n\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor ( let j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\tconst material = data.materials[ j ];\n\n\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t}\n\n\tparseAnimations( json ) {\n\n\t\tconst animations = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tconst clip = AnimationClip.parse( data );\n\n\t\t\t\tanimations[ clip.uuid ] = clip;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n\tparseImages( json, onLoad ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn loadImage( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tconst manager = new LoadingManager( onLoad );\n\n\t\t\tloader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tasync parseImagesAsync( json ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tasync function deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn await loader.loadAsync( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tloader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = await deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = await deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tparseTextures( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tconst textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tconst source = images[ data.image ];\n\t\t\t\tconst image = source.data;\n\n\t\t\t\tlet texture;\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\ttexture = new CubeTexture();\n\n\t\t\t\t\tif ( image.length === 6 ) texture.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( image && image.data ) {\n\n\t\t\t\t\t\ttexture = new DataTexture();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( image ) texture.needsUpdate = true; // textures can have undefined image data\n\n\t\t\t\t}\n\n\t\t\t\ttexture.source = source;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\t\t\t\tif ( data.type !== undefined ) texture.type = data.type;\n\t\t\t\tif ( data.encoding !== undefined ) texture.encoding = data.encoding;\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\tif ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\tif ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\n\n\t\t\t\tif ( data.userData !== undefined ) texture.userData = data.userData;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t}\n\n\tparseObject( data, geometries, materials, textures, animations ) {\n\n\t\tlet object;\n\n\t\tfunction getGeometry( name ) {\n\n\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t}\n\n\t\t\treturn geometries[ name ];\n\n\t\t}\n\n\t\tfunction getMaterial( name ) {\n\n\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst uuid = name[ i ];\n\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t}\n\n\t\t\treturn materials[ name ];\n\n\t\t}\n\n\t\tfunction getTexture( uuid ) {\n\n\t\t\tif ( textures[ uuid ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined texture', uuid );\n\n\t\t\t}\n\n\t\t\treturn textures[ uuid ];\n\n\t\t}\n\n\t\tlet geometry, material;\n\n\t\tswitch ( data.type ) {\n\n\t\t\tcase 'Scene':\n\n\t\t\t\tobject = new Scene();\n\n\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject.background = getTexture( data.background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.environment !== undefined ) {\n\n\t\t\t\t\tobject.environment = getTexture( data.environment );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'AmbientLight':\n\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'DirectionalLight':\n\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'RectAreaLight':\n\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LightProbe':\n\n\t\t\t\tobject = new LightProbe().fromJSON( data );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t \tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\tif ( data.bindMode !== undefined ) object.bindMode = data.bindMode;\n\t\t\t\tif ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );\n\t\t\t\tif ( data.skeleton !== undefined ) object.skeleton = data.skeleton;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Mesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'InstancedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\t\t\t\tconst count = data.count;\n\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\tconst instanceColor = data.instanceColor;\n\n\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\tobject.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\t\t\t\tif ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOD':\n\n\t\t\t\tobject = new LOD();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Line':\n\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineLoop':\n\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineSegments':\n\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointCloud':\n\t\t\tcase 'Points':\n\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sprite':\n\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Group':\n\n\t\t\t\tobject = new Group();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Bone':\n\n\t\t\t\tobject = new Bone();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tobject = new Object3D();\n\n\t\t}\n\n\t\tobject.uuid = data.uuid;\n\n\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\tif ( data.matrix !== undefined ) {\n\n\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t} else {\n\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t}\n\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\tif ( data.shadow ) {\n\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\tif ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t}\n\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\n\n\t\tif ( data.children !== undefined ) {\n\n\t\t\tconst children = data.children;\n\n\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.animations !== undefined ) {\n\n\t\t\tconst objectAnimations = data.animations;\n\n\t\t\tfor ( let i = 0; i < objectAnimations.length; i ++ ) {\n\n\t\t\t\tconst uuid = objectAnimations[ i ];\n\n\t\t\t\tobject.animations.push( animations[ uuid ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.type === 'LOD' ) {\n\n\t\t\tif ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;\n\n\t\t\tconst levels = data.levels;\n\n\t\t\tfor ( let l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tconst level = levels[ l ];\n\t\t\t\tconst child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tbindSkeletons( object, skeletons ) {\n\n\t\tif ( Object.keys( skeletons ).length === 0 ) return;\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {\n\n\t\t\t\tconst skeleton = skeletons[ child.skeleton ];\n\n\t\t\t\tif ( skeleton === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tchild.bind( skeleton, child.bindMatrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/* DEPRECATED */\n\n\tsetTexturePath( value ) {\n\n\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\treturn this.setResourcePath( value );\n\n\t}\n\n}\n\nconst TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping\n};\n\nconst TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nconst TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n};\n\nclass ImageBitmapLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t}\n\n\tsetOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst fetchOptions = {};\n\t\tfetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\n\t\tfetchOptions.headers = this.requestHeader;\n\n\t\tfetch( url, fetchOptions ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} );\n\n\t\tscope.manager.itemStart( url );\n\n\t}\n\n}\n\nImageBitmapLoader.prototype.isImageBitmapLoader = true;\n\nlet _context;\n\nconst AudioContext = {\n\n\tgetContext: function () {\n\n\t\tif ( _context === undefined ) {\n\n\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn _context;\n\n\t},\n\n\tsetContext: function ( value ) {\n\n\t\t_context = value;\n\n\t}\n\n};\n\nclass AudioLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n}\n\nclass HemisphereLightProbe extends LightProbe {\n\n\tconstructor( skyColor, groundColor, intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tconst color1 = new Color().set( skyColor );\n\t\tconst color2 = new Color().set( groundColor );\n\n\t\tconst sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tconst ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tconst c0 = Math.sqrt( Math.PI );\n\t\tconst c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n}\n\nHemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n\nclass AmbientLightProbe extends LightProbe {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tconst color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n}\n\nAmbientLightProbe.prototype.isAmbientLightProbe = true;\n\nconst _eyeRight = /*@__PURE__*/ new Matrix4();\nconst _eyeLeft = /*@__PURE__*/ new Matrix4();\nconst _projectionMatrix = /*@__PURE__*/ new Matrix4();\n\nclass StereoCamera {\n\n\tconstructor() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst cache = this._cache;\n\n\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tcache.focus = camera.focus;\n\t\t\tcache.fov = camera.fov;\n\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\tcache.near = camera.near;\n\t\t\tcache.far = camera.far;\n\t\t\tcache.zoom = camera.zoom;\n\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t_projectionMatrix.copy( camera.projectionMatrix );\n\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\tconst ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\tlet xmin, xmax;\n\n\t\t\t// translate xOffset\n\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t// for left eye\n\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraL.projectionMatrix.copy( _projectionMatrix );\n\n\t\t\t// for right eye\n\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraR.projectionMatrix.copy( _projectionMatrix );\n\n\t\t}\n\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t}\n\n}\n\nclass Clock {\n\n\tconstructor( autoStart = true ) {\n\n\t\tthis.autoStart = autoStart;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tstart() {\n\n\t\tthis.startTime = now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t}\n\n\tstop() {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t}\n\n\tgetElapsedTime() {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t}\n\n\tgetDelta() {\n\n\t\tlet diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tconst newTime = now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n}\n\nconst _position$1 = /*@__PURE__*/ new Vector3();\nconst _quaternion$1 = /*@__PURE__*/ new Quaternion();\nconst _scale$1 = /*@__PURE__*/ new Vector3();\nconst _orientation$1 = /*@__PURE__*/ new Vector3();\n\nclass AudioListener extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tgetInput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tremoveFilter() {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.filter;\n\n\t}\n\n\tsetFilter( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t\treturn this;\n\n\t}\n\n\tgetMasterVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetMasterVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tconst listener = this.context.listener;\n\t\tconst up = this.up;\n\n\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\tthis.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );\n\n\t\t_orientation$1.set( 0, 0, - 1 ).applyQuaternion( _quaternion$1 );\n\n\t\tif ( listener.positionX ) {\n\n\t\t\t// code path for Chrome (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\tlistener.positionX.linearRampToValueAtTime( _position$1.x, endTime );\n\t\t\tlistener.positionY.linearRampToValueAtTime( _position$1.y, endTime );\n\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );\n\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t} else {\n\n\t\t\tlistener.setPosition( _position$1.x, _position$1.y, _position$1.z );\n\t\t\tlistener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass Audio extends Object3D {\n\n\tconstructor( listener ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.source = null;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\t\tthis._connected = false;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tsetNodeSource( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaElementSource( mediaElement ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaNode';\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaStreamSource( mediaStream ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaStreamNode';\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetBuffer( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t}\n\n\tplay( delay = 0 ) {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\tconst source = this.context.createBufferSource();\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.loopStart = this.loopStart;\n\t\tsource.loopEnd = this.loopEnd;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\tthis.setDetune( this.detune );\n\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\treturn this.connect();\n\n\t}\n\n\tpause() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\t// update current progress\n\n\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._progress = 0;\n\n\t\tthis.source.stop();\n\t\tthis.source.onended = null;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t}\n\n\tconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = true;\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = false;\n\n\t\treturn this;\n\n\t}\n\n\tgetFilters() {\n\n\t\treturn this.filters;\n\n\t}\n\n\tsetFilters( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this._connected === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value.slice();\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetDetune( value ) {\n\n\t\tthis.detune = value;\n\n\t\tif ( this.source.detune === undefined ) return; // only set detune when available\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetDetune() {\n\n\t\treturn this.detune;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t}\n\n\tsetFilter( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t}\n\n\tsetPlaybackRate( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetPlaybackRate() {\n\n\t\treturn this.playbackRate;\n\n\t}\n\n\tonEnded() {\n\n\t\tthis.isPlaying = false;\n\n\t}\n\n\tgetLoop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t}\n\n\tsetLoop( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopStart( value ) {\n\n\t\tthis.loopStart = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopEnd( value ) {\n\n\t\tthis.loopEnd = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _orientation = /*@__PURE__*/ new Vector3();\n\nclass PositionalAudio extends Audio {\n\n\tconstructor( listener ) {\n\n\t\tsuper( listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tdisconnect() {\n\n\t\tsuper.disconnect();\n\n\t\tthis.panner.disconnect( this.gain );\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.panner;\n\n\t}\n\n\tgetRefDistance() {\n\n\t\treturn this.panner.refDistance;\n\n\t}\n\n\tsetRefDistance( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetRolloffFactor() {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t}\n\n\tsetRolloffFactor( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetDistanceModel() {\n\n\t\treturn this.panner.distanceModel;\n\n\t}\n\n\tsetDistanceModel( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxDistance() {\n\n\t\treturn this.panner.maxDistance;\n\n\t}\n\n\tsetMaxDistance( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\n\n\t\tconst panner = this.panner;\n\n\t\tif ( panner.positionX ) {\n\n\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position.x, endTime );\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position.y, endTime );\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position.z, endTime );\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\n\n\t\t} else {\n\n\t\t\tpanner.setPosition( _position.x, _position.y, _position.z );\n\t\t\tpanner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass AudioAnalyser {\n\n\tconstructor( audio, fftSize = 2048 ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\n\tgetFrequencyData() {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t}\n\n\tgetAverageFrequency() {\n\n\t\tlet value = 0;\n\t\tconst data = this.getFrequencyData();\n\n\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n}\n\nclass PropertyMixer {\n\n\tconstructor( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tlet mixFunction,\n\t\t\tmixFunctionAdditive,\n\t\t\tsetIdentity;\n\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select;\n\n\t\t\t\t// Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\t\t\t\tmixFunctionAdditive = this._select;\n\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\n\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride;\n\n\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tconst mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'add'\n\taccumulateAdditive( weight ) {\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = stride * this._addIndex;\n\n\t\tif ( this.cumulativeWeightAdditive === 0 ) {\n\n\t\t\t// add = identity\n\n\t\t\tthis._setIdentity();\n\n\t\t}\n\n\t\t// add := add + incoming * weight\n\n\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n\t\tthis.cumulativeWeightAdditive += weight;\n\n\t}\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply( accuIndex ) {\n\n\t\tconst stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tif ( weightAdditive > 0 ) {\n\n\t\t\t// accuN := accuN + additive accuN\n\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n\n\t\t}\n\n\t\tfor ( let i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState() {\n\n\t\tconst binding = this.binding;\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * this._origIndex;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\t// Add to identity for additive\n\t\tthis._setIdentity();\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t}\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState() {\n\n\t\tconst originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t}\n\n\t_setAdditiveIdentityNumeric() {\n\n\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\tfor ( let i = startIndex; i < endIndex; i ++ ) {\n\n\t\t\tthis.buffer[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\t_setAdditiveIdentityQuaternion() {\n\n\t\tthis._setAdditiveIdentityNumeric();\n\t\tthis.buffer[ this._addIndex * this.valueSize + 3 ] = 1;\n\n\t}\n\n\t_setAdditiveIdentityOther() {\n\n\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\tfor ( let i = 0; i < this.valueSize; i ++ ) {\n\n\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n\n\t\t}\n\n\t}\n\n\n\t// mix functions\n\n\t_select( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_slerp( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t}\n\n\t_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst workOffset = this._workIndex * stride;\n\n\t\t// Store result in intermediate buffer offset\n\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n\n\t\t// Slerp to the intermediate result\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n\n\t}\n\n\t_lerp( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst s = 1 - t;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n\t_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n}\n\n// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nconst _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\nconst _trackRe = new RegExp( ''\n\t+ '^'\n\t+ _directoryRe\n\t+ _nodeRe\n\t+ _objectRe\n\t+ _propertyRe\n\t+ '$'\n);\n\nconst _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\nclass Composite {\n\n\tconstructor( targetGroup, path, optionalParsedPath ) {\n\n\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tgetValue( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t}\n\n\tsetValue( array, offset ) {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t}\n\n\tbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t}\n\n\tunbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n}\n\n// Note: This class uses a State pattern on a per-method basis:\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n// prototype version of these methods with one that represents\n// the bound state. When the property is not found, the methods\n// become no-ops.\nclass PropertyBinding {\n\n\tconstructor( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t\t// initial state of these methods that calls 'bind'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n\n\tstatic create( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param {string} name Node name to be sanitized.\n\t * @return {string}\n\t */\n\tstatic sanitizeNodeName( name ) {\n\n\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t}\n\n\tstatic parseTrackName( trackName ) {\n\n\t\tconst matches = _trackRe.exec( trackName );\n\n\t\tif ( matches === null ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t}\n\n\t\tconst results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 2 ],\n\t\t\tobjectName: matches[ 3 ],\n\t\t\tobjectIndex: matches[ 4 ],\n\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\tpropertyIndex: matches[ 6 ]\n\t\t};\n\n\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\tconst objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t// Object names must be checked against an allowlist. Otherwise, there\n\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t// include '.' characters).\n\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\tresults.objectName = objectName;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t}\n\n\t\treturn results;\n\n\t}\n\n\tstatic findNode( root, nodeName ) {\n\n\t\tif ( nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tconst bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tconst searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tconst childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tconst subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable() {}\n\t_setValue_unavailable() {}\n\n\t// Getters\n\n\t_getValue_direct( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.targetObject[ this.propertyName ];\n\n\t}\n\n\t_getValue_array( buffer, offset ) {\n\n\t\tconst source = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t}\n\n\t}\n\n\t_getValue_arrayElement( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t}\n\n\t_getValue_toArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t}\n\n\t// Direct\n\n\t_setValue_direct( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// EntireArray\n\n\t_setValue_array( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t}\n\n\t_setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// ArrayElement\n\n\t_setValue_arrayElement( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// HasToFromArray\n\n\t_setValue_fromArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t}\n\n\t_setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t_getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t}\n\n\t_setValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t}\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind() {\n\n\t\tlet targetObject = this.node;\n\t\tconst parsedPath = this.parsedPath;\n\n\t\tconst objectName = parsedPath.objectName;\n\t\tconst propertyName = parsedPath.propertyName;\n\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tlet objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( let i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tconst nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tconst nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tlet versioning = this.Versioning.None;\n\n\t\tthis.targetObject = targetObject;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tlet bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === 'morphTargetInfluences' ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n\n\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t}\n\n\tunbind() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n}\n\nPropertyBinding.Composite = Composite;\n\nPropertyBinding.prototype.BindingType = {\n\tDirect: 0,\n\tEntireArray: 1,\n\tArrayElement: 2,\n\tHasFromToArray: 3\n};\n\nPropertyBinding.prototype.Versioning = {\n\tNone: 0,\n\tNeedsUpdate: 1,\n\tMatrixWorldNeedsUpdate: 2\n};\n\nPropertyBinding.prototype.GetterByBindingType = [\n\n\tPropertyBinding.prototype._getValue_direct,\n\tPropertyBinding.prototype._getValue_array,\n\tPropertyBinding.prototype._getValue_arrayElement,\n\tPropertyBinding.prototype._getValue_toArray,\n\n];\n\nPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [\n\n\t[\n\t\t// Direct\n\t\tPropertyBinding.prototype._setValue_direct,\n\t\tPropertyBinding.prototype._setValue_direct_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// EntireArray\n\n\t\tPropertyBinding.prototype._setValue_array,\n\t\tPropertyBinding.prototype._setValue_array_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// ArrayElement\n\t\tPropertyBinding.prototype._setValue_arrayElement,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// HasToFromArray\n\t\tPropertyBinding.prototype._setValue_fromArray,\n\t\tPropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,\n\n\t]\n\n];\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n *  - Add objects you would otherwise pass as 'root' to the\n *    constructor or the .clipAction method of AnimationMixer.\n *\n *  - Instead pass this object as 'root'.\n *\n *  - You can also add and remove objects later when the mixer\n *    is running.\n *\n * Note:\n *\n *    Objects of this class appear as one object to the mixer,\n *    so cache control of the individual objects must be done\n *    on the group.\n *\n * Limitation:\n *\n *  - The animated properties must be compatible among the\n *    all objects in the group.\n *\n *  - A single property can either be controlled through a\n *    target group or directly, but not both.\n */\n\nclass AnimationObjectGroup {\n\n\tconstructor() {\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tconst indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tadd() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet knownObject = undefined,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid;\n\t\t\tlet index = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\n\n\t\t\t\t\tlet binding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\tremove() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tconst lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// remove & forget\n\tuncache() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\tnObjects = objects.length;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tconst lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\tlet index = indicesByPath[ path ];\n\t\tconst bindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tconst paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tconst object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t}\n\n\tunsubscribe_( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n}\n\nAnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n\nclass AnimationAction {\n\n\tconstructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot;\n\t\tthis.blendMode = blendMode;\n\n\t\tconst tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tconst interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\t// State & Scheduling\n\n\tplay() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t}\n\n\treset() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = - 1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t}\n\n\tisRunning() {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t}\n\n\t// return true when play has been called\n\tisScheduled() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t}\n\n\tstartAt( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoop( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t}\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t}\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight() {\n\n\t\treturn this._effectiveWeight;\n\n\t}\n\n\tfadeIn( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t}\n\n\tfadeOut( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t}\n\n\tcrossFadeFrom( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcrossFadeTo( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t}\n\n\tstopFading() {\n\n\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t}\n\n\tsetDuration( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\tsyncWith( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\thalt( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t}\n\n\twarp( startTimeScale, endTimeScale, duration ) {\n\n\t\tconst mixer = this._mixer,\n\t\t\tnow = mixer.time,\n\t\t\ttimeScale = this.timeScale;\n\n\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t}\n\n\tstopWarping() {\n\n\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Object Accessors\n\n\tgetMixer() {\n\n\t\treturn this._mixer;\n\n\t}\n\n\tgetClip() {\n\n\t\treturn this._clip;\n\n\t}\n\n\tgetRoot() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t}\n\n\t// Interna\n\n\t_update( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tconst timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t}\n\n\t\t\t// start\n\n\t\t\tthis._startTime = null; // unschedule\n\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tconst clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tconst weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tconst interpolants = this._interpolants;\n\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\tdefault:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_updateWeight( time ) {\n\n\t\tlet weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t}\n\n\t_updateTimeScale( time ) {\n\n\t\tlet timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t}\n\n\t_updateTime( deltaTime ) {\n\n\t\tconst duration = this._clip.duration;\n\t\tconst loop = this.loop;\n\n\t\tlet time = this.time + deltaTime;\n\t\tlet loopCount = this._loopCount;\n\n\t\tconst pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === - 1 ) return time;\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tconst loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t}\n\n\t_setEndings( atStart, atEnd, pingPong ) {\n\n\t\tconst settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_scheduleFading( duration, weightNow, weightThen ) {\n\n\t\tconst mixer = this._mixer, now = mixer.time;\n\t\tlet interpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass AnimationMixer extends EventDispatcher {\n\n\tconstructor( root ) {\n\n\t\tsuper();\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\t\tthis.time = 0;\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\t_bindAction( action, prototypeAction ) {\n\n\t\tconst root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\n\t\tlet bindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst track = tracks[ i ],\n\t\t\t\ttrackName = track.name;\n\n\t\t\tlet binding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tconst path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t}\n\n\t_activateAction( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tconst rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t}\n\n\t_deactivateAction( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t}\n\n\t// Memory manager\n\n\t_initMemoryManager() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction( action ) {\n\n\t\tconst index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t}\n\n\t_addInactiveAction( action, clipUuid, rootUuid ) {\n\n\t\tconst actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tlet actionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tconst knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t}\n\n\t_removeInactiveAction( action ) {\n\n\t\tconst actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tconst clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t}\n\n\t_removeInactiveBindingsForAction( action ) {\n\n\t\tconst bindings = action._propertyBindings;\n\n\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tconst binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_lendAction( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t}\n\n\t_takeBackAction( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t}\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding( binding, rootUuid, trackName ) {\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindings = this._bindings;\n\n\t\tlet bindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t}\n\n\t_removeInactiveBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t}\n\n\t_lendBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t}\n\n\t_takeBackBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t}\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant() {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\n\n\t\tlet interpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t}\n\n\t_takeBackControlInterpolant( interpolant ) {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t}\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction( clip, optionalRoot, blendMode ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid;\n\n\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n\n\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\n\t\tconst actionsForClip = this._actionsByClip[ clipUuid ];\n\t\tlet prototypeAction = null;\n\n\t\tif ( blendMode === undefined ) {\n\n\t\t\tif ( clipObject !== null ) {\n\n\t\t\t\tblendMode = clipObject.blendMode;\n\n\t\t\t} else {\n\n\t\t\t\tblendMode = NormalAnimationBlendMode;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tconst existingAction = actionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tconst newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t}\n\n\t// get an existing action\n\texistingAction( clip, optionalRoot ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction() {\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions;\n\n\t\tfor ( let i = nActions - 1; i >= 0; -- i ) {\n\n\t\t\tactions[ i ].stop();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// advance the time and update apply the animation\n\tupdate( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( let i = 0; i !== nActions; ++ i ) {\n\n\t\t\tconst action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tconst bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( let i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Allows you to seek to a specific time in an animation.\n\tsetTime( timeInSeconds ) {\n\n\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\tfor ( let i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t}\n\n\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t}\n\n\t// return this mixer's root target object\n\tgetRoot() {\n\n\t\treturn this._root;\n\n\t}\n\n\t// free all resources specific to a particular clip\n\tuncacheClip( clip ) {\n\n\t\tconst actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tconst action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t}\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot( root ) {\n\n\t\tconst rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( const clipUuid in actionsByClip ) {\n\n\t\t\tconst actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( const trackName in bindingByName ) {\n\n\t\t\t\tconst binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remove a targeted clip from the cache\n\tuncacheAction( clip, optionalRoot ) {\n\n\t\tconst action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n}\n\nAnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array( 1 );\n\nclass Uniform {\n\n\tconstructor( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t}\n\n}\n\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\n\tconstructor( array, stride, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tconst ib = super.clone( data );\n\n\t\tib.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn ib;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tconst json = super.toJSON( data );\n\n\t\tjson.isInstancedInterleavedBuffer = true;\n\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn json;\n\n\t}\n\n}\n\nInstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\nclass GLBufferAttribute {\n\n\tconstructor( buffer, type, itemSize, elementSize, count ) {\n\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetBuffer( buffer ) {\n\n\t\tthis.buffer = buffer;\n\n\t\treturn this;\n\n\t}\n\n\tsetType( type, elementSize ) {\n\n\t\tthis.type = type;\n\t\tthis.elementSize = elementSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetItemSize( itemSize ) {\n\n\t\tthis.itemSize = itemSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetCount( count ) {\n\n\t\tthis.count = count;\n\n\t\treturn this;\n\n\t}\n\n}\n\nGLBufferAttribute.prototype.isGLBufferAttribute = true;\n\nclass Raycaster {\n\n\tconstructor( origin, direction, near = 0, far = Infinity ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t}\n\n\tsetFromCamera( coords, camera ) {\n\n\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\tthis.camera = camera;\n\n\t\t} else if ( camera.isOrthographicCamera ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );\n\n\t\t}\n\n\t}\n\n\tintersectObject( object, recursive = true, intersects = [] ) {\n\n\t\tintersectObject( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n\tintersectObjects( objects, recursive = true, intersects = [] ) {\n\n\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t}\n\n\tif ( recursive === true ) {\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axis.\n */\n\nclass Spherical {\n\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi; // polar angle\n\t\tthis.theta = theta; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t}\n\n\t// restrict phi to be between EPS and PI-EPS\n\tmakeSafe() {\n\n\t\tconst EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n */\n\nclass Cylindrical {\n\n\tconstructor( radius = 1, theta = 0, y = 0 ) {\n\n\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = y; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$4 = /*@__PURE__*/ new Vector2();\n\nclass Box2 {\n\n\tconstructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector$4.copy( point ).clamp( this.min, this.max );\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nBox2.prototype.isBox2 = true;\n\nconst _startP = /*@__PURE__*/ new Vector3();\nconst _startEnd = /*@__PURE__*/ new Vector3();\n\nclass Line3 {\n\n\tconstructor( start = new Vector3(), end = new Vector3() ) {\n\n\t\tthis.start = start;\n\t\tthis.end = end;\n\n\t}\n\n\tset( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t}\n\n\tdelta( target ) {\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t}\n\n\tdistanceSq() {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t}\n\n\tdistance() {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tclosestPointToPointParameter( point, clampToLine ) {\n\n\t\t_startP.subVectors( point, this.start );\n\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\n\n\t\tlet t = startEnd_startP / startEnd2;\n\n\t\tif ( clampToLine ) {\n\n\t\t\tt = clamp( t, 0, 1 );\n\n\t\t}\n\n\t\treturn t;\n\n\t}\n\n\tclosestPointToPoint( point, clampToLine, target ) {\n\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t}\n\n\tequals( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$3 = /*@__PURE__*/ new Vector3();\n\nclass SpotLightHelper extends Object3D {\n\n\tconstructor( light, color ) {\n\n\t\tsuper();\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tconst p1 = ( i / l ) * Math.PI * 2;\n\t\t\tconst p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tconst coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t}\n\n}\n\nconst _vector$2 = /*@__PURE__*/ new Vector3();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\nconst _matrixWorldInv = /*@__PURE__*/ new Matrix4();\n\n\nclass SkeletonHelper extends LineSegments {\n\n\tconstructor( object ) {\n\n\t\tconst bones = getBoneList( object );\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst color1 = new Color( 0, 0, 1 );\n\t\tconst color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( let i = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'SkeletonHelper';\n\t\tthis.isSkeletonHelper = true;\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst bones = this.bones;\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.copy( this.root.matrixWorld ).invert();\n\n\t\tfor ( let i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\n\nfunction getBoneList( object ) {\n\n\tconst boneList = [];\n\n\tif ( object.isBone === true ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( let i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\nclass PointLightHelper extends Mesh {\n\n\tconstructor( light, sphereSize, color ) {\n\n\t\tconst geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t\tconst material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'PointLightHelper';\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t// TODO: delete this comment?\n\tconst distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tconst d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t}\n\n}\n\nconst _vector$1 = /*@__PURE__*/ new Vector3();\nconst _color1 = /*@__PURE__*/ new Color();\nconst _color2 = /*@__PURE__*/ new Color();\n\nclass HemisphereLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tconst geometry = new OctahedronGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = true;\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\t\tconst colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tconst mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tconst colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( let i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tconst color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t}\n\n}\n\nclass GridHelper extends LineSegments {\n\n\tconstructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst center = divisions / 2;\n\t\tconst step = size / divisions;\n\t\tconst halfSize = size / 2;\n\n\t\tconst vertices = [], colors = [];\n\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tconst color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n}\n\nclass PolarGridHelper extends LineSegments {\n\n\tconstructor( radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\t// create the radials\n\n\t\tfor ( let i = 0; i <= radials; i ++ ) {\n\n\t\t\tconst v = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tconst x = Math.sin( v ) * radius;\n\t\t\tconst z = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( let i = 0; i <= circles; i ++ ) {\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tconst r = radius - ( radius / circles * i );\n\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tlet x = Math.sin( v ) * r;\n\t\t\t\tlet z = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n}\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\nconst _v3 = /*@__PURE__*/ new Vector3();\n\nclass DirectionalLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tlet geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\t_v1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3.subVectors( _v2, _v1 );\n\n\t\tthis.lightPlane.lookAt( _v2 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2 );\n\t\tthis.targetLine.scale.z = _v3.length();\n\n\t}\n\n}\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _camera = /*@__PURE__*/ new Camera();\n\n/**\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttps://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html\n */\n\nclass CameraHelper extends LineSegments {\n\n\tconstructor( camera ) {\n\n\t\tconst geometry = new BufferGeometry();\n\t\tconst material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst pointMap = {};\n\n\t\t// colors\n\n\t\tconst colorFrustum = new Color( 0xffaa00 );\n\t\tconst colorCone = new Color( 0xff0000 );\n\t\tconst colorUp = new Color( 0x00aaff );\n\t\tconst colorTarget = new Color( 0xffffff );\n\t\tconst colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'CameraHelper';\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst pointMap = this.pointMap;\n\n\t\tconst w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t_vector.set( x, y, z ).unproject( camera );\n\n\tconst points = pointMap[ point ];\n\n\tif ( points !== undefined ) {\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tposition.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t}\n\n}\n\nconst _box = /*@__PURE__*/ new Box3();\n\nclass BoxHelper extends LineSegments {\n\n\tconstructor( object, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tconst positions = new Float32Array( 8 * 3 );\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.object = object;\n\t\tthis.type = 'BoxHelper';\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box.isEmpty() ) return;\n\n\t\tconst min = _box.min;\n\t\tconst max = _box.max;\n\n\t\t/*\n\t\t\t5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tconst position = this.geometry.attributes.position;\n\t\tconst array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\n\t}\n\n\tsetFromObject( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Box3Helper extends LineSegments {\n\n\tconstructor( box, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tconst positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.box = box;\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\nclass PlaneHelper extends Line {\n\n\tconstructor( plane, size = 1, hex = 0xffff00 ) {\n\n\t\tconst color = hex;\n\n\t\tconst positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = size;\n\n\t\tconst positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tconst geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tlet scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\nconst _axis = /*@__PURE__*/ new Vector3();\nlet _lineGeometry, _coneGeometry;\n\nclass ArrowHelper extends Object3D {\n\n\t// dir is assumed to be normalized\n\n\tconstructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ArrowHelper';\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tsetDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tconst radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t}\n\n\tsetLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t}\n\n\tsetColor( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass AxesHelper extends LineSegments {\n\n\tconstructor( size = 1 ) {\n\n\t\tconst vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tconst colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'AxesHelper';\n\n\t}\n\n\tsetColors( xAxisColor, yAxisColor, zAxisColor ) {\n\n\t\tconst color = new Color();\n\t\tconst array = this.geometry.attributes.color.array;\n\n\t\tcolor.set( xAxisColor );\n\t\tcolor.toArray( array, 0 );\n\t\tcolor.toArray( array, 3 );\n\n\t\tcolor.set( yAxisColor );\n\t\tcolor.toArray( array, 6 );\n\t\tcolor.toArray( array, 9 );\n\n\t\tcolor.set( zAxisColor );\n\t\tcolor.toArray( array, 12 );\n\t\tcolor.toArray( array, 15 );\n\n\t\tthis.geometry.attributes.color.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass ShapePath {\n\n\tconstructor() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t\treturn this;\n\n\t}\n\n\ttoShapes( isCCW, noHoles ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tconst shapes = [];\n\n\t\t\tfor ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tconst tmpPath = inSubpaths[ i ];\n\n\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tconst polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tlet inside = false;\n\t\t\tfor ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tlet edgeLowPt = inPolygon[ p ];\n\t\t\t\tlet edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tconst isClockWise = ShapeUtils.isClockWise;\n\n\t\tconst subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tlet solid, tmpPath, tmpShape;\n\t\tconst shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tlet holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tconst betterShapeHoles = [];\n\t\tconst newShapes = [];\n\t\tlet newShapeHoles = [];\n\t\tlet mainIdx = 0;\n\t\tlet tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( let i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tlet ambiguous = false;\n\t\t\tlet toChange = 0;\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tconst sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tconst ho = sho[ hIdx ];\n\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\tfor ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange ++;\n\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( toChange > 0 && ambiguous === false ) {\n\n\t\t\t\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet tmpHoles;\n\n\t\tfor ( let i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n}\n\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nclass DataUtils {\n\n\t// float32 to float16\n\n\tstatic toHalfFloat( val ) {\n\n\t\tif ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );\n\n\t\tval = clamp( val, - 65504, 65504 );\n\n\t\t_floatView[ 0 ] = val;\n\t\tconst f = _uint32View[ 0 ];\n\t\tconst e = ( f >> 23 ) & 0x1ff;\n\t\treturn _baseTable[ e ] + ( ( f & 0x007fffff ) >> _shiftTable[ e ] );\n\n\t}\n\n\t// float16 to float32\n\n\tstatic fromHalfFloat( val ) {\n\n\t\tconst m = val >> 10;\n\t\t_uint32View[ 0 ] = _mantissaTable[ _offsetTable[ m ] + ( val & 0x3ff ) ] + _exponentTable[ m ];\n\t\treturn _floatView[ 0 ];\n\n\t}\n\n}\n\n// float32 to float16 helpers\n\nconst _buffer = new ArrayBuffer( 4 );\nconst _floatView = new Float32Array( _buffer );\nconst _uint32View = new Uint32Array( _buffer );\n\nconst _baseTable = new Uint32Array( 512 );\nconst _shiftTable = new Uint32Array( 512 );\n\nfor ( let i = 0; i < 256; ++ i ) {\n\n\tconst e = i - 127;\n\n\t// very small number (0, -0)\n\n\tif ( e < - 27 ) {\n\n\t\t_baseTable[ i ] = 0x0000;\n\t\t_baseTable[ i | 0x100 ] = 0x8000;\n\t\t_shiftTable[ i ] = 24;\n\t\t_shiftTable[ i | 0x100 ] = 24;\n\n\t\t// small number (denorm)\n\n\t} else if ( e < - 14 ) {\n\n\t\t_baseTable[ i ] = 0x0400 >> ( - e - 14 );\n\t\t_baseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;\n\t\t_shiftTable[ i ] = - e - 1;\n\t\t_shiftTable[ i | 0x100 ] = - e - 1;\n\n\t\t// normal number\n\n\t} else if ( e <= 15 ) {\n\n\t\t_baseTable[ i ] = ( e + 15 ) << 10;\n\t\t_baseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;\n\t\t_shiftTable[ i ] = 13;\n\t\t_shiftTable[ i | 0x100 ] = 13;\n\n\t\t// large number (Infinity, -Infinity)\n\n\t} else if ( e < 128 ) {\n\n\t\t_baseTable[ i ] = 0x7c00;\n\t\t_baseTable[ i | 0x100 ] = 0xfc00;\n\t\t_shiftTable[ i ] = 24;\n\t\t_shiftTable[ i | 0x100 ] = 24;\n\n\t\t// stay (NaN, Infinity, -Infinity)\n\n\t} else {\n\n\t\t_baseTable[ i ] = 0x7c00;\n\t\t_baseTable[ i | 0x100 ] = 0xfc00;\n\t\t_shiftTable[ i ] = 13;\n\t\t_shiftTable[ i | 0x100 ] = 13;\n\n\t}\n\n}\n\n// float16 to float32 helpers\n\nconst _mantissaTable = new Uint32Array( 2048 );\nconst _exponentTable = new Uint32Array( 64 );\nconst _offsetTable = new Uint32Array( 64 );\n\nfor ( let i = 1; i < 1024; ++ i ) {\n\n\tlet m = i << 13; // zero pad mantissa bits\n\tlet e = 0; // zero exponent\n\n\t// normalized\n\twhile ( ( m & 0x00800000 ) === 0 ) {\n\n\t\tm <<= 1;\n\t\te -= 0x00800000; // decrement exponent\n\n\t}\n\n\tm &= ~ 0x00800000; // clear leading 1 bit\n\te += 0x38800000; // adjust bias\n\n\t_mantissaTable[ i ] = m | e;\n\n}\n\nfor ( let i = 1024; i < 2048; ++ i ) {\n\n\t_mantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );\n\n}\n\nfor ( let i = 1; i < 31; ++ i ) {\n\n\t_exponentTable[ i ] = i << 23;\n\n}\n\n_exponentTable[ 31 ] = 0x47800000;\n_exponentTable[ 32 ] = 0x80000000;\nfor ( let i = 33; i < 63; ++ i ) {\n\n\t_exponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );\n\n}\n\n_exponentTable[ 63 ] = 0xc7800000;\n\nfor ( let i = 1; i < 64; ++ i ) {\n\n\tif ( i !== 32 ) {\n\n\t\t_offsetTable[ i ] = 1024;\n\n\t}\n\n}\n\nconst LineStrip = 0;\nconst LinePieces = 1;\nconst NoColors = 0;\nconst FaceColors = 1;\nconst VertexColors = 2;\n\nfunction MeshFaceMaterial( materials ) {\n\n\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\treturn materials;\n\n}\n\nfunction MultiMaterial( materials = [] ) {\n\n\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\tmaterials.isMultiMaterial = true;\n\tmaterials.materials = materials;\n\tmaterials.clone = function () {\n\n\t\treturn materials.slice();\n\n\t};\n\n\treturn materials;\n\n}\n\nclass PointCloud extends Points {\n\n\tconstructor( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\tsuper( geometry, material );\n\n\t}\n\n}\n\nclass Particle extends Sprite {\n\n\tconstructor( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\tsuper( material );\n\n\t}\n\n}\n\nclass ParticleSystem extends Points {\n\n\tconstructor( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\tsuper( geometry, material );\n\n\t}\n\n}\n\nclass PointCloudMaterial extends PointsMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\tsuper( parameters );\n\n\t}\n\n}\n\nclass ParticleBasicMaterial extends PointsMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\tsuper( parameters );\n\n\t}\n\n}\n\nclass ParticleSystemMaterial extends PointsMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\tsuper( parameters );\n\n\t}\n\n}\n\nclass Vertex extends Vector3 {\n\n\tconstructor( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\tsuper( x, y, z );\n\n\t}\n\n}\n\n//\n\nclass DynamicBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );\n\t\tsuper( array, itemSize );\n\t\tthis.setUsage( DynamicDrawUsage );\n\n\t}\n\n}\n\nclass Int8Attribute extends Int8BufferAttribute {\n\n\tconstructor( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\tsuper( array, itemSize );\n\n\t}\n\n}\n\nclass Uint8Attribute extends Uint8BufferAttribute {\n\n\tconstructor( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\tsuper( array, itemSize );\n\n\t}\n\n}\n\nclass Uint8ClampedAttribute extends Uint8ClampedBufferAttribute {\n\n\tconstructor( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\tsuper( array, itemSize );\n\n\t}\n\n}\n\nclass Int16Attribute extends Int16BufferAttribute {\n\n\tconstructor( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\tsuper( array, itemSize );\n\n\t}\n\n}\n\nclass Uint16Attribute extends Uint16BufferAttribute {\n\n\tconstructor( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\tsuper( array, itemSize );\n\n\t}\n\n}\n\nclass Int32Attribute extends Int32BufferAttribute {\n\n\tconstructor( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\tsuper( array, itemSize );\n\n\t}\n\n}\n\nclass Uint32Attribute extends Uint32BufferAttribute {\n\n\tconstructor( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\tsuper( array, itemSize );\n\n\t}\n\n}\n\nclass Float32Attribute extends Float32BufferAttribute {\n\n\tconstructor( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\tsuper( array, itemSize );\n\n\t}\n\n}\n\nclass Float64Attribute extends Float64BufferAttribute {\n\n\tconstructor( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\tsuper( array, itemSize );\n\n\t}\n\n}\n\n//\n\nCurve.create = function ( construct, getPoint ) {\n\n\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\tconstruct.prototype = Object.create( Curve.prototype );\n\tconstruct.prototype.constructor = construct;\n\tconstruct.prototype.getPoint = getPoint;\n\n\treturn construct;\n\n};\n\n//\n\nPath.prototype.fromPoints = function ( points ) {\n\n\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\treturn this.setFromPoints( points );\n\n};\n\n//\n\nclass AxisHelper extends AxesHelper {\n\n\tconstructor( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\tsuper( size );\n\n\t}\n\n}\n\nclass BoundingBoxHelper extends BoxHelper {\n\n\tconstructor( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\tsuper( object, color );\n\n\t}\n\n}\n\nclass EdgesHelper extends LineSegments {\n\n\tconstructor( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\tsuper( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n}\n\nGridHelper.prototype.setColors = function () {\n\n\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n};\n\nSkeletonHelper.prototype.update = function () {\n\n\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n};\n\nclass WireframeHelper extends LineSegments {\n\n\tconstructor( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\tsuper( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n}\n\n//\n\nLoader.prototype.extractUrlBase = function ( url ) {\n\n\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\treturn LoaderUtils.extractUrlBase( url );\n\n};\n\nLoader.Handlers = {\n\n\tadd: function ( /* regex, loader */ ) {\n\n\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t},\n\n\tget: function ( /* file */ ) {\n\n\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t}\n\n};\n\nclass XHRLoader extends FileLoader {\n\n\tconstructor( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\tsuper( manager );\n\n\t}\n\n}\n\nclass BinaryTextureLoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\tsuper( manager );\n\n\t}\n\n}\n\n//\n\nBox2.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\nBox2.prototype.empty = function () {\n\n\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\treturn this.isEmpty();\n\n};\n\nBox2.prototype.isIntersectionBox = function ( box ) {\n\n\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\treturn this.intersectsBox( box );\n\n};\n\nBox2.prototype.size = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\treturn this.getSize( optionalTarget );\n\n};\n\n//\n\nBox3.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\nBox3.prototype.empty = function () {\n\n\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\treturn this.isEmpty();\n\n};\n\nBox3.prototype.isIntersectionBox = function ( box ) {\n\n\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\treturn this.intersectsBox( box );\n\n};\n\nBox3.prototype.isIntersectionSphere = function ( sphere ) {\n\n\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\treturn this.intersectsSphere( sphere );\n\n};\n\nBox3.prototype.size = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\treturn this.getSize( optionalTarget );\n\n};\n\n//\n\nEuler.prototype.toVector3 = function () {\n\n\tconsole.error( 'THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead' );\n\n};\n\n\n//\n\nSphere.prototype.empty = function () {\n\n\tconsole.warn( 'THREE.Sphere: .empty() has been renamed to .isEmpty().' );\n\treturn this.isEmpty();\n\n};\n\n//\n\nFrustum.prototype.setFromMatrix = function ( m ) {\n\n\tconsole.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );\n\treturn this.setFromProjectionMatrix( m );\n\n};\n\n//\n\nLine3.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\n//\n\nMatrix3.prototype.flattenToArrayOffset = function ( array, offset ) {\n\n\tconsole.warn( 'THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.' );\n\treturn this.toArray( array, offset );\n\n};\n\nMatrix3.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\treturn vector.applyMatrix3( this );\n\n};\n\nMatrix3.prototype.multiplyVector3Array = function ( /* a */ ) {\n\n\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n};\n\nMatrix3.prototype.applyToBufferAttribute = function ( attribute ) {\n\n\tconsole.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );\n\treturn attribute.applyMatrix3( this );\n\n};\n\nMatrix3.prototype.applyToVector3Array = function ( /* array, offset, length */ ) {\n\n\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n};\n\nMatrix3.prototype.getInverse = function ( matrix ) {\n\n\tconsole.warn( 'THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.' );\n\treturn this.copy( matrix ).invert();\n\n};\n\n//\n\nMatrix4.prototype.extractPosition = function ( m ) {\n\n\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\treturn this.copyPosition( m );\n\n};\n\nMatrix4.prototype.flattenToArrayOffset = function ( array, offset ) {\n\n\tconsole.warn( 'THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.' );\n\treturn this.toArray( array, offset );\n\n};\n\nMatrix4.prototype.getPosition = function () {\n\n\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n};\n\nMatrix4.prototype.setRotationFromQuaternion = function ( q ) {\n\n\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\treturn this.makeRotationFromQuaternion( q );\n\n};\n\nMatrix4.prototype.multiplyToArray = function () {\n\n\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n};\n\nMatrix4.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\treturn vector.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.multiplyVector4 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\treturn vector.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.multiplyVector3Array = function ( /* a */ ) {\n\n\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateAxis = function ( v ) {\n\n\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\tv.transformDirection( this );\n\n};\n\nMatrix4.prototype.crossVector = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\treturn vector.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.translate = function () {\n\n\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateX = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateY = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateZ = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateByAxis = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n};\n\nMatrix4.prototype.applyToBufferAttribute = function ( attribute ) {\n\n\tconsole.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );\n\treturn attribute.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.applyToVector3Array = function ( /* array, offset, length */ ) {\n\n\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n};\n\nMatrix4.prototype.makeFrustum = function ( left, right, bottom, top, near, far ) {\n\n\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n};\n\nMatrix4.prototype.getInverse = function ( matrix ) {\n\n\tconsole.warn( 'THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.' );\n\treturn this.copy( matrix ).invert();\n\n};\n\n//\n\nPlane.prototype.isIntersectionLine = function ( line ) {\n\n\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\treturn this.intersectsLine( line );\n\n};\n\n//\n\nQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\treturn vector.applyQuaternion( this );\n\n};\n\nQuaternion.prototype.inverse = function ( ) {\n\n\tconsole.warn( 'THREE.Quaternion: .inverse() has been renamed to invert().' );\n\treturn this.invert();\n\n};\n\n//\n\nRay.prototype.isIntersectionBox = function ( box ) {\n\n\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\treturn this.intersectsBox( box );\n\n};\n\nRay.prototype.isIntersectionPlane = function ( plane ) {\n\n\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\treturn this.intersectsPlane( plane );\n\n};\n\nRay.prototype.isIntersectionSphere = function ( sphere ) {\n\n\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\treturn this.intersectsSphere( sphere );\n\n};\n\n//\n\nTriangle.prototype.area = function () {\n\n\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\treturn this.getArea();\n\n};\n\nTriangle.prototype.barycoordFromPoint = function ( point, target ) {\n\n\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\treturn this.getBarycoord( point, target );\n\n};\n\nTriangle.prototype.midpoint = function ( target ) {\n\n\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\treturn this.getMidpoint( target );\n\n};\n\nTriangle.prototypenormal = function ( target ) {\n\n\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\treturn this.getNormal( target );\n\n};\n\nTriangle.prototype.plane = function ( target ) {\n\n\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\treturn this.getPlane( target );\n\n};\n\nTriangle.barycoordFromPoint = function ( point, a, b, c, target ) {\n\n\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n};\n\nTriangle.normal = function ( a, b, c, target ) {\n\n\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\treturn Triangle.getNormal( a, b, c, target );\n\n};\n\n//\n\nShape.prototype.extractAllPoints = function ( divisions ) {\n\n\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\treturn this.extractPoints( divisions );\n\n};\n\nShape.prototype.extrude = function ( options ) {\n\n\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\treturn new ExtrudeGeometry( this, options );\n\n};\n\nShape.prototype.makeGeometry = function ( options ) {\n\n\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\treturn new ShapeGeometry( this, options );\n\n};\n\n//\n\nVector2.prototype.fromAttribute = function ( attribute, index, offset ) {\n\n\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\treturn this.fromBufferAttribute( attribute, index, offset );\n\n};\n\nVector2.prototype.distanceToManhattan = function ( v ) {\n\n\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\treturn this.manhattanDistanceTo( v );\n\n};\n\nVector2.prototype.lengthManhattan = function () {\n\n\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\treturn this.manhattanLength();\n\n};\n\n//\n\nVector3.prototype.setEulerFromRotationMatrix = function () {\n\n\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n};\n\nVector3.prototype.setEulerFromQuaternion = function () {\n\n\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n};\n\nVector3.prototype.getPositionFromMatrix = function ( m ) {\n\n\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\treturn this.setFromMatrixPosition( m );\n\n};\n\nVector3.prototype.getScaleFromMatrix = function ( m ) {\n\n\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\treturn this.setFromMatrixScale( m );\n\n};\n\nVector3.prototype.getColumnFromMatrix = function ( index, matrix ) {\n\n\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\treturn this.setFromMatrixColumn( matrix, index );\n\n};\n\nVector3.prototype.applyProjection = function ( m ) {\n\n\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\treturn this.applyMatrix4( m );\n\n};\n\nVector3.prototype.fromAttribute = function ( attribute, index, offset ) {\n\n\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\treturn this.fromBufferAttribute( attribute, index, offset );\n\n};\n\nVector3.prototype.distanceToManhattan = function ( v ) {\n\n\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\treturn this.manhattanDistanceTo( v );\n\n};\n\nVector3.prototype.lengthManhattan = function () {\n\n\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\treturn this.manhattanLength();\n\n};\n\n//\n\nVector4.prototype.fromAttribute = function ( attribute, index, offset ) {\n\n\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\treturn this.fromBufferAttribute( attribute, index, offset );\n\n};\n\nVector4.prototype.lengthManhattan = function () {\n\n\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\treturn this.manhattanLength();\n\n};\n\n//\n\nObject3D.prototype.getChildByName = function ( name ) {\n\n\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\treturn this.getObjectByName( name );\n\n};\n\nObject3D.prototype.renderDepth = function () {\n\n\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n};\n\nObject3D.prototype.translate = function ( distance, axis ) {\n\n\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\treturn this.translateOnAxis( axis, distance );\n\n};\n\nObject3D.prototype.getWorldRotation = function () {\n\n\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n};\n\nObject3D.prototype.applyMatrix = function ( matrix ) {\n\n\tconsole.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );\n\treturn this.applyMatrix4( matrix );\n\n};\n\nObject.defineProperties( Object3D.prototype, {\n\n\teulerOrder: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\treturn this.rotation.order;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\tthis.rotation.order = value;\n\n\t\t}\n\t},\n\tuseQuaternion: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t}\n\t}\n\n} );\n\nMesh.prototype.setDrawMode = function () {\n\n\tconsole.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n};\n\nObject.defineProperties( Mesh.prototype, {\n\n\tdrawMode: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );\n\t\t\treturn TrianglesDrawMode;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t}\n\t}\n\n} );\n\nSkinnedMesh.prototype.initBones = function () {\n\n\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n};\n\n//\n\nPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\tconsole.warn( 'THREE.PerspectiveCamera.setLens is deprecated. ' +\n\t\t\t'Use .setFocalLength and .filmGauge for a photographic setup.' );\n\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\tthis.setFocalLength( focalLength );\n\n};\n\n//\n\nObject.defineProperties( Light.prototype, {\n\tonlyShadow: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t}\n\t},\n\tshadowCameraFov: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\tthis.shadow.camera.fov = value;\n\n\t\t}\n\t},\n\tshadowCameraLeft: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\tthis.shadow.camera.left = value;\n\n\t\t}\n\t},\n\tshadowCameraRight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\tthis.shadow.camera.right = value;\n\n\t\t}\n\t},\n\tshadowCameraTop: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\tthis.shadow.camera.top = value;\n\n\t\t}\n\t},\n\tshadowCameraBottom: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t}\n\t},\n\tshadowCameraNear: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\tthis.shadow.camera.near = value;\n\n\t\t}\n\t},\n\tshadowCameraFar: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\tthis.shadow.camera.far = value;\n\n\t\t}\n\t},\n\tshadowCameraVisible: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t}\n\t},\n\tshadowBias: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\tthis.shadow.bias = value;\n\n\t\t}\n\t},\n\tshadowDarkness: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t}\n\t},\n\tshadowMapWidth: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t}\n\t},\n\tshadowMapHeight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( BufferAttribute.prototype, {\n\n\tlength: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\treturn this.array.length;\n\n\t\t}\n\t},\n\tdynamic: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t},\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t}\n\t}\n\n} );\n\nBufferAttribute.prototype.setDynamic = function ( value ) {\n\n\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\treturn this;\n\n};\n\nBufferAttribute.prototype.copyIndicesArray = function ( /* indices */ ) {\n\n\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n},\n\nBufferAttribute.prototype.setArray = function ( /* array */ ) {\n\n\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n};\n\n//\n\nBufferGeometry.prototype.addIndex = function ( index ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\tthis.setIndex( index );\n\n};\n\nBufferGeometry.prototype.addAttribute = function ( name, attribute ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t}\n\n\tif ( name === 'index' ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\tthis.setIndex( attribute );\n\n\t\treturn this;\n\n\t}\n\n\treturn this.setAttribute( name, attribute );\n\n};\n\nBufferGeometry.prototype.addDrawCall = function ( start, count, indexOffset ) {\n\n\tif ( indexOffset !== undefined ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t}\n\n\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\tthis.addGroup( start, count );\n\n};\n\nBufferGeometry.prototype.clearDrawCalls = function () {\n\n\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\tthis.clearGroups();\n\n};\n\nBufferGeometry.prototype.computeOffsets = function () {\n\n\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n};\n\nBufferGeometry.prototype.removeAttribute = function ( name ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\treturn this.deleteAttribute( name );\n\n};\n\nBufferGeometry.prototype.applyMatrix = function ( matrix ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\treturn this.applyMatrix4( matrix );\n\n};\n\nObject.defineProperties( BufferGeometry.prototype, {\n\n\tdrawcalls: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t},\n\toffsets: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t}\n\n} );\n\nInterleavedBuffer.prototype.setDynamic = function ( value ) {\n\n\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\treturn this;\n\n};\n\nInterleavedBuffer.prototype.setArray = function ( /* array */ ) {\n\n\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n};\n\n//\n\nExtrudeGeometry.prototype.getArrays = function () {\n\n\tconsole.error( 'THREE.ExtrudeGeometry: .getArrays() has been removed.' );\n\n};\n\nExtrudeGeometry.prototype.addShapeList = function () {\n\n\tconsole.error( 'THREE.ExtrudeGeometry: .addShapeList() has been removed.' );\n\n};\n\nExtrudeGeometry.prototype.addShape = function () {\n\n\tconsole.error( 'THREE.ExtrudeGeometry: .addShape() has been removed.' );\n\n};\n\n//\n\nScene.prototype.dispose = function () {\n\n\tconsole.error( 'THREE.Scene: .dispose() has been removed.' );\n\n};\n\n//\n\nUniform.prototype.onUpdate = function () {\n\n\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\treturn this;\n\n};\n\n//\n\nObject.defineProperties( Material.prototype, {\n\n\twrapAround: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t}\n\t},\n\n\toverdraw: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t}\n\t},\n\n\twrapRGB: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\treturn new Color();\n\n\t\t}\n\t},\n\n\tshading: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t}\n\t},\n\n\tstencilMask: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\treturn this.stencilFuncMask;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\tthis.stencilFuncMask = value;\n\n\t\t}\n\t},\n\n\tvertexTangents: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );\n\n\t\t}\n\t},\n\n} );\n\nObject.defineProperties( ShaderMaterial.prototype, {\n\n\tderivatives: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\treturn this.extensions.derivatives;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\tthis.extensions.derivatives = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nWebGLRenderer.prototype.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\tthis.setRenderTarget( renderTarget );\n\tthis.clear( color, depth, stencil );\n\n};\n\nWebGLRenderer.prototype.animate = function ( callback ) {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\tthis.setAnimationLoop( callback );\n\n};\n\nWebGLRenderer.prototype.getCurrentRenderTarget = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\treturn this.getRenderTarget();\n\n};\n\nWebGLRenderer.prototype.getMaxAnisotropy = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\treturn this.capabilities.getMaxAnisotropy();\n\n};\n\nWebGLRenderer.prototype.getPrecision = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\treturn this.capabilities.precision;\n\n};\n\nWebGLRenderer.prototype.resetGLState = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\treturn this.state.reset();\n\n};\n\nWebGLRenderer.prototype.supportsFloatTextures = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\treturn this.extensions.get( 'OES_texture_float' );\n\n};\n\nWebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\treturn this.extensions.get( 'OES_texture_half_float' );\n\n};\n\nWebGLRenderer.prototype.supportsStandardDerivatives = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n};\n\nWebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n};\n\nWebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n};\n\nWebGLRenderer.prototype.supportsBlendMinMax = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n};\n\nWebGLRenderer.prototype.supportsVertexTextures = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\treturn this.capabilities.vertexTextures;\n\n};\n\nWebGLRenderer.prototype.supportsInstancedArrays = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n};\n\nWebGLRenderer.prototype.enableScissorTest = function ( boolean ) {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\tthis.setScissorTest( boolean );\n\n};\n\nWebGLRenderer.prototype.initMaterial = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.addPrePlugin = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.addPostPlugin = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.updateShadowMap = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setFaceCulling = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.allocTextureUnit = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setTexture = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setTexture2D = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setTextureCube = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.getActiveMipMapLevel = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\treturn this.getActiveMipmapLevel();\n\n};\n\nObject.defineProperties( WebGLRenderer.prototype, {\n\n\tshadowMapEnabled: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.enabled;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\tthis.shadowMap.enabled = value;\n\n\t\t}\n\t},\n\tshadowMapType: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\tthis.shadowMap.type = value;\n\n\t\t}\n\t},\n\tshadowMapCullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\tcontext: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\treturn this.getContext();\n\n\t\t}\n\t},\n\tvr: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );\n\t\t\treturn this.xr;\n\n\t\t}\n\t},\n\tgammaInput: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\t\t\treturn false;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\n\t\t}\n\t},\n\tgammaOutput: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\treturn false;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\tthis.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;\n\n\t\t}\n\t},\n\ttoneMappingWhitePoint: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\t\t\treturn 1.0;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\n\t\t}\n\t},\n\tgammaFactor: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaFactor has been removed.' );\n\t\t\treturn 2;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaFactor has been removed.' );\n\n\t\t}\n\t}\n} );\n\nObject.defineProperties( WebGLShadowMap.prototype, {\n\n\tcullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* cullFace */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderReverseSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderSingleSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t}\n\n} );\n\nclass WebGLRenderTargetCube extends WebGLCubeRenderTarget {\n\n\tconstructor( width, height, options ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );\n\t\tsuper( width, options );\n\n\t}\n\n}\n\n//\n\nObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\twrapS: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\treturn this.texture.wrapS;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\tthis.texture.wrapS = value;\n\n\t\t}\n\t},\n\twrapT: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\treturn this.texture.wrapT;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\tthis.texture.wrapT = value;\n\n\t\t}\n\t},\n\tmagFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\treturn this.texture.magFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\tthis.texture.magFilter = value;\n\n\t\t}\n\t},\n\tminFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\treturn this.texture.minFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\tthis.texture.minFilter = value;\n\n\t\t}\n\t},\n\tanisotropy: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\treturn this.texture.anisotropy;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\tthis.texture.anisotropy = value;\n\n\t\t}\n\t},\n\toffset: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\treturn this.texture.offset;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\tthis.texture.offset = value;\n\n\t\t}\n\t},\n\trepeat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\treturn this.texture.repeat;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\tthis.texture.repeat = value;\n\n\t\t}\n\t},\n\tformat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\treturn this.texture.format;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\tthis.texture.format = value;\n\n\t\t}\n\t},\n\ttype: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\treturn this.texture.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\tthis.texture.type = value;\n\n\t\t}\n\t},\n\tgenerateMipmaps: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\treturn this.texture.generateMipmaps;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nAudio.prototype.load = function ( file ) {\n\n\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\tconst scope = this;\n\tconst audioLoader = new AudioLoader();\n\taudioLoader.load( file, function ( buffer ) {\n\n\t\tscope.setBuffer( buffer );\n\n\t} );\n\treturn this;\n\n};\n\n\nAudioAnalyser.prototype.getData = function () {\n\n\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\treturn this.getFrequencyData();\n\n};\n\n//\n\nCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\treturn this.update( renderer, scene );\n\n};\n\nCubeCamera.prototype.clear = function ( renderer, color, depth, stencil ) {\n\n\tconsole.warn( 'THREE.CubeCamera: .clear() is now .renderTarget.clear().' );\n\treturn this.renderTarget.clear( renderer, color, depth, stencil );\n\n};\n\nImageUtils.crossOrigin = undefined;\n\nImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\tconst loader = new TextureLoader();\n\tloader.setCrossOrigin( this.crossOrigin );\n\n\tconst texture = loader.load( url, onLoad, undefined, onError );\n\n\tif ( mapping ) texture.mapping = mapping;\n\n\treturn texture;\n\n};\n\nImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\tconst loader = new CubeTextureLoader();\n\tloader.setCrossOrigin( this.crossOrigin );\n\n\tconst texture = loader.load( urls, onLoad, undefined, onError );\n\n\tif ( mapping ) texture.mapping = mapping;\n\n\treturn texture;\n\n};\n\nImageUtils.loadCompressedTexture = function () {\n\n\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n};\n\nImageUtils.loadCompressedTextureCube = function () {\n\n\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n};\n\n//\n\nfunction CanvasRenderer() {\n\n\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n}\n\n//\n\nfunction JSONLoader() {\n\n\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n}\n\n//\n\nconst SceneUtils = {\n\n\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t},\n\n\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t},\n\n\tattach: function ( /* child, scene, parent */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t}\n\n};\n\n//\n\nfunction LensFlare() {\n\n\tconsole.error( 'THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js' );\n\n}\n\n//\n\nclass ParametricGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tconsole.error( 'THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js' );\n\t\tsuper();\n\n\t}\n\n}\n\nclass TextGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tconsole.error( 'THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js' );\n\t\tsuper();\n\n\t}\n\n}\n\nfunction FontLoader() {\n\n\tconsole.error( 'THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js' );\n\n}\n\nfunction Font() {\n\n\tconsole.error( 'THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js' );\n\n}\n\nfunction ImmediateRenderObject() {\n\n\tconsole.error( 'THREE.ImmediateRenderObject has been removed.' );\n\n}\n\nclass WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width, height, options ) {\n\n\t\tconsole.error( 'THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the \"samples\" property to greater 0 to enable multisampling.' );\n\t\tsuper( width, height, options );\n\t\tthis.samples = 4;\n\n\t}\n\n}\n\nclass DataTexture2DArray extends DataArrayTexture {\n\n\tconstructor( data, width, height, depth ) {\n\n\t\tconsole.warn( 'THREE.DataTexture2DArray has been renamed to DataArrayTexture.' );\n\t\tsuper( data, width, height, depth );\n\n\t}\n\n}\n\nclass DataTexture3D extends Data3DTexture {\n\n\tconstructor( data, width, height, depth ) {\n\n\t\tconsole.warn( 'THREE.DataTexture3D has been renamed to Data3DTexture.' );\n\t\tsuper( data, width, height, depth );\n\n\t}\n\n}\n\nif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\trevision: REVISION,\n\t} } ) );\n\n}\n\nif ( typeof window !== 'undefined' ) {\n\n\tif ( window.__THREE__ ) {\n\n\t\tconsole.warn( 'WARNING: Multiple instances of Three.js being imported.' );\n\n\t} else {\n\n\t\twindow.__THREE__ = REVISION;\n\n\t}\n\n}\n\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AlphaFormat, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AmbientLightProbe, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, AxisHelper, BackSide, BasicDepthPacking, BasicShadowMap, BinaryTextureLoader, Bone, BooleanKeyframeTrack, BoundingBoxHelper, Box2, Box3, Box3Helper, BoxGeometry as BoxBufferGeometry, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasRenderer, CanvasTexture, CapsuleGeometry as CapsuleBufferGeometry, CapsuleGeometry, CatmullRomCurve3, CineonToneMapping, CircleGeometry as CircleBufferGeometry, CircleGeometry, ClampToEdgeWrapping, Clock, Color, ColorKeyframeTrack, ColorManagement, CompressedTexture, CompressedTextureLoader, ConeGeometry as ConeBufferGeometry, ConeGeometry, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CustomToneMapping, CylinderGeometry as CylinderBufferGeometry, CylinderGeometry, Cylindrical, Data3DTexture, DataArrayTexture, DataTexture, DataTexture2DArray, DataTexture3D, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthFormat, DepthStencilFormat, DepthTexture, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronGeometry as DodecahedronBufferGeometry, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicBufferAttribute, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EdgesHelper, EllipseCurve, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeGeometry as ExtrudeBufferGeometry, ExtrudeGeometry, FaceColors, FileLoader, FlatShading, Float16BufferAttribute, Float32Attribute, Float32BufferAttribute, Float64Attribute, Float64BufferAttribute, FloatType, Fog, FogExp2, Font, FontLoader, FramebufferTexture, FrontSide, Frustum, GLBufferAttribute, GLSL1, GLSL3, GreaterDepth, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, HemisphereLightProbe, IcosahedronGeometry as IcosahedronBufferGeometry, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, ImmediateRenderObject, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16Attribute, Int16BufferAttribute, Int32Attribute, Int32BufferAttribute, Int8Attribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InvertStencilOp, JSONLoader, KeepStencilOp, KeyframeTrack, LOD, LatheGeometry as LatheBufferGeometry, LatheGeometry, Layers, LensFlare, LessDepth, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LinePieces, LineSegments, LineStrip, LinearEncoding, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, LuminanceAlphaFormat, LuminanceFormat, MOUSE, Material, MaterialLoader, MathUtils as Math, MathUtils, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshFaceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiMaterial, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeverDepth, NeverStencilFunc, NoBlending, NoColorSpace, NoColors, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronGeometry as OctahedronBufferGeometry, OctahedronGeometry, OneFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, PMREMGenerator, ParametricGeometry, Particle, ParticleBasicMaterial, ParticleSystem, ParticleSystemMaterial, Path, PerspectiveCamera, Plane, PlaneGeometry as PlaneBufferGeometry, PlaneGeometry, PlaneHelper, PointCloud, PointCloudMaterial, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronGeometry as PolyhedronBufferGeometry, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBFormat, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGFormat, RGIntegerFormat, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RedFormat, RedIntegerFormat, ReinhardToneMapping, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingGeometry as RingBufferGeometry, RingGeometry, SRGBColorSpace, Scene, SceneUtils, ShaderChunk, ShaderLib, ShaderMaterial, ShadowMaterial, Shape, ShapeGeometry as ShapeBufferGeometry, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, SmoothShading, Source, Sphere, SphereGeometry as SphereBufferGeometry, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronGeometry as TetrahedronBufferGeometry, TetrahedronGeometry, TextGeometry, Texture, TextureLoader, TorusGeometry as TorusBufferGeometry, TorusGeometry, TorusKnotGeometry as TorusKnotBufferGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeGeometry as TubeBufferGeometry, TubeGeometry, UVMapping, Uint16Attribute, Uint16BufferAttribute, Uint32Attribute, Uint32BufferAttribute, Uint8Attribute, Uint8BufferAttribute, Uint8ClampedAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsLib, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, Vertex, VertexColors, VideoTexture, WebGL1Renderer, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGLCubeRenderTarget, WebGLMultipleRenderTargets, WebGLMultisampleRenderTarget, WebGLRenderTarget, WebGLRenderTargetCube, WebGLRenderer, WebGLUtils, WireframeGeometry, WireframeHelper, WrapAroundEnding, XHRLoader, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, _SRGBAFormat, sRGBEncoding };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/three/build/three.module.js\n// module id = null\n// module chunks = ","// set inner height and width based on screen size\nimport * as THREE from 'three' // npm install three 后，将three引用进js（注意版本，three.js版本跨度大，很多方法可能不兼容，需要留意，后续会提到）\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\n\nconst winWidth = window.innerWidth\nconst winHeight = window.innerHeight\n\nconst vshader = `\n    precision mediump float;\n\n    varying vec2 vUv;\n    uniform float u_time;\n\n    //\n    // Description : Array and textureless GLSL 2D/3D/4D simplex\n    //               noise functions.\n    //      Author : Ian McEwan, Ashima Arts.\n    //  Maintainer : ijm\n    //     Lastmod : 20110822 (ijm)\n    //     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n    //               Distributed under the MIT License. See LICENSE file.\n    //               https://github.com/ashima/webgl-noise\n    //\n\n    vec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n\n    vec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n\n    vec4 permute(vec4 x) {\n        return mod289(((x*34.0)+1.0)*x);\n    }\n\n    vec4 taylorInvSqrt(vec4 r)\n    {\n    return 1.79284291400159 - 0.85373472095314 * r;\n    }\n\n    float snoise(vec3 v) {\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n    // Permutations\n    i = mod289(i);\n    vec4 p = permute( permute( permute(\n                i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n            + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    // Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                    dot(p2,x2), dot(p3,x3) ) );\n    }\n\n\n    void main(){\n        vUv = uv;\n        vec3 pos = position;\n        float noiseFreq = 3.5;\n        float noiseAmp = .15;\n\n        vec3 noisePos = vec3(pos.x * noiseFreq + u_time / 4.0, pos.y, pos.z);\n        pos.z += snoise(noisePos) * noiseAmp;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n    }\n\n    `\n\nconst fshader = `\n    precision mediump float;\n    varying vec2 vUv;\n    uniform float u_time;\n\n    void main(){\n        gl_FragColor = vec4(255,255,255, 1.0);\n    }\n    `\n\n// global vars\n// eslint-disable-next-line no-unused-vars\nlet scene, camera, renderer, controls, circle, clock, uniforms, container\n\nfunction init (id) {\n  // 初始化相机，用于观察场景，可设置视角的远近，长宽比，方向等\n  camera = new THREE.PerspectiveCamera(70, winWidth / winHeight, 0.01, 1000)\n  camera.position.set(0, 0, 0.5)\n  // 初始化场景，后续会在此场景中添加元素\n  scene = new THREE.Scene()\n  // scene.background = new THREE.Color('#000000')\n  // render\n  renderer = new THREE.WebGLRenderer()\n  renderer.setSize(winWidth, winHeight)\n\n  clock = new THREE.Clock()\n\n  uniforms = {\n    u_time: {value: 0.0}\n    // u_color: { value: new THREE.Color('#14469B') }\n  }\n  // geometry\n  const geometry = new THREE.PlaneGeometry(0.6, 0.6, 20, 20)\n  // material\n  // three.js allows you to pass in uniform object into the shader material\n  // you can also pass in vertex and fragment shader variables\n  const material = new THREE.ShaderMaterial({\n    uniforms: uniforms,\n    vertexShader: vshader,\n    fragmentShader: fshader,\n    side: THREE.DoubleSide,\n    wireframe: true\n  })\n\n  // mesh\n  circle = new THREE.Mesh(geometry, material)\n  circle.rotation.y = 0\n  circle.rotation.x = 30\n  scene.add(circle)\n  // set clock\n  clock = new THREE.Clock()\n  // orbit controls\n  // controls = new OrbitControls(camera, renderer.domElement)\n  // controls.addEventListener('change', () => {\n  //   renderer.render(scene, camera)\n  // })\n  // 获取并将渲染器绑定到容器\n  container = document.getElementById(id)\n  container.appendChild(renderer.domElement)\n  window.addEventListener('resize', resize, false)\n}\n\nfunction resize () {\n  camera.aspect = winWidth / winHeight\n  camera.updateProjectionMatrix()\n  renderer.setSize(window.innerWidth, window.innerHeight)\n}\n\n// 特定写法，直接抄就好了\nfunction animate () {\n  requestAnimationFrame(animate)\n  render()\n}\n\n// 动态的逻辑\nfunction render () {\n  uniforms.u_time.value = clock.getElapsedTime()\n  renderer.render(scene, camera)\n}\n\n// 导出方法\nexport default {\n  init,\n  animate,\n  resize\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/assets/js/net_wave.js","<template>\n  <div style=\"overflow-x: hidden;position: relative; width: 100% ; height: 100%;\">\n    <div class=\"container\" style=\"background-color: #000000;height: 100vh\">\n      <div id=\"netWave\" style=\"position: relative;  left: 0; width: 100%; height:0px;top: 0vh;\"></div>\n      <el-row :gutter=\"10\" align=\"middle\" justify=\"center\">\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:22,push:1}\" :md=\"{span:22,push:1}\" :lg=\"{span:22,push:1}\"\n                :xl=\"{span:22,push:1}\" style=\"height: 800px\">\n          <div class=\"hidden-md-and-down\" style=\"height: 20vh\"></div>\n          <div style=\"height: 10vh\"></div>\n          <div class=\"title-text1\" style=\"color: #FFFFFF;\">EntySquare x Arweave</div>\n          <div style=\"height: 50px\"></div>\n          <div>\n            <span style=\"\" class=\"title-text-color2\">\n            <span>全球唯一</span>\n            <span style=\"white-space: nowrap\">领先的Arweave</span>\n            <span style=\"white-space: nowrap\">算法提供商</span>\n          </span>\n          </div>\n          <div style=\"height: 100px\"></div>\n          <div class=\"title-text2\" style=\"color: #E2E2EC\">EntySquare即将成为Arweave\n            <span style=\"white-space: nowrap\">第一大</span>\n            <span style=\"white-space: nowrap\">矿池和算力</span>\n          </div>\n          <!--          <div class=\"title-text2\" style=\"color: #D1D1D1\">矿池和算力</div>-->\n        </el-col>\n      </el-row>\n      <!--      <div class=\"hidden-md-and-down\" style=\"height: 100px\"></div>-->\n    </div>\n    <img\n      src=\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/ball_002.png\"\n      style=\"height: auto;width: 70vw;min-width:700px ; position: absolute;z-index: 2; margin: 111px 0px 13px 5vw\"\n    />\n    <div class=\"container\" style=\"background-color: black\">\n      <div class=\"hidden-lg-and-up\" style=\"float:left;width: 100%\">\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:12,push:2}\"\n                :xl=\"{span:8,push:4}\" style=\"text-align: left;\">\n          <img src=\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/ar_Group_1312.png\"\n               style=\"width: 20vw;height: auto;\">\n          <div style=\"height: 50px\"></div>\n        </el-col>\n      </div>\n      <el-row :gutter=\"10\">\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:4,push:3}\"\n                :xl=\"{span:4,push:5}\" style=\"\">\n          <div class=\"hidden-sm-and-down\" style=\"height: 60px\"></div>\n          <div class=\"hidden-md-and-down\">\n            <img src=\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/ar_Group_1312.png\"\n                 style=\"width: 100%;height: auto;max-width: 300px\">\n          </div>\n        </el-col>\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:12,push:6}\"\n                :xl=\"{span:8,push:8}\" style=\"text-align: left\">\n          <!--          <div style=\"margin:70px 0\" class=\"content-text\">Entysquare是去中心化云算力交易平台，提供具有不同规模的加密货币挖矿能力，让您无需处理复杂的硬件和软件设置，无需任何矿池费用。为用户、投资人、企业及大型投资机构能简单、智能、快速地获取加密货币</div>-->\n          <div style=\"height: 10px\"></div>\n          <div style=\"font-weight: 400;color: rgba(255, 255, 255, 0.6);font-size: 24px;\">高效率</div>\n          <div style=\"height: 10px\"></div>\n          <span style=\"text-align: left\" class=\"title-text-color\">\n            <span>EntySquare</span>\n            <span style=\"white-space: nowrap\">比官方单台效率</span>\n            <span style=\"white-space: nowrap\">提升1.5X</span>\n          </span>\n          <div style=\"height: 50px\"></div>\n          <div style=\"font-size: 24px;font-weight: 400;color: #DCDCDC;\">我们让每个人都可以参与到挖矿中。</div>\n          <div style=\"height: 5px\"></div>\n          <div style=\"color: #DCDCDC;font-size: 20px;\">Entysquare是全球唯一领先的Arweave算法提供商，我们将开展高效加密货币挖矿所需的所有关键因素。\n            从构建分布式计算+分布式存储的技术，到为用户提供简化的挖矿系统——我们的用户能够简单、智能、快速地获取AR代币。\n          </div>\n        </el-col>\n      </el-row>\n      <div style=\"height: 100px\"></div>\n    </div>\n\n    <div class=\"container\" style=\"background-color: black\">\n      <div style=\"height: 50px\"></div>\n      <div class=\"hidden-lg-and-up\" style=\"float:left;width: 100%\">\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:12,push:2}\"\n                :xl=\"{span:8,push:4}\" style=\"text-align: left;\">\n          <img src=\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/ar_Group_1313.png\"\n               style=\"width: 20vw;height: auto;\">\n          <div style=\"height: 50px\"></div>\n        </el-col>\n      </div>\n      <el-row :gutter=\"10\">\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:12,push:2}\"\n                :xl=\"{span:8,push:4}\" style=\"text-align: left;\">\n          <!--          <div style=\"margin:70px 0\" class=\"content-text\">Entysquare是去中心化云算力交易平台，提供具有不同规模的加密货币挖矿能力，让您无需处理复杂的硬件和软件设置，无需任何矿池费用。为用户、投资人、企业及大型投资机构能简单、智能、快速地获取加密货币</div>-->\n          <div style=\"height: 10px\"></div>\n          <div style=\"font-weight: 400;color: rgba(255, 255, 255, 0.6);font-size: 24px;\">革命性挖矿技术</div>\n          <div style=\"height: 10px\"></div>\n          <span style=\"text-align: left\" class=\"title-text-color\">\n            <span>首创分布式计算</span>\n            <span style=\"white-space: nowrap\">+分布式存储</span>\n          </span>\n          <div style=\"height: 50px\"></div>\n          <div style=\"color: #DCDCDC;font-size: 20px;\">\n            EntySquare突破官方挖矿方式，通过对存储集群方式复制存储尽可能多的数据，促进了数据的存储和分享效率，同时具有更佳的可扩展性架构，并通过RSA密码学累加器降低了对存储的需求。\n          </div>\n        </el-col>\n\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:4,push:5}\"\n                :xl=\"{span:4,push:6}\" style=\"\">\n          <div class=\"hidden-sm-and-down\" style=\"height: 60px\"></div>\n          <div class=\"hidden-md-and-down\">\n            <img src=\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/ar_Group_1313.png\"\n                 style=\"width: 100%;height: auto;max-width: 300px;\">\n          </div>\n        </el-col>\n      </el-row>\n      <div style=\"height: 100px\"></div>\n    </div>\n\n    <div style=\"background-color: black;width: 100%;\">\n      <el-row :gutter=\"10\">\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:20,push:4}\" :md=\"{span:20,push:4}\" :lg=\"{span:20,push:2}\"\n                :xl=\"{span:20,push:4}\" style=\"\">\n          <div style=\"color: #DCDCDC;font-size: 20px;text-align: left\">挖矿优势</div>\n          <div style=\"text-align: left\">\n           <span style=\"text-align: left\" class=\"title-text-color\">\n            <span>极速、</span>\n            <span style=\"white-space: nowrap\">可扩展、</span>\n            <span style=\"white-space: nowrap\">集群化挖矿</span>\n          </span>\n          </div>\n        </el-col>\n      </el-row>\n    </div>\n    <img\n      src=\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/ball_002.png\"\n      style=\"height: auto;width: 70vw;min-width:700px ; position: absolute;z-index: 2; margin: -387px 0px 0px -80vw;\"\n    />\n    <div style=\"height: 50px;background-color: black\"></div>\n    <div style=\"background-color: black;width: 100%;\">\n      <el-row :gutter=\"10\">\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:6,push:2}\"\n                :xl=\"{span:4,push:4}\" style=\"\">\n          <div\n            style=\"background: rgb(34, 34, 34);border-radius: 40px 40px 40px 40px;opacity: 1;border: 1px solid #000000;text-align: left;padding: 56px;position: absolute;z-index: 3;\">\n            <div style=\"height: 22px\"></div>\n            <img src=\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/doubleSphere.png\"\n                 style=\"height: 90px;width: auto\">\n            <div style=\"height: 50px\"></div>\n            <div style=\"font-size: 32px;font-weight: 500;color: #FFFFFF;\">可扩展性</div>\n            <div style=\"height: 24px\"></div>\n            <div style=\"font-size: 20px;font-weight: 400;color: #DCDCDC;height: 180px\">\n              EntySquare具备高吞吐量的分布式计算和分布式存储技术，矿工们仅需存储部分历史区块，就可以立即开始挖矿，同时具有绝佳的可扩展性架构。\n            </div>\n          </div>\n          <div style=\"height: 50px\"></div>\n        </el-col>\n\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:6,push:3}\"\n                :xl=\"{span:4,push:6}\" style=\"\">\n          <div style=\"height: 530px;background-color: black\" class=\"hidden-lg-and-up\"> xxxx</div>\n          <div\n            style=\"background: rgb(34, 34, 34);border-radius: 40px 40px 40px 40px;opacity: 1;border: 1px solid #000000;text-align: left;padding: 56px;\">\n            <div style=\"height: 22px\"></div>\n            <img src=\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/doubleSphere.png\"\n                 style=\"height: 90px;width: auto\">\n            <div style=\"height: 50px\"></div>\n            <div style=\"font-size: 32px;font-weight: 500;color: #FFFFFF;\">创新的算法</div>\n            <div style=\"height: 24px\"></div>\n            <div style=\"font-size: 20px;font-weight: 400;color: #DCDCDC;height: 180px\">\n              通过我们的算法从而提高整个网络中的有效数据，扩大网络规模，加入集群，降低了单台的门槛的同时大大提升了矿池算力。\n            </div>\n          </div>\n          <div style=\"height: 50px\"></div>\n        </el-col>\n\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:6,push:4}\"\n                :xl=\"{span:4,push:8}\" style=\"\">\n          <div\n            style=\"background: rgb(34, 34, 34);border-radius: 40px 40px 40px 40px;opacity: 1;border: 1px solid #000000;text-align: left;padding: 56px\">\n            <div style=\"height: 22px\"></div>\n            <img src=\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/doubleSphere.png\"\n                 style=\"height: 90px;width: auto\">\n            <div style=\"height: 50px\"></div>\n            <div style=\"font-size: 32px;font-weight: 500;color: #FFFFFF;\">低门槛</div>\n            <div style=\"height: 24px\"></div>\n            <div style=\"font-size: 20px;font-weight: 400;color: #DCDCDC;height: 180px\">\n              突破需要高性能 GPU的模式，发挥极致性能，在科学计算表现中挖矿效率能比官方单台效率提高 1.5 倍。具有高并行、高吞吐、低时延等特点\n            </div>\n          </div>\n          <div style=\"height: 50px\"></div>\n        </el-col>\n\n      </el-row>\n    </div>\n\n    <div style=\"height: 100px;background-color: black\"></div>\n    <div id=\"wave\" style=\"position: relative;  left: 0; width: 100%; height:0px;top: -500px\"></div>\n\n    <div style=\"background-color: black;width: 100%;\">\n      <el-row :gutter=\"10\">\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:20,push:2}\"\n                :xl=\"{span:16,push:4}\" style=\"\">\n          <div style=\"text-align: left\" class=\"title-text-color\">\n            <span class=\"title-text-color\">\n              <span>我们使Arweave</span>\n            <span style=\"white-space: nowrap\"> 挖矿变得容易</span>\n            </span>\n          </div>\n          <div style=\"height: 60px\"></div>\n          <div style=\"font-size: 20px;font-weight: 400;color: #DCDCDC;text-align: left;\">现在要有竞争力地挖矿，就必须在设施中投入大量资源、时间和精力。\n            我们的团队打造出最有效的挖矿系统，为您排忧解难。 这样您就可以全身心专注于跟踪市场，享受挖矿奖励的同时保持竞争力。\n          </div>\n        </el-col>\n      </el-row>\n    </div>\n\n    <div style=\"height: 200px;background-color: black\"></div>\n    <div style=\"background-color: black;width: 100%;\">\n      <el-row :gutter=\"10\">\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:20,push:2}\"\n                :xl=\"{span:16,push:4}\" style=\"\">\n          <div style=\"text-align: left\">\n            <span class=\"title-text-color\">常见问题</span>\n          </div>\n        </el-col>\n      </el-row>\n    </div>\n    <div style=\"height: 100px;background-color: black\"></div>\n    <div style=\"background-color: black;width: 100%;text-align: left;font-size: 28px;font-weight: 400;color: #DCDCDC;\">\n      <el-row :gutter=\"10\">\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:8,push:2}\"\n                :xl=\"{span:6,push:4}\" style=\"\">\n          <div style=\"height: 100px;width: 100%;\">\n            <span style=\"font-weight: 400;color: #00EAC4;padding-right: 10px\">+</span> 如何通过Entysquare赚钱？\n          </div>\n        </el-col>\n\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:16,push:2}\"\n                :xl=\"{span:16,push:4}\" style=\"\">\n          <div style=\"height: 100px;width: 100%;\">\n            <span style=\"font-weight: 400;color: #00EAC4;padding-right: 10px\">+</span> 我们能为您做什么？\n          </div>\n        </el-col>\n\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:8,push:2}\"\n                :xl=\"{span:6,push:4}\" style=\"\">\n          <div style=\"height: 100px;width: 100%;\">\n            <span style=\"font-weight: 400;color: #00EAC4;padding-right: 10px\">+</span> 详细了解我们的技术？\n          </div>\n        </el-col>\n\n        <el-col :xs=\"{span:22,push:1}\" :sm=\"{span:16,push:4}\" :md=\"{span:16,push:4}\" :lg=\"{span:16,push:2}\"\n                :xl=\"{span:16,push:4}\" style=\"\">\n          <div style=\"height: 100px;width: 100%;\">\n            <span style=\"font-weight: 400;color: #00EAC4;padding-right: 10px\">+</span> 我们如何挖矿？\n          </div>\n        </el-col>\n\n      </el-row>\n    </div>\n    <div style=\"height: 100px;background-color: black\"></div>\n  </div>\n</template>\n\n<script>\nimport animationBall from './animationBall'\nimport wave from '../assets/js/wave.js'\nimport netWave from '../assets/js/net_wave.js'\n\ndocument.body.scrollTop = document.documentElement.scrollTop = 0\nexport default {\n  name: 'arCoin',\n  mounted () {\n    window.scroll(0, 0) // 页面加载置顶\n    document.body.scrollTop = document.documentElement.scrollTop = 0\n    window.onresize = () => {\n      wave.onWindowResize()\n    }\n\n    wave.initWave('wave')\n    wave.animate()\n\n    netWave.init('netWave')\n    netWave.animate()\n  },\n  data () {\n    return {}\n  },\n  components: {\n    'animationBall': animationBall,\n    'wave': wave\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n* {\n  font-family: Poppins, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\n  Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n}\n\n@media screen and (min-width: 1200px) {\n  .title-text-color {\n    font-size: 72px;\n    font-weight: 500;\n    line-height: 88px;\n    color: #00EAC4;\n    /*text-align: center;*/\n    /*background: linear-gradient(90deg, #00EAC4 17%, #23BFCA 43%, #94469B 85%);*/\n    background: linear-gradient(to right, #00EAC4,#23BFCA,#94469B);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n\n  .title-text-color2 {\n    font-size: 72px;\n    font-weight: 700;\n    color: #00EAC4;\n    line-height: 72px;\n    text-align: center;\n    /*background: linear-gradient(90deg, #00EAC4 0%, #23BFCA 29%, #94469B 100%);*/\n    background: linear-gradient(to right, #00EAC4,#23BFCA,#94469B);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n\n  .title-text1 {\n    font-size: 72px;\n    height: auto;\n    font-weight: 400;\n    color: #000000;\n    line-height: 72px;\n    text-align: center;\n  }\n\n  .title-text2 {\n    font-size: 38px;\n    font-weight: 300;\n    color: #000000;\n    line-height: 40px;\n    text-align: center;\n    margin: 24px 0;\n  }\n}\n\n@media screen and (min-width: 768px) and (max-width: 1199px) {\n  .title-text-color {\n    font-size: 68px;\n    font-weight: 500;\n    color: #00EAC4;\n    line-height: 88px;\n    text-align: center;\n    /*background: linear-gradient(90deg, #00EAC4 0%, #23BFCA 29%, #94469B 100%);*/\n    background: linear-gradient(to right, #00EAC4,#23BFCA,#94469B);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n\n  .title-text-color2 {\n    font-size: 68px;\n    font-weight: 500;\n    color: #00EAC4;\n    line-height: 68px;\n    text-align: center;\n    /*background: linear-gradient(90deg, #00EAC4 0%, #23BFCA 29%, #94469B 100%);*/\n    background: linear-gradient(to right, #00EAC4,#23BFCA,#94469B);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n\n  .title-text1 {\n    font-size: 68px;\n    font-weight: 400;\n    color: #000000;\n    line-height: 68px;\n    text-align: center;\n  }\n\n  .title-text2 {\n    font-size: 42px;\n    font-weight: 300;\n    color: #000000;\n    line-height: 42px;\n    text-align: center;\n    margin: 24px 0;\n  }\n}\n\n@media screen  and (max-width: 767px) {\n  .title-text-color {\n    font-size: 38px;\n    font-weight: 500;\n    color: #00EAC4;\n    line-height: 52px;\n    /*background: linear-gradient(90deg, #00EAC4 0%, #23BFCA 29%, #94469B 100%);*/\n    background: linear-gradient(to right, #00EAC4,#23BFCA,#94469B);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    text-align: center;\n  }\n\n  .title-text-color2 {\n    font-size: 48px;\n    font-weight: 500;\n    color: #00EAC4;\n    line-height: 62px;\n    /*background: linear-gradient(90deg, #00EAC4 0%, #23BFCA 29%, #94469B 100%);*/\n    background: linear-gradient(to right, #00EAC4,#23BFCA,#94469B);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    text-align: center;\n  }\n\n  .title-text1 {\n    font-size: 30px;\n    font-weight: 400;\n    color: #000000;\n    line-height: 48px;\n    text-align: center;\n  }\n\n  .title-text2 {\n    font-size: 28px;\n    font-weight: 300;\n    color: #000000;\n    line-height: 35px;\n    text-align: center;\n    margin: 24px 0;\n  }\n}\n\n.container {\n  position: relative;\n  width: 100%;\n}\n\n.hero.js-reveal .hero__asset, .hero.js-reveal .hero__canvas, .js-lazy, .map.js-reveal .map__item {\n  opacity: 0;\n  -webkit-transform: scale(1.05);\n  -ms-transform: scale(1.05);\n  transform: scale(1.05)\n}\n\n.hero.js-reveal.is-visible .hero__asset, .hero.js-reveal.is-visible .hero__canvas {\n  opacity: 1;\n  -webkit-transform: scale(1);\n  -ms-transform: scale(1);\n  transform: scale(1);\n  transition: opacity .3s ease-out, transform .3s cubic-bezier(.25, .46, .45, .94), -webkit-transform .3s cubic-bezier(.25, .46, .45, .94)\n}\n\nbox, .browser__nav, .hero__canvas, .map, .parallax, .section {\n  overflow: hidden\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/arCoin.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"overflow-x\":\"hidden\",\"position\":\"relative\",\"width\":\"100%\",\"height\":\"100%\"}},[_c('div',{staticClass:\"container\",staticStyle:{\"background-color\":\"#000000\",\"height\":\"100vh\"}},[_c('div',{staticStyle:{\"position\":\"relative\",\"left\":\"0\",\"width\":\"100%\",\"height\":\"0px\",\"top\":\"0vh\"},attrs:{\"id\":\"netWave\"}}),_vm._v(\" \"),_c('el-row',{attrs:{\"gutter\":10,\"align\":\"middle\",\"justify\":\"center\"}},[_c('el-col',{staticStyle:{\"height\":\"800px\"},attrs:{\"xs\":{span:22,push:1},\"sm\":{span:22,push:1},\"md\":{span:22,push:1},\"lg\":{span:22,push:1},\"xl\":{span:22,push:1}}},[_c('div',{staticClass:\"hidden-md-and-down\",staticStyle:{\"height\":\"20vh\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"10vh\"}}),_vm._v(\" \"),_c('div',{staticClass:\"title-text1\",staticStyle:{\"color\":\"#FFFFFF\"}},[_vm._v(\"EntySquare x Arweave\")]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"50px\"}}),_vm._v(\" \"),_c('div',[_c('span',{staticClass:\"title-text-color2\"},[_c('span',[_vm._v(\"全球唯一\")]),_vm._v(\" \"),_c('span',{staticStyle:{\"white-space\":\"nowrap\"}},[_vm._v(\"领先的Arweave\")]),_vm._v(\" \"),_c('span',{staticStyle:{\"white-space\":\"nowrap\"}},[_vm._v(\"算法提供商\")])])]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"100px\"}}),_vm._v(\" \"),_c('div',{staticClass:\"title-text2\",staticStyle:{\"color\":\"#E2E2EC\"}},[_vm._v(\"EntySquare即将成为Arweave\\n          \"),_c('span',{staticStyle:{\"white-space\":\"nowrap\"}},[_vm._v(\"第一大\")]),_vm._v(\" \"),_c('span',{staticStyle:{\"white-space\":\"nowrap\"}},[_vm._v(\"矿池和算力\")])])])],1)],1),_vm._v(\" \"),_c('img',{staticStyle:{\"height\":\"auto\",\"width\":\"70vw\",\"min-width\":\"700px\",\"position\":\"absolute\",\"z-index\":\"2\",\"margin\":\"111px 0px 13px 5vw\"},attrs:{\"src\":\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/ball_002.png\"}}),_vm._v(\" \"),_c('div',{staticClass:\"container\",staticStyle:{\"background-color\":\"black\"}},[_c('div',{staticClass:\"hidden-lg-and-up\",staticStyle:{\"float\":\"left\",\"width\":\"100%\"}},[_c('el-col',{staticStyle:{\"text-align\":\"left\"},attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:12,push:2},\"xl\":{span:8,push:4}}},[_c('img',{staticStyle:{\"width\":\"20vw\",\"height\":\"auto\"},attrs:{\"src\":\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/ar_Group_1312.png\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"50px\"}})])],1),_vm._v(\" \"),_c('el-row',{attrs:{\"gutter\":10}},[_c('el-col',{attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:4,push:3},\"xl\":{span:4,push:5}}},[_c('div',{staticClass:\"hidden-sm-and-down\",staticStyle:{\"height\":\"60px\"}}),_vm._v(\" \"),_c('div',{staticClass:\"hidden-md-and-down\"},[_c('img',{staticStyle:{\"width\":\"100%\",\"height\":\"auto\",\"max-width\":\"300px\"},attrs:{\"src\":\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/ar_Group_1312.png\"}})])]),_vm._v(\" \"),_c('el-col',{staticStyle:{\"text-align\":\"left\"},attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:12,push:6},\"xl\":{span:8,push:8}}},[_c('div',{staticStyle:{\"height\":\"10px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"font-weight\":\"400\",\"color\":\"rgba(255, 255, 255, 0.6)\",\"font-size\":\"24px\"}},[_vm._v(\"高效率\")]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"10px\"}}),_vm._v(\" \"),_c('span',{staticClass:\"title-text-color\",staticStyle:{\"text-align\":\"left\"}},[_c('span',[_vm._v(\"EntySquare\")]),_vm._v(\" \"),_c('span',{staticStyle:{\"white-space\":\"nowrap\"}},[_vm._v(\"比官方单台效率\")]),_vm._v(\" \"),_c('span',{staticStyle:{\"white-space\":\"nowrap\"}},[_vm._v(\"提升1.5X\")])]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"50px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"font-size\":\"24px\",\"font-weight\":\"400\",\"color\":\"#DCDCDC\"}},[_vm._v(\"我们让每个人都可以参与到挖矿中。\")]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"5px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"color\":\"#DCDCDC\",\"font-size\":\"20px\"}},[_vm._v(\"Entysquare是全球唯一领先的Arweave算法提供商，我们将开展高效加密货币挖矿所需的所有关键因素。\\n          从构建分布式计算+分布式存储的技术，到为用户提供简化的挖矿系统——我们的用户能够简单、智能、快速地获取AR代币。\\n        \")])])],1),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"100px\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"container\",staticStyle:{\"background-color\":\"black\"}},[_c('div',{staticStyle:{\"height\":\"50px\"}}),_vm._v(\" \"),_c('div',{staticClass:\"hidden-lg-and-up\",staticStyle:{\"float\":\"left\",\"width\":\"100%\"}},[_c('el-col',{staticStyle:{\"text-align\":\"left\"},attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:12,push:2},\"xl\":{span:8,push:4}}},[_c('img',{staticStyle:{\"width\":\"20vw\",\"height\":\"auto\"},attrs:{\"src\":\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/ar_Group_1313.png\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"50px\"}})])],1),_vm._v(\" \"),_c('el-row',{attrs:{\"gutter\":10}},[_c('el-col',{staticStyle:{\"text-align\":\"left\"},attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:12,push:2},\"xl\":{span:8,push:4}}},[_c('div',{staticStyle:{\"height\":\"10px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"font-weight\":\"400\",\"color\":\"rgba(255, 255, 255, 0.6)\",\"font-size\":\"24px\"}},[_vm._v(\"革命性挖矿技术\")]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"10px\"}}),_vm._v(\" \"),_c('span',{staticClass:\"title-text-color\",staticStyle:{\"text-align\":\"left\"}},[_c('span',[_vm._v(\"首创分布式计算\")]),_vm._v(\" \"),_c('span',{staticStyle:{\"white-space\":\"nowrap\"}},[_vm._v(\"+分布式存储\")])]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"50px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"color\":\"#DCDCDC\",\"font-size\":\"20px\"}},[_vm._v(\"\\n          EntySquare突破官方挖矿方式，通过对存储集群方式复制存储尽可能多的数据，促进了数据的存储和分享效率，同时具有更佳的可扩展性架构，并通过RSA密码学累加器降低了对存储的需求。\\n        \")])]),_vm._v(\" \"),_c('el-col',{attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:4,push:5},\"xl\":{span:4,push:6}}},[_c('div',{staticClass:\"hidden-sm-and-down\",staticStyle:{\"height\":\"60px\"}}),_vm._v(\" \"),_c('div',{staticClass:\"hidden-md-and-down\"},[_c('img',{staticStyle:{\"width\":\"100%\",\"height\":\"auto\",\"max-width\":\"300px\"},attrs:{\"src\":\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/ar_Group_1313.png\"}})])])],1),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"100px\"}})],1),_vm._v(\" \"),_c('div',{staticStyle:{\"background-color\":\"black\",\"width\":\"100%\"}},[_c('el-row',{attrs:{\"gutter\":10}},[_c('el-col',{attrs:{\"xs\":{span:22,push:1},\"sm\":{span:20,push:4},\"md\":{span:20,push:4},\"lg\":{span:20,push:2},\"xl\":{span:20,push:4}}},[_c('div',{staticStyle:{\"color\":\"#DCDCDC\",\"font-size\":\"20px\",\"text-align\":\"left\"}},[_vm._v(\"挖矿优势\")]),_vm._v(\" \"),_c('div',{staticStyle:{\"text-align\":\"left\"}},[_c('span',{staticClass:\"title-text-color\",staticStyle:{\"text-align\":\"left\"}},[_c('span',[_vm._v(\"极速、\")]),_vm._v(\" \"),_c('span',{staticStyle:{\"white-space\":\"nowrap\"}},[_vm._v(\"可扩展、\")]),_vm._v(\" \"),_c('span',{staticStyle:{\"white-space\":\"nowrap\"}},[_vm._v(\"集群化挖矿\")])])])])],1)],1),_vm._v(\" \"),_c('img',{staticStyle:{\"height\":\"auto\",\"width\":\"70vw\",\"min-width\":\"700px\",\"position\":\"absolute\",\"z-index\":\"2\",\"margin\":\"-387px 0px 0px -80vw\"},attrs:{\"src\":\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/ball_002.png\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"50px\",\"background-color\":\"black\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"background-color\":\"black\",\"width\":\"100%\"}},[_c('el-row',{attrs:{\"gutter\":10}},[_c('el-col',{attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:6,push:2},\"xl\":{span:4,push:4}}},[_c('div',{staticStyle:{\"background\":\"rgb(34, 34, 34)\",\"border-radius\":\"40px 40px 40px 40px\",\"opacity\":\"1\",\"border\":\"1px solid #000000\",\"text-align\":\"left\",\"padding\":\"56px\",\"position\":\"absolute\",\"z-index\":\"3\"}},[_c('div',{staticStyle:{\"height\":\"22px\"}}),_vm._v(\" \"),_c('img',{staticStyle:{\"height\":\"90px\",\"width\":\"auto\"},attrs:{\"src\":\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/doubleSphere.png\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"50px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"font-size\":\"32px\",\"font-weight\":\"500\",\"color\":\"#FFFFFF\"}},[_vm._v(\"可扩展性\")]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"24px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"font-size\":\"20px\",\"font-weight\":\"400\",\"color\":\"#DCDCDC\",\"height\":\"180px\"}},[_vm._v(\"\\n            EntySquare具备高吞吐量的分布式计算和分布式存储技术，矿工们仅需存储部分历史区块，就可以立即开始挖矿，同时具有绝佳的可扩展性架构。\\n          \")])]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"50px\"}})]),_vm._v(\" \"),_c('el-col',{attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:6,push:3},\"xl\":{span:4,push:6}}},[_c('div',{staticClass:\"hidden-lg-and-up\",staticStyle:{\"height\":\"530px\",\"background-color\":\"black\"}},[_vm._v(\" xxxx\")]),_vm._v(\" \"),_c('div',{staticStyle:{\"background\":\"rgb(34, 34, 34)\",\"border-radius\":\"40px 40px 40px 40px\",\"opacity\":\"1\",\"border\":\"1px solid #000000\",\"text-align\":\"left\",\"padding\":\"56px\"}},[_c('div',{staticStyle:{\"height\":\"22px\"}}),_vm._v(\" \"),_c('img',{staticStyle:{\"height\":\"90px\",\"width\":\"auto\"},attrs:{\"src\":\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/doubleSphere.png\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"50px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"font-size\":\"32px\",\"font-weight\":\"500\",\"color\":\"#FFFFFF\"}},[_vm._v(\"创新的算法\")]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"24px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"font-size\":\"20px\",\"font-weight\":\"400\",\"color\":\"#DCDCDC\",\"height\":\"180px\"}},[_vm._v(\"\\n            通过我们的算法从而提高整个网络中的有效数据，扩大网络规模，加入集群，降低了单台的门槛的同时大大提升了矿池算力。\\n          \")])]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"50px\"}})]),_vm._v(\" \"),_c('el-col',{attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:6,push:4},\"xl\":{span:4,push:8}}},[_c('div',{staticStyle:{\"background\":\"rgb(34, 34, 34)\",\"border-radius\":\"40px 40px 40px 40px\",\"opacity\":\"1\",\"border\":\"1px solid #000000\",\"text-align\":\"left\",\"padding\":\"56px\"}},[_c('div',{staticStyle:{\"height\":\"22px\"}}),_vm._v(\" \"),_c('img',{staticStyle:{\"height\":\"90px\",\"width\":\"auto\"},attrs:{\"src\":\"https://entysquare.oss-cn-shenzhen.aliyuncs.com/assets/doubleSphere.png\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"50px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"font-size\":\"32px\",\"font-weight\":\"500\",\"color\":\"#FFFFFF\"}},[_vm._v(\"低门槛\")]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"24px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"font-size\":\"20px\",\"font-weight\":\"400\",\"color\":\"#DCDCDC\",\"height\":\"180px\"}},[_vm._v(\"\\n            突破需要高性能 GPU的模式，发挥极致性能，在科学计算表现中挖矿效率能比官方单台效率提高 1.5 倍。具有高并行、高吞吐、低时延等特点\\n          \")])]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"50px\"}})])],1)],1),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"100px\",\"background-color\":\"black\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"position\":\"relative\",\"left\":\"0\",\"width\":\"100%\",\"height\":\"0px\",\"top\":\"-500px\"},attrs:{\"id\":\"wave\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"background-color\":\"black\",\"width\":\"100%\"}},[_c('el-row',{attrs:{\"gutter\":10}},[_c('el-col',{attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:20,push:2},\"xl\":{span:16,push:4}}},[_c('div',{staticClass:\"title-text-color\",staticStyle:{\"text-align\":\"left\"}},[_c('span',{staticClass:\"title-text-color\"},[_c('span',[_vm._v(\"我们使Arweave\")]),_vm._v(\" \"),_c('span',{staticStyle:{\"white-space\":\"nowrap\"}},[_vm._v(\" 挖矿变得容易\")])])]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"60px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"font-size\":\"20px\",\"font-weight\":\"400\",\"color\":\"#DCDCDC\",\"text-align\":\"left\"}},[_vm._v(\"现在要有竞争力地挖矿，就必须在设施中投入大量资源、时间和精力。\\n          我们的团队打造出最有效的挖矿系统，为您排忧解难。 这样您就可以全身心专注于跟踪市场，享受挖矿奖励的同时保持竞争力。\\n        \")])])],1)],1),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"200px\",\"background-color\":\"black\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"background-color\":\"black\",\"width\":\"100%\"}},[_c('el-row',{attrs:{\"gutter\":10}},[_c('el-col',{attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:20,push:2},\"xl\":{span:16,push:4}}},[_c('div',{staticStyle:{\"text-align\":\"left\"}},[_c('span',{staticClass:\"title-text-color\"},[_vm._v(\"常见问题\")])])])],1)],1),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"100px\",\"background-color\":\"black\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"background-color\":\"black\",\"width\":\"100%\",\"text-align\":\"left\",\"font-size\":\"28px\",\"font-weight\":\"400\",\"color\":\"#DCDCDC\"}},[_c('el-row',{attrs:{\"gutter\":10}},[_c('el-col',{attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:8,push:2},\"xl\":{span:6,push:4}}},[_c('div',{staticStyle:{\"height\":\"100px\",\"width\":\"100%\"}},[_c('span',{staticStyle:{\"font-weight\":\"400\",\"color\":\"#00EAC4\",\"padding-right\":\"10px\"}},[_vm._v(\"+\")]),_vm._v(\" 如何通过Entysquare赚钱？\\n        \")])]),_vm._v(\" \"),_c('el-col',{attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:16,push:2},\"xl\":{span:16,push:4}}},[_c('div',{staticStyle:{\"height\":\"100px\",\"width\":\"100%\"}},[_c('span',{staticStyle:{\"font-weight\":\"400\",\"color\":\"#00EAC4\",\"padding-right\":\"10px\"}},[_vm._v(\"+\")]),_vm._v(\" 我们能为您做什么？\\n        \")])]),_vm._v(\" \"),_c('el-col',{attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:8,push:2},\"xl\":{span:6,push:4}}},[_c('div',{staticStyle:{\"height\":\"100px\",\"width\":\"100%\"}},[_c('span',{staticStyle:{\"font-weight\":\"400\",\"color\":\"#00EAC4\",\"padding-right\":\"10px\"}},[_vm._v(\"+\")]),_vm._v(\" 详细了解我们的技术？\\n        \")])]),_vm._v(\" \"),_c('el-col',{attrs:{\"xs\":{span:22,push:1},\"sm\":{span:16,push:4},\"md\":{span:16,push:4},\"lg\":{span:16,push:2},\"xl\":{span:16,push:4}}},[_c('div',{staticStyle:{\"height\":\"100px\",\"width\":\"100%\"}},[_c('span',{staticStyle:{\"font-weight\":\"400\",\"color\":\"#00EAC4\",\"padding-right\":\"10px\"}},[_vm._v(\"+\")]),_vm._v(\" 我们如何挖矿？\\n        \")])])],1)],1),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"100px\",\"background-color\":\"black\"}})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-3c69ce54\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/arCoin.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-3c69ce54\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./arCoin.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./arCoin.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./arCoin.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-3c69ce54\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./arCoin.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-3c69ce54\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/arCoin.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}