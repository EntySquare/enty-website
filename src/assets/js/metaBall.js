/* eslint-disable */
function checkGL (gl, when) {
  let e
  while ((e = gl.getError()) !== gl.NO_ERROR) {
    var estr = '' + e,
      possibleErrors = 'INVALID_ENUM INVALID_VALUE INVALID_OPERATION INVALID_FRAMEBUFFER_OPERATION OUT_OF_MEMORY STACK_UNDERFLOW STACK_OVERFLOW'.split(
        ' '
      )
    possibleErrors.forEach(function (err) {
      if (gl[err] === e) estr = err
    })
    console.error('glGetError: ' + estr + ' during ' + when)
  }
}

function createProgram (gl, fs, vs, attribLocs) {
  function compileShader (src, typestr) {
    var shader = gl.createShader(gl[typestr])
    if (!shader) {
      console.error('createShader failed... type = ' + typestr)
      return null
    }
    gl.shaderSource(shader, src)
    gl.compileShader(shader)
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      console.error(
        'Failed to compile ' + typestr + ': ' + gl.getShaderInfoLog(shader)
      )
      gl.deleteShader(shader)
      return null
    }
    return shader
  }

  var fs = compileShader(fs, 'FRAGMENT_SHADER')
  if (!fs) {
    return null
  }
  var vs = compileShader(vs, 'VERTEX_SHADER')
  if (!vs) {
    gl.deleteShader(fs)
    return null
  }
  var info = {fragSrc: fs, vertSrc: vs}
  var program = (info.program = gl.createProgram())

  gl.attachShader(program, vs)
  gl.attachShader(program, fs)
  checkGL(gl, 'compiled and attached shaders')

  if (attribLocs != null) {
    info.attribLocs = attribLocs
    Object.keys(attribLocs).forEach(function (attrib) {
      gl.bindAttribLocation(program, attribLocs[attrib], attrib)
    })
  }
  checkGL(gl, 'bound attrib locs')

  gl.linkProgram(program)
  gl.deleteShader(vs)
  gl.deleteShader(fs)

  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.error(
      'shader link failed: program info log:\n' + gl.getProgramInfoLog(program)
    )
    gl.deleteProgram(program)
    return false
  }

  checkGL(gl, 'after linking')
  var uniforms = (info.uniforms = {})
  var len = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS) || 0
  for (var i = 0; i < len; ++i) {
    var inf = gl.getActiveUniform(program, i)
    if (inf) {
      uniforms[inf.name] = {
        name: inf.name,
        size: inf.size,
        type: inf.type,
        loc: gl.getUniformLocation(program, inf.name)
      }
    }
  }
  var attribs = (info.attribs = {})
  var len = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES) || 0
  for (var i = 0; i < len; ++i) {
    var inf = gl.getActiveAttrib(program, i)
    if (inf) {
      attribs[inf.name] = {
        name: inf.name,
        size: inf.size,
        type: inf.type,
        loc: gl.getAttribLocation(program, inf.name)
      }
    }
  }
  checkGL(gl, 'after uniform reflection')
  return info
}

function mat4 (v) {
  if (v == null) v = 1.0
  return new Float32Array([v, 0, 0, 0, 0, v, 0, 0, 0, 0, v, 0, 0, 0, 0, v])
}

function mat4a (a) {
  return new Float32Array(a)
}

function mat4v (xx, xy, xz, xw, yx, yy, yz, yw, zx, zy, zz, zw, wx, wy, wz, ww) {
  return new Float32Array([
    xx,
    xy,
    xz,
    xw,
    yx,
    yy,
    yz,
    yw,
    zx,
    zy,
    zz,
    zw,
    wx,
    wy,
    wz,
    ww
  ])
}

function frustum (xmin, xmax, ymin, ymax, zNear, zFar) {
  var m = mat4(0.0)
  var doubleznear = 2 * zNear
  var one_deltax = 1 / (xmax - xmin)
  var one_deltay = 1 / (ymax - ymin)
  var one_deltaz = 1 / (zFar - zNear)

  m[0 + 4 * 0] = doubleznear * one_deltax
  m[1 + 4 * 1] = doubleznear * one_deltay
  m[0 + 4 * 2] = (xmax + xmin) * one_deltax
  m[1 + 4 * 2] = (ymax + ymin) * one_deltay
  m[2 + 4 * 2] = -(zFar + zNear) * one_deltaz
  m[3 + 4 * 2] = -1
  m[2 + 4 * 3] = -(zFar * doubleznear) * one_deltaz
  return m
}

function perspective (fovy, aspect, zNear, zFar) {
  var xmax = zNear * Math.tan(fovy / 2)
  var xmin = -xmax
  var ymax = xmax / aspect
  var ymin = -ymax

  return frustum(xmin, xmax, ymin, ymax, zNear, zFar)
}

function translation (x, y, z) {
  return mat4v(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1)
}

function mat4mul (a, m, out) {
  if (!out) out = mat4()
  var m00 = m[4 * 0 + 0],
    m01 = m[4 * 0 + 1],
    m02 = m[4 * 0 + 2],
    m03 = m[4 * 0 + 3]
  var m10 = m[4 * 1 + 0],
    m11 = m[4 * 1 + 1],
    m12 = m[4 * 1 + 2],
    m13 = m[4 * 1 + 3]
  var m20 = m[4 * 2 + 0],
    m21 = m[4 * 2 + 1],
    m22 = m[4 * 2 + 2],
    m23 = m[4 * 2 + 3]
  var m30 = m[4 * 3 + 0],
    m31 = m[4 * 3 + 1],
    m32 = m[4 * 3 + 2],
    m33 = m[4 * 3 + 3]
  for (var i = 0; i < 4; i++) {
    var ai0 = a[i + 0],
      ai1 = a[i + 4],
      ai2 = a[i + 8],
      ai3 = a[i + 12]
    out[0 + i] = ai0 * m00 + ai1 * m01 + ai2 * m02 + ai3 * m03
    out[4 + i] = ai0 * m10 + ai1 * m11 + ai2 * m12 + ai3 * m13
    out[8 + i] = ai0 * m20 + ai1 * m21 + ai2 * m22 + ai3 * m23
    out[12 + i] = ai0 * m30 + ai1 * m31 + ai2 * m32 + ai3 * m33
  }
  return out
}

function lookDir (fx, fy, fz, ux, uy, uz) {
  function v3norm (v, fallback) {
    var x = v[0],
      y = v[1],
      z = v[2],
      vl = Math.sqrt(x * x + y * y + z * z)
    return vl === 0 ? fallback || [0, 1, 0] : [x / vl, y / vl, z / vl]
  }

  function v3cross (a, b) {
    return [
      a[1] * b[2] - a[2] * b[1],
      a[2] * b[0] - a[0] * b[2],
      a[0] * b[1] - a[1] * b[0]
    ]
  }

  var f = v3norm([fx, fy, fz], [1, 0, 0])
  var s = v3norm(v3cross(f, [ux, uy, uz]))
  var u = v3cross(s, f)
  return mat4v(
    s[0],
    u[0],
    -f[0],
    0,
    s[1],
    u[1],
    -f[1],
    0,
    s[2],
    u[2],
    -f[2],
    0,
    0,
    0,
    0,
    1
  )
}

function lookAt (ex, ey, ez, cx, cy, cz, ux, uy, uz) {
  return mat4mul(
    lookDir(cx - ex, cy - ey, cz - ez, ux, uy, uz),
    translation(-ex, -ey, -ez)
  )
}

function rotation (x, y, z, out) {
  if (!out) out = mat4()
  var sx = Math.sin(x),
    cx = Math.cos(x)
  var sy = Math.sin(y),
    cy = Math.cos(y)
  var sz = Math.sin(z),
    cz = Math.cos(z)
  out[0] = cy * cz
  out[1] = -cy * sz
  out[2] = sy
  out[3] = 0
  out[4] = cz * sx * sy + cx * sz
  out[5] = cx * cz - sx * sy * sz
  out[6] = -cy * sx
  out[7] = 0
  out[8] = -cx * cz * sy + sx * sz
  out[9] = cz * sx + cx * sy * sz
  out[10] = cx * cy
  out[11] = 0
  out[12] = 0
  out[13] = 0
  out[14] = 0
  out[15] = 1
  return out
}

// @TODO: make data oriented
function GridCell () {
  this.value = 0.0
  this.nx = 0.0
  this.ny = 0.0
  this.nz = 0.0
}

var GRID_SIZE = 32
var SPHERES = 16
var SIZEOF_VERTEX = 4 * 3 + 4 * 3 + 4 * 1 + 4 * 1 // position 3f, normal 3f, color 4b, padding 4b
var MAX_VERTS = 40 << 10
var MAX_VERT_BYTES = MAX_VERTS * SIZEOF_VERTEX

// snarfed from http://paulbourke.net/geometry/polygonise/
var edgeData = new Uint16Array([
  0x000,
  0x109,
  0x203,
  0x30a,
  0x406,
  0x50f,
  0x605,
  0x70c,
  0x80c,
  0x905,
  0xa0f,
  0xb06,
  0xc0a,
  0xd03,
  0xe09,
  0xf00,
  0x190,
  0x099,
  0x393,
  0x29a,
  0x596,
  0x49f,
  0x795,
  0x69c,
  0x99c,
  0x895,
  0xb9f,
  0xa96,
  0xd9a,
  0xc93,
  0xf99,
  0xe90,
  0x230,
  0x339,
  0x033,
  0x13a,
  0x636,
  0x73f,
  0x435,
  0x53c,
  0xa3c,
  0xb35,
  0x83f,
  0x936,
  0xe3a,
  0xf33,
  0xc39,
  0xd30,
  0x3a0,
  0x2a9,
  0x1a3,
  0x0aa,
  0x7a6,
  0x6af,
  0x5a5,
  0x4ac,
  0xbac,
  0xaa5,
  0x9af,
  0x8a6,
  0xfaa,
  0xea3,
  0xda9,
  0xca0,
  0x460,
  0x569,
  0x663,
  0x76a,
  0x066,
  0x16f,
  0x265,
  0x36c,
  0xc6c,
  0xd65,
  0xe6f,
  0xf66,
  0x86a,
  0x963,
  0xa69,
  0xb60,
  0x5f0,
  0x4f9,
  0x7f3,
  0x6fa,
  0x1f6,
  0x0ff,
  0x3f5,
  0x2fc,
  0xdfc,
  0xcf5,
  0xfff,
  0xef6,
  0x9fa,
  0x8f3,
  0xbf9,
  0xaf0,
  0x650,
  0x759,
  0x453,
  0x55a,
  0x256,
  0x35f,
  0x055,
  0x15c,
  0xe5c,
  0xf55,
  0xc5f,
  0xd56,
  0xa5a,
  0xb53,
  0x859,
  0x950,
  0x7c0,
  0x6c9,
  0x5c3,
  0x4ca,
  0x3c6,
  0x2cf,
  0x1c5,
  0x0cc,
  0xfcc,
  0xec5,
  0xdcf,
  0xcc6,
  0xbca,
  0xac3,
  0x9c9,
  0x8c0,
  0x8c0,
  0x9c9,
  0xac3,
  0xbca,
  0xcc6,
  0xdcf,
  0xec5,
  0xfcc,
  0x0cc,
  0x1c5,
  0x2cf,
  0x3c6,
  0x4ca,
  0x5c3,
  0x6c9,
  0x7c0,
  0x950,
  0x859,
  0xb53,
  0xa5a,
  0xd56,
  0xc5f,
  0xf55,
  0xe5c,
  0x15c,
  0x055,
  0x35f,
  0x256,
  0x55a,
  0x453,
  0x759,
  0x650,
  0xaf0,
  0xbf9,
  0x8f3,
  0x9fa,
  0xef6,
  0xfff,
  0xcf5,
  0xdfc,
  0x2fc,
  0x3f5,
  0x0ff,
  0x1f6,
  0x6fa,
  0x7f3,
  0x4f9,
  0x5f0,
  0xb60,
  0xa69,
  0x963,
  0x86a,
  0xf66,
  0xe6f,
  0xd65,
  0xc6c,
  0x36c,
  0x265,
  0x16f,
  0x066,
  0x76a,
  0x663,
  0x569,
  0x460,
  0xca0,
  0xda9,
  0xea3,
  0xfaa,
  0x8a6,
  0x9af,
  0xaa5,
  0xbac,
  0x4ac,
  0x5a5,
  0x6af,
  0x7a6,
  0x0aa,
  0x1a3,
  0x2a9,
  0x3a0,
  0xd30,
  0xc39,
  0xf33,
  0xe3a,
  0x936,
  0x83f,
  0xb35,
  0xa3c,
  0x53c,
  0x435,
  0x73f,
  0x636,
  0x13a,
  0x033,
  0x339,
  0x230,
  0xe90,
  0xf99,
  0xc93,
  0xd9a,
  0xa96,
  0xb9f,
  0x895,
  0x99c,
  0x69c,
  0x795,
  0x49f,
  0x596,
  0x29a,
  0x393,
  0x099,
  0x190,
  0xf00,
  0xe09,
  0xd03,
  0xc0a,
  0xb06,
  0xa0f,
  0x905,
  0x80c,
  0x70c,
  0x605,
  0x50f,
  0x406,
  0x30a,
  0x203,
  0x109,
  0x000
])

var indexData = new Int8Array([
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  8,
  3,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  1,
  9,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  8,
  3,
  9,
  8,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  2,
  10,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  8,
  3,
  1,
  2,
  10,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  2,
  10,
  0,
  2,
  9,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  2,
  8,
  3,
  2,
  10,
  8,
  10,
  9,
  8,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  11,
  2,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  11,
  2,
  8,
  11,
  0,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  9,
  0,
  2,
  3,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  11,
  2,
  1,
  9,
  11,
  9,
  8,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  10,
  1,
  11,
  10,
  3,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  10,
  1,
  0,
  8,
  10,
  8,
  11,
  10,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  9,
  0,
  3,
  11,
  9,
  11,
  10,
  9,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  8,
  10,
  10,
  8,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  7,
  8,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  3,
  0,
  7,
  3,
  4,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  1,
  9,
  8,
  4,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  1,
  9,
  4,
  7,
  1,
  7,
  3,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  2,
  10,
  8,
  4,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  4,
  7,
  3,
  0,
  4,
  1,
  2,
  10,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  2,
  10,
  9,
  0,
  2,
  8,
  4,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  2,
  10,
  9,
  2,
  9,
  7,
  2,
  7,
  3,
  7,
  9,
  4,
  -1,
  -1,
  -1,
  -1,
  8,
  4,
  7,
  3,
  11,
  2,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  11,
  4,
  7,
  11,
  2,
  4,
  2,
  0,
  4,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  0,
  1,
  8,
  4,
  7,
  2,
  3,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  7,
  11,
  9,
  4,
  11,
  9,
  11,
  2,
  9,
  2,
  1,
  -1,
  -1,
  -1,
  -1,
  3,
  10,
  1,
  3,
  11,
  10,
  7,
  8,
  4,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  11,
  10,
  1,
  4,
  11,
  1,
  0,
  4,
  7,
  11,
  4,
  -1,
  -1,
  -1,
  -1,
  4,
  7,
  8,
  9,
  0,
  11,
  9,
  11,
  10,
  11,
  0,
  3,
  -1,
  -1,
  -1,
  -1,
  4,
  7,
  11,
  4,
  11,
  9,
  9,
  11,
  10,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  5,
  4,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  5,
  4,
  0,
  8,
  3,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  5,
  4,
  1,
  5,
  0,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  8,
  5,
  4,
  8,
  3,
  5,
  3,
  1,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  2,
  10,
  9,
  5,
  4,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  0,
  8,
  1,
  2,
  10,
  4,
  9,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  5,
  2,
  10,
  5,
  4,
  2,
  4,
  0,
  2,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  2,
  10,
  5,
  3,
  2,
  5,
  3,
  5,
  4,
  3,
  4,
  8,
  -1,
  -1,
  -1,
  -1,
  9,
  5,
  4,
  2,
  3,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  11,
  2,
  0,
  8,
  11,
  4,
  9,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  5,
  4,
  0,
  1,
  5,
  2,
  3,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  2,
  1,
  5,
  2,
  5,
  8,
  2,
  8,
  11,
  4,
  8,
  5,
  -1,
  -1,
  -1,
  -1,
  10,
  3,
  11,
  10,
  1,
  3,
  9,
  5,
  4,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  9,
  5,
  0,
  8,
  1,
  8,
  10,
  1,
  8,
  11,
  10,
  -1,
  -1,
  -1,
  -1,
  5,
  4,
  0,
  5,
  0,
  11,
  5,
  11,
  10,
  11,
  0,
  3,
  -1,
  -1,
  -1,
  -1,
  5,
  4,
  8,
  5,
  8,
  10,
  10,
  8,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  7,
  8,
  5,
  7,
  9,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  3,
  0,
  9,
  5,
  3,
  5,
  7,
  3,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  7,
  8,
  0,
  1,
  7,
  1,
  5,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  5,
  3,
  3,
  5,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  7,
  8,
  9,
  5,
  7,
  10,
  1,
  2,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  10,
  1,
  2,
  9,
  5,
  0,
  5,
  3,
  0,
  5,
  7,
  3,
  -1,
  -1,
  -1,
  -1,
  8,
  0,
  2,
  8,
  2,
  5,
  8,
  5,
  7,
  10,
  5,
  2,
  -1,
  -1,
  -1,
  -1,
  2,
  10,
  5,
  2,
  5,
  3,
  3,
  5,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  7,
  9,
  5,
  7,
  8,
  9,
  3,
  11,
  2,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  5,
  7,
  9,
  7,
  2,
  9,
  2,
  0,
  2,
  7,
  11,
  -1,
  -1,
  -1,
  -1,
  2,
  3,
  11,
  0,
  1,
  8,
  1,
  7,
  8,
  1,
  5,
  7,
  -1,
  -1,
  -1,
  -1,
  11,
  2,
  1,
  11,
  1,
  7,
  7,
  1,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  5,
  8,
  8,
  5,
  7,
  10,
  1,
  3,
  10,
  3,
  11,
  -1,
  -1,
  -1,
  -1,
  5,
  7,
  0,
  5,
  0,
  9,
  7,
  11,
  0,
  1,
  0,
  10,
  11,
  10,
  0,
  -1,
  11,
  10,
  0,
  11,
  0,
  3,
  10,
  5,
  0,
  8,
  0,
  7,
  5,
  7,
  0,
  -1,
  11,
  10,
  5,
  7,
  11,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  10,
  6,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  8,
  3,
  5,
  10,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  0,
  1,
  5,
  10,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  8,
  3,
  1,
  9,
  8,
  5,
  10,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  6,
  5,
  2,
  6,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  6,
  5,
  1,
  2,
  6,
  3,
  0,
  8,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  6,
  5,
  9,
  0,
  6,
  0,
  2,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  5,
  9,
  8,
  5,
  8,
  2,
  5,
  2,
  6,
  3,
  2,
  8,
  -1,
  -1,
  -1,
  -1,
  2,
  3,
  11,
  10,
  6,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  11,
  0,
  8,
  11,
  2,
  0,
  10,
  6,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  1,
  9,
  2,
  3,
  11,
  5,
  10,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  5,
  10,
  6,
  1,
  9,
  2,
  9,
  11,
  2,
  9,
  8,
  11,
  -1,
  -1,
  -1,
  -1,
  6,
  3,
  11,
  6,
  5,
  3,
  5,
  1,
  3,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  8,
  11,
  0,
  11,
  5,
  0,
  5,
  1,
  5,
  11,
  6,
  -1,
  -1,
  -1,
  -1,
  3,
  11,
  6,
  0,
  3,
  6,
  0,
  6,
  5,
  0,
  5,
  9,
  -1,
  -1,
  -1,
  -1,
  6,
  5,
  9,
  6,
  9,
  11,
  11,
  9,
  8,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  5,
  10,
  6,
  4,
  7,
  8,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  3,
  0,
  4,
  7,
  3,
  6,
  5,
  10,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  9,
  0,
  5,
  10,
  6,
  8,
  4,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  10,
  6,
  5,
  1,
  9,
  7,
  1,
  7,
  3,
  7,
  9,
  4,
  -1,
  -1,
  -1,
  -1,
  6,
  1,
  2,
  6,
  5,
  1,
  4,
  7,
  8,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  2,
  5,
  5,
  2,
  6,
  3,
  0,
  4,
  3,
  4,
  7,
  -1,
  -1,
  -1,
  -1,
  8,
  4,
  7,
  9,
  0,
  5,
  0,
  6,
  5,
  0,
  2,
  6,
  -1,
  -1,
  -1,
  -1,
  7,
  3,
  9,
  7,
  9,
  4,
  3,
  2,
  9,
  5,
  9,
  6,
  2,
  6,
  9,
  -1,
  3,
  11,
  2,
  7,
  8,
  4,
  10,
  6,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  5,
  10,
  6,
  4,
  7,
  2,
  4,
  2,
  0,
  2,
  7,
  11,
  -1,
  -1,
  -1,
  -1,
  0,
  1,
  9,
  4,
  7,
  8,
  2,
  3,
  11,
  5,
  10,
  6,
  -1,
  -1,
  -1,
  -1,
  9,
  2,
  1,
  9,
  11,
  2,
  9,
  4,
  11,
  7,
  11,
  4,
  5,
  10,
  6,
  -1,
  8,
  4,
  7,
  3,
  11,
  5,
  3,
  5,
  1,
  5,
  11,
  6,
  -1,
  -1,
  -1,
  -1,
  5,
  1,
  11,
  5,
  11,
  6,
  1,
  0,
  11,
  7,
  11,
  4,
  0,
  4,
  11,
  -1,
  0,
  5,
  9,
  0,
  6,
  5,
  0,
  3,
  6,
  11,
  6,
  3,
  8,
  4,
  7,
  -1,
  6,
  5,
  9,
  6,
  9,
  11,
  4,
  7,
  9,
  7,
  11,
  9,
  -1,
  -1,
  -1,
  -1,
  10,
  4,
  9,
  6,
  4,
  10,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  10,
  6,
  4,
  9,
  10,
  0,
  8,
  3,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  10,
  0,
  1,
  10,
  6,
  0,
  6,
  4,
  0,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  8,
  3,
  1,
  8,
  1,
  6,
  8,
  6,
  4,
  6,
  1,
  10,
  -1,
  -1,
  -1,
  -1,
  1,
  4,
  9,
  1,
  2,
  4,
  2,
  6,
  4,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  0,
  8,
  1,
  2,
  9,
  2,
  4,
  9,
  2,
  6,
  4,
  -1,
  -1,
  -1,
  -1,
  0,
  2,
  4,
  4,
  2,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  8,
  3,
  2,
  8,
  2,
  4,
  4,
  2,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  10,
  4,
  9,
  10,
  6,
  4,
  11,
  2,
  3,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  8,
  2,
  2,
  8,
  11,
  4,
  9,
  10,
  4,
  10,
  6,
  -1,
  -1,
  -1,
  -1,
  3,
  11,
  2,
  0,
  1,
  6,
  0,
  6,
  4,
  6,
  1,
  10,
  -1,
  -1,
  -1,
  -1,
  6,
  4,
  1,
  6,
  1,
  10,
  4,
  8,
  1,
  2,
  1,
  11,
  8,
  11,
  1,
  -1,
  9,
  6,
  4,
  9,
  3,
  6,
  9,
  1,
  3,
  11,
  6,
  3,
  -1,
  -1,
  -1,
  -1,
  8,
  11,
  1,
  8,
  1,
  0,
  11,
  6,
  1,
  9,
  1,
  4,
  6,
  4,
  1,
  -1,
  3,
  11,
  6,
  3,
  6,
  0,
  0,
  6,
  4,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  6,
  4,
  8,
  11,
  6,
  8,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  7,
  10,
  6,
  7,
  8,
  10,
  8,
  9,
  10,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  7,
  3,
  0,
  10,
  7,
  0,
  9,
  10,
  6,
  7,
  10,
  -1,
  -1,
  -1,
  -1,
  10,
  6,
  7,
  1,
  10,
  7,
  1,
  7,
  8,
  1,
  8,
  0,
  -1,
  -1,
  -1,
  -1,
  10,
  6,
  7,
  10,
  7,
  1,
  1,
  7,
  3,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  2,
  6,
  1,
  6,
  8,
  1,
  8,
  9,
  8,
  6,
  7,
  -1,
  -1,
  -1,
  -1,
  2,
  6,
  9,
  2,
  9,
  1,
  6,
  7,
  9,
  0,
  9,
  3,
  7,
  3,
  9,
  -1,
  7,
  8,
  0,
  7,
  0,
  6,
  6,
  0,
  2,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  7,
  3,
  2,
  6,
  7,
  2,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  2,
  3,
  11,
  10,
  6,
  8,
  10,
  8,
  9,
  8,
  6,
  7,
  -1,
  -1,
  -1,
  -1,
  2,
  0,
  7,
  2,
  7,
  11,
  0,
  9,
  7,
  6,
  7,
  10,
  9,
  10,
  7,
  -1,
  1,
  8,
  0,
  1,
  7,
  8,
  1,
  10,
  7,
  6,
  7,
  10,
  2,
  3,
  11,
  -1,
  11,
  2,
  1,
  11,
  1,
  7,
  10,
  6,
  1,
  6,
  7,
  1,
  -1,
  -1,
  -1,
  -1,
  8,
  9,
  6,
  8,
  6,
  7,
  9,
  1,
  6,
  11,
  6,
  3,
  1,
  3,
  6,
  -1,
  0,
  9,
  1,
  11,
  6,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  7,
  8,
  0,
  7,
  0,
  6,
  3,
  11,
  0,
  11,
  6,
  0,
  -1,
  -1,
  -1,
  -1,
  7,
  11,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  7,
  6,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  0,
  8,
  11,
  7,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  1,
  9,
  11,
  7,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  8,
  1,
  9,
  8,
  3,
  1,
  11,
  7,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  10,
  1,
  2,
  6,
  11,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  2,
  10,
  3,
  0,
  8,
  6,
  11,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  2,
  9,
  0,
  2,
  10,
  9,
  6,
  11,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  6,
  11,
  7,
  2,
  10,
  3,
  10,
  8,
  3,
  10,
  9,
  8,
  -1,
  -1,
  -1,
  -1,
  7,
  2,
  3,
  6,
  2,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  7,
  0,
  8,
  7,
  6,
  0,
  6,
  2,
  0,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  2,
  7,
  6,
  2,
  3,
  7,
  0,
  1,
  9,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  6,
  2,
  1,
  8,
  6,
  1,
  9,
  8,
  8,
  7,
  6,
  -1,
  -1,
  -1,
  -1,
  10,
  7,
  6,
  10,
  1,
  7,
  1,
  3,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  10,
  7,
  6,
  1,
  7,
  10,
  1,
  8,
  7,
  1,
  0,
  8,
  -1,
  -1,
  -1,
  -1,
  0,
  3,
  7,
  0,
  7,
  10,
  0,
  10,
  9,
  6,
  10,
  7,
  -1,
  -1,
  -1,
  -1,
  7,
  6,
  10,
  7,
  10,
  8,
  8,
  10,
  9,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  6,
  8,
  4,
  11,
  8,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  6,
  11,
  3,
  0,
  6,
  0,
  4,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  8,
  6,
  11,
  8,
  4,
  6,
  9,
  0,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  4,
  6,
  9,
  6,
  3,
  9,
  3,
  1,
  11,
  3,
  6,
  -1,
  -1,
  -1,
  -1,
  6,
  8,
  4,
  6,
  11,
  8,
  2,
  10,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  2,
  10,
  3,
  0,
  11,
  0,
  6,
  11,
  0,
  4,
  6,
  -1,
  -1,
  -1,
  -1,
  4,
  11,
  8,
  4,
  6,
  11,
  0,
  2,
  9,
  2,
  10,
  9,
  -1,
  -1,
  -1,
  -1,
  10,
  9,
  3,
  10,
  3,
  2,
  9,
  4,
  3,
  11,
  3,
  6,
  4,
  6,
  3,
  -1,
  8,
  2,
  3,
  8,
  4,
  2,
  4,
  6,
  2,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  4,
  2,
  4,
  6,
  2,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  9,
  0,
  2,
  3,
  4,
  2,
  4,
  6,
  4,
  3,
  8,
  -1,
  -1,
  -1,
  -1,
  1,
  9,
  4,
  1,
  4,
  2,
  2,
  4,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  8,
  1,
  3,
  8,
  6,
  1,
  8,
  4,
  6,
  6,
  10,
  1,
  -1,
  -1,
  -1,
  -1,
  10,
  1,
  0,
  10,
  0,
  6,
  6,
  0,
  4,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  6,
  3,
  4,
  3,
  8,
  6,
  10,
  3,
  0,
  3,
  9,
  10,
  9,
  3,
  -1,
  10,
  9,
  4,
  6,
  10,
  4,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  9,
  5,
  7,
  6,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  8,
  3,
  4,
  9,
  5,
  11,
  7,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  5,
  0,
  1,
  5,
  4,
  0,
  7,
  6,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  11,
  7,
  6,
  8,
  3,
  4,
  3,
  5,
  4,
  3,
  1,
  5,
  -1,
  -1,
  -1,
  -1,
  9,
  5,
  4,
  10,
  1,
  2,
  7,
  6,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  6,
  11,
  7,
  1,
  2,
  10,
  0,
  8,
  3,
  4,
  9,
  5,
  -1,
  -1,
  -1,
  -1,
  7,
  6,
  11,
  5,
  4,
  10,
  4,
  2,
  10,
  4,
  0,
  2,
  -1,
  -1,
  -1,
  -1,
  3,
  4,
  8,
  3,
  5,
  4,
  3,
  2,
  5,
  10,
  5,
  2,
  11,
  7,
  6,
  -1,
  7,
  2,
  3,
  7,
  6,
  2,
  5,
  4,
  9,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  5,
  4,
  0,
  8,
  6,
  0,
  6,
  2,
  6,
  8,
  7,
  -1,
  -1,
  -1,
  -1,
  3,
  6,
  2,
  3,
  7,
  6,
  1,
  5,
  0,
  5,
  4,
  0,
  -1,
  -1,
  -1,
  -1,
  6,
  2,
  8,
  6,
  8,
  7,
  2,
  1,
  8,
  4,
  8,
  5,
  1,
  5,
  8,
  -1,
  9,
  5,
  4,
  10,
  1,
  6,
  1,
  7,
  6,
  1,
  3,
  7,
  -1,
  -1,
  -1,
  -1,
  1,
  6,
  10,
  1,
  7,
  6,
  1,
  0,
  7,
  8,
  7,
  0,
  9,
  5,
  4,
  -1,
  4,
  0,
  10,
  4,
  10,
  5,
  0,
  3,
  10,
  6,
  10,
  7,
  3,
  7,
  10,
  -1,
  7,
  6,
  10,
  7,
  10,
  8,
  5,
  4,
  10,
  4,
  8,
  10,
  -1,
  -1,
  -1,
  -1,
  6,
  9,
  5,
  6,
  11,
  9,
  11,
  8,
  9,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  6,
  11,
  0,
  6,
  3,
  0,
  5,
  6,
  0,
  9,
  5,
  -1,
  -1,
  -1,
  -1,
  0,
  11,
  8,
  0,
  5,
  11,
  0,
  1,
  5,
  5,
  6,
  11,
  -1,
  -1,
  -1,
  -1,
  6,
  11,
  3,
  6,
  3,
  5,
  5,
  3,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  2,
  10,
  9,
  5,
  11,
  9,
  11,
  8,
  11,
  5,
  6,
  -1,
  -1,
  -1,
  -1,
  0,
  11,
  3,
  0,
  6,
  11,
  0,
  9,
  6,
  5,
  6,
  9,
  1,
  2,
  10,
  -1,
  11,
  8,
  5,
  11,
  5,
  6,
  8,
  0,
  5,
  10,
  5,
  2,
  0,
  2,
  5,
  -1,
  6,
  11,
  3,
  6,
  3,
  5,
  2,
  10,
  3,
  10,
  5,
  3,
  -1,
  -1,
  -1,
  -1,
  5,
  8,
  9,
  5,
  2,
  8,
  5,
  6,
  2,
  3,
  8,
  2,
  -1,
  -1,
  -1,
  -1,
  9,
  5,
  6,
  9,
  6,
  0,
  0,
  6,
  2,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  5,
  8,
  1,
  8,
  0,
  5,
  6,
  8,
  3,
  8,
  2,
  6,
  2,
  8,
  -1,
  1,
  5,
  6,
  2,
  1,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  3,
  6,
  1,
  6,
  10,
  3,
  8,
  6,
  5,
  6,
  9,
  8,
  9,
  6,
  -1,
  10,
  1,
  0,
  10,
  0,
  6,
  9,
  5,
  0,
  5,
  6,
  0,
  -1,
  -1,
  -1,
  -1,
  0,
  3,
  8,
  5,
  6,
  10,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  10,
  5,
  6,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  11,
  5,
  10,
  7,
  5,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  11,
  5,
  10,
  11,
  7,
  5,
  8,
  3,
  0,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  5,
  11,
  7,
  5,
  10,
  11,
  1,
  9,
  0,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  10,
  7,
  5,
  10,
  11,
  7,
  9,
  8,
  1,
  8,
  3,
  1,
  -1,
  -1,
  -1,
  -1,
  11,
  1,
  2,
  11,
  7,
  1,
  7,
  5,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  8,
  3,
  1,
  2,
  7,
  1,
  7,
  5,
  7,
  2,
  11,
  -1,
  -1,
  -1,
  -1,
  9,
  7,
  5,
  9,
  2,
  7,
  9,
  0,
  2,
  2,
  11,
  7,
  -1,
  -1,
  -1,
  -1,
  7,
  5,
  2,
  7,
  2,
  11,
  5,
  9,
  2,
  3,
  2,
  8,
  9,
  8,
  2,
  -1,
  2,
  5,
  10,
  2,
  3,
  5,
  3,
  7,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  8,
  2,
  0,
  8,
  5,
  2,
  8,
  7,
  5,
  10,
  2,
  5,
  -1,
  -1,
  -1,
  -1,
  9,
  0,
  1,
  5,
  10,
  3,
  5,
  3,
  7,
  3,
  10,
  2,
  -1,
  -1,
  -1,
  -1,
  9,
  8,
  2,
  9,
  2,
  1,
  8,
  7,
  2,
  10,
  2,
  5,
  7,
  5,
  2,
  -1,
  1,
  3,
  5,
  3,
  7,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  8,
  7,
  0,
  7,
  1,
  1,
  7,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  0,
  3,
  9,
  3,
  5,
  5,
  3,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  8,
  7,
  5,
  9,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  5,
  8,
  4,
  5,
  10,
  8,
  10,
  11,
  8,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  5,
  0,
  4,
  5,
  11,
  0,
  5,
  10,
  11,
  11,
  3,
  0,
  -1,
  -1,
  -1,
  -1,
  0,
  1,
  9,
  8,
  4,
  10,
  8,
  10,
  11,
  10,
  4,
  5,
  -1,
  -1,
  -1,
  -1,
  10,
  11,
  4,
  10,
  4,
  5,
  11,
  3,
  4,
  9,
  4,
  1,
  3,
  1,
  4,
  -1,
  2,
  5,
  1,
  2,
  8,
  5,
  2,
  11,
  8,
  4,
  5,
  8,
  -1,
  -1,
  -1,
  -1,
  0,
  4,
  11,
  0,
  11,
  3,
  4,
  5,
  11,
  2,
  11,
  1,
  5,
  1,
  11,
  -1,
  0,
  2,
  5,
  0,
  5,
  9,
  2,
  11,
  5,
  4,
  5,
  8,
  11,
  8,
  5,
  -1,
  9,
  4,
  5,
  2,
  11,
  3,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  2,
  5,
  10,
  3,
  5,
  2,
  3,
  4,
  5,
  3,
  8,
  4,
  -1,
  -1,
  -1,
  -1,
  5,
  10,
  2,
  5,
  2,
  4,
  4,
  2,
  0,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  10,
  2,
  3,
  5,
  10,
  3,
  8,
  5,
  4,
  5,
  8,
  0,
  1,
  9,
  -1,
  5,
  10,
  2,
  5,
  2,
  4,
  1,
  9,
  2,
  9,
  4,
  2,
  -1,
  -1,
  -1,
  -1,
  8,
  4,
  5,
  8,
  5,
  3,
  3,
  5,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  4,
  5,
  1,
  0,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  8,
  4,
  5,
  8,
  5,
  3,
  9,
  0,
  5,
  0,
  3,
  5,
  -1,
  -1,
  -1,
  -1,
  9,
  4,
  5,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  11,
  7,
  4,
  9,
  11,
  9,
  10,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  8,
  3,
  4,
  9,
  7,
  9,
  11,
  7,
  9,
  10,
  11,
  -1,
  -1,
  -1,
  -1,
  1,
  10,
  11,
  1,
  11,
  4,
  1,
  4,
  0,
  7,
  4,
  11,
  -1,
  -1,
  -1,
  -1,
  3,
  1,
  4,
  3,
  4,
  8,
  1,
  10,
  4,
  7,
  4,
  11,
  10,
  11,
  4,
  -1,
  4,
  11,
  7,
  9,
  11,
  4,
  9,
  2,
  11,
  9,
  1,
  2,
  -1,
  -1,
  -1,
  -1,
  9,
  7,
  4,
  9,
  11,
  7,
  9,
  1,
  11,
  2,
  11,
  1,
  0,
  8,
  3,
  -1,
  11,
  7,
  4,
  11,
  4,
  2,
  2,
  4,
  0,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  11,
  7,
  4,
  11,
  4,
  2,
  8,
  3,
  4,
  3,
  2,
  4,
  -1,
  -1,
  -1,
  -1,
  2,
  9,
  10,
  2,
  7,
  9,
  2,
  3,
  7,
  7,
  4,
  9,
  -1,
  -1,
  -1,
  -1,
  9,
  10,
  7,
  9,
  7,
  4,
  10,
  2,
  7,
  8,
  7,
  0,
  2,
  0,
  7,
  -1,
  3,
  7,
  10,
  3,
  10,
  2,
  7,
  4,
  10,
  1,
  10,
  0,
  4,
  0,
  10,
  -1,
  1,
  10,
  2,
  8,
  7,
  4,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  9,
  1,
  4,
  1,
  7,
  7,
  1,
  3,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  9,
  1,
  4,
  1,
  7,
  0,
  8,
  1,
  8,
  7,
  1,
  -1,
  -1,
  -1,
  -1,
  4,
  0,
  3,
  7,
  4,
  3,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  8,
  7,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  10,
  8,
  10,
  11,
  8,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  0,
  9,
  3,
  9,
  11,
  11,
  9,
  10,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  1,
  10,
  0,
  10,
  8,
  8,
  10,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  1,
  10,
  11,
  3,
  10,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  2,
  11,
  1,
  11,
  9,
  9,
  11,
  8,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  0,
  9,
  3,
  9,
  11,
  1,
  2,
  9,
  2,
  11,
  9,
  -1,
  -1,
  -1,
  -1,
  0,
  2,
  11,
  8,
  0,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  3,
  2,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  2,
  3,
  8,
  2,
  8,
  10,
  10,
  8,
  9,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  9,
  10,
  2,
  0,
  9,
  2,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  2,
  3,
  8,
  2,
  8,
  10,
  0,
  1,
  8,
  1,
  10,
  8,
  -1,
  -1,
  -1,
  -1,
  1,
  10,
  2,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  3,
  8,
  9,
  1,
  8,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  9,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  3,
  8,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1
])
var uIndexData = new Uint8Array(indexData.buffer)
var idx1lookup = new Uint8Array([1, 2, 3, 0, 5, 6, 7, 4, 4, 5, 6, 7])
var cubeData = new Float32Array([
  0.0,
  1.0,
  1.0,
  1.0,
  1.0,
  1.0,
  1.0,
  1.0,
  0.0,
  0.0,
  1.0,
  0.0,
  0.0,
  0.0,
  1.0,
  1.0,
  0.0,
  1.0,
  1.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0
])

var fragShader = `
precision mediump float;
varying vec3 v_normal;
varying vec4 v_color;
varying vec3 v_position;
void main() {
	vec3 lightDir = vec3(0.0, 0.0, -1.0);
	vec3 normal = v_normal;
	vec3 norm = normalize(normal);
	float ndotl = dot(normalize(v_normal), lightDir);
	float spec = pow(ndotl, 30.0);
	vec3 lc = pow(v_color.rgb, vec3(2.2));
	vec3 c = lc * ndotl+spec;
	gl_FragColor = vec4(pow(c, vec3(1.0/2.2)), 1.0);
}`

var vertexShader = `
precision mediump float;
attribute vec3 a_position;
attribute vec3 a_normal;
attribute vec4 a_color;

varying vec3 v_position;
varying vec3 v_normal;
varying vec4 v_color;

uniform mat4 u_model;
uniform mat4 u_view;
uniform mat4 u_proj;
uniform mat4 u_modelView;
uniform mat4 u_modelViewProj;

void main() {
	vec4 pos = u_view * u_model * vec4(a_position, 1.0);
	gl_Position = u_proj * pos;
	v_position = -pos.xyz;
	v_normal = (u_model*vec4(a_normal, 0.0)).xyz;
	v_color = a_color;
}
`

function Simulation (gl) {
  this.grid = []
  for (let i = 0; i < GRID_SIZE * GRID_SIZE * GRID_SIZE; ++i) {
    this.grid.push(new GridCell())
  }
  this.programInfo = createProgram(gl, fragShader, vertexShader, {
    a_position: 0,
    a_normal: 1,
    a_color: 2
  })
  this.vertexData = new Float32Array(MAX_VERTS * 8)
  this.vertexDataU32 = new Uint32Array(this.vertexData.buffer)

  this.viewMat = lookAt(0, 0, -50, 0, 0, 0, 0, 1, 0)
  this.projMat = perspective(
    (60 * Math.PI) / 180.0,
    window.innerWidth / window.innerHeight,
    0.1,
    100
  )
  this.viewProj = mat4mul(this.viewMat, this.projMat)
  this.modelMat = mat4()
  this.modelView = mat4()
  this.modelViewProj = mat4()

  this.vbo = gl.createBuffer()
  gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo)
  gl.bufferData(gl.ARRAY_BUFFER, this.vertexData, gl.DYNAMIC_DRAW)
  checkGL(gl, 'bufferData')

  this.tmpVerts = new Float32Array(12 * (3 + 3)) // 12 pos + norm
  this.tmpColors = new Float32Array(3 * 2)
  this.tmpCells = [null, null, null, null, null, null, null, null]
  this.spheres = new Float32Array(4 * SPHERES)
  this.time = 0.0

  gl.canvas.width = window.innerWidth
  gl.canvas.height = window.innerHeight
  gl.viewport(0, 0, window.innerWidth, window.innerHeight)
  window.addEventListener(
    'resize',
    function () {
      gl.canvas.width = window.innerWidth
      gl.canvas.height = window.innerHeight
      gl.viewport(0, 0, window.innerWidth, window.innerHeight)
      this.projMat = perspective(
        (60 * Math.PI) / 180.0,
        window.innerWidth / window.innerHeight,
        0.1,
        100
      )
      this.viewProj = mat4mul(this.projMat, this.viewMat)
    }.bind(this)
  )
}

Simulation.prototype.setUniformMat4 = function (gl, name, m) {
  var u = this.programInfo.uniforms[name]
  if (u) {
    gl.uniformMatrix4fv(u.loc, gl.FALSE, m)
  }
}

Simulation.prototype.setUniformVec4 = function (gl, name, x, y, z, w) {
  var u = this.programInfo.uniforms[name]
  if (u) {
    gl.uniform4f(u.loc, x, y, z, w)
  }
}

Simulation.prototype.updateGrid = function () {
  var spheres = this.spheres
  var e = this.entropy
  var grid = this.grid
  var time = this.time
  var sphSize = (GRID_SIZE - SPHERES) * 0.5
  for (var i = 0, ei = 0; i < SPHERES; ++i) {
    var ii = (i * 4) >>> 0
    spheres[ii + 0] = Math.sin(this.time * (i * 0.32) + i * 0.12) * sphSize
    spheres[ii + 1] = Math.sin(this.time * (i * 0.25) + i * 0.7) * sphSize
    spheres[ii + 2] = Math.cos(this.time * (i * 0.1) + i * 0.4) * sphSize
    spheres[ii + 3] = 1 / (2 + 2 * (Math.sin(this.time * i * 0.3) * 0.5 + 0.5))
  }

  for (var z = 0; z < GRID_SIZE; ++z) {
    for (var y = 0; y < GRID_SIZE; ++y) {
      var offset = ((z * GRID_SIZE + y) * GRID_SIZE) >>> 0
      for (var x = 0; x < GRID_SIZE; ++x) {
        var xOffset = (offset + x) >>> 0
        var distance = 0.0
        var product = 1.0
        for (var si = 0; si < SPHERES; ++si) {
          var ii = (si * 4) >>> 0
          var dx = spheres[ii + 0] - (-GRID_SIZE * 0.5 + x)
          var dy = spheres[ii + 1] - (-GRID_SIZE * 0.5 + y)
          var dz = spheres[ii + 2] - (-GRID_SIZE * 0.5 + z)
          var invr = spheres[ii + 3]
          var dot = (dx * dx + dy * dy + dz * dz) * (invr * invr)
          distance *= dot
          distance += product
          product *= dot
        }
        grid[xOffset].value = distance / product - 1.0
      }
    }
  }
}

Simulation.prototype.updateNormals = function () {
  var grid = this.grid
  var yPitch = GRID_SIZE
  var zPitch = GRID_SIZE * GRID_SIZE
  for (var z = 1; z < GRID_SIZE - 1; ++z) {
    for (var y = 1; y < GRID_SIZE - 1; ++y) {
      var offset = (z * GRID_SIZE + y) * GRID_SIZE
      for (var x = 1; x < GRID_SIZE - 1; ++x) {
        var xOffset = offset + x
        var nx = grid[xOffset - 1].value - grid[xOffset + 1].value
        var ny = grid[xOffset - yPitch].value - grid[xOffset + yPitch].value
        var nz = grid[xOffset - zPitch].value - grid[xOffset + zPitch].value
        var len = Math.sqrt(nx * nx + ny * ny + nz * nz)
        if (len === 0) {
          nx = 0
          ny = len = 1
          nz = 0
        }
        len = 1.0 / len
        grid[xOffset].nx = nx * len
        grid[xOffset].ny = ny * len
        grid[xOffset].nz = nz * len
      }
    }
  }
}

Simulation.prototype.updateTriangulation = function () {
  var numVerts = 0
  var invGS = 1 / (GRID_SIZE - 1)
  var yPitch = GRID_SIZE
  var zPitch = GRID_SIZE * GRID_SIZE
  var grid = this.grid
  var neighbors = this.tmpCells
  var vertIndex = 0
  var rgb = this.tmpColors
  for (var z = 0; z < GRID_SIZE - 1 && numVerts + 12 < MAX_VERTS; ++z) {
    rgb[2] = Math.sin(this.time + z * invGS) / 2 + 0.5
    rgb[5] = 0.5 + 0.5 * Math.sin(this.time + (z + 1) * invGS)
    for (var y = 0; y < GRID_SIZE - 1 && numVerts + 12 < MAX_VERTS; ++y) {
      var offset = (z * GRID_SIZE + y) * GRID_SIZE
      rgb[1] = Math.sin(0.6 + this.time / 2 + y * invGS) / 2 + 0.5
      rgb[4] = 0.5 + 0.5 * Math.sin(0.6 + this.time / 2 + (y + 1) * invGS)
      for (var x = 0; x < GRID_SIZE - 1 && numVerts + 12 < MAX_VERTS; ++x) {
        rgb[0] = Math.cos(0.2 + this.time * 2 + x * invGS) / 2 + 0.5
        rgb[3] = 0.5 + 0.5 * Math.cos(0.2 + this.time * 2 + (x + 1) * invGS)
        var xOffset = offset + x
        var px = -GRID_SIZE * 0.5 + x
        var py = -GRID_SIZE * 0.5 + y
        var pz = -GRID_SIZE * 0.5 + z
        // collect neighbors
        neighbors[0] = grid[xOffset + zPitch + yPitch];
        neighbors[1] = grid[xOffset + zPitch + yPitch + 1]
        neighbors[2] = grid[xOffset + yPitch + 1]
        neighbors[3] = grid[xOffset + yPitch]
        neighbors[4] = grid[xOffset + zPitch]
        neighbors[5] = grid[xOffset + zPitch + 1]
        neighbors[6] = grid[xOffset + 1]
        neighbors[7] = grid[xOffset]
        var num = this.triangulate(
          (vertIndex * 8) >>> 0,
          rgb,
          px,
          py,
          pz,
          neighbors,
          0.8
        )
        vertIndex += num
        numVerts += num
      }
    }
  }
  console.log('verts: ' + numVerts)
  return numVerts
}

Simulation.prototype.triangulate = function (
  vi,
  colors,
  sx,
  sy,
  sz,
  gridNeighbors,
  iso
) {
  var edgIndex = 0
  for (var i = 0, bit = 1; i < 8; ++i, bit <<= 1) {
    if (gridNeighbors[i].value < iso) edgIndex |= bit
  }
  var flags = edgeData[edgIndex] | 0
  if (flags === 0) return 0

  var verts = this.tmpVerts
  for (var ii = 0, fbit = 1; ii < 12; ++ii, fbit <<= 1) {
    if ((flags & fbit) !== 0) {
      var idx0 = ii & 7
      var idx1 = idx1lookup[ii] | 0
      var vertexStartIndex = (6 * ii) | 0
      var lerp = this.lerpVertex(
        vertexStartIndex,
        iso,
        idx0,
        gridNeighbors[idx0].value,
        idx1,
        gridNeighbors[idx1].value
      )

      var ca = gridNeighbors[idx0],
        nax = +ca.nx,
        nay = +ca.ny,
        naz = +ca.nz
      var cb = gridNeighbors[idx1],
        nbx = +cb.nx,
        nby = +cb.ny,
        nbz = +cb.nz
      verts[vertexStartIndex + 3] = nax + lerp * (nbx - nax)
      verts[vertexStartIndex + 4] = nay + lerp * (nby - nay)
      verts[vertexStartIndex + 5] = naz + lerp * (nbz - naz)
    }
  }

  // var deltaR = colors[0] - colors[0]
  // var deltaG = colors[1] - colors[1]
  // var deltaB = colors[2] - colors[2]

  var num = 0
  var vertV = this.vertexData
  var vertC = this.vertexDataU32
  var stride = 8
  for (
    var ii = 0, indIndex = edgIndex << 4;
    indexData[indIndex + ii] !== -1;
    ++ii, ++num, vi = (vi + stride) >>> 0
  ) {
    var uindex = uIndexData[indIndex + ii]
    var vsIndex = (uindex * 6) | 0
    var px = verts[vsIndex]
    var py = verts[vsIndex + 1]
    var pz = verts[vsIndex + 2]
    vertV[vi + 0] = px + sx
    vertV[vi + 1] = py + sy
    vertV[vi + 2] = pz + sz
    vertV[vi + 3] = verts[vsIndex + 3] // nx
    vertV[vi + 4] = verts[vsIndex + 4] // ny
    vertV[vi + 5] = verts[vsIndex + 5] // nz
    // var r = ((colors[3] + px * deltaR) * 255) & 0xff
    // var g = ((colors[0] + py * deltaG) * 255) & 0xff
    // var b = ((colors[1] + pz * deltaB) * 255) & 0xff
    // 白色球体
    const r = (255) & 0xff
    const g = (255) & 0xff
    const b = (255) & 0xff
    vertC[vi + 6] = 0xff000000 | (b << 16) | (g << 8) | r
  }
  return num
}

Simulation.prototype.lerpVertex = function (ri, iso, idx0, v0, idx1, v1) {
  var EPSILON = 0.00001
  var edge0i = idx0 * 3
  var edge1i = idx1 * 3
  var result = this.tmpVerts
  if (Math.abs(iso - v1) <= EPSILON) {
    result[ri + 0] = cubeData[edge1i]
    result[ri + 1] = cubeData[edge1i + 1]
    result[ri + 2] = cubeData[edge1i + 2]
    return 1.0
  }
  if (Math.abs(iso - v0) <= EPSILON || Math.abs(v0 - v1) <= EPSILON) {
    result[ri + 0] = cubeData[edge0i]
    result[ri + 1] = cubeData[edge0i + 1]
    result[ri + 2] = cubeData[edge0i + 2]
    return 0.0
  }
  var lerpAmt = (iso - v0) / (v1 - v0)
  var e0x = cubeData[edge0i]
  var e0y = cubeData[edge0i + 1]
  var e0z = cubeData[edge0i + 2]

  result[ri + 0] = e0x + lerpAmt * (cubeData[edge1i] - e0x)
  result[ri + 1] = e0y + lerpAmt * (cubeData[edge1i + 1] - e0y)
  result[ri + 2] = e0z + lerpAmt * (cubeData[edge1i + 2] - e0z)
  return lerpAmt
}

Simulation.prototype.update = function (gl, dt) {
  gl.enable(gl.CULL_FACE)
  gl.frontFace(gl.CW)
  gl.enable(gl.DEPTH_TEST)

  // gl.clearColor(0.2, 0.2, 0.2, 1.0)
  // 背景色
  gl.clearColor(1, 1, 1, 0)
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
  gl.useProgram(this.programInfo.program)

  gl.viewport(0, 0, window.innerWidth, window.innerHeight)

  this.time += dt

  this.modelMat = rotation(this.time * 0.6, this.time, this.time * 0.1)
  this.modelView = mat4mul(this.viewMat, this.modelMat)
  this.viewProj = mat4mul(this.projMat, this.viewMat)
  this.modelViewProj = mat4mul(this.viewProj, this.modelMat)

  this.setUniformVec4(
    gl,
    'u_time',
    this.time / 20.0,
    this.time,
    this.time * 2.0,
    this.time * 3.0
  )
  this.setUniformVec4(
    gl,
    'u_sinTime',
    Math.sin(this.time * 0.125),
    Math.sin(this.time * 0.25),
    Math.sin(this.time * 2.0),
    Math.sin(this.time)
  )
  this.setUniformVec4(
    gl,
    'u_cosTime',
    Math.cos(this.time * 0.125),
    Math.cos(this.time * 0.25),
    Math.cos(this.time * 2.0),
    Math.cos(this.time)
  )
  this.setUniformVec4(
    gl,
    'u_screen',
    window.innerWidth,
    window.innerHeight,
    1.0 / window.innerWidth,
    1.0 / window.innerHeight
  )

  this.setUniformMat4(gl, 'u_proj', this.projMat)
  this.setUniformMat4(gl, 'u_view', this.viewMat)
  this.setUniformMat4(gl, 'u_viewProj', this.viewProj)

  this.setUniformMat4(gl, 'u_model', this.modelMat)
  this.setUniformMat4(gl, 'u_modelView', this.modelView)
  this.setUniformMat4(gl, 'u_modelViewProj', this.modelViewProj)

  checkGL(gl, 'prerender')

  let invDim = 1.0 / (GRID_SIZE - 1.0)
  let spheres = this.spheres
  let grid = this.grid

  console.time('update')
  console.time('updateGrid')
  this.updateGrid()
  console.timeEnd('updateGrid')

  console.time('updateNormals')
  this.updateNormals()
  console.timeEnd('updateNormals')

  console.time('updateTriangulation')
  let numVerts = this.updateTriangulation()
  console.timeEnd('updateTriangulation')
  console.timeEnd('update')

  console.time('render')

  gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo)
  gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertexData)

  checkGL(gl, 'bufferSubData')

  gl.enableVertexAttribArray(this.programInfo.attribs.a_position.loc)
  gl.enableVertexAttribArray(this.programInfo.attribs.a_normal.loc)
  gl.enableVertexAttribArray(this.programInfo.attribs.a_color.loc)

  checkGL(gl, 'enableVertexAttribArray')

  gl.vertexAttribPointer(
    this.programInfo.attribs.a_position.loc,
    3,
    gl.FLOAT,
    false,
    SIZEOF_VERTEX,
    0
  )
  gl.vertexAttribPointer(
    this.programInfo.attribs.a_normal.loc,
    3,
    gl.FLOAT,
    false,
    SIZEOF_VERTEX,
    3 * 4
  )
  gl.vertexAttribPointer(
    this.programInfo.attribs.a_color.loc,
    4,
    gl.UNSIGNED_BYTE,
    true,
    SIZEOF_VERTEX,
    6 * 4
  )

  checkGL(gl, 'vertexAttribPointer')

  gl.drawArrays(gl.TRIANGLES, 0, numVerts)
  checkGL(gl, 'draw')

  console.timeEnd('render')
}
let c = document.getElementsByTagName('canvas')[0]
c.width = window.innerWidth
c.height = window.innerHeight
let gl = c.getContext('webgl', {failIfMajorPerformanceCaveat: true})
if (!gl) {
  alert('no webgl')
  throw Error('no webgl')
}
let simulation = new Simulation(gl)
let lastUpdate = 0

function update (timestamp) {
  if (!lastUpdate) {
    lastUpdate = timestamp
    return requestAnimationFrame(update)
  }
  requestAnimationFrame(update)
  let dt = timestamp - lastUpdate
  lastUpdate = timestamp
  simulation.update(gl, dt / 6000)
}

window.requestAnimationFrame(update)
